
CCT_Uphole_V1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005034  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d8  08005218  08005218  00006218  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080056f0  080056f0  0000716c  2**0
                  CONTENTS
  4 .ARM          00000000  080056f0  080056f0  0000716c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080056f0  080056f0  0000716c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080056f0  080056f0  000066f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080056f4  080056f4  000066f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000016c  20000000  080056f8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c38  2000016c  08005864  0000716c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000da4  08005864  00007da4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000716c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ddbe  00000000  00000000  00007195  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002873  00000000  00000000  00014f53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e78  00000000  00000000  000177c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b34  00000000  00000000  00018640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b4e1  00000000  00000000  00019174  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000145ca  00000000  00000000  00034655  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a44a  00000000  00000000  00048c1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e3069  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f58  00000000  00000000  000e30ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000e7004  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000016c 	.word	0x2000016c
 8000200:	00000000 	.word	0x00000000
 8000204:	08005200 	.word	0x08005200

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000170 	.word	0x20000170
 8000220:	08005200 	.word	0x08005200

08000224 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000224:	b480      	push	{r7}
 8000226:	b085      	sub	sp, #20
 8000228:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800022a:	4b13      	ldr	r3, [pc, #76]	@ (8000278 <HAL_MspInit+0x54>)
 800022c:	699b      	ldr	r3, [r3, #24]
 800022e:	4a12      	ldr	r2, [pc, #72]	@ (8000278 <HAL_MspInit+0x54>)
 8000230:	f043 0301 	orr.w	r3, r3, #1
 8000234:	6193      	str	r3, [r2, #24]
 8000236:	4b10      	ldr	r3, [pc, #64]	@ (8000278 <HAL_MspInit+0x54>)
 8000238:	699b      	ldr	r3, [r3, #24]
 800023a:	f003 0301 	and.w	r3, r3, #1
 800023e:	60bb      	str	r3, [r7, #8]
 8000240:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000242:	4b0d      	ldr	r3, [pc, #52]	@ (8000278 <HAL_MspInit+0x54>)
 8000244:	69db      	ldr	r3, [r3, #28]
 8000246:	4a0c      	ldr	r2, [pc, #48]	@ (8000278 <HAL_MspInit+0x54>)
 8000248:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800024c:	61d3      	str	r3, [r2, #28]
 800024e:	4b0a      	ldr	r3, [pc, #40]	@ (8000278 <HAL_MspInit+0x54>)
 8000250:	69db      	ldr	r3, [r3, #28]
 8000252:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000256:	607b      	str	r3, [r7, #4]
 8000258:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** ENABLE: Full SWJ (JTAG-DP + SW-DP): Reset State
  */
  __HAL_AFIO_REMAP_SWJ_ENABLE();
 800025a:	4b08      	ldr	r3, [pc, #32]	@ (800027c <HAL_MspInit+0x58>)
 800025c:	685b      	ldr	r3, [r3, #4]
 800025e:	60fb      	str	r3, [r7, #12]
 8000260:	68fb      	ldr	r3, [r7, #12]
 8000262:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000266:	60fb      	str	r3, [r7, #12]
 8000268:	4a04      	ldr	r2, [pc, #16]	@ (800027c <HAL_MspInit+0x58>)
 800026a:	68fb      	ldr	r3, [r7, #12]
 800026c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800026e:	bf00      	nop
 8000270:	3714      	adds	r7, #20
 8000272:	46bd      	mov	sp, r7
 8000274:	bc80      	pop	{r7}
 8000276:	4770      	bx	lr
 8000278:	40021000 	.word	0x40021000
 800027c:	40010000 	.word	0x40010000

08000280 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000280:	b480      	push	{r7}
 8000282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000284:	bf00      	nop
 8000286:	e7fd      	b.n	8000284 <NMI_Handler+0x4>

08000288 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000288:	b480      	push	{r7}
 800028a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800028c:	bf00      	nop
 800028e:	e7fd      	b.n	800028c <HardFault_Handler+0x4>

08000290 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000290:	b480      	push	{r7}
 8000292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000294:	bf00      	nop
 8000296:	e7fd      	b.n	8000294 <MemManage_Handler+0x4>

08000298 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000298:	b480      	push	{r7}
 800029a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800029c:	bf00      	nop
 800029e:	e7fd      	b.n	800029c <BusFault_Handler+0x4>

080002a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80002a0:	b480      	push	{r7}
 80002a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80002a4:	bf00      	nop
 80002a6:	e7fd      	b.n	80002a4 <UsageFault_Handler+0x4>

080002a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80002a8:	b480      	push	{r7}
 80002aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80002ac:	bf00      	nop
 80002ae:	46bd      	mov	sp, r7
 80002b0:	bc80      	pop	{r7}
 80002b2:	4770      	bx	lr

080002b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80002b4:	b480      	push	{r7}
 80002b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80002b8:	bf00      	nop
 80002ba:	46bd      	mov	sp, r7
 80002bc:	bc80      	pop	{r7}
 80002be:	4770      	bx	lr

080002c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80002c0:	b480      	push	{r7}
 80002c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80002c4:	bf00      	nop
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bc80      	pop	{r7}
 80002ca:	4770      	bx	lr

080002cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80002d0:	f002 f8ee 	bl	80024b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80002d4:	bf00      	nop
 80002d6:	bd80      	pop	{r7, pc}

080002d8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80002dc:	4802      	ldr	r0, [pc, #8]	@ (80002e8 <USART1_IRQHandler+0x10>)
 80002de:	f003 fd5b 	bl	8003d98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80002e2:	bf00      	nop
 80002e4:	bd80      	pop	{r7, pc}
 80002e6:	bf00      	nop
 80002e8:	200002a8 	.word	0x200002a8

080002ec <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80002f0:	4802      	ldr	r0, [pc, #8]	@ (80002fc <UART5_IRQHandler+0x10>)
 80002f2:	f003 fd51 	bl	8003d98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80002f6:	bf00      	nop
 80002f8:	bd80      	pop	{r7, pc}
 80002fa:	bf00      	nop
 80002fc:	20000260 	.word	0x20000260

08000300 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000304:	4802      	ldr	r0, [pc, #8]	@ (8000310 <TIM6_IRQHandler+0x10>)
 8000306:	f003 fa2f 	bl	8003768 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 800030a:	bf00      	nop
 800030c:	bd80      	pop	{r7, pc}
 800030e:	bf00      	nop
 8000310:	200001bc 	.word	0x200001bc

08000314 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b086      	sub	sp, #24
 8000318:	af00      	add	r7, sp, #0
 800031a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800031c:	4a14      	ldr	r2, [pc, #80]	@ (8000370 <_sbrk+0x5c>)
 800031e:	4b15      	ldr	r3, [pc, #84]	@ (8000374 <_sbrk+0x60>)
 8000320:	1ad3      	subs	r3, r2, r3
 8000322:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000324:	697b      	ldr	r3, [r7, #20]
 8000326:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000328:	4b13      	ldr	r3, [pc, #76]	@ (8000378 <_sbrk+0x64>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	2b00      	cmp	r3, #0
 800032e:	d102      	bne.n	8000336 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000330:	4b11      	ldr	r3, [pc, #68]	@ (8000378 <_sbrk+0x64>)
 8000332:	4a12      	ldr	r2, [pc, #72]	@ (800037c <_sbrk+0x68>)
 8000334:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000336:	4b10      	ldr	r3, [pc, #64]	@ (8000378 <_sbrk+0x64>)
 8000338:	681a      	ldr	r2, [r3, #0]
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	4413      	add	r3, r2
 800033e:	693a      	ldr	r2, [r7, #16]
 8000340:	429a      	cmp	r2, r3
 8000342:	d207      	bcs.n	8000354 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000344:	f004 fad4 	bl	80048f0 <__errno>
 8000348:	4603      	mov	r3, r0
 800034a:	220c      	movs	r2, #12
 800034c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800034e:	f04f 33ff 	mov.w	r3, #4294967295
 8000352:	e009      	b.n	8000368 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000354:	4b08      	ldr	r3, [pc, #32]	@ (8000378 <_sbrk+0x64>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800035a:	4b07      	ldr	r3, [pc, #28]	@ (8000378 <_sbrk+0x64>)
 800035c:	681a      	ldr	r2, [r3, #0]
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	4413      	add	r3, r2
 8000362:	4a05      	ldr	r2, [pc, #20]	@ (8000378 <_sbrk+0x64>)
 8000364:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000366:	68fb      	ldr	r3, [r7, #12]
}
 8000368:	4618      	mov	r0, r3
 800036a:	3718      	adds	r7, #24
 800036c:	46bd      	mov	sp, r7
 800036e:	bd80      	pop	{r7, pc}
 8000370:	20010000 	.word	0x20010000
 8000374:	00000400 	.word	0x00000400
 8000378:	20000188 	.word	0x20000188
 800037c:	20000da8 	.word	0x20000da8

08000380 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000380:	b480      	push	{r7}
 8000382:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000384:	bf00      	nop
 8000386:	46bd      	mov	sp, r7
 8000388:	bc80      	pop	{r7}
 800038a:	4770      	bx	lr

0800038c <FPGA_init>:


unsigned char fp_online;

void FPGA_init(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b082      	sub	sp, #8
 8000390:	af00      	add	r7, sp, #0
	while(fp_online != 0x11)
 8000392:	e01b      	b.n	80003cc <FPGA_init+0x40>
	{
		fp_online = Fpga_Read(0x00);
 8000394:	2000      	movs	r0, #0
 8000396:	f000 f825 	bl	80003e4 <Fpga_Read>
 800039a:	4603      	mov	r3, r0
 800039c:	461a      	mov	r2, r3
 800039e:	4b10      	ldr	r3, [pc, #64]	@ (80003e0 <FPGA_init+0x54>)
 80003a0:	701a      	strb	r2, [r3, #0]

		for(unsigned short i=0;i<1000;i++)
 80003a2:	2300      	movs	r3, #0
 80003a4:	80fb      	strh	r3, [r7, #6]
 80003a6:	e00d      	b.n	80003c4 <FPGA_init+0x38>
		{
			for(unsigned short j=0;j<10000;j++);
 80003a8:	2300      	movs	r3, #0
 80003aa:	80bb      	strh	r3, [r7, #4]
 80003ac:	e002      	b.n	80003b4 <FPGA_init+0x28>
 80003ae:	88bb      	ldrh	r3, [r7, #4]
 80003b0:	3301      	adds	r3, #1
 80003b2:	80bb      	strh	r3, [r7, #4]
 80003b4:	88bb      	ldrh	r3, [r7, #4]
 80003b6:	f242 720f 	movw	r2, #9999	@ 0x270f
 80003ba:	4293      	cmp	r3, r2
 80003bc:	d9f7      	bls.n	80003ae <FPGA_init+0x22>
		for(unsigned short i=0;i<1000;i++)
 80003be:	88fb      	ldrh	r3, [r7, #6]
 80003c0:	3301      	adds	r3, #1
 80003c2:	80fb      	strh	r3, [r7, #6]
 80003c4:	88fb      	ldrh	r3, [r7, #6]
 80003c6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80003ca:	d3ed      	bcc.n	80003a8 <FPGA_init+0x1c>
	while(fp_online != 0x11)
 80003cc:	4b04      	ldr	r3, [pc, #16]	@ (80003e0 <FPGA_init+0x54>)
 80003ce:	781b      	ldrb	r3, [r3, #0]
 80003d0:	2b11      	cmp	r3, #17
 80003d2:	d1df      	bne.n	8000394 <FPGA_init+0x8>
		}
	}
	Write_Fir_Parameter();
 80003d4:	f000 fa7c 	bl	80008d0 <Write_Fir_Parameter>
}
 80003d8:	bf00      	nop
 80003da:	3708      	adds	r7, #8
 80003dc:	46bd      	mov	sp, r7
 80003de:	bd80      	pop	{r7, pc}
 80003e0:	2000019c 	.word	0x2000019c

080003e4 <Fpga_Read>:

unsigned char Fpga_Read(unsigned char addRead)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b086      	sub	sp, #24
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	4603      	mov	r3, r0
 80003ec:	71fb      	strb	r3, [r7, #7]
	unsigned char data,A,B,C,D,E,F,G,H;

	/*-----------------------地址&片选初始化，读时为输出----------------------------*/

	GPIO_InitStruct.Pin = ADDR0_Pin|ADDR1_Pin|ADDR2_Pin|ADDR3_Pin|MCU_CS_Pin;
 80003ee:	4b8b      	ldr	r3, [pc, #556]	@ (800061c <Fpga_Read+0x238>)
 80003f0:	223d      	movs	r2, #61	@ 0x3d
 80003f2:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003f4:	4b89      	ldr	r3, [pc, #548]	@ (800061c <Fpga_Read+0x238>)
 80003f6:	2201      	movs	r2, #1
 80003f8:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003fa:	4b88      	ldr	r3, [pc, #544]	@ (800061c <Fpga_Read+0x238>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000400:	4b86      	ldr	r3, [pc, #536]	@ (800061c <Fpga_Read+0x238>)
 8000402:	2203      	movs	r2, #3
 8000404:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000406:	4985      	ldr	r1, [pc, #532]	@ (800061c <Fpga_Read+0x238>)
 8000408:	4885      	ldr	r0, [pc, #532]	@ (8000620 <Fpga_Read+0x23c>)
 800040a:	f002 fabd 	bl	8002988 <HAL_GPIO_Init>

	/*-----------------------读写初始化，读时为输出---------------------------------*/

	GPIO_InitStruct.Pin = MCU_WR_Pin;
 800040e:	4b83      	ldr	r3, [pc, #524]	@ (800061c <Fpga_Read+0x238>)
 8000410:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000414:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000416:	4b81      	ldr	r3, [pc, #516]	@ (800061c <Fpga_Read+0x238>)
 8000418:	2201      	movs	r2, #1
 800041a:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800041c:	4b7f      	ldr	r3, [pc, #508]	@ (800061c <Fpga_Read+0x238>)
 800041e:	2200      	movs	r2, #0
 8000420:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000422:	4b7e      	ldr	r3, [pc, #504]	@ (800061c <Fpga_Read+0x238>)
 8000424:	2203      	movs	r2, #3
 8000426:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000428:	497c      	ldr	r1, [pc, #496]	@ (800061c <Fpga_Read+0x238>)
 800042a:	487e      	ldr	r0, [pc, #504]	@ (8000624 <Fpga_Read+0x240>)
 800042c:	f002 faac 	bl	8002988 <HAL_GPIO_Init>

	/*-----------------------数据初始化，读时为输入---------------------------------*/

	GPIO_InitStruct.Pin = DATA1_Pin|DATA0_Pin;
 8000430:	4b7a      	ldr	r3, [pc, #488]	@ (800061c <Fpga_Read+0x238>)
 8000432:	f241 0204 	movw	r2, #4100	@ 0x1004
 8000436:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000438:	4b78      	ldr	r3, [pc, #480]	@ (800061c <Fpga_Read+0x238>)
 800043a:	2200      	movs	r2, #0
 800043c:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800043e:	4b77      	ldr	r3, [pc, #476]	@ (800061c <Fpga_Read+0x238>)
 8000440:	2200      	movs	r2, #0
 8000442:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000444:	4b75      	ldr	r3, [pc, #468]	@ (800061c <Fpga_Read+0x238>)
 8000446:	2203      	movs	r2, #3
 8000448:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800044a:	4974      	ldr	r1, [pc, #464]	@ (800061c <Fpga_Read+0x238>)
 800044c:	4875      	ldr	r0, [pc, #468]	@ (8000624 <Fpga_Read+0x240>)
 800044e:	f002 fa9b 	bl	8002988 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = DATA2_Pin;
 8000452:	4b72      	ldr	r3, [pc, #456]	@ (800061c <Fpga_Read+0x238>)
 8000454:	2208      	movs	r2, #8
 8000456:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000458:	4b70      	ldr	r3, [pc, #448]	@ (800061c <Fpga_Read+0x238>)
 800045a:	2200      	movs	r2, #0
 800045c:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800045e:	4b6f      	ldr	r3, [pc, #444]	@ (800061c <Fpga_Read+0x238>)
 8000460:	2200      	movs	r2, #0
 8000462:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000464:	4b6d      	ldr	r3, [pc, #436]	@ (800061c <Fpga_Read+0x238>)
 8000466:	2202      	movs	r2, #2
 8000468:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(DATA2_GPIO_Port, &GPIO_InitStruct);
 800046a:	496c      	ldr	r1, [pc, #432]	@ (800061c <Fpga_Read+0x238>)
 800046c:	486d      	ldr	r0, [pc, #436]	@ (8000624 <Fpga_Read+0x240>)
 800046e:	f002 fa8b 	bl	8002988 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = DATA3_Pin|DATA4_Pin;
 8000472:	4b6a      	ldr	r3, [pc, #424]	@ (800061c <Fpga_Read+0x238>)
 8000474:	2248      	movs	r2, #72	@ 0x48
 8000476:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000478:	4b68      	ldr	r3, [pc, #416]	@ (800061c <Fpga_Read+0x238>)
 800047a:	2200      	movs	r2, #0
 800047c:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800047e:	4b67      	ldr	r3, [pc, #412]	@ (800061c <Fpga_Read+0x238>)
 8000480:	2200      	movs	r2, #0
 8000482:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000484:	4b65      	ldr	r3, [pc, #404]	@ (800061c <Fpga_Read+0x238>)
 8000486:	2203      	movs	r2, #3
 8000488:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800048a:	4964      	ldr	r1, [pc, #400]	@ (800061c <Fpga_Read+0x238>)
 800048c:	4866      	ldr	r0, [pc, #408]	@ (8000628 <Fpga_Read+0x244>)
 800048e:	f002 fa7b 	bl	8002988 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = DATA5_Pin|DATA6_Pin|DATA7_Pin;
 8000492:	4b62      	ldr	r3, [pc, #392]	@ (800061c <Fpga_Read+0x238>)
 8000494:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8000498:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800049a:	4b60      	ldr	r3, [pc, #384]	@ (800061c <Fpga_Read+0x238>)
 800049c:	2200      	movs	r2, #0
 800049e:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a0:	4b5e      	ldr	r3, [pc, #376]	@ (800061c <Fpga_Read+0x238>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004a6:	4b5d      	ldr	r3, [pc, #372]	@ (800061c <Fpga_Read+0x238>)
 80004a8:	2203      	movs	r2, #3
 80004aa:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004ac:	495b      	ldr	r1, [pc, #364]	@ (800061c <Fpga_Read+0x238>)
 80004ae:	485f      	ldr	r0, [pc, #380]	@ (800062c <Fpga_Read+0x248>)
 80004b0:	f002 fa6a 	bl	8002988 <HAL_GPIO_Init>


	HAL_GPIO_WritePin(MCU_WR_GPIO_Port,MCU_WR_Pin,GPIO_PIN_RESET);			//读:WR拉低
 80004b4:	2200      	movs	r2, #0
 80004b6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80004ba:	485a      	ldr	r0, [pc, #360]	@ (8000624 <Fpga_Read+0x240>)
 80004bc:	f002 fc0f 	bl	8002cde <HAL_GPIO_WritePin>

	if(addRead & 0x08)
 80004c0:	79fb      	ldrb	r3, [r7, #7]
 80004c2:	f003 0308 	and.w	r3, r3, #8
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d005      	beq.n	80004d6 <Fpga_Read+0xf2>
		HAL_GPIO_WritePin(ADDR3_GPIO_Port,ADDR3_Pin,GPIO_PIN_SET);
 80004ca:	2201      	movs	r2, #1
 80004cc:	2120      	movs	r1, #32
 80004ce:	4854      	ldr	r0, [pc, #336]	@ (8000620 <Fpga_Read+0x23c>)
 80004d0:	f002 fc05 	bl	8002cde <HAL_GPIO_WritePin>
 80004d4:	e004      	b.n	80004e0 <Fpga_Read+0xfc>
	else
		HAL_GPIO_WritePin(ADDR3_GPIO_Port,ADDR3_Pin,GPIO_PIN_RESET);
 80004d6:	2200      	movs	r2, #0
 80004d8:	2120      	movs	r1, #32
 80004da:	4851      	ldr	r0, [pc, #324]	@ (8000620 <Fpga_Read+0x23c>)
 80004dc:	f002 fbff 	bl	8002cde <HAL_GPIO_WritePin>

	if(addRead & 0x04)
 80004e0:	79fb      	ldrb	r3, [r7, #7]
 80004e2:	f003 0304 	and.w	r3, r3, #4
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d005      	beq.n	80004f6 <Fpga_Read+0x112>
		HAL_GPIO_WritePin(ADDR2_GPIO_Port,ADDR2_Pin,GPIO_PIN_SET);
 80004ea:	2201      	movs	r2, #1
 80004ec:	2110      	movs	r1, #16
 80004ee:	484c      	ldr	r0, [pc, #304]	@ (8000620 <Fpga_Read+0x23c>)
 80004f0:	f002 fbf5 	bl	8002cde <HAL_GPIO_WritePin>
 80004f4:	e004      	b.n	8000500 <Fpga_Read+0x11c>
	else
		HAL_GPIO_WritePin(ADDR2_GPIO_Port,ADDR2_Pin,GPIO_PIN_RESET);		//例:addRead = d'6/b'0110,  ADDR3=0,ADDR2=1,ADDR1=1;ADDR0=0
 80004f6:	2200      	movs	r2, #0
 80004f8:	2110      	movs	r1, #16
 80004fa:	4849      	ldr	r0, [pc, #292]	@ (8000620 <Fpga_Read+0x23c>)
 80004fc:	f002 fbef 	bl	8002cde <HAL_GPIO_WritePin>

	if(addRead & 0x02)
 8000500:	79fb      	ldrb	r3, [r7, #7]
 8000502:	f003 0302 	and.w	r3, r3, #2
 8000506:	2b00      	cmp	r3, #0
 8000508:	d005      	beq.n	8000516 <Fpga_Read+0x132>
		HAL_GPIO_WritePin(ADDR1_GPIO_Port,ADDR1_Pin,GPIO_PIN_SET);
 800050a:	2201      	movs	r2, #1
 800050c:	2108      	movs	r1, #8
 800050e:	4844      	ldr	r0, [pc, #272]	@ (8000620 <Fpga_Read+0x23c>)
 8000510:	f002 fbe5 	bl	8002cde <HAL_GPIO_WritePin>
 8000514:	e004      	b.n	8000520 <Fpga_Read+0x13c>
	else
		HAL_GPIO_WritePin(ADDR1_GPIO_Port,ADDR1_Pin,GPIO_PIN_RESET);
 8000516:	2200      	movs	r2, #0
 8000518:	2108      	movs	r1, #8
 800051a:	4841      	ldr	r0, [pc, #260]	@ (8000620 <Fpga_Read+0x23c>)
 800051c:	f002 fbdf 	bl	8002cde <HAL_GPIO_WritePin>

	if(addRead & 0x01)
 8000520:	79fb      	ldrb	r3, [r7, #7]
 8000522:	f003 0301 	and.w	r3, r3, #1
 8000526:	2b00      	cmp	r3, #0
 8000528:	d005      	beq.n	8000536 <Fpga_Read+0x152>
		HAL_GPIO_WritePin(ADDR0_GPIO_Port,ADDR0_Pin,GPIO_PIN_SET);
 800052a:	2201      	movs	r2, #1
 800052c:	2104      	movs	r1, #4
 800052e:	483c      	ldr	r0, [pc, #240]	@ (8000620 <Fpga_Read+0x23c>)
 8000530:	f002 fbd5 	bl	8002cde <HAL_GPIO_WritePin>
 8000534:	e004      	b.n	8000540 <Fpga_Read+0x15c>
	else
		HAL_GPIO_WritePin(ADDR0_GPIO_Port,ADDR0_Pin,GPIO_PIN_RESET);
 8000536:	2200      	movs	r2, #0
 8000538:	2104      	movs	r1, #4
 800053a:	4839      	ldr	r0, [pc, #228]	@ (8000620 <Fpga_Read+0x23c>)
 800053c:	f002 fbcf 	bl	8002cde <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(MCU_CS_GPIO_Port,MCU_CS_Pin,GPIO_PIN_RESET);			//片选拉低
 8000540:	2200      	movs	r2, #0
 8000542:	2101      	movs	r1, #1
 8000544:	4836      	ldr	r0, [pc, #216]	@ (8000620 <Fpga_Read+0x23c>)
 8000546:	f002 fbca 	bl	8002cde <HAL_GPIO_WritePin>

	A = HAL_GPIO_ReadPin(DATA0_GPIO_Port,DATA0_Pin);
 800054a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800054e:	4835      	ldr	r0, [pc, #212]	@ (8000624 <Fpga_Read+0x240>)
 8000550:	f002 fbae 	bl	8002cb0 <HAL_GPIO_ReadPin>
 8000554:	4603      	mov	r3, r0
 8000556:	75fb      	strb	r3, [r7, #23]
	B = HAL_GPIO_ReadPin(DATA1_GPIO_Port,DATA1_Pin);
 8000558:	2104      	movs	r1, #4
 800055a:	4832      	ldr	r0, [pc, #200]	@ (8000624 <Fpga_Read+0x240>)
 800055c:	f002 fba8 	bl	8002cb0 <HAL_GPIO_ReadPin>
 8000560:	4603      	mov	r3, r0
 8000562:	75bb      	strb	r3, [r7, #22]
	C = HAL_GPIO_ReadPin(DATA2_GPIO_Port,DATA2_Pin);
 8000564:	2108      	movs	r1, #8
 8000566:	482f      	ldr	r0, [pc, #188]	@ (8000624 <Fpga_Read+0x240>)
 8000568:	f002 fba2 	bl	8002cb0 <HAL_GPIO_ReadPin>
 800056c:	4603      	mov	r3, r0
 800056e:	757b      	strb	r3, [r7, #21]
	D = HAL_GPIO_ReadPin(DATA3_GPIO_Port,DATA3_Pin);
 8000570:	2108      	movs	r1, #8
 8000572:	482d      	ldr	r0, [pc, #180]	@ (8000628 <Fpga_Read+0x244>)
 8000574:	f002 fb9c 	bl	8002cb0 <HAL_GPIO_ReadPin>
 8000578:	4603      	mov	r3, r0
 800057a:	753b      	strb	r3, [r7, #20]
	E = HAL_GPIO_ReadPin(DATA4_GPIO_Port,DATA4_Pin);
 800057c:	2140      	movs	r1, #64	@ 0x40
 800057e:	482a      	ldr	r0, [pc, #168]	@ (8000628 <Fpga_Read+0x244>)
 8000580:	f002 fb96 	bl	8002cb0 <HAL_GPIO_ReadPin>
 8000584:	4603      	mov	r3, r0
 8000586:	74fb      	strb	r3, [r7, #19]
	F = HAL_GPIO_ReadPin(DATA5_GPIO_Port,DATA5_Pin);
 8000588:	2120      	movs	r1, #32
 800058a:	4828      	ldr	r0, [pc, #160]	@ (800062c <Fpga_Read+0x248>)
 800058c:	f002 fb90 	bl	8002cb0 <HAL_GPIO_ReadPin>
 8000590:	4603      	mov	r3, r0
 8000592:	74bb      	strb	r3, [r7, #18]
	G = HAL_GPIO_ReadPin(DATA6_GPIO_Port,DATA6_Pin);
 8000594:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000598:	4824      	ldr	r0, [pc, #144]	@ (800062c <Fpga_Read+0x248>)
 800059a:	f002 fb89 	bl	8002cb0 <HAL_GPIO_ReadPin>
 800059e:	4603      	mov	r3, r0
 80005a0:	747b      	strb	r3, [r7, #17]
	H = HAL_GPIO_ReadPin(DATA7_GPIO_Port,DATA7_Pin);
 80005a2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80005a6:	4821      	ldr	r0, [pc, #132]	@ (800062c <Fpga_Read+0x248>)
 80005a8:	f002 fb82 	bl	8002cb0 <HAL_GPIO_ReadPin>
 80005ac:	4603      	mov	r3, r0
 80005ae:	743b      	strb	r3, [r7, #16]

	HAL_GPIO_WritePin(MCU_CS_GPIO_Port,MCU_CS_Pin,GPIO_PIN_SET);			//片选拉高
 80005b0:	2201      	movs	r2, #1
 80005b2:	2101      	movs	r1, #1
 80005b4:	481a      	ldr	r0, [pc, #104]	@ (8000620 <Fpga_Read+0x23c>)
 80005b6:	f002 fb92 	bl	8002cde <HAL_GPIO_WritePin>

	data =  H<<7;
 80005ba:	7c3b      	ldrb	r3, [r7, #16]
 80005bc:	01db      	lsls	r3, r3, #7
 80005be:	73fb      	strb	r3, [r7, #15]
	data += G<<6;
 80005c0:	7c7b      	ldrb	r3, [r7, #17]
 80005c2:	019b      	lsls	r3, r3, #6
 80005c4:	b2da      	uxtb	r2, r3
 80005c6:	7bfb      	ldrb	r3, [r7, #15]
 80005c8:	4413      	add	r3, r2
 80005ca:	73fb      	strb	r3, [r7, #15]
	data += F<<5;
 80005cc:	7cbb      	ldrb	r3, [r7, #18]
 80005ce:	015b      	lsls	r3, r3, #5
 80005d0:	b2da      	uxtb	r2, r3
 80005d2:	7bfb      	ldrb	r3, [r7, #15]
 80005d4:	4413      	add	r3, r2
 80005d6:	73fb      	strb	r3, [r7, #15]
	data += E<<4;
 80005d8:	7cfb      	ldrb	r3, [r7, #19]
 80005da:	011b      	lsls	r3, r3, #4
 80005dc:	b2da      	uxtb	r2, r3
 80005de:	7bfb      	ldrb	r3, [r7, #15]
 80005e0:	4413      	add	r3, r2
 80005e2:	73fb      	strb	r3, [r7, #15]
	data += D<<3;
 80005e4:	7d3b      	ldrb	r3, [r7, #20]
 80005e6:	00db      	lsls	r3, r3, #3
 80005e8:	b2da      	uxtb	r2, r3
 80005ea:	7bfb      	ldrb	r3, [r7, #15]
 80005ec:	4413      	add	r3, r2
 80005ee:	73fb      	strb	r3, [r7, #15]
	data += C<<2;
 80005f0:	7d7b      	ldrb	r3, [r7, #21]
 80005f2:	009b      	lsls	r3, r3, #2
 80005f4:	b2da      	uxtb	r2, r3
 80005f6:	7bfb      	ldrb	r3, [r7, #15]
 80005f8:	4413      	add	r3, r2
 80005fa:	73fb      	strb	r3, [r7, #15]
	data += B<<1;
 80005fc:	7dbb      	ldrb	r3, [r7, #22]
 80005fe:	005b      	lsls	r3, r3, #1
 8000600:	b2da      	uxtb	r2, r3
 8000602:	7bfb      	ldrb	r3, [r7, #15]
 8000604:	4413      	add	r3, r2
 8000606:	73fb      	strb	r3, [r7, #15]
	data += A;
 8000608:	7bfa      	ldrb	r2, [r7, #15]
 800060a:	7dfb      	ldrb	r3, [r7, #23]
 800060c:	4413      	add	r3, r2
 800060e:	73fb      	strb	r3, [r7, #15]

	return data;
 8000610:	7bfb      	ldrb	r3, [r7, #15]
}
 8000612:	4618      	mov	r0, r3
 8000614:	3718      	adds	r7, #24
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	2000018c 	.word	0x2000018c
 8000620:	40011800 	.word	0x40011800
 8000624:	40010800 	.word	0x40010800
 8000628:	40011400 	.word	0x40011400
 800062c:	40010c00 	.word	0x40010c00

08000630 <Fpga_Write>:

void Fpga_Write(unsigned char addWrite,unsigned char Data)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
 8000636:	4603      	mov	r3, r0
 8000638:	460a      	mov	r2, r1
 800063a:	71fb      	strb	r3, [r7, #7]
 800063c:	4613      	mov	r3, r2
 800063e:	71bb      	strb	r3, [r7, #6]

	/*------------------------------数据，写时为输出---------------------------------*/

	GPIO_InitStruct.Pin = DATA1_Pin|DATA0_Pin|DATA2_Pin;
 8000640:	4b9e      	ldr	r3, [pc, #632]	@ (80008bc <Fpga_Write+0x28c>)
 8000642:	f241 020c 	movw	r2, #4108	@ 0x100c
 8000646:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000648:	4b9c      	ldr	r3, [pc, #624]	@ (80008bc <Fpga_Write+0x28c>)
 800064a:	2201      	movs	r2, #1
 800064c:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064e:	4b9b      	ldr	r3, [pc, #620]	@ (80008bc <Fpga_Write+0x28c>)
 8000650:	2200      	movs	r2, #0
 8000652:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000654:	4b99      	ldr	r3, [pc, #612]	@ (80008bc <Fpga_Write+0x28c>)
 8000656:	2203      	movs	r2, #3
 8000658:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800065a:	4998      	ldr	r1, [pc, #608]	@ (80008bc <Fpga_Write+0x28c>)
 800065c:	4898      	ldr	r0, [pc, #608]	@ (80008c0 <Fpga_Write+0x290>)
 800065e:	f002 f993 	bl	8002988 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = DATA3_Pin|DATA4_Pin;
 8000662:	4b96      	ldr	r3, [pc, #600]	@ (80008bc <Fpga_Write+0x28c>)
 8000664:	2248      	movs	r2, #72	@ 0x48
 8000666:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000668:	4b94      	ldr	r3, [pc, #592]	@ (80008bc <Fpga_Write+0x28c>)
 800066a:	2201      	movs	r2, #1
 800066c:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066e:	4b93      	ldr	r3, [pc, #588]	@ (80008bc <Fpga_Write+0x28c>)
 8000670:	2200      	movs	r2, #0
 8000672:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000674:	4b91      	ldr	r3, [pc, #580]	@ (80008bc <Fpga_Write+0x28c>)
 8000676:	2203      	movs	r2, #3
 8000678:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800067a:	4990      	ldr	r1, [pc, #576]	@ (80008bc <Fpga_Write+0x28c>)
 800067c:	4891      	ldr	r0, [pc, #580]	@ (80008c4 <Fpga_Write+0x294>)
 800067e:	f002 f983 	bl	8002988 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = DATA5_Pin|DATA6_Pin|DATA7_Pin;
 8000682:	4b8e      	ldr	r3, [pc, #568]	@ (80008bc <Fpga_Write+0x28c>)
 8000684:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8000688:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800068a:	4b8c      	ldr	r3, [pc, #560]	@ (80008bc <Fpga_Write+0x28c>)
 800068c:	2201      	movs	r2, #1
 800068e:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000690:	4b8a      	ldr	r3, [pc, #552]	@ (80008bc <Fpga_Write+0x28c>)
 8000692:	2200      	movs	r2, #0
 8000694:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000696:	4b89      	ldr	r3, [pc, #548]	@ (80008bc <Fpga_Write+0x28c>)
 8000698:	2203      	movs	r2, #3
 800069a:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800069c:	4987      	ldr	r1, [pc, #540]	@ (80008bc <Fpga_Write+0x28c>)
 800069e:	488a      	ldr	r0, [pc, #552]	@ (80008c8 <Fpga_Write+0x298>)
 80006a0:	f002 f972 	bl	8002988 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(MCU_WR_GPIO_Port,MCU_WR_Pin,GPIO_PIN_SET);			//写:WR拉高
 80006a4:	2201      	movs	r2, #1
 80006a6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80006aa:	4885      	ldr	r0, [pc, #532]	@ (80008c0 <Fpga_Write+0x290>)
 80006ac:	f002 fb17 	bl	8002cde <HAL_GPIO_WritePin>

	/*----------------------4位地址--------------------------------*/
	if(addWrite & 0x08)
 80006b0:	79fb      	ldrb	r3, [r7, #7]
 80006b2:	f003 0308 	and.w	r3, r3, #8
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d005      	beq.n	80006c6 <Fpga_Write+0x96>
		HAL_GPIO_WritePin(ADDR3_GPIO_Port,ADDR3_Pin,GPIO_PIN_SET);
 80006ba:	2201      	movs	r2, #1
 80006bc:	2120      	movs	r1, #32
 80006be:	4883      	ldr	r0, [pc, #524]	@ (80008cc <Fpga_Write+0x29c>)
 80006c0:	f002 fb0d 	bl	8002cde <HAL_GPIO_WritePin>
 80006c4:	e004      	b.n	80006d0 <Fpga_Write+0xa0>
	else
		HAL_GPIO_WritePin(ADDR3_GPIO_Port,ADDR3_Pin,GPIO_PIN_RESET);
 80006c6:	2200      	movs	r2, #0
 80006c8:	2120      	movs	r1, #32
 80006ca:	4880      	ldr	r0, [pc, #512]	@ (80008cc <Fpga_Write+0x29c>)
 80006cc:	f002 fb07 	bl	8002cde <HAL_GPIO_WritePin>

	if(addWrite & 0x04)
 80006d0:	79fb      	ldrb	r3, [r7, #7]
 80006d2:	f003 0304 	and.w	r3, r3, #4
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d005      	beq.n	80006e6 <Fpga_Write+0xb6>
		HAL_GPIO_WritePin(ADDR2_GPIO_Port,ADDR2_Pin,GPIO_PIN_SET);
 80006da:	2201      	movs	r2, #1
 80006dc:	2110      	movs	r1, #16
 80006de:	487b      	ldr	r0, [pc, #492]	@ (80008cc <Fpga_Write+0x29c>)
 80006e0:	f002 fafd 	bl	8002cde <HAL_GPIO_WritePin>
 80006e4:	e004      	b.n	80006f0 <Fpga_Write+0xc0>
	else
		HAL_GPIO_WritePin(ADDR2_GPIO_Port,ADDR2_Pin,GPIO_PIN_RESET);		//例:addRead = d'6/b'0110,  ADDR3=0,ADDR2=1,ADDR1=1;ADDR0=0
 80006e6:	2200      	movs	r2, #0
 80006e8:	2110      	movs	r1, #16
 80006ea:	4878      	ldr	r0, [pc, #480]	@ (80008cc <Fpga_Write+0x29c>)
 80006ec:	f002 faf7 	bl	8002cde <HAL_GPIO_WritePin>

	if(addWrite & 0x02)
 80006f0:	79fb      	ldrb	r3, [r7, #7]
 80006f2:	f003 0302 	and.w	r3, r3, #2
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d005      	beq.n	8000706 <Fpga_Write+0xd6>
		HAL_GPIO_WritePin(ADDR1_GPIO_Port,ADDR1_Pin,GPIO_PIN_SET);
 80006fa:	2201      	movs	r2, #1
 80006fc:	2108      	movs	r1, #8
 80006fe:	4873      	ldr	r0, [pc, #460]	@ (80008cc <Fpga_Write+0x29c>)
 8000700:	f002 faed 	bl	8002cde <HAL_GPIO_WritePin>
 8000704:	e004      	b.n	8000710 <Fpga_Write+0xe0>
	else
		HAL_GPIO_WritePin(ADDR1_GPIO_Port,ADDR1_Pin,GPIO_PIN_RESET);
 8000706:	2200      	movs	r2, #0
 8000708:	2108      	movs	r1, #8
 800070a:	4870      	ldr	r0, [pc, #448]	@ (80008cc <Fpga_Write+0x29c>)
 800070c:	f002 fae7 	bl	8002cde <HAL_GPIO_WritePin>

	if(addWrite & 0x01)
 8000710:	79fb      	ldrb	r3, [r7, #7]
 8000712:	f003 0301 	and.w	r3, r3, #1
 8000716:	2b00      	cmp	r3, #0
 8000718:	d005      	beq.n	8000726 <Fpga_Write+0xf6>
		HAL_GPIO_WritePin(ADDR0_GPIO_Port,ADDR0_Pin,GPIO_PIN_SET);
 800071a:	2201      	movs	r2, #1
 800071c:	2104      	movs	r1, #4
 800071e:	486b      	ldr	r0, [pc, #428]	@ (80008cc <Fpga_Write+0x29c>)
 8000720:	f002 fadd 	bl	8002cde <HAL_GPIO_WritePin>
 8000724:	e004      	b.n	8000730 <Fpga_Write+0x100>
	else
		HAL_GPIO_WritePin(ADDR0_GPIO_Port,ADDR0_Pin,GPIO_PIN_RESET);
 8000726:	2200      	movs	r2, #0
 8000728:	2104      	movs	r1, #4
 800072a:	4868      	ldr	r0, [pc, #416]	@ (80008cc <Fpga_Write+0x29c>)
 800072c:	f002 fad7 	bl	8002cde <HAL_GPIO_WritePin>

	/*----------------------8位数据--------------------------------*/
	if(Data & 0x80)
 8000730:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000734:	2b00      	cmp	r3, #0
 8000736:	da06      	bge.n	8000746 <Fpga_Write+0x116>
		HAL_GPIO_WritePin(DATA7_GPIO_Port,DATA7_Pin,GPIO_PIN_SET);
 8000738:	2201      	movs	r2, #1
 800073a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800073e:	4862      	ldr	r0, [pc, #392]	@ (80008c8 <Fpga_Write+0x298>)
 8000740:	f002 facd 	bl	8002cde <HAL_GPIO_WritePin>
 8000744:	e005      	b.n	8000752 <Fpga_Write+0x122>
	else
		HAL_GPIO_WritePin(DATA7_GPIO_Port,DATA7_Pin,GPIO_PIN_RESET);
 8000746:	2200      	movs	r2, #0
 8000748:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800074c:	485e      	ldr	r0, [pc, #376]	@ (80008c8 <Fpga_Write+0x298>)
 800074e:	f002 fac6 	bl	8002cde <HAL_GPIO_WritePin>

	if(Data & 0x40)
 8000752:	79bb      	ldrb	r3, [r7, #6]
 8000754:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000758:	2b00      	cmp	r3, #0
 800075a:	d006      	beq.n	800076a <Fpga_Write+0x13a>
		HAL_GPIO_WritePin(DATA6_GPIO_Port,DATA6_Pin,GPIO_PIN_SET);
 800075c:	2201      	movs	r2, #1
 800075e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000762:	4859      	ldr	r0, [pc, #356]	@ (80008c8 <Fpga_Write+0x298>)
 8000764:	f002 fabb 	bl	8002cde <HAL_GPIO_WritePin>
 8000768:	e005      	b.n	8000776 <Fpga_Write+0x146>
	else
		HAL_GPIO_WritePin(DATA6_GPIO_Port,DATA6_Pin,GPIO_PIN_RESET);
 800076a:	2200      	movs	r2, #0
 800076c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000770:	4855      	ldr	r0, [pc, #340]	@ (80008c8 <Fpga_Write+0x298>)
 8000772:	f002 fab4 	bl	8002cde <HAL_GPIO_WritePin>

	if(Data & 0x20)
 8000776:	79bb      	ldrb	r3, [r7, #6]
 8000778:	f003 0320 	and.w	r3, r3, #32
 800077c:	2b00      	cmp	r3, #0
 800077e:	d005      	beq.n	800078c <Fpga_Write+0x15c>
		HAL_GPIO_WritePin(DATA5_GPIO_Port,DATA5_Pin,GPIO_PIN_SET);
 8000780:	2201      	movs	r2, #1
 8000782:	2120      	movs	r1, #32
 8000784:	4850      	ldr	r0, [pc, #320]	@ (80008c8 <Fpga_Write+0x298>)
 8000786:	f002 faaa 	bl	8002cde <HAL_GPIO_WritePin>
 800078a:	e004      	b.n	8000796 <Fpga_Write+0x166>
	else
		HAL_GPIO_WritePin(DATA5_GPIO_Port,DATA5_Pin,GPIO_PIN_RESET);
 800078c:	2200      	movs	r2, #0
 800078e:	2120      	movs	r1, #32
 8000790:	484d      	ldr	r0, [pc, #308]	@ (80008c8 <Fpga_Write+0x298>)
 8000792:	f002 faa4 	bl	8002cde <HAL_GPIO_WritePin>

	if(Data & 0x10)
 8000796:	79bb      	ldrb	r3, [r7, #6]
 8000798:	f003 0310 	and.w	r3, r3, #16
 800079c:	2b00      	cmp	r3, #0
 800079e:	d005      	beq.n	80007ac <Fpga_Write+0x17c>
		HAL_GPIO_WritePin(DATA4_GPIO_Port,DATA4_Pin,GPIO_PIN_SET);
 80007a0:	2201      	movs	r2, #1
 80007a2:	2140      	movs	r1, #64	@ 0x40
 80007a4:	4847      	ldr	r0, [pc, #284]	@ (80008c4 <Fpga_Write+0x294>)
 80007a6:	f002 fa9a 	bl	8002cde <HAL_GPIO_WritePin>
 80007aa:	e004      	b.n	80007b6 <Fpga_Write+0x186>
	else
		HAL_GPIO_WritePin(DATA4_GPIO_Port,DATA4_Pin,GPIO_PIN_RESET);
 80007ac:	2200      	movs	r2, #0
 80007ae:	2140      	movs	r1, #64	@ 0x40
 80007b0:	4844      	ldr	r0, [pc, #272]	@ (80008c4 <Fpga_Write+0x294>)
 80007b2:	f002 fa94 	bl	8002cde <HAL_GPIO_WritePin>



	if(Data & 0x08)
 80007b6:	79bb      	ldrb	r3, [r7, #6]
 80007b8:	f003 0308 	and.w	r3, r3, #8
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d005      	beq.n	80007cc <Fpga_Write+0x19c>
		HAL_GPIO_WritePin(DATA3_GPIO_Port,DATA3_Pin,GPIO_PIN_SET);
 80007c0:	2201      	movs	r2, #1
 80007c2:	2108      	movs	r1, #8
 80007c4:	483f      	ldr	r0, [pc, #252]	@ (80008c4 <Fpga_Write+0x294>)
 80007c6:	f002 fa8a 	bl	8002cde <HAL_GPIO_WritePin>
 80007ca:	e004      	b.n	80007d6 <Fpga_Write+0x1a6>
	else
		HAL_GPIO_WritePin(DATA3_GPIO_Port,DATA3_Pin,GPIO_PIN_RESET);
 80007cc:	2200      	movs	r2, #0
 80007ce:	2108      	movs	r1, #8
 80007d0:	483c      	ldr	r0, [pc, #240]	@ (80008c4 <Fpga_Write+0x294>)
 80007d2:	f002 fa84 	bl	8002cde <HAL_GPIO_WritePin>

	if(Data & 0x04)
 80007d6:	79bb      	ldrb	r3, [r7, #6]
 80007d8:	f003 0304 	and.w	r3, r3, #4
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d005      	beq.n	80007ec <Fpga_Write+0x1bc>
		HAL_GPIO_WritePin(DATA2_GPIO_Port,DATA2_Pin,GPIO_PIN_SET);
 80007e0:	2201      	movs	r2, #1
 80007e2:	2108      	movs	r1, #8
 80007e4:	4836      	ldr	r0, [pc, #216]	@ (80008c0 <Fpga_Write+0x290>)
 80007e6:	f002 fa7a 	bl	8002cde <HAL_GPIO_WritePin>
 80007ea:	e004      	b.n	80007f6 <Fpga_Write+0x1c6>
	else
		HAL_GPIO_WritePin(DATA2_GPIO_Port,DATA2_Pin,GPIO_PIN_RESET);
 80007ec:	2200      	movs	r2, #0
 80007ee:	2108      	movs	r1, #8
 80007f0:	4833      	ldr	r0, [pc, #204]	@ (80008c0 <Fpga_Write+0x290>)
 80007f2:	f002 fa74 	bl	8002cde <HAL_GPIO_WritePin>

	if(Data & 0x02)
 80007f6:	79bb      	ldrb	r3, [r7, #6]
 80007f8:	f003 0302 	and.w	r3, r3, #2
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d005      	beq.n	800080c <Fpga_Write+0x1dc>
		HAL_GPIO_WritePin(DATA1_GPIO_Port,DATA1_Pin,GPIO_PIN_SET);
 8000800:	2201      	movs	r2, #1
 8000802:	2104      	movs	r1, #4
 8000804:	482e      	ldr	r0, [pc, #184]	@ (80008c0 <Fpga_Write+0x290>)
 8000806:	f002 fa6a 	bl	8002cde <HAL_GPIO_WritePin>
 800080a:	e004      	b.n	8000816 <Fpga_Write+0x1e6>
	else
		HAL_GPIO_WritePin(DATA1_GPIO_Port,DATA1_Pin,GPIO_PIN_RESET);
 800080c:	2200      	movs	r2, #0
 800080e:	2104      	movs	r1, #4
 8000810:	482b      	ldr	r0, [pc, #172]	@ (80008c0 <Fpga_Write+0x290>)
 8000812:	f002 fa64 	bl	8002cde <HAL_GPIO_WritePin>

	if(Data & 0x01)
 8000816:	79bb      	ldrb	r3, [r7, #6]
 8000818:	f003 0301 	and.w	r3, r3, #1
 800081c:	2b00      	cmp	r3, #0
 800081e:	d006      	beq.n	800082e <Fpga_Write+0x1fe>
		HAL_GPIO_WritePin(DATA0_GPIO_Port,DATA0_Pin,GPIO_PIN_SET);
 8000820:	2201      	movs	r2, #1
 8000822:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000826:	4826      	ldr	r0, [pc, #152]	@ (80008c0 <Fpga_Write+0x290>)
 8000828:	f002 fa59 	bl	8002cde <HAL_GPIO_WritePin>
 800082c:	e005      	b.n	800083a <Fpga_Write+0x20a>
	else
		HAL_GPIO_WritePin(DATA0_GPIO_Port,DATA0_Pin,GPIO_PIN_RESET);
 800082e:	2200      	movs	r2, #0
 8000830:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000834:	4822      	ldr	r0, [pc, #136]	@ (80008c0 <Fpga_Write+0x290>)
 8000836:	f002 fa52 	bl	8002cde <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(MCU_CS_GPIO_Port,MCU_CS_Pin,GPIO_PIN_RESET);			//片选拉低
 800083a:	2200      	movs	r2, #0
 800083c:	2101      	movs	r1, #1
 800083e:	4823      	ldr	r0, [pc, #140]	@ (80008cc <Fpga_Write+0x29c>)
 8000840:	f002 fa4d 	bl	8002cde <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(MCU_CS_GPIO_Port,MCU_CS_Pin,GPIO_PIN_SET);			//片选拉高
 8000844:	2201      	movs	r2, #1
 8000846:	2101      	movs	r1, #1
 8000848:	4820      	ldr	r0, [pc, #128]	@ (80008cc <Fpga_Write+0x29c>)
 800084a:	f002 fa48 	bl	8002cde <HAL_GPIO_WritePin>


	GPIO_InitStruct.Pin = DATA1_Pin|DATA0_Pin|DATA2_Pin;
 800084e:	4b1b      	ldr	r3, [pc, #108]	@ (80008bc <Fpga_Write+0x28c>)
 8000850:	f241 020c 	movw	r2, #4108	@ 0x100c
 8000854:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000856:	4b19      	ldr	r3, [pc, #100]	@ (80008bc <Fpga_Write+0x28c>)
 8000858:	2200      	movs	r2, #0
 800085a:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085c:	4b17      	ldr	r3, [pc, #92]	@ (80008bc <Fpga_Write+0x28c>)
 800085e:	2200      	movs	r2, #0
 8000860:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000862:	4b16      	ldr	r3, [pc, #88]	@ (80008bc <Fpga_Write+0x28c>)
 8000864:	2203      	movs	r2, #3
 8000866:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000868:	4914      	ldr	r1, [pc, #80]	@ (80008bc <Fpga_Write+0x28c>)
 800086a:	4815      	ldr	r0, [pc, #84]	@ (80008c0 <Fpga_Write+0x290>)
 800086c:	f002 f88c 	bl	8002988 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = DATA3_Pin|DATA4_Pin;
 8000870:	4b12      	ldr	r3, [pc, #72]	@ (80008bc <Fpga_Write+0x28c>)
 8000872:	2248      	movs	r2, #72	@ 0x48
 8000874:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000876:	4b11      	ldr	r3, [pc, #68]	@ (80008bc <Fpga_Write+0x28c>)
 8000878:	2200      	movs	r2, #0
 800087a:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087c:	4b0f      	ldr	r3, [pc, #60]	@ (80008bc <Fpga_Write+0x28c>)
 800087e:	2200      	movs	r2, #0
 8000880:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000882:	4b0e      	ldr	r3, [pc, #56]	@ (80008bc <Fpga_Write+0x28c>)
 8000884:	2203      	movs	r2, #3
 8000886:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000888:	490c      	ldr	r1, [pc, #48]	@ (80008bc <Fpga_Write+0x28c>)
 800088a:	480e      	ldr	r0, [pc, #56]	@ (80008c4 <Fpga_Write+0x294>)
 800088c:	f002 f87c 	bl	8002988 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = DATA5_Pin|DATA6_Pin|DATA7_Pin;
 8000890:	4b0a      	ldr	r3, [pc, #40]	@ (80008bc <Fpga_Write+0x28c>)
 8000892:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8000896:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000898:	4b08      	ldr	r3, [pc, #32]	@ (80008bc <Fpga_Write+0x28c>)
 800089a:	2200      	movs	r2, #0
 800089c:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089e:	4b07      	ldr	r3, [pc, #28]	@ (80008bc <Fpga_Write+0x28c>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008a4:	4b05      	ldr	r3, [pc, #20]	@ (80008bc <Fpga_Write+0x28c>)
 80008a6:	2203      	movs	r2, #3
 80008a8:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008aa:	4904      	ldr	r1, [pc, #16]	@ (80008bc <Fpga_Write+0x28c>)
 80008ac:	4806      	ldr	r0, [pc, #24]	@ (80008c8 <Fpga_Write+0x298>)
 80008ae:	f002 f86b 	bl	8002988 <HAL_GPIO_Init>
}
 80008b2:	bf00      	nop
 80008b4:	3708      	adds	r7, #8
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	2000018c 	.word	0x2000018c
 80008c0:	40010800 	.word	0x40010800
 80008c4:	40011400 	.word	0x40011400
 80008c8:	40010c00 	.word	0x40010c00
 80008cc:	40011800 	.word	0x40011800

080008d0 <Write_Fir_Parameter>:

#define Filter_Order 		255

void Write_Fir_Parameter(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b084      	sub	sp, #16
 80008d4:	af00      	add	r7, sp, #0
    unsigned short i,j,t,d;
	unsigned char init_cn;
	unsigned char sum1,sum2;

    Fpga_Write(7,Filter_Order >> 8);
 80008d6:	2100      	movs	r1, #0
 80008d8:	2007      	movs	r0, #7
 80008da:	f7ff fea9 	bl	8000630 <Fpga_Write>
    Fpga_Write(8,(Filter_Order & 0x00FF));
 80008de:	21ff      	movs	r1, #255	@ 0xff
 80008e0:	2008      	movs	r0, #8
 80008e2:	f7ff fea5 	bl	8000630 <Fpga_Write>

	init_cn = 0;
 80008e6:	2300      	movs	r3, #0
 80008e8:	727b      	strb	r3, [r7, #9]
	while(init_cn < 10)
 80008ea:	e0a1      	b.n	8000a30 <Write_Fir_Parameter+0x160>
	{
		sum1 = 0;
 80008ec:	2300      	movs	r3, #0
 80008ee:	723b      	strb	r3, [r7, #8]
		sum2 = 0;
 80008f0:	2300      	movs	r3, #0
 80008f2:	71fb      	strb	r3, [r7, #7]

		t = 0x80;
 80008f4:	2380      	movs	r3, #128	@ 0x80
 80008f6:	817b      	strh	r3, [r7, #10]
		for(i=0; i<Filter_Order;)
 80008f8:	2300      	movs	r3, #0
 80008fa:	81fb      	strh	r3, [r7, #14]
 80008fc:	e04d      	b.n	800099a <Write_Fir_Parameter+0xca>
		{
			for(j=0; j<32; j++,i++)
 80008fe:	2300      	movs	r3, #0
 8000900:	81bb      	strh	r3, [r7, #12]
 8000902:	e044      	b.n	800098e <Write_Fir_Parameter+0xbe>
			{
				if(i < Filter_Order)
 8000904:	89fb      	ldrh	r3, [r7, #14]
 8000906:	2bfe      	cmp	r3, #254	@ 0xfe
 8000908:	d827      	bhi.n	800095a <Write_Fir_Parameter+0x8a>
				{
					Fpga_Write(0x09,j);
 800090a:	89bb      	ldrh	r3, [r7, #12]
 800090c:	b2db      	uxtb	r3, r3
 800090e:	4619      	mov	r1, r3
 8000910:	2009      	movs	r0, #9
 8000912:	f7ff fe8d 	bl	8000630 <Fpga_Write>
					Fpga_Write(0x0A,FIR_Parameter[i] >> 8);
 8000916:	89fb      	ldrh	r3, [r7, #14]
 8000918:	4a4a      	ldr	r2, [pc, #296]	@ (8000a44 <Write_Fir_Parameter+0x174>)
 800091a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800091e:	121b      	asrs	r3, r3, #8
 8000920:	b2db      	uxtb	r3, r3
 8000922:	4619      	mov	r1, r3
 8000924:	200a      	movs	r0, #10
 8000926:	f7ff fe83 	bl	8000630 <Fpga_Write>
					Fpga_Write(0x0B,FIR_Parameter[i]);
 800092a:	89fb      	ldrh	r3, [r7, #14]
 800092c:	4a45      	ldr	r2, [pc, #276]	@ (8000a44 <Write_Fir_Parameter+0x174>)
 800092e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000932:	b2db      	uxtb	r3, r3
 8000934:	4619      	mov	r1, r3
 8000936:	200b      	movs	r0, #11
 8000938:	f7ff fe7a 	bl	8000630 <Fpga_Write>
					Fpga_Write(0x0C,t);		//Fir_Parameter_Ram_WR(MSB),Fir_Parameter_Ram_sel
 800093c:	897b      	ldrh	r3, [r7, #10]
 800093e:	b2db      	uxtb	r3, r3
 8000940:	4619      	mov	r1, r3
 8000942:	200c      	movs	r0, #12
 8000944:	f7ff fe74 	bl	8000630 <Fpga_Write>
					sum1 += FIR_Parameter[i];
 8000948:	89fb      	ldrh	r3, [r7, #14]
 800094a:	4a3e      	ldr	r2, [pc, #248]	@ (8000a44 <Write_Fir_Parameter+0x174>)
 800094c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000950:	b2da      	uxtb	r2, r3
 8000952:	7a3b      	ldrb	r3, [r7, #8]
 8000954:	4413      	add	r3, r2
 8000956:	723b      	strb	r3, [r7, #8]
 8000958:	e013      	b.n	8000982 <Write_Fir_Parameter+0xb2>
				}
				else
				{
					Fpga_Write(0x09,j);
 800095a:	89bb      	ldrh	r3, [r7, #12]
 800095c:	b2db      	uxtb	r3, r3
 800095e:	4619      	mov	r1, r3
 8000960:	2009      	movs	r0, #9
 8000962:	f7ff fe65 	bl	8000630 <Fpga_Write>
					Fpga_Write(0x0A,0);
 8000966:	2100      	movs	r1, #0
 8000968:	200a      	movs	r0, #10
 800096a:	f7ff fe61 	bl	8000630 <Fpga_Write>
					Fpga_Write(0x0B,0);
 800096e:	2100      	movs	r1, #0
 8000970:	200b      	movs	r0, #11
 8000972:	f7ff fe5d 	bl	8000630 <Fpga_Write>
					Fpga_Write(0x0C,t);		//Fir_Parameter_Ram_WR(MSB),Fir_Parameter_Ram_sel
 8000976:	897b      	ldrh	r3, [r7, #10]
 8000978:	b2db      	uxtb	r3, r3
 800097a:	4619      	mov	r1, r3
 800097c:	200c      	movs	r0, #12
 800097e:	f7ff fe57 	bl	8000630 <Fpga_Write>
			for(j=0; j<32; j++,i++)
 8000982:	89bb      	ldrh	r3, [r7, #12]
 8000984:	3301      	adds	r3, #1
 8000986:	81bb      	strh	r3, [r7, #12]
 8000988:	89fb      	ldrh	r3, [r7, #14]
 800098a:	3301      	adds	r3, #1
 800098c:	81fb      	strh	r3, [r7, #14]
 800098e:	89bb      	ldrh	r3, [r7, #12]
 8000990:	2b1f      	cmp	r3, #31
 8000992:	d9b7      	bls.n	8000904 <Write_Fir_Parameter+0x34>
				}
			}
			t++;
 8000994:	897b      	ldrh	r3, [r7, #10]
 8000996:	3301      	adds	r3, #1
 8000998:	817b      	strh	r3, [r7, #10]
		for(i=0; i<Filter_Order;)
 800099a:	89fb      	ldrh	r3, [r7, #14]
 800099c:	2bfe      	cmp	r3, #254	@ 0xfe
 800099e:	d9ae      	bls.n	80008fe <Write_Fir_Parameter+0x2e>
		}

		t = 0x00;
 80009a0:	2300      	movs	r3, #0
 80009a2:	817b      	strh	r3, [r7, #10]
		for(i=0; i<Filter_Order;)
 80009a4:	2300      	movs	r3, #0
 80009a6:	81fb      	strh	r3, [r7, #14]
 80009a8:	e035      	b.n	8000a16 <Write_Fir_Parameter+0x146>
		{
			for(j=0; j<32; j++,i++)
 80009aa:	2300      	movs	r3, #0
 80009ac:	81bb      	strh	r3, [r7, #12]
 80009ae:	e02c      	b.n	8000a0a <Write_Fir_Parameter+0x13a>
			{
				if(i < Filter_Order)
 80009b0:	89fb      	ldrh	r3, [r7, #14]
 80009b2:	2bfe      	cmp	r3, #254	@ 0xfe
 80009b4:	d821      	bhi.n	80009fa <Write_Fir_Parameter+0x12a>
				{
					Fpga_Write(0x09,j);
 80009b6:	89bb      	ldrh	r3, [r7, #12]
 80009b8:	b2db      	uxtb	r3, r3
 80009ba:	4619      	mov	r1, r3
 80009bc:	2009      	movs	r0, #9
 80009be:	f7ff fe37 	bl	8000630 <Fpga_Write>
					Fpga_Write(0x0C,t);		//Fir_Parameter_Ram_WR(MSB),Fir_Parameter_Ram_sel
 80009c2:	897b      	ldrh	r3, [r7, #10]
 80009c4:	b2db      	uxtb	r3, r3
 80009c6:	4619      	mov	r1, r3
 80009c8:	200c      	movs	r0, #12
 80009ca:	f7ff fe31 	bl	8000630 <Fpga_Write>
					d = Fpga_Read(0x0A);
 80009ce:	200a      	movs	r0, #10
 80009d0:	f7ff fd08 	bl	80003e4 <Fpga_Read>
 80009d4:	4603      	mov	r3, r0
 80009d6:	80bb      	strh	r3, [r7, #4]
					d = d << 8;
 80009d8:	88bb      	ldrh	r3, [r7, #4]
 80009da:	021b      	lsls	r3, r3, #8
 80009dc:	80bb      	strh	r3, [r7, #4]
					d |= Fpga_Read(0x0B);
 80009de:	200b      	movs	r0, #11
 80009e0:	f7ff fd00 	bl	80003e4 <Fpga_Read>
 80009e4:	4603      	mov	r3, r0
 80009e6:	461a      	mov	r2, r3
 80009e8:	88bb      	ldrh	r3, [r7, #4]
 80009ea:	4313      	orrs	r3, r2
 80009ec:	80bb      	strh	r3, [r7, #4]
					sum2 += d;
 80009ee:	88bb      	ldrh	r3, [r7, #4]
 80009f0:	b2da      	uxtb	r2, r3
 80009f2:	79fb      	ldrb	r3, [r7, #7]
 80009f4:	4413      	add	r3, r2
 80009f6:	71fb      	strb	r3, [r7, #7]
 80009f8:	e001      	b.n	80009fe <Write_Fir_Parameter+0x12e>
				}
				else
				{
					d = 0;
 80009fa:	2300      	movs	r3, #0
 80009fc:	80bb      	strh	r3, [r7, #4]
			for(j=0; j<32; j++,i++)
 80009fe:	89bb      	ldrh	r3, [r7, #12]
 8000a00:	3301      	adds	r3, #1
 8000a02:	81bb      	strh	r3, [r7, #12]
 8000a04:	89fb      	ldrh	r3, [r7, #14]
 8000a06:	3301      	adds	r3, #1
 8000a08:	81fb      	strh	r3, [r7, #14]
 8000a0a:	89bb      	ldrh	r3, [r7, #12]
 8000a0c:	2b1f      	cmp	r3, #31
 8000a0e:	d9cf      	bls.n	80009b0 <Write_Fir_Parameter+0xe0>
				}
			}
			t++;
 8000a10:	897b      	ldrh	r3, [r7, #10]
 8000a12:	3301      	adds	r3, #1
 8000a14:	817b      	strh	r3, [r7, #10]
		for(i=0; i<Filter_Order;)
 8000a16:	89fb      	ldrh	r3, [r7, #14]
 8000a18:	2bfe      	cmp	r3, #254	@ 0xfe
 8000a1a:	d9c6      	bls.n	80009aa <Write_Fir_Parameter+0xda>
		}

		if(sum1 != sum2)
 8000a1c:	7a3a      	ldrb	r2, [r7, #8]
 8000a1e:	79fb      	ldrb	r3, [r7, #7]
 8000a20:	429a      	cmp	r2, r3
 8000a22:	d003      	beq.n	8000a2c <Write_Fir_Parameter+0x15c>
			init_cn++;
 8000a24:	7a7b      	ldrb	r3, [r7, #9]
 8000a26:	3301      	adds	r3, #1
 8000a28:	727b      	strb	r3, [r7, #9]
 8000a2a:	e001      	b.n	8000a30 <Write_Fir_Parameter+0x160>
		else
			init_cn = 10;
 8000a2c:	230a      	movs	r3, #10
 8000a2e:	727b      	strb	r3, [r7, #9]
	while(init_cn < 10)
 8000a30:	7a7b      	ldrb	r3, [r7, #9]
 8000a32:	2b09      	cmp	r3, #9
 8000a34:	f67f af5a 	bls.w	80008ec <Write_Fir_Parameter+0x1c>
//	ComSendChar(COM1,(sum2 >> 8));
//	ComSendChar(COM1,sum2);
//
//	ComSendChar(COM1,init_cn);

}
 8000a38:	bf00      	nop
 8000a3a:	bf00      	nop
 8000a3c:	3710      	adds	r7, #16
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	080052ac 	.word	0x080052ac

08000a48 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b08a      	sub	sp, #40	@ 0x28
 8000a4c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a4e:	f107 0318 	add.w	r3, r7, #24
 8000a52:	2200      	movs	r2, #0
 8000a54:	601a      	str	r2, [r3, #0]
 8000a56:	605a      	str	r2, [r3, #4]
 8000a58:	609a      	str	r2, [r3, #8]
 8000a5a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a5c:	4b54      	ldr	r3, [pc, #336]	@ (8000bb0 <MX_GPIO_Init+0x168>)
 8000a5e:	699b      	ldr	r3, [r3, #24]
 8000a60:	4a53      	ldr	r2, [pc, #332]	@ (8000bb0 <MX_GPIO_Init+0x168>)
 8000a62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a66:	6193      	str	r3, [r2, #24]
 8000a68:	4b51      	ldr	r3, [pc, #324]	@ (8000bb0 <MX_GPIO_Init+0x168>)
 8000a6a:	699b      	ldr	r3, [r3, #24]
 8000a6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a70:	617b      	str	r3, [r7, #20]
 8000a72:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a74:	4b4e      	ldr	r3, [pc, #312]	@ (8000bb0 <MX_GPIO_Init+0x168>)
 8000a76:	699b      	ldr	r3, [r3, #24]
 8000a78:	4a4d      	ldr	r2, [pc, #308]	@ (8000bb0 <MX_GPIO_Init+0x168>)
 8000a7a:	f043 0304 	orr.w	r3, r3, #4
 8000a7e:	6193      	str	r3, [r2, #24]
 8000a80:	4b4b      	ldr	r3, [pc, #300]	@ (8000bb0 <MX_GPIO_Init+0x168>)
 8000a82:	699b      	ldr	r3, [r3, #24]
 8000a84:	f003 0304 	and.w	r3, r3, #4
 8000a88:	613b      	str	r3, [r7, #16]
 8000a8a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a8c:	4b48      	ldr	r3, [pc, #288]	@ (8000bb0 <MX_GPIO_Init+0x168>)
 8000a8e:	699b      	ldr	r3, [r3, #24]
 8000a90:	4a47      	ldr	r2, [pc, #284]	@ (8000bb0 <MX_GPIO_Init+0x168>)
 8000a92:	f043 0310 	orr.w	r3, r3, #16
 8000a96:	6193      	str	r3, [r2, #24]
 8000a98:	4b45      	ldr	r3, [pc, #276]	@ (8000bb0 <MX_GPIO_Init+0x168>)
 8000a9a:	699b      	ldr	r3, [r3, #24]
 8000a9c:	f003 0310 	and.w	r3, r3, #16
 8000aa0:	60fb      	str	r3, [r7, #12]
 8000aa2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aa4:	4b42      	ldr	r3, [pc, #264]	@ (8000bb0 <MX_GPIO_Init+0x168>)
 8000aa6:	699b      	ldr	r3, [r3, #24]
 8000aa8:	4a41      	ldr	r2, [pc, #260]	@ (8000bb0 <MX_GPIO_Init+0x168>)
 8000aaa:	f043 0320 	orr.w	r3, r3, #32
 8000aae:	6193      	str	r3, [r2, #24]
 8000ab0:	4b3f      	ldr	r3, [pc, #252]	@ (8000bb0 <MX_GPIO_Init+0x168>)
 8000ab2:	699b      	ldr	r3, [r3, #24]
 8000ab4:	f003 0320 	and.w	r3, r3, #32
 8000ab8:	60bb      	str	r3, [r7, #8]
 8000aba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000abc:	4b3c      	ldr	r3, [pc, #240]	@ (8000bb0 <MX_GPIO_Init+0x168>)
 8000abe:	699b      	ldr	r3, [r3, #24]
 8000ac0:	4a3b      	ldr	r2, [pc, #236]	@ (8000bb0 <MX_GPIO_Init+0x168>)
 8000ac2:	f043 0308 	orr.w	r3, r3, #8
 8000ac6:	6193      	str	r3, [r2, #24]
 8000ac8:	4b39      	ldr	r3, [pc, #228]	@ (8000bb0 <MX_GPIO_Init+0x168>)
 8000aca:	699b      	ldr	r3, [r3, #24]
 8000acc:	f003 0308 	and.w	r3, r3, #8
 8000ad0:	607b      	str	r3, [r7, #4]
 8000ad2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ADDR0_Pin|ADDR1_Pin|ADDR2_Pin|ADDR3_Pin
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	213d      	movs	r1, #61	@ 0x3d
 8000ad8:	4836      	ldr	r0, [pc, #216]	@ (8000bb4 <MX_GPIO_Init+0x16c>)
 8000ada:	f002 f900 	bl	8002cde <HAL_GPIO_WritePin>
                          |MCU_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DATA1_Pin|MCU_WR_Pin|DATA0_Pin, GPIO_PIN_RESET);
 8000ade:	2200      	movs	r2, #0
 8000ae0:	f641 0104 	movw	r1, #6148	@ 0x1804
 8000ae4:	4834      	ldr	r0, [pc, #208]	@ (8000bb8 <MX_GPIO_Init+0x170>)
 8000ae6:	f002 f8fa 	bl	8002cde <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DATA2_GPIO_Port, DATA2_Pin, GPIO_PIN_RESET);
 8000aea:	2200      	movs	r2, #0
 8000aec:	2108      	movs	r1, #8
 8000aee:	4832      	ldr	r0, [pc, #200]	@ (8000bb8 <MX_GPIO_Init+0x170>)
 8000af0:	f002 f8f5 	bl	8002cde <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, DATA3_Pin|DATA4_Pin, GPIO_PIN_RESET);
 8000af4:	2200      	movs	r2, #0
 8000af6:	2148      	movs	r1, #72	@ 0x48
 8000af8:	4830      	ldr	r0, [pc, #192]	@ (8000bbc <MX_GPIO_Init+0x174>)
 8000afa:	f002 f8f0 	bl	8002cde <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DATA5_Pin|DATA6_Pin|DATA7_Pin, GPIO_PIN_RESET);
 8000afe:	2200      	movs	r2, #0
 8000b00:	f44f 7148 	mov.w	r1, #800	@ 0x320
 8000b04:	482e      	ldr	r0, [pc, #184]	@ (8000bc0 <MX_GPIO_Init+0x178>)
 8000b06:	f002 f8ea 	bl	8002cde <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
	GPIO_InitStruct.Pin = ADDR0_Pin|ADDR1_Pin|ADDR2_Pin|ADDR3_Pin
 8000b0a:	233d      	movs	r3, #61	@ 0x3d
 8000b0c:	61bb      	str	r3, [r7, #24]
						  |MCU_CS_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b12:	2300      	movs	r3, #0
 8000b14:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b16:	2303      	movs	r3, #3
 8000b18:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b1a:	f107 0318 	add.w	r3, r7, #24
 8000b1e:	4619      	mov	r1, r3
 8000b20:	4824      	ldr	r0, [pc, #144]	@ (8000bb4 <MX_GPIO_Init+0x16c>)
 8000b22:	f001 ff31 	bl	8002988 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = MCU_WR_Pin;
 8000b26:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000b2a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b30:	2300      	movs	r3, #0
 8000b32:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b34:	2303      	movs	r3, #3
 8000b36:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b38:	f107 0318 	add.w	r3, r7, #24
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	481e      	ldr	r0, [pc, #120]	@ (8000bb8 <MX_GPIO_Init+0x170>)
 8000b40:	f001 ff22 	bl	8002988 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = DATA1_Pin|MCU_WR_Pin|DATA0_Pin|DATA2_Pin;
 8000b44:	f641 030c 	movw	r3, #6156	@ 0x180c
 8000b48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b52:	2303      	movs	r3, #3
 8000b54:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b56:	f107 0318 	add.w	r3, r7, #24
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	4816      	ldr	r0, [pc, #88]	@ (8000bb8 <MX_GPIO_Init+0x170>)
 8000b5e:	f001 ff13 	bl	8002988 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = DATA3_Pin|DATA4_Pin;
 8000b62:	2348      	movs	r3, #72	@ 0x48
 8000b64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b66:	2301      	movs	r3, #1
 8000b68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b6e:	2303      	movs	r3, #3
 8000b70:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b72:	f107 0318 	add.w	r3, r7, #24
 8000b76:	4619      	mov	r1, r3
 8000b78:	4810      	ldr	r0, [pc, #64]	@ (8000bbc <MX_GPIO_Init+0x174>)
 8000b7a:	f001 ff05 	bl	8002988 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DATA5_Pin|DATA6_Pin|DATA7_Pin|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8000b7e:	f247 3320 	movw	r3, #29472	@ 0x7320
 8000b82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b84:	2301      	movs	r3, #1
 8000b86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b8c:	2303      	movs	r3, #3
 8000b8e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b90:	f107 0318 	add.w	r3, r7, #24
 8000b94:	4619      	mov	r1, r3
 8000b96:	480a      	ldr	r0, [pc, #40]	@ (8000bc0 <MX_GPIO_Init+0x178>)
 8000b98:	f001 fef6 	bl	8002988 <HAL_GPIO_Init>


  HAL_GPIO_WritePin(GPIOE,MCU_CS_Pin,GPIO_PIN_SET);//fpga片选拉高
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	2101      	movs	r1, #1
 8000ba0:	4804      	ldr	r0, [pc, #16]	@ (8000bb4 <MX_GPIO_Init+0x16c>)
 8000ba2:	f002 f89c 	bl	8002cde <HAL_GPIO_WritePin>

}
 8000ba6:	bf00      	nop
 8000ba8:	3728      	adds	r7, #40	@ 0x28
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	40021000 	.word	0x40021000
 8000bb4:	40011800 	.word	0x40011800
 8000bb8:	40010800 	.word	0x40010800
 8000bbc:	40011400 	.word	0x40011400
 8000bc0:	40010c00 	.word	0x40010c00

08000bc4 <init>:
 *      Author: 16194
 */
#include "main.h"

void init (void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
	SystemClock_Config();			//时钟配置
 8000bc8:	f000 f816 	bl	8000bf8 <SystemClock_Config>

	HAL_Init();						//HAL库初始化
 8000bcc:	f001 fc2a 	bl	8002424 <HAL_Init>
	MX_GPIO_Init();					//GPIO初始化
 8000bd0:	f7ff ff3a 	bl	8000a48 <MX_GPIO_Init>
	TIM_init();						//定时器初始化
 8000bd4:	f000 fa74 	bl	80010c0 <TIM_init>
	usart_init();					//串口初始化
 8000bd8:	f000 fb20 	bl	800121c <usart_init>
	FPGA_init();					//FPGA初始化
 8000bdc:	f7ff fbd6 	bl	800038c <FPGA_init>
	MX_IWDG_Init();					//独立看门狗初始化
 8000be0:	f000 f850 	bl	8000c84 <MX_IWDG_Init>

	SEGGER_RTT_Init();				//SEGGERRTT初始化
 8000be4:	f001 fc18 	bl	8002418 <SEGGER_RTT_Init>

	PRINT_LOG("initover\n\r");
 8000be8:	4802      	ldr	r0, [pc, #8]	@ (8000bf4 <init+0x30>)
 8000bea:	f000 f8ec 	bl	8000dc6 <PRINT_LOG>
}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	08005218 	.word	0x08005218

08000bf8 <SystemClock_Config>:

void SystemClock_Config(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b090      	sub	sp, #64	@ 0x40
 8000bfc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bfe:	f107 0318 	add.w	r3, r7, #24
 8000c02:	2228      	movs	r2, #40	@ 0x28
 8000c04:	2100      	movs	r1, #0
 8000c06:	4618      	mov	r0, r3
 8000c08:	f003 fe6a 	bl	80048e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c0c:	1d3b      	adds	r3, r7, #4
 8000c0e:	2200      	movs	r2, #0
 8000c10:	601a      	str	r2, [r3, #0]
 8000c12:	605a      	str	r2, [r3, #4]
 8000c14:	609a      	str	r2, [r3, #8]
 8000c16:	60da      	str	r2, [r3, #12]
 8000c18:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c1e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c22:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000c24:	2300      	movs	r3, #0
 8000c26:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c28:	2301      	movs	r3, #1
 8000c2a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c2c:	2302      	movs	r3, #2
 8000c2e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c30:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c34:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000c36:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000c3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c3c:	f107 0318 	add.w	r3, r7, #24
 8000c40:	4618      	mov	r0, r3
 8000c42:	f002 f8d1 	bl	8002de8 <HAL_RCC_OscConfig>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000c4c:	f000 f8f6 	bl	8000e3c <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c50:	230f      	movs	r3, #15
 8000c52:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c54:	2302      	movs	r3, #2
 8000c56:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c5c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c60:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c62:	2300      	movs	r3, #0
 8000c64:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c66:	1d3b      	adds	r3, r7, #4
 8000c68:	2102      	movs	r1, #2
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f002 fb3e 	bl	80032ec <HAL_RCC_ClockConfig>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000c76:	f000 f8e1 	bl	8000e3c <Error_Handler>
  }
}
 8000c7a:	bf00      	nop
 8000c7c:	3740      	adds	r7, #64	@ 0x40
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
	...

08000c84 <MX_IWDG_Init>:

IWDG_HandleTypeDef iwdg;
void MX_IWDG_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
	iwdg.Instance = IWDG;
 8000c88:	4b09      	ldr	r3, [pc, #36]	@ (8000cb0 <MX_IWDG_Init+0x2c>)
 8000c8a:	4a0a      	ldr	r2, [pc, #40]	@ (8000cb4 <MX_IWDG_Init+0x30>)
 8000c8c:	601a      	str	r2, [r3, #0]
	iwdg.Init.Prescaler = IWDG_PRESCALER_4;
 8000c8e:	4b08      	ldr	r3, [pc, #32]	@ (8000cb0 <MX_IWDG_Init+0x2c>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	605a      	str	r2, [r3, #4]
	iwdg.Init.Reload = 5000;
 8000c94:	4b06      	ldr	r3, [pc, #24]	@ (8000cb0 <MX_IWDG_Init+0x2c>)
 8000c96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000c9a:	609a      	str	r2, [r3, #8]
	if(HAL_IWDG_Init(&iwdg) != HAL_OK)
 8000c9c:	4804      	ldr	r0, [pc, #16]	@ (8000cb0 <MX_IWDG_Init+0x2c>)
 8000c9e:	f002 f84f 	bl	8002d40 <HAL_IWDG_Init>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <MX_IWDG_Init+0x28>
	{
		Error_Handler();
 8000ca8:	f000 f8c8 	bl	8000e3c <Error_Handler>
	}
}
 8000cac:	bf00      	nop
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	200001a0 	.word	0x200001a0
 8000cb4:	40003000 	.word	0x40003000

08000cb8 <IWDG_FEED_DOG>:

void IWDG_FEED_DOG(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
	HAL_IWDG_Refresh(&iwdg);	//410ms内清掉看门狗
 8000cbc:	4802      	ldr	r0, [pc, #8]	@ (8000cc8 <IWDG_FEED_DOG+0x10>)
 8000cbe:	f002 f883 	bl	8002dc8 <HAL_IWDG_Refresh>
}
 8000cc2:	bf00      	nop
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	200001a0 	.word	0x200001a0

08000ccc <Checksum_Reverse>:

/****************************************************************/
/*-----------------ETH下发数据校验和计算函数------------------------*/
unsigned short Checksum_Reverse(unsigned char * p,unsigned short _len)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b0b6      	sub	sp, #216	@ 0xd8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
 8000cd4:	460b      	mov	r3, r1
 8000cd6:	807b      	strh	r3, [r7, #2]
	uint16_t sum = 0;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	f8a7 30d6 	strh.w	r3, [r7, #214]	@ 0xd6
	uint16_t i,y;
	uint16_t Buf[100] = {0};
 8000cde:	f107 0308 	add.w	r3, r7, #8
 8000ce2:	22c8      	movs	r2, #200	@ 0xc8
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f003 fdfa 	bl	80048e0 <memset>
	for(i=0;i<(_len/2);i++)
 8000cec:	2300      	movs	r3, #0
 8000cee:	f8a7 30d4 	strh.w	r3, [r7, #212]	@ 0xd4
 8000cf2:	e01e      	b.n	8000d32 <Checksum_Reverse+0x66>
	{
		Buf[i] = (p[2*i+1] << 8) + p[2*i];
 8000cf4:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	@ 0xd4
 8000cf8:	005b      	lsls	r3, r3, #1
 8000cfa:	3301      	adds	r3, #1
 8000cfc:	687a      	ldr	r2, [r7, #4]
 8000cfe:	4413      	add	r3, r2
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	021b      	lsls	r3, r3, #8
 8000d04:	b29a      	uxth	r2, r3
 8000d06:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	@ 0xd4
 8000d0a:	005b      	lsls	r3, r3, #1
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	440b      	add	r3, r1
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	4619      	mov	r1, r3
 8000d16:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	@ 0xd4
 8000d1a:	440a      	add	r2, r1
 8000d1c:	b292      	uxth	r2, r2
 8000d1e:	005b      	lsls	r3, r3, #1
 8000d20:	33d8      	adds	r3, #216	@ 0xd8
 8000d22:	443b      	add	r3, r7
 8000d24:	f823 2cd0 	strh.w	r2, [r3, #-208]
	for(i=0;i<(_len/2);i++)
 8000d28:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	@ 0xd4
 8000d2c:	3301      	adds	r3, #1
 8000d2e:	f8a7 30d4 	strh.w	r3, [r7, #212]	@ 0xd4
 8000d32:	887b      	ldrh	r3, [r7, #2]
 8000d34:	085b      	lsrs	r3, r3, #1
 8000d36:	b29b      	uxth	r3, r3
 8000d38:	f8b7 20d4 	ldrh.w	r2, [r7, #212]	@ 0xd4
 8000d3c:	429a      	cmp	r2, r3
 8000d3e:	d3d9      	bcc.n	8000cf4 <Checksum_Reverse+0x28>
	}
	for(y=0;y<(_len/2);y++)
 8000d40:	2300      	movs	r3, #0
 8000d42:	f8a7 30d2 	strh.w	r3, [r7, #210]	@ 0xd2
 8000d46:	e010      	b.n	8000d6a <Checksum_Reverse+0x9e>
	{
		sum += Buf[y];
 8000d48:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	@ 0xd2
 8000d4c:	005b      	lsls	r3, r3, #1
 8000d4e:	33d8      	adds	r3, #216	@ 0xd8
 8000d50:	443b      	add	r3, r7
 8000d52:	f833 2cd0 	ldrh.w	r2, [r3, #-208]
 8000d56:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	@ 0xd6
 8000d5a:	4413      	add	r3, r2
 8000d5c:	f8a7 30d6 	strh.w	r3, [r7, #214]	@ 0xd6
	for(y=0;y<(_len/2);y++)
 8000d60:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	@ 0xd2
 8000d64:	3301      	adds	r3, #1
 8000d66:	f8a7 30d2 	strh.w	r3, [r7, #210]	@ 0xd2
 8000d6a:	887b      	ldrh	r3, [r7, #2]
 8000d6c:	085b      	lsrs	r3, r3, #1
 8000d6e:	b29b      	uxth	r3, r3
 8000d70:	f8b7 20d2 	ldrh.w	r2, [r7, #210]	@ 0xd2
 8000d74:	429a      	cmp	r2, r3
 8000d76:	d3e7      	bcc.n	8000d48 <Checksum_Reverse+0x7c>
	}
	return sum;
 8000d78:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	@ 0xd6
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	37d8      	adds	r7, #216	@ 0xd8
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}

08000d84 <Checksum_sum>:

/*---------------------------校验和计算函数------------------------*/
unsigned short Checksum_sum(unsigned char * p,unsigned short _len)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b085      	sub	sp, #20
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
 8000d8c:	460b      	mov	r3, r1
 8000d8e:	807b      	strh	r3, [r7, #2]
	uint16_t sum = 0;
 8000d90:	2300      	movs	r3, #0
 8000d92:	81fb      	strh	r3, [r7, #14]
	for(unsigned char i=0;i<_len;i++)
 8000d94:	2300      	movs	r3, #0
 8000d96:	737b      	strb	r3, [r7, #13]
 8000d98:	e00a      	b.n	8000db0 <Checksum_sum+0x2c>
	{
		sum += p[i];
 8000d9a:	7b7b      	ldrb	r3, [r7, #13]
 8000d9c:	687a      	ldr	r2, [r7, #4]
 8000d9e:	4413      	add	r3, r2
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	461a      	mov	r2, r3
 8000da4:	89fb      	ldrh	r3, [r7, #14]
 8000da6:	4413      	add	r3, r2
 8000da8:	81fb      	strh	r3, [r7, #14]
	for(unsigned char i=0;i<_len;i++)
 8000daa:	7b7b      	ldrb	r3, [r7, #13]
 8000dac:	3301      	adds	r3, #1
 8000dae:	737b      	strb	r3, [r7, #13]
 8000db0:	7b7b      	ldrb	r3, [r7, #13]
 8000db2:	b29b      	uxth	r3, r3
 8000db4:	887a      	ldrh	r2, [r7, #2]
 8000db6:	429a      	cmp	r2, r3
 8000db8:	d8ef      	bhi.n	8000d9a <Checksum_sum+0x16>
	}
	return sum;
 8000dba:	89fb      	ldrh	r3, [r7, #14]
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	3714      	adds	r7, #20
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bc80      	pop	{r7}
 8000dc4:	4770      	bx	lr

08000dc6 <PRINT_LOG>:

int PRINT_LOG(const char *fmt,...)
{	int n;
 8000dc6:	b40f      	push	{r0, r1, r2, r3}
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b0c2      	sub	sp, #264	@ 0x108
 8000dcc:	af00      	add	r7, sp, #0
	char aBuffer[256];
	va_list args;
	va_start(args,fmt);
 8000dce:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 8000dd2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000dd6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000dda:	601a      	str	r2, [r3, #0]
	n = vsnprintf(aBuffer, sizeof(aBuffer), fmt, args);
 8000ddc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000de0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000de4:	1d38      	adds	r0, r7, #4
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8000dec:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000df0:	f003 fd68 	bl	80048c4 <vsniprintf>
 8000df4:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
	if (n > (int)sizeof(aBuffer))
 8000df8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8000dfc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000e00:	dd07      	ble.n	8000e12 <PRINT_LOG+0x4c>
	{
		SEGGER_RTT_Write(0, aBuffer, sizeof(aBuffer));
 8000e02:	1d3b      	adds	r3, r7, #4
 8000e04:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000e08:	4619      	mov	r1, r3
 8000e0a:	2000      	movs	r0, #0
 8000e0c:	f001 fae0 	bl	80023d0 <SEGGER_RTT_Write>
 8000e10:	e00a      	b.n	8000e28 <PRINT_LOG+0x62>
	}
	else if(n > 0)
 8000e12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	dd06      	ble.n	8000e28 <PRINT_LOG+0x62>
	{
		SEGGER_RTT_Write(0, aBuffer, n);
 8000e1a:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 8000e1e:	1d3b      	adds	r3, r7, #4
 8000e20:	4619      	mov	r1, r3
 8000e22:	2000      	movs	r0, #0
 8000e24:	f001 fad4 	bl	80023d0 <SEGGER_RTT_Write>
	}
	va_end(args);
	return n;
 8000e28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8000e32:	46bd      	mov	sp, r7
 8000e34:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000e38:	b004      	add	sp, #16
 8000e3a:	4770      	bx	lr

08000e3c <Error_Handler>:

void Error_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e40:	b672      	cpsid	i
}
 8000e42:	bf00      	nop
  __disable_irq();
  while (1)
 8000e44:	bf00      	nop
 8000e46:	e7fd      	b.n	8000e44 <Error_Handler+0x8>

08000e48 <ETH_CMDPOLL>:
unsigned char CONTRALCMDFLAG = 0;
unsigned short Sertableactlen;
unsigned short Contralcmdlen;

void ETH_CMDPOLL(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
	if(ETHdataoverflag == 1)
 8000e4e:	4b56      	ldr	r3, [pc, #344]	@ (8000fa8 <ETH_CMDPOLL+0x160>)
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	2b01      	cmp	r3, #1
 8000e54:	f040 808b 	bne.w	8000f6e <ETH_CMDPOLL+0x126>
	{
		Resetstate(ETHCMD);
 8000e58:	2001      	movs	r0, #1
 8000e5a:	f001 f8e5 	bl	8002028 <Resetstate>

		switch(Workmode)
 8000e5e:	4b53      	ldr	r3, [pc, #332]	@ (8000fac <ETH_CMDPOLL+0x164>)
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	2b04      	cmp	r3, #4
 8000e64:	d078      	beq.n	8000f58 <ETH_CMDPOLL+0x110>
 8000e66:	2b04      	cmp	r3, #4
 8000e68:	f300 8081 	bgt.w	8000f6e <ETH_CMDPOLL+0x126>
 8000e6c:	2b01      	cmp	r3, #1
 8000e6e:	d002      	beq.n	8000e76 <ETH_CMDPOLL+0x2e>
 8000e70:	2b02      	cmp	r3, #2
 8000e72:	d053      	beq.n	8000f1c <ETH_CMDPOLL+0xd4>
 8000e74:	e07b      	b.n	8000f6e <ETH_CMDPOLL+0x126>
		{
			case SERVICETABLE:								//服务表激活
					ToolID = ETHbodybuf[0];
 8000e76:	4b4e      	ldr	r3, [pc, #312]	@ (8000fb0 <ETH_CMDPOLL+0x168>)
 8000e78:	781a      	ldrb	r2, [r3, #0]
 8000e7a:	4b4e      	ldr	r3, [pc, #312]	@ (8000fb4 <ETH_CMDPOLL+0x16c>)
 8000e7c:	701a      	strb	r2, [r3, #0]
					Subsetnumber = ETHbodybuf[1];
 8000e7e:	4b4c      	ldr	r3, [pc, #304]	@ (8000fb0 <ETH_CMDPOLL+0x168>)
 8000e80:	785a      	ldrb	r2, [r3, #1]
 8000e82:	4b4d      	ldr	r3, [pc, #308]	@ (8000fb8 <ETH_CMDPOLL+0x170>)
 8000e84:	701a      	strb	r2, [r3, #0]
					Tool_Datalen = (ETHbodybuf[2] << 8) + ETHbodybuf[3];
 8000e86:	4b4a      	ldr	r3, [pc, #296]	@ (8000fb0 <ETH_CMDPOLL+0x168>)
 8000e88:	789b      	ldrb	r3, [r3, #2]
 8000e8a:	021b      	lsls	r3, r3, #8
 8000e8c:	b29b      	uxth	r3, r3
 8000e8e:	4a48      	ldr	r2, [pc, #288]	@ (8000fb0 <ETH_CMDPOLL+0x168>)
 8000e90:	78d2      	ldrb	r2, [r2, #3]
 8000e92:	4413      	add	r3, r2
 8000e94:	b29a      	uxth	r2, r3
 8000e96:	4b49      	ldr	r3, [pc, #292]	@ (8000fbc <ETH_CMDPOLL+0x174>)
 8000e98:	801a      	strh	r2, [r3, #0]
					Sampleperiod = (ETHbodybuf[4] << 8) + ETHbodybuf[5];
 8000e9a:	4b45      	ldr	r3, [pc, #276]	@ (8000fb0 <ETH_CMDPOLL+0x168>)
 8000e9c:	791b      	ldrb	r3, [r3, #4]
 8000e9e:	021b      	lsls	r3, r3, #8
 8000ea0:	b29b      	uxth	r3, r3
 8000ea2:	4a43      	ldr	r2, [pc, #268]	@ (8000fb0 <ETH_CMDPOLL+0x168>)
 8000ea4:	7952      	ldrb	r2, [r2, #5]
 8000ea6:	4413      	add	r3, r2
 8000ea8:	b29a      	uxth	r2, r3
 8000eaa:	4b45      	ldr	r3, [pc, #276]	@ (8000fc0 <ETH_CMDPOLL+0x178>)
 8000eac:	801a      	strh	r2, [r3, #0]
					Delaytime = (ETHbodybuf[6] << 8) + ETHbodybuf[7];
 8000eae:	4b40      	ldr	r3, [pc, #256]	@ (8000fb0 <ETH_CMDPOLL+0x168>)
 8000eb0:	799b      	ldrb	r3, [r3, #6]
 8000eb2:	021b      	lsls	r3, r3, #8
 8000eb4:	b29b      	uxth	r3, r3
 8000eb6:	4a3e      	ldr	r2, [pc, #248]	@ (8000fb0 <ETH_CMDPOLL+0x168>)
 8000eb8:	79d2      	ldrb	r2, [r2, #7]
 8000eba:	4413      	add	r3, r2
 8000ebc:	b29a      	uxth	r2, r3
 8000ebe:	4b41      	ldr	r3, [pc, #260]	@ (8000fc4 <ETH_CMDPOLL+0x17c>)
 8000ec0:	801a      	strh	r2, [r3, #0]
					Teleset = (ETHbodybuf[8] << 8) + ETHbodybuf[9];
 8000ec2:	4b3b      	ldr	r3, [pc, #236]	@ (8000fb0 <ETH_CMDPOLL+0x168>)
 8000ec4:	7a5a      	ldrb	r2, [r3, #9]
 8000ec6:	4b40      	ldr	r3, [pc, #256]	@ (8000fc8 <ETH_CMDPOLL+0x180>)
 8000ec8:	701a      	strb	r2, [r3, #0]
					Data_reserve = (ETHbodybuf[10] << 8) + ETHbodybuf[11];		//各参数暂存
 8000eca:	4b39      	ldr	r3, [pc, #228]	@ (8000fb0 <ETH_CMDPOLL+0x168>)
 8000ecc:	7ada      	ldrb	r2, [r3, #11]
 8000ece:	4b3f      	ldr	r3, [pc, #252]	@ (8000fcc <ETH_CMDPOLL+0x184>)
 8000ed0:	701a      	strb	r2, [r3, #0]

					PRINT_LOG("CMD is SERVICETABLE\n\r");
 8000ed2:	483f      	ldr	r0, [pc, #252]	@ (8000fd0 <ETH_CMDPOLL+0x188>)
 8000ed4:	f7ff ff77 	bl	8000dc6 <PRINT_LOG>
					Sertableactlen = ETHdatalen;
 8000ed8:	4b3e      	ldr	r3, [pc, #248]	@ (8000fd4 <ETH_CMDPOLL+0x18c>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	461a      	mov	r2, r3
 8000ede:	4b3e      	ldr	r3, [pc, #248]	@ (8000fd8 <ETH_CMDPOLL+0x190>)
 8000ee0:	801a      	strh	r2, [r3, #0]

					for(unsigned char i=0;i<Sertableactlen;i++)
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	71fb      	strb	r3, [r7, #7]
 8000ee6:	e008      	b.n	8000efa <ETH_CMDPOLL+0xb2>
					{
						Sertableactbuf[i] = ETHbodybuf[i];
 8000ee8:	79fa      	ldrb	r2, [r7, #7]
 8000eea:	79fb      	ldrb	r3, [r7, #7]
 8000eec:	4930      	ldr	r1, [pc, #192]	@ (8000fb0 <ETH_CMDPOLL+0x168>)
 8000eee:	5c89      	ldrb	r1, [r1, r2]
 8000ef0:	4a3a      	ldr	r2, [pc, #232]	@ (8000fdc <ETH_CMDPOLL+0x194>)
 8000ef2:	54d1      	strb	r1, [r2, r3]
					for(unsigned char i=0;i<Sertableactlen;i++)
 8000ef4:	79fb      	ldrb	r3, [r7, #7]
 8000ef6:	3301      	adds	r3, #1
 8000ef8:	71fb      	strb	r3, [r7, #7]
 8000efa:	79fb      	ldrb	r3, [r7, #7]
 8000efc:	b29a      	uxth	r2, r3
 8000efe:	4b36      	ldr	r3, [pc, #216]	@ (8000fd8 <ETH_CMDPOLL+0x190>)
 8000f00:	881b      	ldrh	r3, [r3, #0]
 8000f02:	429a      	cmp	r2, r3
 8000f04:	d3f0      	bcc.n	8000ee8 <ETH_CMDPOLL+0xa0>
					}

					Sertableactflag = 1;
 8000f06:	4b36      	ldr	r3, [pc, #216]	@ (8000fe0 <ETH_CMDPOLL+0x198>)
 8000f08:	2201      	movs	r2, #1
 8000f0a:	701a      	strb	r2, [r3, #0]
					isdowndcmdreport = Sampleperiod;
 8000f0c:	4b2c      	ldr	r3, [pc, #176]	@ (8000fc0 <ETH_CMDPOLL+0x178>)
 8000f0e:	881a      	ldrh	r2, [r3, #0]
 8000f10:	4b34      	ldr	r3, [pc, #208]	@ (8000fe4 <ETH_CMDPOLL+0x19c>)
 8000f12:	801a      	strh	r2, [r3, #0]
					Downdatatimeoutnum = 0;
 8000f14:	4b34      	ldr	r3, [pc, #208]	@ (8000fe8 <ETH_CMDPOLL+0x1a0>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	801a      	strh	r2, [r3, #0]
			break;
 8000f1a:	e028      	b.n	8000f6e <ETH_CMDPOLL+0x126>
			case CONTRALCMD:								//控制命令

					Contralcmdlen = ETHdatalen;
 8000f1c:	4b2d      	ldr	r3, [pc, #180]	@ (8000fd4 <ETH_CMDPOLL+0x18c>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	461a      	mov	r2, r3
 8000f22:	4b32      	ldr	r3, [pc, #200]	@ (8000fec <ETH_CMDPOLL+0x1a4>)
 8000f24:	801a      	strh	r2, [r3, #0]
					PRINT_LOG("CMD is CONTRALCMD\n\r");
 8000f26:	4832      	ldr	r0, [pc, #200]	@ (8000ff0 <ETH_CMDPOLL+0x1a8>)
 8000f28:	f7ff ff4d 	bl	8000dc6 <PRINT_LOG>

					for(unsigned char i=0;i<Contralcmdlen;i++)
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	71bb      	strb	r3, [r7, #6]
 8000f30:	e008      	b.n	8000f44 <ETH_CMDPOLL+0xfc>
					{
						Contralcmdbuf[i] = ETHbodybuf[i];
 8000f32:	79ba      	ldrb	r2, [r7, #6]
 8000f34:	79bb      	ldrb	r3, [r7, #6]
 8000f36:	491e      	ldr	r1, [pc, #120]	@ (8000fb0 <ETH_CMDPOLL+0x168>)
 8000f38:	5c89      	ldrb	r1, [r1, r2]
 8000f3a:	4a2e      	ldr	r2, [pc, #184]	@ (8000ff4 <ETH_CMDPOLL+0x1ac>)
 8000f3c:	54d1      	strb	r1, [r2, r3]
					for(unsigned char i=0;i<Contralcmdlen;i++)
 8000f3e:	79bb      	ldrb	r3, [r7, #6]
 8000f40:	3301      	adds	r3, #1
 8000f42:	71bb      	strb	r3, [r7, #6]
 8000f44:	79bb      	ldrb	r3, [r7, #6]
 8000f46:	b29a      	uxth	r2, r3
 8000f48:	4b28      	ldr	r3, [pc, #160]	@ (8000fec <ETH_CMDPOLL+0x1a4>)
 8000f4a:	881b      	ldrh	r3, [r3, #0]
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	d3f0      	bcc.n	8000f32 <ETH_CMDPOLL+0xea>
					}

					CONTRALCMDFLAG = 1;
 8000f50:	4b29      	ldr	r3, [pc, #164]	@ (8000ff8 <ETH_CMDPOLL+0x1b0>)
 8000f52:	2201      	movs	r2, #1
 8000f54:	701a      	strb	r2, [r3, #0]
			break;
 8000f56:	e00a      	b.n	8000f6e <ETH_CMDPOLL+0x126>
			case DEACTIVE:									//服务表反激活
					Sertableactflag = 0;
 8000f58:	4b21      	ldr	r3, [pc, #132]	@ (8000fe0 <ETH_CMDPOLL+0x198>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	701a      	strb	r2, [r3, #0]
					PRINT_LOG("CMD is DEACTIVE\n\r");
 8000f5e:	4827      	ldr	r0, [pc, #156]	@ (8000ffc <ETH_CMDPOLL+0x1b4>)
 8000f60:	f7ff ff31 	bl	8000dc6 <PRINT_LOG>
					Sampleperiod = 0xFFFF;
 8000f64:	4b16      	ldr	r3, [pc, #88]	@ (8000fc0 <ETH_CMDPOLL+0x178>)
 8000f66:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f6a:	801a      	strh	r2, [r3, #0]
			break;
 8000f6c:	bf00      	nop
		}
	}
	if(Sertableactflag == 1 && isdowndcmdreport >= Sampleperiod)		//服务表激活后 按照采样率向井下下发
 8000f6e:	4b1c      	ldr	r3, [pc, #112]	@ (8000fe0 <ETH_CMDPOLL+0x198>)
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	2b01      	cmp	r3, #1
 8000f74:	d113      	bne.n	8000f9e <ETH_CMDPOLL+0x156>
 8000f76:	4b1b      	ldr	r3, [pc, #108]	@ (8000fe4 <ETH_CMDPOLL+0x19c>)
 8000f78:	881a      	ldrh	r2, [r3, #0]
 8000f7a:	4b11      	ldr	r3, [pc, #68]	@ (8000fc0 <ETH_CMDPOLL+0x178>)
 8000f7c:	881b      	ldrh	r3, [r3, #0]
 8000f7e:	429a      	cmp	r2, r3
 8000f80:	d30d      	bcc.n	8000f9e <ETH_CMDPOLL+0x156>
	{
		if(CONTRALCMDFLAG == 1)
 8000f82:	4b1d      	ldr	r3, [pc, #116]	@ (8000ff8 <ETH_CMDPOLL+0x1b0>)
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	d103      	bne.n	8000f92 <ETH_CMDPOLL+0x14a>
		{
			CONTRALCMDFLAG = 0;
 8000f8a:	4b1b      	ldr	r3, [pc, #108]	@ (8000ff8 <ETH_CMDPOLL+0x1b0>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	701a      	strb	r2, [r3, #0]
 8000f90:	e002      	b.n	8000f98 <ETH_CMDPOLL+0x150>
			//PRINT_LOG("CMD is Toolcontralcmd\n\r");
		}
		else
		{
			Downcmdsend(SERVICETABLE);
 8000f92:	2001      	movs	r0, #1
 8000f94:	f000 fede 	bl	8001d54 <Downcmdsend>
			//PRINT_LOG("CMD is Servicetable\n\r");
		}
		isdowndcmdreport = 0;
 8000f98:	4b12      	ldr	r3, [pc, #72]	@ (8000fe4 <ETH_CMDPOLL+0x19c>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	801a      	strh	r2, [r3, #0]
	}
}
 8000f9e:	bf00      	nop
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	20000714 	.word	0x20000714
 8000fac:	20000700 	.word	0x20000700
 8000fb0:	200004fc 	.word	0x200004fc
 8000fb4:	200001ac 	.word	0x200001ac
 8000fb8:	200001ad 	.word	0x200001ad
 8000fbc:	200001ae 	.word	0x200001ae
 8000fc0:	20000004 	.word	0x20000004
 8000fc4:	200001b0 	.word	0x200001b0
 8000fc8:	200001b2 	.word	0x200001b2
 8000fcc:	200001b3 	.word	0x200001b3
 8000fd0:	08005224 	.word	0x08005224
 8000fd4:	200006fc 	.word	0x200006fc
 8000fd8:	200001b6 	.word	0x200001b6
 8000fdc:	20000738 	.word	0x20000738
 8000fe0:	20000006 	.word	0x20000006
 8000fe4:	20000204 	.word	0x20000204
 8000fe8:	2000020c 	.word	0x2000020c
 8000fec:	200001b8 	.word	0x200001b8
 8000ff0:	0800523c 	.word	0x0800523c
 8000ff4:	2000076c 	.word	0x2000076c
 8000ff8:	200001b4 	.word	0x200001b4
 8000ffc:	08005250 	.word	0x08005250

08001000 <DOWN_DATAPOLL>:
extern unsigned char DOWNdatabuf[256];
extern unsigned char DOWNdatastate;
extern unsigned char DOWNheaddatanum;
extern unsigned char DOWNdatabodynum;
void DOWN_DATAPOLL(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
	if(DOWNdataoverflag == 1 && Downdatatimeoutnum <= Delaytime	)	//数据接收完毕且切在上位机允许的时间范围内
 8001004:	4b12      	ldr	r3, [pc, #72]	@ (8001050 <DOWN_DATAPOLL+0x50>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	2b01      	cmp	r3, #1
 800100a:	d10c      	bne.n	8001026 <DOWN_DATAPOLL+0x26>
 800100c:	4b11      	ldr	r3, [pc, #68]	@ (8001054 <DOWN_DATAPOLL+0x54>)
 800100e:	881a      	ldrh	r2, [r3, #0]
 8001010:	4b11      	ldr	r3, [pc, #68]	@ (8001058 <DOWN_DATAPOLL+0x58>)
 8001012:	881b      	ldrh	r3, [r3, #0]
 8001014:	429a      	cmp	r2, r3
 8001016:	d806      	bhi.n	8001026 <DOWN_DATAPOLL+0x26>
	{
		Downdatasend(DATABACK);
 8001018:	2000      	movs	r0, #0
 800101a:	f000 ff75 	bl	8001f08 <Downdatasend>
		Resetstate(TOOLDATA);
 800101e:	2002      	movs	r0, #2
 8001020:	f001 f802 	bl	8002028 <Resetstate>
	{
		Downdatasend(TIMEOUT);
		Downdatatimeoutnum = 0;
		Resetstate(TOOLDATA);
	}
}
 8001024:	e012      	b.n	800104c <DOWN_DATAPOLL+0x4c>
	else if(Sertableactflag == 1 && Downdatatimeoutnum > Delaytime)	//无数据或数据接收完毕但超出上位机允许的时间范围
 8001026:	4b0d      	ldr	r3, [pc, #52]	@ (800105c <DOWN_DATAPOLL+0x5c>)
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	2b01      	cmp	r3, #1
 800102c:	d10e      	bne.n	800104c <DOWN_DATAPOLL+0x4c>
 800102e:	4b09      	ldr	r3, [pc, #36]	@ (8001054 <DOWN_DATAPOLL+0x54>)
 8001030:	881a      	ldrh	r2, [r3, #0]
 8001032:	4b09      	ldr	r3, [pc, #36]	@ (8001058 <DOWN_DATAPOLL+0x58>)
 8001034:	881b      	ldrh	r3, [r3, #0]
 8001036:	429a      	cmp	r2, r3
 8001038:	d908      	bls.n	800104c <DOWN_DATAPOLL+0x4c>
		Downdatasend(TIMEOUT);
 800103a:	2001      	movs	r0, #1
 800103c:	f000 ff64 	bl	8001f08 <Downdatasend>
		Downdatatimeoutnum = 0;
 8001040:	4b04      	ldr	r3, [pc, #16]	@ (8001054 <DOWN_DATAPOLL+0x54>)
 8001042:	2200      	movs	r2, #0
 8001044:	801a      	strh	r2, [r3, #0]
		Resetstate(TOOLDATA);
 8001046:	2002      	movs	r0, #2
 8001048:	f000 ffee 	bl	8002028 <Resetstate>
}
 800104c:	bf00      	nop
 800104e:	bd80      	pop	{r7, pc}
 8001050:	20000715 	.word	0x20000715
 8001054:	2000020c 	.word	0x2000020c
 8001058:	200001b0 	.word	0x200001b0
 800105c:	20000006 	.word	0x20000006

08001060 <Sendtimestamp>:

extern unsigned char istimestampreport;
extern unsigned int Report_Timestamp;
unsigned char Timestampbuf[10]={0x47,0x47};
void Sendtimestamp(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
	if(istimestampreport >= 9)
 8001064:	4b13      	ldr	r3, [pc, #76]	@ (80010b4 <Sendtimestamp+0x54>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	2b08      	cmp	r3, #8
 800106a:	d921      	bls.n	80010b0 <Sendtimestamp+0x50>
	{
		Timestampbuf[2] = Report_Timestamp;
 800106c:	4b12      	ldr	r3, [pc, #72]	@ (80010b8 <Sendtimestamp+0x58>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	b2da      	uxtb	r2, r3
 8001072:	4b12      	ldr	r3, [pc, #72]	@ (80010bc <Sendtimestamp+0x5c>)
 8001074:	709a      	strb	r2, [r3, #2]
		Timestampbuf[3] = Report_Timestamp>>8;
 8001076:	4b10      	ldr	r3, [pc, #64]	@ (80010b8 <Sendtimestamp+0x58>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	0a1b      	lsrs	r3, r3, #8
 800107c:	b2da      	uxtb	r2, r3
 800107e:	4b0f      	ldr	r3, [pc, #60]	@ (80010bc <Sendtimestamp+0x5c>)
 8001080:	70da      	strb	r2, [r3, #3]
		Timestampbuf[4] = Report_Timestamp>>16;
 8001082:	4b0d      	ldr	r3, [pc, #52]	@ (80010b8 <Sendtimestamp+0x58>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	0c1b      	lsrs	r3, r3, #16
 8001088:	b2da      	uxtb	r2, r3
 800108a:	4b0c      	ldr	r3, [pc, #48]	@ (80010bc <Sendtimestamp+0x5c>)
 800108c:	711a      	strb	r2, [r3, #4]
		Timestampbuf[5] = Report_Timestamp>>24;
 800108e:	4b0a      	ldr	r3, [pc, #40]	@ (80010b8 <Sendtimestamp+0x58>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	0e1b      	lsrs	r3, r3, #24
 8001094:	b2da      	uxtb	r2, r3
 8001096:	4b09      	ldr	r3, [pc, #36]	@ (80010bc <Sendtimestamp+0x5c>)
 8001098:	715a      	strb	r2, [r3, #5]
		Timestampbuf[6] = 0xab;
 800109a:	4b08      	ldr	r3, [pc, #32]	@ (80010bc <Sendtimestamp+0x5c>)
 800109c:	22ab      	movs	r2, #171	@ 0xab
 800109e:	719a      	strb	r2, [r3, #6]
		ComSendBuf(COM4,Timestampbuf,7);
 80010a0:	2207      	movs	r2, #7
 80010a2:	4906      	ldr	r1, [pc, #24]	@ (80010bc <Sendtimestamp+0x5c>)
 80010a4:	20cc      	movs	r0, #204	@ 0xcc
 80010a6:	f000 fa2d 	bl	8001504 <ComSendBuf>
		istimestampreport = 0;
 80010aa:	4b02      	ldr	r3, [pc, #8]	@ (80010b4 <Sendtimestamp+0x54>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	701a      	strb	r2, [r3, #0]
	}
}
 80010b0:	bf00      	nop
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	20000206 	.word	0x20000206
 80010b8:	20000208 	.word	0x20000208
 80010bc:	20000008 	.word	0x20000008

080010c0 <TIM_init>:
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* USER CODE BEGIN 0 */
void TIM_init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
	MX_TIM6_Init();
 80010c4:	f000 f808 	bl	80010d8 <MX_TIM6_Init>
	HAL_TIM_Base_Start_IT(&htim6);
 80010c8:	4802      	ldr	r0, [pc, #8]	@ (80010d4 <TIM_init+0x14>)
 80010ca:	f002 faed 	bl	80036a8 <HAL_TIM_Base_Start_IT>
}
 80010ce:	bf00      	nop
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	200001bc 	.word	0x200001bc

080010d8 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010de:	463b      	mov	r3, r7
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80010e6:	4b15      	ldr	r3, [pc, #84]	@ (800113c <MX_TIM6_Init+0x64>)
 80010e8:	4a15      	ldr	r2, [pc, #84]	@ (8001140 <MX_TIM6_Init+0x68>)
 80010ea:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7200-1;
 80010ec:	4b13      	ldr	r3, [pc, #76]	@ (800113c <MX_TIM6_Init+0x64>)
 80010ee:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 80010f2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010f4:	4b11      	ldr	r3, [pc, #68]	@ (800113c <MX_TIM6_Init+0x64>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10-1;
 80010fa:	4b10      	ldr	r3, [pc, #64]	@ (800113c <MX_TIM6_Init+0x64>)
 80010fc:	2209      	movs	r2, #9
 80010fe:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001100:	4b0e      	ldr	r3, [pc, #56]	@ (800113c <MX_TIM6_Init+0x64>)
 8001102:	2200      	movs	r2, #0
 8001104:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001106:	480d      	ldr	r0, [pc, #52]	@ (800113c <MX_TIM6_Init+0x64>)
 8001108:	f002 fa7e 	bl	8003608 <HAL_TIM_Base_Init>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001112:	f7ff fe93 	bl	8000e3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001116:	2300      	movs	r3, #0
 8001118:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800111a:	2300      	movs	r3, #0
 800111c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800111e:	463b      	mov	r3, r7
 8001120:	4619      	mov	r1, r3
 8001122:	4806      	ldr	r0, [pc, #24]	@ (800113c <MX_TIM6_Init+0x64>)
 8001124:	f002 fcba 	bl	8003a9c <HAL_TIMEx_MasterConfigSynchronization>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800112e:	f7ff fe85 	bl	8000e3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001132:	bf00      	nop
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	200001bc 	.word	0x200001bc
 8001140:	40001000 	.word	0x40001000

08001144 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a0d      	ldr	r2, [pc, #52]	@ (8001188 <HAL_TIM_Base_MspInit+0x44>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d113      	bne.n	800117e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001156:	4b0d      	ldr	r3, [pc, #52]	@ (800118c <HAL_TIM_Base_MspInit+0x48>)
 8001158:	69db      	ldr	r3, [r3, #28]
 800115a:	4a0c      	ldr	r2, [pc, #48]	@ (800118c <HAL_TIM_Base_MspInit+0x48>)
 800115c:	f043 0310 	orr.w	r3, r3, #16
 8001160:	61d3      	str	r3, [r2, #28]
 8001162:	4b0a      	ldr	r3, [pc, #40]	@ (800118c <HAL_TIM_Base_MspInit+0x48>)
 8001164:	69db      	ldr	r3, [r3, #28]
 8001166:	f003 0310 	and.w	r3, r3, #16
 800116a:	60fb      	str	r3, [r7, #12]
 800116c:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 800116e:	2200      	movs	r2, #0
 8001170:	2100      	movs	r1, #0
 8001172:	2036      	movs	r0, #54	@ 0x36
 8001174:	f001 fa8f 	bl	8002696 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8001178:	2036      	movs	r0, #54	@ 0x36
 800117a:	f001 faa8 	bl	80026ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800117e:	bf00      	nop
 8001180:	3710      	adds	r7, #16
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	40001000 	.word	0x40001000
 800118c:	40021000 	.word	0x40021000

08001190 <HAL_TIM_PeriodElapsedCallback>:
unsigned int Report_Timestamp = 0;
unsigned short Downdatatimeoutnum = 0;
unsigned char isDowntoolcmdreport = 0;
unsigned short i;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a18      	ldr	r2, [pc, #96]	@ (8001200 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d12a      	bne.n	80011f8 <HAL_TIM_PeriodElapsedCallback+0x68>
	{
		Report_Timestamp++;
 80011a2:	4b18      	ldr	r3, [pc, #96]	@ (8001204 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	3301      	adds	r3, #1
 80011a8:	4a16      	ldr	r2, [pc, #88]	@ (8001204 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80011aa:	6013      	str	r3, [r2, #0]
		isdowndcmdreport++;
 80011ac:	4b16      	ldr	r3, [pc, #88]	@ (8001208 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80011ae:	881b      	ldrh	r3, [r3, #0]
 80011b0:	3301      	adds	r3, #1
 80011b2:	b29a      	uxth	r2, r3
 80011b4:	4b14      	ldr	r3, [pc, #80]	@ (8001208 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80011b6:	801a      	strh	r2, [r3, #0]
		istimestampreport++;
 80011b8:	4b14      	ldr	r3, [pc, #80]	@ (800120c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	3301      	adds	r3, #1
 80011be:	b2da      	uxtb	r2, r3
 80011c0:	4b12      	ldr	r3, [pc, #72]	@ (800120c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80011c2:	701a      	strb	r2, [r3, #0]
		Downdatatimeoutnum++;
 80011c4:	4b12      	ldr	r3, [pc, #72]	@ (8001210 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80011c6:	881b      	ldrh	r3, [r3, #0]
 80011c8:	3301      	adds	r3, #1
 80011ca:	b29a      	uxth	r2, r3
 80011cc:	4b10      	ldr	r3, [pc, #64]	@ (8001210 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80011ce:	801a      	strh	r2, [r3, #0]
		i++;
 80011d0:	4b10      	ldr	r3, [pc, #64]	@ (8001214 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80011d2:	881b      	ldrh	r3, [r3, #0]
 80011d4:	3301      	adds	r3, #1
 80011d6:	b29a      	uxth	r2, r3
 80011d8:	4b0e      	ldr	r3, [pc, #56]	@ (8001214 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80011da:	801a      	strh	r2, [r3, #0]
		if(i>499)
 80011dc:	4b0d      	ldr	r3, [pc, #52]	@ (8001214 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80011de:	881b      	ldrh	r3, [r3, #0]
 80011e0:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80011e4:	d308      	bcc.n	80011f8 <HAL_TIM_PeriodElapsedCallback+0x68>
		{
			PRINT_LOG("isdowndcmdreport = %d\n\r",isdowndcmdreport);
 80011e6:	4b08      	ldr	r3, [pc, #32]	@ (8001208 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80011e8:	881b      	ldrh	r3, [r3, #0]
 80011ea:	4619      	mov	r1, r3
 80011ec:	480a      	ldr	r0, [pc, #40]	@ (8001218 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80011ee:	f7ff fdea 	bl	8000dc6 <PRINT_LOG>
			i = 0;
 80011f2:	4b08      	ldr	r3, [pc, #32]	@ (8001214 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	801a      	strh	r2, [r3, #0]
		}
	}
}
 80011f8:	bf00      	nop
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	40001000 	.word	0x40001000
 8001204:	20000208 	.word	0x20000208
 8001208:	20000204 	.word	0x20000204
 800120c:	20000206 	.word	0x20000206
 8001210:	2000020c 	.word	0x2000020c
 8001214:	2000020e 	.word	0x2000020e
 8001218:	08005264 	.word	0x08005264

0800121c <usart_init>:
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart2;


void usart_init (void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
	MX_UART4_Init();				//串口4初始化:串口4为时间深度同步信息上传串口
 8001220:	f000 f806 	bl	8001230 <MX_UART4_Init>
	MX_UART5_Init();				//串口5初始化:串口5为MCU与FPGA通讯串口
 8001224:	f000 f82e 	bl	8001284 <MX_UART5_Init>
	MX_USART1_UART_Init();			//串口1初始化:串口1为主控板与ETH通讯串口
 8001228:	f000 f85c 	bl	80012e4 <MX_USART1_UART_Init>
}
 800122c:	bf00      	nop
 800122e:	bd80      	pop	{r7, pc}

08001230 <MX_UART4_Init>:
/* UART4 init function */
void MX_UART4_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  huart4.Instance = UART4;
 8001234:	4b11      	ldr	r3, [pc, #68]	@ (800127c <MX_UART4_Init+0x4c>)
 8001236:	4a12      	ldr	r2, [pc, #72]	@ (8001280 <MX_UART4_Init+0x50>)
 8001238:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;						//波特率115200
 800123a:	4b10      	ldr	r3, [pc, #64]	@ (800127c <MX_UART4_Init+0x4c>)
 800123c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001240:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001242:	4b0e      	ldr	r3, [pc, #56]	@ (800127c <MX_UART4_Init+0x4c>)
 8001244:	2200      	movs	r2, #0
 8001246:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001248:	4b0c      	ldr	r3, [pc, #48]	@ (800127c <MX_UART4_Init+0x4c>)
 800124a:	2200      	movs	r2, #0
 800124c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800124e:	4b0b      	ldr	r3, [pc, #44]	@ (800127c <MX_UART4_Init+0x4c>)
 8001250:	2200      	movs	r2, #0
 8001252:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001254:	4b09      	ldr	r3, [pc, #36]	@ (800127c <MX_UART4_Init+0x4c>)
 8001256:	220c      	movs	r2, #12
 8001258:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800125a:	4b08      	ldr	r3, [pc, #32]	@ (800127c <MX_UART4_Init+0x4c>)
 800125c:	2200      	movs	r2, #0
 800125e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001260:	4b06      	ldr	r3, [pc, #24]	@ (800127c <MX_UART4_Init+0x4c>)
 8001262:	2200      	movs	r2, #0
 8001264:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001266:	4805      	ldr	r0, [pc, #20]	@ (800127c <MX_UART4_Init+0x4c>)
 8001268:	f002 fc96 	bl	8003b98 <HAL_UART_Init>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001272:	f7ff fde3 	bl	8000e3c <Error_Handler>
  }
}
 8001276:	bf00      	nop
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	20000218 	.word	0x20000218
 8001280:	40004c00 	.word	0x40004c00

08001284 <MX_UART5_Init>:
void MX_UART5_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  huart5.Instance = UART5;
 8001288:	4b13      	ldr	r3, [pc, #76]	@ (80012d8 <MX_UART5_Init+0x54>)
 800128a:	4a14      	ldr	r2, [pc, #80]	@ (80012dc <MX_UART5_Init+0x58>)
 800128c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800128e:	4b12      	ldr	r3, [pc, #72]	@ (80012d8 <MX_UART5_Init+0x54>)
 8001290:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001294:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001296:	4b10      	ldr	r3, [pc, #64]	@ (80012d8 <MX_UART5_Init+0x54>)
 8001298:	2200      	movs	r2, #0
 800129a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800129c:	4b0e      	ldr	r3, [pc, #56]	@ (80012d8 <MX_UART5_Init+0x54>)
 800129e:	2200      	movs	r2, #0
 80012a0:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80012a2:	4b0d      	ldr	r3, [pc, #52]	@ (80012d8 <MX_UART5_Init+0x54>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80012a8:	4b0b      	ldr	r3, [pc, #44]	@ (80012d8 <MX_UART5_Init+0x54>)
 80012aa:	220c      	movs	r2, #12
 80012ac:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012ae:	4b0a      	ldr	r3, [pc, #40]	@ (80012d8 <MX_UART5_Init+0x54>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80012b4:	4b08      	ldr	r3, [pc, #32]	@ (80012d8 <MX_UART5_Init+0x54>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80012ba:	4807      	ldr	r0, [pc, #28]	@ (80012d8 <MX_UART5_Init+0x54>)
 80012bc:	f002 fc6c 	bl	8003b98 <HAL_UART_Init>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <MX_UART5_Init+0x46>
  {
    Error_Handler();
 80012c6:	f7ff fdb9 	bl	8000e3c <Error_Handler>
  }
  HAL_UART_Receive_IT(&huart5,(uint8_t*)Uart5_RxBuff, 1);
 80012ca:	2201      	movs	r2, #1
 80012cc:	4904      	ldr	r1, [pc, #16]	@ (80012e0 <MX_UART5_Init+0x5c>)
 80012ce:	4802      	ldr	r0, [pc, #8]	@ (80012d8 <MX_UART5_Init+0x54>)
 80012d0:	f002 fd3d 	bl	8003d4e <HAL_UART_Receive_IT>
}
 80012d4:	bf00      	nop
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	20000260 	.word	0x20000260
 80012dc:	40005000 	.word	0x40005000
 80012e0:	20000214 	.word	0x20000214

080012e4 <MX_USART1_UART_Init>:

void MX_USART1_UART_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 80012e8:	4b13      	ldr	r3, [pc, #76]	@ (8001338 <MX_USART1_UART_Init+0x54>)
 80012ea:	4a14      	ldr	r2, [pc, #80]	@ (800133c <MX_USART1_UART_Init+0x58>)
 80012ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80012ee:	4b12      	ldr	r3, [pc, #72]	@ (8001338 <MX_USART1_UART_Init+0x54>)
 80012f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80012f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012f6:	4b10      	ldr	r3, [pc, #64]	@ (8001338 <MX_USART1_UART_Init+0x54>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80012fc:	4b0e      	ldr	r3, [pc, #56]	@ (8001338 <MX_USART1_UART_Init+0x54>)
 80012fe:	2200      	movs	r2, #0
 8001300:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001302:	4b0d      	ldr	r3, [pc, #52]	@ (8001338 <MX_USART1_UART_Init+0x54>)
 8001304:	2200      	movs	r2, #0
 8001306:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001308:	4b0b      	ldr	r3, [pc, #44]	@ (8001338 <MX_USART1_UART_Init+0x54>)
 800130a:	220c      	movs	r2, #12
 800130c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800130e:	4b0a      	ldr	r3, [pc, #40]	@ (8001338 <MX_USART1_UART_Init+0x54>)
 8001310:	2200      	movs	r2, #0
 8001312:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001314:	4b08      	ldr	r3, [pc, #32]	@ (8001338 <MX_USART1_UART_Init+0x54>)
 8001316:	2200      	movs	r2, #0
 8001318:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800131a:	4807      	ldr	r0, [pc, #28]	@ (8001338 <MX_USART1_UART_Init+0x54>)
 800131c:	f002 fc3c 	bl	8003b98 <HAL_UART_Init>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001326:	f7ff fd89 	bl	8000e3c <Error_Handler>
  }

  HAL_UART_Receive_IT(&huart1,(uint8_t*)Uart1_RxBuff, 1);
 800132a:	2201      	movs	r2, #1
 800132c:	4904      	ldr	r1, [pc, #16]	@ (8001340 <MX_USART1_UART_Init+0x5c>)
 800132e:	4802      	ldr	r0, [pc, #8]	@ (8001338 <MX_USART1_UART_Init+0x54>)
 8001330:	f002 fd0d 	bl	8003d4e <HAL_UART_Receive_IT>
}
 8001334:	bf00      	nop
 8001336:	bd80      	pop	{r7, pc}
 8001338:	200002a8 	.word	0x200002a8
 800133c:	40013800 	.word	0x40013800
 8001340:	20000210 	.word	0x20000210

08001344 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b08e      	sub	sp, #56	@ 0x38
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800134c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]
 8001354:	605a      	str	r2, [r3, #4]
 8001356:	609a      	str	r2, [r3, #8]
 8001358:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==UART4)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a62      	ldr	r2, [pc, #392]	@ (80014e8 <HAL_UART_MspInit+0x1a4>)
 8001360:	4293      	cmp	r3, r2
 8001362:	d132      	bne.n	80013ca <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001364:	4b61      	ldr	r3, [pc, #388]	@ (80014ec <HAL_UART_MspInit+0x1a8>)
 8001366:	69db      	ldr	r3, [r3, #28]
 8001368:	4a60      	ldr	r2, [pc, #384]	@ (80014ec <HAL_UART_MspInit+0x1a8>)
 800136a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800136e:	61d3      	str	r3, [r2, #28]
 8001370:	4b5e      	ldr	r3, [pc, #376]	@ (80014ec <HAL_UART_MspInit+0x1a8>)
 8001372:	69db      	ldr	r3, [r3, #28]
 8001374:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001378:	627b      	str	r3, [r7, #36]	@ 0x24
 800137a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800137c:	4b5b      	ldr	r3, [pc, #364]	@ (80014ec <HAL_UART_MspInit+0x1a8>)
 800137e:	699b      	ldr	r3, [r3, #24]
 8001380:	4a5a      	ldr	r2, [pc, #360]	@ (80014ec <HAL_UART_MspInit+0x1a8>)
 8001382:	f043 0310 	orr.w	r3, r3, #16
 8001386:	6193      	str	r3, [r2, #24]
 8001388:	4b58      	ldr	r3, [pc, #352]	@ (80014ec <HAL_UART_MspInit+0x1a8>)
 800138a:	699b      	ldr	r3, [r3, #24]
 800138c:	f003 0310 	and.w	r3, r3, #16
 8001390:	623b      	str	r3, [r7, #32]
 8001392:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001394:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001398:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139a:	2302      	movs	r3, #2
 800139c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800139e:	2303      	movs	r3, #3
 80013a0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013a2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80013a6:	4619      	mov	r1, r3
 80013a8:	4851      	ldr	r0, [pc, #324]	@ (80014f0 <HAL_UART_MspInit+0x1ac>)
 80013aa:	f001 faed 	bl	8002988 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80013ae:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80013b2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013b4:	2300      	movs	r3, #0
 80013b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b8:	2300      	movs	r3, #0
 80013ba:	633b      	str	r3, [r7, #48]	@ 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013bc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80013c0:	4619      	mov	r1, r3
 80013c2:	484b      	ldr	r0, [pc, #300]	@ (80014f0 <HAL_UART_MspInit+0x1ac>)
 80013c4:	f001 fae0 	bl	8002988 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  }
}
 80013c8:	e089      	b.n	80014de <HAL_UART_MspInit+0x19a>
  else if(uartHandle->Instance==UART5)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a49      	ldr	r2, [pc, #292]	@ (80014f4 <HAL_UART_MspInit+0x1b0>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d145      	bne.n	8001460 <HAL_UART_MspInit+0x11c>
    __HAL_RCC_UART5_CLK_ENABLE();
 80013d4:	4b45      	ldr	r3, [pc, #276]	@ (80014ec <HAL_UART_MspInit+0x1a8>)
 80013d6:	69db      	ldr	r3, [r3, #28]
 80013d8:	4a44      	ldr	r2, [pc, #272]	@ (80014ec <HAL_UART_MspInit+0x1a8>)
 80013da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80013de:	61d3      	str	r3, [r2, #28]
 80013e0:	4b42      	ldr	r3, [pc, #264]	@ (80014ec <HAL_UART_MspInit+0x1a8>)
 80013e2:	69db      	ldr	r3, [r3, #28]
 80013e4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013e8:	61fb      	str	r3, [r7, #28]
 80013ea:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ec:	4b3f      	ldr	r3, [pc, #252]	@ (80014ec <HAL_UART_MspInit+0x1a8>)
 80013ee:	699b      	ldr	r3, [r3, #24]
 80013f0:	4a3e      	ldr	r2, [pc, #248]	@ (80014ec <HAL_UART_MspInit+0x1a8>)
 80013f2:	f043 0310 	orr.w	r3, r3, #16
 80013f6:	6193      	str	r3, [r2, #24]
 80013f8:	4b3c      	ldr	r3, [pc, #240]	@ (80014ec <HAL_UART_MspInit+0x1a8>)
 80013fa:	699b      	ldr	r3, [r3, #24]
 80013fc:	f003 0310 	and.w	r3, r3, #16
 8001400:	61bb      	str	r3, [r7, #24]
 8001402:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001404:	4b39      	ldr	r3, [pc, #228]	@ (80014ec <HAL_UART_MspInit+0x1a8>)
 8001406:	699b      	ldr	r3, [r3, #24]
 8001408:	4a38      	ldr	r2, [pc, #224]	@ (80014ec <HAL_UART_MspInit+0x1a8>)
 800140a:	f043 0320 	orr.w	r3, r3, #32
 800140e:	6193      	str	r3, [r2, #24]
 8001410:	4b36      	ldr	r3, [pc, #216]	@ (80014ec <HAL_UART_MspInit+0x1a8>)
 8001412:	699b      	ldr	r3, [r3, #24]
 8001414:	f003 0320 	and.w	r3, r3, #32
 8001418:	617b      	str	r3, [r7, #20]
 800141a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800141c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001420:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001422:	2302      	movs	r3, #2
 8001424:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001426:	2303      	movs	r3, #3
 8001428:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800142a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800142e:	4619      	mov	r1, r3
 8001430:	482f      	ldr	r0, [pc, #188]	@ (80014f0 <HAL_UART_MspInit+0x1ac>)
 8001432:	f001 faa9 	bl	8002988 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001436:	2304      	movs	r3, #4
 8001438:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800143a:	2300      	movs	r3, #0
 800143c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143e:	2300      	movs	r3, #0
 8001440:	633b      	str	r3, [r7, #48]	@ 0x30
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001442:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001446:	4619      	mov	r1, r3
 8001448:	482b      	ldr	r0, [pc, #172]	@ (80014f8 <HAL_UART_MspInit+0x1b4>)
 800144a:	f001 fa9d 	bl	8002988 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 800144e:	2200      	movs	r2, #0
 8001450:	2100      	movs	r1, #0
 8001452:	2035      	movs	r0, #53	@ 0x35
 8001454:	f001 f91f 	bl	8002696 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001458:	2035      	movs	r0, #53	@ 0x35
 800145a:	f001 f938 	bl	80026ce <HAL_NVIC_EnableIRQ>
}
 800145e:	e03e      	b.n	80014de <HAL_UART_MspInit+0x19a>
  else if(uartHandle->Instance==USART1)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a25      	ldr	r2, [pc, #148]	@ (80014fc <HAL_UART_MspInit+0x1b8>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d139      	bne.n	80014de <HAL_UART_MspInit+0x19a>
    __HAL_RCC_USART1_CLK_ENABLE();
 800146a:	4b20      	ldr	r3, [pc, #128]	@ (80014ec <HAL_UART_MspInit+0x1a8>)
 800146c:	699b      	ldr	r3, [r3, #24]
 800146e:	4a1f      	ldr	r2, [pc, #124]	@ (80014ec <HAL_UART_MspInit+0x1a8>)
 8001470:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001474:	6193      	str	r3, [r2, #24]
 8001476:	4b1d      	ldr	r3, [pc, #116]	@ (80014ec <HAL_UART_MspInit+0x1a8>)
 8001478:	699b      	ldr	r3, [r3, #24]
 800147a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800147e:	613b      	str	r3, [r7, #16]
 8001480:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001482:	4b1a      	ldr	r3, [pc, #104]	@ (80014ec <HAL_UART_MspInit+0x1a8>)
 8001484:	699b      	ldr	r3, [r3, #24]
 8001486:	4a19      	ldr	r2, [pc, #100]	@ (80014ec <HAL_UART_MspInit+0x1a8>)
 8001488:	f043 0304 	orr.w	r3, r3, #4
 800148c:	6193      	str	r3, [r2, #24]
 800148e:	4b17      	ldr	r3, [pc, #92]	@ (80014ec <HAL_UART_MspInit+0x1a8>)
 8001490:	699b      	ldr	r3, [r3, #24]
 8001492:	f003 0304 	and.w	r3, r3, #4
 8001496:	60fb      	str	r3, [r7, #12]
 8001498:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800149a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800149e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a0:	2302      	movs	r3, #2
 80014a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014a4:	2303      	movs	r3, #3
 80014a6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014ac:	4619      	mov	r1, r3
 80014ae:	4814      	ldr	r0, [pc, #80]	@ (8001500 <HAL_UART_MspInit+0x1bc>)
 80014b0:	f001 fa6a 	bl	8002988 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80014b4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80014b8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014ba:	2300      	movs	r3, #0
 80014bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014be:	2300      	movs	r3, #0
 80014c0:	633b      	str	r3, [r7, #48]	@ 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014c6:	4619      	mov	r1, r3
 80014c8:	480d      	ldr	r0, [pc, #52]	@ (8001500 <HAL_UART_MspInit+0x1bc>)
 80014ca:	f001 fa5d 	bl	8002988 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80014ce:	2200      	movs	r2, #0
 80014d0:	2100      	movs	r1, #0
 80014d2:	2025      	movs	r0, #37	@ 0x25
 80014d4:	f001 f8df 	bl	8002696 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80014d8:	2025      	movs	r0, #37	@ 0x25
 80014da:	f001 f8f8 	bl	80026ce <HAL_NVIC_EnableIRQ>
}
 80014de:	bf00      	nop
 80014e0:	3738      	adds	r7, #56	@ 0x38
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	40004c00 	.word	0x40004c00
 80014ec:	40021000 	.word	0x40021000
 80014f0:	40011000 	.word	0x40011000
 80014f4:	40005000 	.word	0x40005000
 80014f8:	40011400 	.word	0x40011400
 80014fc:	40013800 	.word	0x40013800
 8001500:	40010800 	.word	0x40010800

08001504 <ComSendBuf>:
  /* USER CODE END USART1_MspDeInit 1 */
  }
}

void ComSendBuf(uint8_t com,uint8_t *p,uint16_t len)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	4603      	mov	r3, r0
 800150c:	6039      	str	r1, [r7, #0]
 800150e:	71fb      	strb	r3, [r7, #7]
 8001510:	4613      	mov	r3, r2
 8001512:	80bb      	strh	r3, [r7, #4]
	if(com == 0xdd)
 8001514:	79fb      	ldrb	r3, [r7, #7]
 8001516:	2bdd      	cmp	r3, #221	@ 0xdd
 8001518:	d105      	bne.n	8001526 <ComSendBuf+0x22>
	{
		HAL_UART_Transmit(&huart1, p, len, 0xff);
 800151a:	88ba      	ldrh	r2, [r7, #4]
 800151c:	23ff      	movs	r3, #255	@ 0xff
 800151e:	6839      	ldr	r1, [r7, #0]
 8001520:	480c      	ldr	r0, [pc, #48]	@ (8001554 <ComSendBuf+0x50>)
 8001522:	f002 fb89 	bl	8003c38 <HAL_UART_Transmit>
	}
	if(com == 0xee)
 8001526:	79fb      	ldrb	r3, [r7, #7]
 8001528:	2bee      	cmp	r3, #238	@ 0xee
 800152a:	d105      	bne.n	8001538 <ComSendBuf+0x34>
	{
		HAL_UART_Transmit(&huart5, p, len, 0xff);
 800152c:	88ba      	ldrh	r2, [r7, #4]
 800152e:	23ff      	movs	r3, #255	@ 0xff
 8001530:	6839      	ldr	r1, [r7, #0]
 8001532:	4809      	ldr	r0, [pc, #36]	@ (8001558 <ComSendBuf+0x54>)
 8001534:	f002 fb80 	bl	8003c38 <HAL_UART_Transmit>
	}
	if(com == 0xcc)
 8001538:	79fb      	ldrb	r3, [r7, #7]
 800153a:	2bcc      	cmp	r3, #204	@ 0xcc
 800153c:	d105      	bne.n	800154a <ComSendBuf+0x46>
	{
		HAL_UART_Transmit(&huart4, p, len, 0xff);
 800153e:	88ba      	ldrh	r2, [r7, #4]
 8001540:	23ff      	movs	r3, #255	@ 0xff
 8001542:	6839      	ldr	r1, [r7, #0]
 8001544:	4805      	ldr	r0, [pc, #20]	@ (800155c <ComSendBuf+0x58>)
 8001546:	f002 fb77 	bl	8003c38 <HAL_UART_Transmit>
	}
}
 800154a:	bf00      	nop
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	200002a8 	.word	0x200002a8
 8001558:	20000260 	.word	0x20000260
 800155c:	20000218 	.word	0x20000218

08001560 <HAL_UART_RxCpltCallback>:
unsigned char ETHdataoverflag;				//ETH数据接收完毕标志
unsigned char DOWNdataoverflag;				//井下数据接收完毕标志


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)		//串口中断回调函数
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1) 		//如果产生中断的是串口1
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a9e      	ldr	r2, [pc, #632]	@ (80017e8 <HAL_UART_RxCpltCallback+0x288>)
 800156e:	4293      	cmp	r3, r2
 8001570:	f040 82bd 	bne.w	8001aee <HAL_UART_RxCpltCallback+0x58e>
	{
		if(Uart1_RxBuff[0] == 0xFF && ETHdatastate<3) {ETHdatastate = 0;}
 8001574:	4b9d      	ldr	r3, [pc, #628]	@ (80017ec <HAL_UART_RxCpltCallback+0x28c>)
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	2bff      	cmp	r3, #255	@ 0xff
 800157a:	d106      	bne.n	800158a <HAL_UART_RxCpltCallback+0x2a>
 800157c:	4b9c      	ldr	r3, [pc, #624]	@ (80017f0 <HAL_UART_RxCpltCallback+0x290>)
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	2b02      	cmp	r3, #2
 8001582:	d802      	bhi.n	800158a <HAL_UART_RxCpltCallback+0x2a>
 8001584:	4b9a      	ldr	r3, [pc, #616]	@ (80017f0 <HAL_UART_RxCpltCallback+0x290>)
 8001586:	2200      	movs	r2, #0
 8001588:	701a      	strb	r2, [r3, #0]
		switch(ETHdatastate)
 800158a:	4b99      	ldr	r3, [pc, #612]	@ (80017f0 <HAL_UART_RxCpltCallback+0x290>)
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	2b11      	cmp	r3, #17
 8001590:	f200 82a8 	bhi.w	8001ae4 <HAL_UART_RxCpltCallback+0x584>
 8001594:	a201      	add	r2, pc, #4	@ (adr r2, 800159c <HAL_UART_RxCpltCallback+0x3c>)
 8001596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800159a:	bf00      	nop
 800159c:	080015e5 	.word	0x080015e5
 80015a0:	08001619 	.word	0x08001619
 80015a4:	0800164d 	.word	0x0800164d
 80015a8:	08001681 	.word	0x08001681
 80015ac:	080016b5 	.word	0x080016b5
 80015b0:	080016e3 	.word	0x080016e3
 80015b4:	0800171b 	.word	0x0800171b
 80015b8:	08001819 	.word	0x08001819
 80015bc:	08001845 	.word	0x08001845
 80015c0:	08001873 	.word	0x08001873
 80015c4:	080018ab 	.word	0x080018ab
 80015c8:	0800190f 	.word	0x0800190f
 80015cc:	0800193d 	.word	0x0800193d
 80015d0:	08001975 	.word	0x08001975
 80015d4:	080019a3 	.word	0x080019a3
 80015d8:	080019db 	.word	0x080019db
 80015dc:	08001a23 	.word	0x08001a23
 80015e0:	08001a8d 	.word	0x08001a8d
		{
			case 0:
				if(Uart1_RxBuff[0] == 0xFF)					//同步头FF 00 55 AA
 80015e4:	4b81      	ldr	r3, [pc, #516]	@ (80017ec <HAL_UART_RxCpltCallback+0x28c>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	2bff      	cmp	r3, #255	@ 0xff
 80015ea:	d111      	bne.n	8001610 <HAL_UART_RxCpltCallback+0xb0>
				{
					ETHdatabuf[ETHdataheadnum++] = Uart1_RxBuff[0];
 80015ec:	4b81      	ldr	r3, [pc, #516]	@ (80017f4 <HAL_UART_RxCpltCallback+0x294>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	1c5a      	adds	r2, r3, #1
 80015f2:	b2d1      	uxtb	r1, r2
 80015f4:	4a7f      	ldr	r2, [pc, #508]	@ (80017f4 <HAL_UART_RxCpltCallback+0x294>)
 80015f6:	7011      	strb	r1, [r2, #0]
 80015f8:	461a      	mov	r2, r3
 80015fa:	4b7c      	ldr	r3, [pc, #496]	@ (80017ec <HAL_UART_RxCpltCallback+0x28c>)
 80015fc:	7819      	ldrb	r1, [r3, #0]
 80015fe:	4b7e      	ldr	r3, [pc, #504]	@ (80017f8 <HAL_UART_RxCpltCallback+0x298>)
 8001600:	5499      	strb	r1, [r3, r2]
					ETHdatastate++ ;
 8001602:	4b7b      	ldr	r3, [pc, #492]	@ (80017f0 <HAL_UART_RxCpltCallback+0x290>)
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	3301      	adds	r3, #1
 8001608:	b2da      	uxtb	r2, r3
 800160a:	4b79      	ldr	r3, [pc, #484]	@ (80017f0 <HAL_UART_RxCpltCallback+0x290>)
 800160c:	701a      	strb	r2, [r3, #0]
				}
				else
				{
					Resetstate(ETHCMD);
				}
				break;
 800160e:	e269      	b.n	8001ae4 <HAL_UART_RxCpltCallback+0x584>
					Resetstate(ETHCMD);
 8001610:	2001      	movs	r0, #1
 8001612:	f000 fd09 	bl	8002028 <Resetstate>
				break;
 8001616:	e265      	b.n	8001ae4 <HAL_UART_RxCpltCallback+0x584>
			case 1:
				if(Uart1_RxBuff[0] == 0x00)
 8001618:	4b74      	ldr	r3, [pc, #464]	@ (80017ec <HAL_UART_RxCpltCallback+0x28c>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d111      	bne.n	8001644 <HAL_UART_RxCpltCallback+0xe4>
				{
					ETHdatabuf[ETHdataheadnum++] = Uart1_RxBuff[0];
 8001620:	4b74      	ldr	r3, [pc, #464]	@ (80017f4 <HAL_UART_RxCpltCallback+0x294>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	1c5a      	adds	r2, r3, #1
 8001626:	b2d1      	uxtb	r1, r2
 8001628:	4a72      	ldr	r2, [pc, #456]	@ (80017f4 <HAL_UART_RxCpltCallback+0x294>)
 800162a:	7011      	strb	r1, [r2, #0]
 800162c:	461a      	mov	r2, r3
 800162e:	4b6f      	ldr	r3, [pc, #444]	@ (80017ec <HAL_UART_RxCpltCallback+0x28c>)
 8001630:	7819      	ldrb	r1, [r3, #0]
 8001632:	4b71      	ldr	r3, [pc, #452]	@ (80017f8 <HAL_UART_RxCpltCallback+0x298>)
 8001634:	5499      	strb	r1, [r3, r2]
					ETHdatastate++ ;
 8001636:	4b6e      	ldr	r3, [pc, #440]	@ (80017f0 <HAL_UART_RxCpltCallback+0x290>)
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	3301      	adds	r3, #1
 800163c:	b2da      	uxtb	r2, r3
 800163e:	4b6c      	ldr	r3, [pc, #432]	@ (80017f0 <HAL_UART_RxCpltCallback+0x290>)
 8001640:	701a      	strb	r2, [r3, #0]
				}
				else
				{
					Resetstate(ETHCMD);
				}
				break;
 8001642:	e24f      	b.n	8001ae4 <HAL_UART_RxCpltCallback+0x584>
					Resetstate(ETHCMD);
 8001644:	2001      	movs	r0, #1
 8001646:	f000 fcef 	bl	8002028 <Resetstate>
				break;
 800164a:	e24b      	b.n	8001ae4 <HAL_UART_RxCpltCallback+0x584>
			case 2:
				if(Uart1_RxBuff[0] == 0x55)
 800164c:	4b67      	ldr	r3, [pc, #412]	@ (80017ec <HAL_UART_RxCpltCallback+0x28c>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	2b55      	cmp	r3, #85	@ 0x55
 8001652:	d111      	bne.n	8001678 <HAL_UART_RxCpltCallback+0x118>
				{
					ETHdatabuf[ETHdataheadnum++] = Uart1_RxBuff[0];
 8001654:	4b67      	ldr	r3, [pc, #412]	@ (80017f4 <HAL_UART_RxCpltCallback+0x294>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	1c5a      	adds	r2, r3, #1
 800165a:	b2d1      	uxtb	r1, r2
 800165c:	4a65      	ldr	r2, [pc, #404]	@ (80017f4 <HAL_UART_RxCpltCallback+0x294>)
 800165e:	7011      	strb	r1, [r2, #0]
 8001660:	461a      	mov	r2, r3
 8001662:	4b62      	ldr	r3, [pc, #392]	@ (80017ec <HAL_UART_RxCpltCallback+0x28c>)
 8001664:	7819      	ldrb	r1, [r3, #0]
 8001666:	4b64      	ldr	r3, [pc, #400]	@ (80017f8 <HAL_UART_RxCpltCallback+0x298>)
 8001668:	5499      	strb	r1, [r3, r2]
					ETHdatastate++ ;
 800166a:	4b61      	ldr	r3, [pc, #388]	@ (80017f0 <HAL_UART_RxCpltCallback+0x290>)
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	3301      	adds	r3, #1
 8001670:	b2da      	uxtb	r2, r3
 8001672:	4b5f      	ldr	r3, [pc, #380]	@ (80017f0 <HAL_UART_RxCpltCallback+0x290>)
 8001674:	701a      	strb	r2, [r3, #0]
				}
				else
				{
					Resetstate(ETHCMD);
				}
				break;
 8001676:	e235      	b.n	8001ae4 <HAL_UART_RxCpltCallback+0x584>
					Resetstate(ETHCMD);
 8001678:	2001      	movs	r0, #1
 800167a:	f000 fcd5 	bl	8002028 <Resetstate>
				break;
 800167e:	e231      	b.n	8001ae4 <HAL_UART_RxCpltCallback+0x584>
			case 3:
				if(Uart1_RxBuff[0] == 0xAA)
 8001680:	4b5a      	ldr	r3, [pc, #360]	@ (80017ec <HAL_UART_RxCpltCallback+0x28c>)
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	2baa      	cmp	r3, #170	@ 0xaa
 8001686:	d111      	bne.n	80016ac <HAL_UART_RxCpltCallback+0x14c>
				{
					ETHdatabuf[ETHdataheadnum++] = Uart1_RxBuff[0];
 8001688:	4b5a      	ldr	r3, [pc, #360]	@ (80017f4 <HAL_UART_RxCpltCallback+0x294>)
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	1c5a      	adds	r2, r3, #1
 800168e:	b2d1      	uxtb	r1, r2
 8001690:	4a58      	ldr	r2, [pc, #352]	@ (80017f4 <HAL_UART_RxCpltCallback+0x294>)
 8001692:	7011      	strb	r1, [r2, #0]
 8001694:	461a      	mov	r2, r3
 8001696:	4b55      	ldr	r3, [pc, #340]	@ (80017ec <HAL_UART_RxCpltCallback+0x28c>)
 8001698:	7819      	ldrb	r1, [r3, #0]
 800169a:	4b57      	ldr	r3, [pc, #348]	@ (80017f8 <HAL_UART_RxCpltCallback+0x298>)
 800169c:	5499      	strb	r1, [r3, r2]
					ETHdatastate++ ;
 800169e:	4b54      	ldr	r3, [pc, #336]	@ (80017f0 <HAL_UART_RxCpltCallback+0x290>)
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	3301      	adds	r3, #1
 80016a4:	b2da      	uxtb	r2, r3
 80016a6:	4b52      	ldr	r3, [pc, #328]	@ (80017f0 <HAL_UART_RxCpltCallback+0x290>)
 80016a8:	701a      	strb	r2, [r3, #0]
				}
				else
				{
					Resetstate(ETHCMD);
				}
				break;
 80016aa:	e21b      	b.n	8001ae4 <HAL_UART_RxCpltCallback+0x584>
					Resetstate(ETHCMD);
 80016ac:	2001      	movs	r0, #1
 80016ae:	f000 fcbb 	bl	8002028 <Resetstate>
				break;
 80016b2:	e217      	b.n	8001ae4 <HAL_UART_RxCpltCallback+0x584>
			case 4:
				ETHdatabuf[ETHdataheadnum++] = Uart1_RxBuff[0];
 80016b4:	4b4f      	ldr	r3, [pc, #316]	@ (80017f4 <HAL_UART_RxCpltCallback+0x294>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	1c5a      	adds	r2, r3, #1
 80016ba:	b2d1      	uxtb	r1, r2
 80016bc:	4a4d      	ldr	r2, [pc, #308]	@ (80017f4 <HAL_UART_RxCpltCallback+0x294>)
 80016be:	7011      	strb	r1, [r2, #0]
 80016c0:	461a      	mov	r2, r3
 80016c2:	4b4a      	ldr	r3, [pc, #296]	@ (80017ec <HAL_UART_RxCpltCallback+0x28c>)
 80016c4:	7819      	ldrb	r1, [r3, #0]
 80016c6:	4b4c      	ldr	r3, [pc, #304]	@ (80017f8 <HAL_UART_RxCpltCallback+0x298>)
 80016c8:	5499      	strb	r1, [r3, r2]
				ETHdatalen = Uart1_RxBuff[0];						//上位机数据长度高字节
 80016ca:	4b48      	ldr	r3, [pc, #288]	@ (80017ec <HAL_UART_RxCpltCallback+0x28c>)
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	461a      	mov	r2, r3
 80016d0:	4b4a      	ldr	r3, [pc, #296]	@ (80017fc <HAL_UART_RxCpltCallback+0x29c>)
 80016d2:	801a      	strh	r2, [r3, #0]
				ETHdatastate++ ;
 80016d4:	4b46      	ldr	r3, [pc, #280]	@ (80017f0 <HAL_UART_RxCpltCallback+0x290>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	3301      	adds	r3, #1
 80016da:	b2da      	uxtb	r2, r3
 80016dc:	4b44      	ldr	r3, [pc, #272]	@ (80017f0 <HAL_UART_RxCpltCallback+0x290>)
 80016de:	701a      	strb	r2, [r3, #0]
				break;
 80016e0:	e200      	b.n	8001ae4 <HAL_UART_RxCpltCallback+0x584>
			case 5:
				ETHdatabuf[ETHdataheadnum++] = Uart1_RxBuff[0];
 80016e2:	4b44      	ldr	r3, [pc, #272]	@ (80017f4 <HAL_UART_RxCpltCallback+0x294>)
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	1c5a      	adds	r2, r3, #1
 80016e8:	b2d1      	uxtb	r1, r2
 80016ea:	4a42      	ldr	r2, [pc, #264]	@ (80017f4 <HAL_UART_RxCpltCallback+0x294>)
 80016ec:	7011      	strb	r1, [r2, #0]
 80016ee:	461a      	mov	r2, r3
 80016f0:	4b3e      	ldr	r3, [pc, #248]	@ (80017ec <HAL_UART_RxCpltCallback+0x28c>)
 80016f2:	7819      	ldrb	r1, [r3, #0]
 80016f4:	4b40      	ldr	r3, [pc, #256]	@ (80017f8 <HAL_UART_RxCpltCallback+0x298>)
 80016f6:	5499      	strb	r1, [r3, r2]
				ETHdatalen = (ETHdatalen<<8) + Uart1_RxBuff[0];				//上位机数据长度低字节
 80016f8:	4b40      	ldr	r3, [pc, #256]	@ (80017fc <HAL_UART_RxCpltCallback+0x29c>)
 80016fa:	881b      	ldrh	r3, [r3, #0]
 80016fc:	021b      	lsls	r3, r3, #8
 80016fe:	b29b      	uxth	r3, r3
 8001700:	4a3a      	ldr	r2, [pc, #232]	@ (80017ec <HAL_UART_RxCpltCallback+0x28c>)
 8001702:	7812      	ldrb	r2, [r2, #0]
 8001704:	4413      	add	r3, r2
 8001706:	b29a      	uxth	r2, r3
 8001708:	4b3c      	ldr	r3, [pc, #240]	@ (80017fc <HAL_UART_RxCpltCallback+0x29c>)
 800170a:	801a      	strh	r2, [r3, #0]
				ETHdatastate++ ;
 800170c:	4b38      	ldr	r3, [pc, #224]	@ (80017f0 <HAL_UART_RxCpltCallback+0x290>)
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	3301      	adds	r3, #1
 8001712:	b2da      	uxtb	r2, r3
 8001714:	4b36      	ldr	r3, [pc, #216]	@ (80017f0 <HAL_UART_RxCpltCallback+0x290>)
 8001716:	701a      	strb	r2, [r3, #0]
				break;
 8001718:	e1e4      	b.n	8001ae4 <HAL_UART_RxCpltCallback+0x584>
			case 6:
				ETHdatabuf[ETHdataheadnum++] = Uart1_RxBuff[0];
 800171a:	4b36      	ldr	r3, [pc, #216]	@ (80017f4 <HAL_UART_RxCpltCallback+0x294>)
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	1c5a      	adds	r2, r3, #1
 8001720:	b2d1      	uxtb	r1, r2
 8001722:	4a34      	ldr	r2, [pc, #208]	@ (80017f4 <HAL_UART_RxCpltCallback+0x294>)
 8001724:	7011      	strb	r1, [r2, #0]
 8001726:	461a      	mov	r2, r3
 8001728:	4b30      	ldr	r3, [pc, #192]	@ (80017ec <HAL_UART_RxCpltCallback+0x28c>)
 800172a:	7819      	ldrb	r1, [r3, #0]
 800172c:	4b32      	ldr	r3, [pc, #200]	@ (80017f8 <HAL_UART_RxCpltCallback+0x298>)
 800172e:	5499      	strb	r1, [r3, r2]
				OveralltypeH = Uart1_RxBuff[0]>>4;						//该字节为数据读写总类型标示字节，解析读写数据类型，高位代表读或写，低位代表数据类型
 8001730:	4b2e      	ldr	r3, [pc, #184]	@ (80017ec <HAL_UART_RxCpltCallback+0x28c>)
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	091b      	lsrs	r3, r3, #4
 8001736:	b2da      	uxtb	r2, r3
 8001738:	4b31      	ldr	r3, [pc, #196]	@ (8001800 <HAL_UART_RxCpltCallback+0x2a0>)
 800173a:	701a      	strb	r2, [r3, #0]
				OveralltypeL = Uart1_RxBuff[0] & 0x0F;
 800173c:	4b2b      	ldr	r3, [pc, #172]	@ (80017ec <HAL_UART_RxCpltCallback+0x28c>)
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	f003 030f 	and.w	r3, r3, #15
 8001744:	b2da      	uxtb	r2, r3
 8001746:	4b2f      	ldr	r3, [pc, #188]	@ (8001804 <HAL_UART_RxCpltCallback+0x2a4>)
 8001748:	701a      	strb	r2, [r3, #0]
				if(OveralltypeH == 0x01)
 800174a:	4b2d      	ldr	r3, [pc, #180]	@ (8001800 <HAL_UART_RxCpltCallback+0x2a0>)
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	2b01      	cmp	r3, #1
 8001750:	d13b      	bne.n	80017ca <HAL_UART_RxCpltCallback+0x26a>
				{
					Totaltype = DATA_WR;							//向井下写数据
 8001752:	4b2d      	ldr	r3, [pc, #180]	@ (8001808 <HAL_UART_RxCpltCallback+0x2a8>)
 8001754:	2201      	movs	r2, #1
 8001756:	701a      	strb	r2, [r3, #0]
					if(OveralltypeL == 0x00)
 8001758:	4b2a      	ldr	r3, [pc, #168]	@ (8001804 <HAL_UART_RxCpltCallback+0x2a4>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d109      	bne.n	8001774 <HAL_UART_RxCpltCallback+0x214>
					{
						Workmode = SERVICETABLE;					//服务表激活
 8001760:	4b2a      	ldr	r3, [pc, #168]	@ (800180c <HAL_UART_RxCpltCallback+0x2ac>)
 8001762:	2201      	movs	r2, #1
 8001764:	701a      	strb	r2, [r3, #0]
						ETHdatastate++ ;
 8001766:	4b22      	ldr	r3, [pc, #136]	@ (80017f0 <HAL_UART_RxCpltCallback+0x290>)
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	3301      	adds	r3, #1
 800176c:	b2da      	uxtb	r2, r3
 800176e:	4b20      	ldr	r3, [pc, #128]	@ (80017f0 <HAL_UART_RxCpltCallback+0x290>)
 8001770:	701a      	strb	r2, [r3, #0]
				}
				else
				{
					Resetstate(ETHCMD);
				}
				break;
 8001772:	e1b7      	b.n	8001ae4 <HAL_UART_RxCpltCallback+0x584>
					else if(OveralltypeL == 0x01)
 8001774:	4b23      	ldr	r3, [pc, #140]	@ (8001804 <HAL_UART_RxCpltCallback+0x2a4>)
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	2b01      	cmp	r3, #1
 800177a:	d109      	bne.n	8001790 <HAL_UART_RxCpltCallback+0x230>
						Workmode = CONTRALCMD;						//下发控制命令
 800177c:	4b23      	ldr	r3, [pc, #140]	@ (800180c <HAL_UART_RxCpltCallback+0x2ac>)
 800177e:	2202      	movs	r2, #2
 8001780:	701a      	strb	r2, [r3, #0]
						ETHdatastate++ ;
 8001782:	4b1b      	ldr	r3, [pc, #108]	@ (80017f0 <HAL_UART_RxCpltCallback+0x290>)
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	3301      	adds	r3, #1
 8001788:	b2da      	uxtb	r2, r3
 800178a:	4b19      	ldr	r3, [pc, #100]	@ (80017f0 <HAL_UART_RxCpltCallback+0x290>)
 800178c:	701a      	strb	r2, [r3, #0]
				break;
 800178e:	e1a9      	b.n	8001ae4 <HAL_UART_RxCpltCallback+0x584>
					else if(OveralltypeL == 0x03)
 8001790:	4b1c      	ldr	r3, [pc, #112]	@ (8001804 <HAL_UART_RxCpltCallback+0x2a4>)
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	2b03      	cmp	r3, #3
 8001796:	d106      	bne.n	80017a6 <HAL_UART_RxCpltCallback+0x246>
						ETHdatastate++ ;
 8001798:	4b15      	ldr	r3, [pc, #84]	@ (80017f0 <HAL_UART_RxCpltCallback+0x290>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	3301      	adds	r3, #1
 800179e:	b2da      	uxtb	r2, r3
 80017a0:	4b13      	ldr	r3, [pc, #76]	@ (80017f0 <HAL_UART_RxCpltCallback+0x290>)
 80017a2:	701a      	strb	r2, [r3, #0]
				break;
 80017a4:	e19e      	b.n	8001ae4 <HAL_UART_RxCpltCallback+0x584>
					else if(OveralltypeL == 0x04)
 80017a6:	4b17      	ldr	r3, [pc, #92]	@ (8001804 <HAL_UART_RxCpltCallback+0x2a4>)
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	2b04      	cmp	r3, #4
 80017ac:	d109      	bne.n	80017c2 <HAL_UART_RxCpltCallback+0x262>
						Workmode = DEACTIVE;						//服务表反激活
 80017ae:	4b17      	ldr	r3, [pc, #92]	@ (800180c <HAL_UART_RxCpltCallback+0x2ac>)
 80017b0:	2204      	movs	r2, #4
 80017b2:	701a      	strb	r2, [r3, #0]
						ETHdatastate++ ;
 80017b4:	4b0e      	ldr	r3, [pc, #56]	@ (80017f0 <HAL_UART_RxCpltCallback+0x290>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	3301      	adds	r3, #1
 80017ba:	b2da      	uxtb	r2, r3
 80017bc:	4b0c      	ldr	r3, [pc, #48]	@ (80017f0 <HAL_UART_RxCpltCallback+0x290>)
 80017be:	701a      	strb	r2, [r3, #0]
				break;
 80017c0:	e190      	b.n	8001ae4 <HAL_UART_RxCpltCallback+0x584>
						Resetstate(ETHCMD);
 80017c2:	2001      	movs	r0, #1
 80017c4:	f000 fc30 	bl	8002028 <Resetstate>
				break;
 80017c8:	e18c      	b.n	8001ae4 <HAL_UART_RxCpltCallback+0x584>
				else if(OveralltypeH == 0x02)
 80017ca:	4b0d      	ldr	r3, [pc, #52]	@ (8001800 <HAL_UART_RxCpltCallback+0x2a0>)
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	2b02      	cmp	r3, #2
 80017d0:	d11e      	bne.n	8001810 <HAL_UART_RxCpltCallback+0x2b0>
					Totaltype = DATA_RD;							//从井下读数据
 80017d2:	4b0d      	ldr	r3, [pc, #52]	@ (8001808 <HAL_UART_RxCpltCallback+0x2a8>)
 80017d4:	2202      	movs	r2, #2
 80017d6:	701a      	strb	r2, [r3, #0]
					ETHdatastate++ ;
 80017d8:	4b05      	ldr	r3, [pc, #20]	@ (80017f0 <HAL_UART_RxCpltCallback+0x290>)
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	3301      	adds	r3, #1
 80017de:	b2da      	uxtb	r2, r3
 80017e0:	4b03      	ldr	r3, [pc, #12]	@ (80017f0 <HAL_UART_RxCpltCallback+0x290>)
 80017e2:	701a      	strb	r2, [r3, #0]
				break;
 80017e4:	e17e      	b.n	8001ae4 <HAL_UART_RxCpltCallback+0x584>
 80017e6:	bf00      	nop
 80017e8:	40013800 	.word	0x40013800
 80017ec:	20000210 	.word	0x20000210
 80017f0:	200002f0 	.word	0x200002f0
 80017f4:	200002f2 	.word	0x200002f2
 80017f8:	200002fc 	.word	0x200002fc
 80017fc:	200006fc 	.word	0x200006fc
 8001800:	200002f6 	.word	0x200002f6
 8001804:	200002f7 	.word	0x200002f7
 8001808:	200002f8 	.word	0x200002f8
 800180c:	20000700 	.word	0x20000700
					Resetstate(ETHCMD);
 8001810:	2001      	movs	r0, #1
 8001812:	f000 fc09 	bl	8002028 <Resetstate>
				break;
 8001816:	e165      	b.n	8001ae4 <HAL_UART_RxCpltCallback+0x584>
			case 7:
				ETHdatabuf[ETHdataheadnum++] = Uart1_RxBuff[0];		//仪器地址
 8001818:	4b8d      	ldr	r3, [pc, #564]	@ (8001a50 <HAL_UART_RxCpltCallback+0x4f0>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	1c5a      	adds	r2, r3, #1
 800181e:	b2d1      	uxtb	r1, r2
 8001820:	4a8b      	ldr	r2, [pc, #556]	@ (8001a50 <HAL_UART_RxCpltCallback+0x4f0>)
 8001822:	7011      	strb	r1, [r2, #0]
 8001824:	461a      	mov	r2, r3
 8001826:	4b8b      	ldr	r3, [pc, #556]	@ (8001a54 <HAL_UART_RxCpltCallback+0x4f4>)
 8001828:	7819      	ldrb	r1, [r3, #0]
 800182a:	4b8b      	ldr	r3, [pc, #556]	@ (8001a58 <HAL_UART_RxCpltCallback+0x4f8>)
 800182c:	5499      	strb	r1, [r3, r2]
				Tooladdress = Uart1_RxBuff[0];
 800182e:	4b89      	ldr	r3, [pc, #548]	@ (8001a54 <HAL_UART_RxCpltCallback+0x4f4>)
 8001830:	781a      	ldrb	r2, [r3, #0]
 8001832:	4b8a      	ldr	r3, [pc, #552]	@ (8001a5c <HAL_UART_RxCpltCallback+0x4fc>)
 8001834:	701a      	strb	r2, [r3, #0]
				ETHdatastate++ ;
 8001836:	4b8a      	ldr	r3, [pc, #552]	@ (8001a60 <HAL_UART_RxCpltCallback+0x500>)
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	3301      	adds	r3, #1
 800183c:	b2da      	uxtb	r2, r3
 800183e:	4b88      	ldr	r3, [pc, #544]	@ (8001a60 <HAL_UART_RxCpltCallback+0x500>)
 8001840:	701a      	strb	r2, [r3, #0]
				break;
 8001842:	e14f      	b.n	8001ae4 <HAL_UART_RxCpltCallback+0x584>
			case 8:
				ETHdatabuf[ETHdataheadnum++] = Uart1_RxBuff[0];
 8001844:	4b82      	ldr	r3, [pc, #520]	@ (8001a50 <HAL_UART_RxCpltCallback+0x4f0>)
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	1c5a      	adds	r2, r3, #1
 800184a:	b2d1      	uxtb	r1, r2
 800184c:	4a80      	ldr	r2, [pc, #512]	@ (8001a50 <HAL_UART_RxCpltCallback+0x4f0>)
 800184e:	7011      	strb	r1, [r2, #0]
 8001850:	461a      	mov	r2, r3
 8001852:	4b80      	ldr	r3, [pc, #512]	@ (8001a54 <HAL_UART_RxCpltCallback+0x4f4>)
 8001854:	7819      	ldrb	r1, [r3, #0]
 8001856:	4b80      	ldr	r3, [pc, #512]	@ (8001a58 <HAL_UART_RxCpltCallback+0x4f8>)
 8001858:	5499      	strb	r1, [r3, r2]
				Cmdword = Uart1_RxBuff[0];
 800185a:	4b7e      	ldr	r3, [pc, #504]	@ (8001a54 <HAL_UART_RxCpltCallback+0x4f4>)
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	461a      	mov	r2, r3
 8001860:	4b80      	ldr	r3, [pc, #512]	@ (8001a64 <HAL_UART_RxCpltCallback+0x504>)
 8001862:	801a      	strh	r2, [r3, #0]
				ETHdatastate++ ;
 8001864:	4b7e      	ldr	r3, [pc, #504]	@ (8001a60 <HAL_UART_RxCpltCallback+0x500>)
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	3301      	adds	r3, #1
 800186a:	b2da      	uxtb	r2, r3
 800186c:	4b7c      	ldr	r3, [pc, #496]	@ (8001a60 <HAL_UART_RxCpltCallback+0x500>)
 800186e:	701a      	strb	r2, [r3, #0]
				break;
 8001870:	e138      	b.n	8001ae4 <HAL_UART_RxCpltCallback+0x584>
			case 9:
				ETHdatabuf[ETHdataheadnum++] = Uart1_RxBuff[0];		//命令字/subset number
 8001872:	4b77      	ldr	r3, [pc, #476]	@ (8001a50 <HAL_UART_RxCpltCallback+0x4f0>)
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	1c5a      	adds	r2, r3, #1
 8001878:	b2d1      	uxtb	r1, r2
 800187a:	4a75      	ldr	r2, [pc, #468]	@ (8001a50 <HAL_UART_RxCpltCallback+0x4f0>)
 800187c:	7011      	strb	r1, [r2, #0]
 800187e:	461a      	mov	r2, r3
 8001880:	4b74      	ldr	r3, [pc, #464]	@ (8001a54 <HAL_UART_RxCpltCallback+0x4f4>)
 8001882:	7819      	ldrb	r1, [r3, #0]
 8001884:	4b74      	ldr	r3, [pc, #464]	@ (8001a58 <HAL_UART_RxCpltCallback+0x4f8>)
 8001886:	5499      	strb	r1, [r3, r2]
				Cmdword = (Cmdword << 8) + Uart1_RxBuff[0];
 8001888:	4b76      	ldr	r3, [pc, #472]	@ (8001a64 <HAL_UART_RxCpltCallback+0x504>)
 800188a:	881b      	ldrh	r3, [r3, #0]
 800188c:	021b      	lsls	r3, r3, #8
 800188e:	b29b      	uxth	r3, r3
 8001890:	4a70      	ldr	r2, [pc, #448]	@ (8001a54 <HAL_UART_RxCpltCallback+0x4f4>)
 8001892:	7812      	ldrb	r2, [r2, #0]
 8001894:	4413      	add	r3, r2
 8001896:	b29a      	uxth	r2, r3
 8001898:	4b72      	ldr	r3, [pc, #456]	@ (8001a64 <HAL_UART_RxCpltCallback+0x504>)
 800189a:	801a      	strh	r2, [r3, #0]
				ETHdatastate++ ;
 800189c:	4b70      	ldr	r3, [pc, #448]	@ (8001a60 <HAL_UART_RxCpltCallback+0x500>)
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	3301      	adds	r3, #1
 80018a2:	b2da      	uxtb	r2, r3
 80018a4:	4b6e      	ldr	r3, [pc, #440]	@ (8001a60 <HAL_UART_RxCpltCallback+0x500>)
 80018a6:	701a      	strb	r2, [r3, #0]
				break;
 80018a8:	e11c      	b.n	8001ae4 <HAL_UART_RxCpltCallback+0x584>
			case 10:
				if(Timestampnum <= 4)									//四字节时间戳
 80018aa:	4b6f      	ldr	r3, [pc, #444]	@ (8001a68 <HAL_UART_RxCpltCallback+0x508>)
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	2b04      	cmp	r3, #4
 80018b0:	f200 8115 	bhi.w	8001ade <HAL_UART_RxCpltCallback+0x57e>
				{
					Timestampnum++;
 80018b4:	4b6c      	ldr	r3, [pc, #432]	@ (8001a68 <HAL_UART_RxCpltCallback+0x508>)
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	3301      	adds	r3, #1
 80018ba:	b2da      	uxtb	r2, r3
 80018bc:	4b6a      	ldr	r3, [pc, #424]	@ (8001a68 <HAL_UART_RxCpltCallback+0x508>)
 80018be:	701a      	strb	r2, [r3, #0]
					ETHdatabuf[ETHdataheadnum++] = Uart1_RxBuff[0];
 80018c0:	4b63      	ldr	r3, [pc, #396]	@ (8001a50 <HAL_UART_RxCpltCallback+0x4f0>)
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	1c5a      	adds	r2, r3, #1
 80018c6:	b2d1      	uxtb	r1, r2
 80018c8:	4a61      	ldr	r2, [pc, #388]	@ (8001a50 <HAL_UART_RxCpltCallback+0x4f0>)
 80018ca:	7011      	strb	r1, [r2, #0]
 80018cc:	461a      	mov	r2, r3
 80018ce:	4b61      	ldr	r3, [pc, #388]	@ (8001a54 <HAL_UART_RxCpltCallback+0x4f4>)
 80018d0:	7819      	ldrb	r1, [r3, #0]
 80018d2:	4b61      	ldr	r3, [pc, #388]	@ (8001a58 <HAL_UART_RxCpltCallback+0x4f8>)
 80018d4:	5499      	strb	r1, [r3, r2]
					ETH_Timestamp = (ETH_Timestamp << 8) + Uart1_RxBuff[0];
 80018d6:	4b65      	ldr	r3, [pc, #404]	@ (8001a6c <HAL_UART_RxCpltCallback+0x50c>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	021b      	lsls	r3, r3, #8
 80018dc:	4a5d      	ldr	r2, [pc, #372]	@ (8001a54 <HAL_UART_RxCpltCallback+0x4f4>)
 80018de:	7812      	ldrb	r2, [r2, #0]
 80018e0:	4413      	add	r3, r2
 80018e2:	4a62      	ldr	r2, [pc, #392]	@ (8001a6c <HAL_UART_RxCpltCallback+0x50c>)
 80018e4:	6013      	str	r3, [r2, #0]
					HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_12);
 80018e6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80018ea:	4861      	ldr	r0, [pc, #388]	@ (8001a70 <HAL_UART_RxCpltCallback+0x510>)
 80018ec:	f001 fa0f 	bl	8002d0e <HAL_GPIO_TogglePin>
					if(Timestampnum >=4)
 80018f0:	4b5d      	ldr	r3, [pc, #372]	@ (8001a68 <HAL_UART_RxCpltCallback+0x508>)
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	2b03      	cmp	r3, #3
 80018f6:	f240 80f2 	bls.w	8001ade <HAL_UART_RxCpltCallback+0x57e>
					{
						ETHdatastate++;
 80018fa:	4b59      	ldr	r3, [pc, #356]	@ (8001a60 <HAL_UART_RxCpltCallback+0x500>)
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	3301      	adds	r3, #1
 8001900:	b2da      	uxtb	r2, r3
 8001902:	4b57      	ldr	r3, [pc, #348]	@ (8001a60 <HAL_UART_RxCpltCallback+0x500>)
 8001904:	701a      	strb	r2, [r3, #0]
						Timestampnum = 0;
 8001906:	4b58      	ldr	r3, [pc, #352]	@ (8001a68 <HAL_UART_RxCpltCallback+0x508>)
 8001908:	2200      	movs	r2, #0
 800190a:	701a      	strb	r2, [r3, #0]
					}
				}
				break;
 800190c:	e0e7      	b.n	8001ade <HAL_UART_RxCpltCallback+0x57e>
			case 11:
				ETHdatabuf[ETHdataheadnum++] = Uart1_RxBuff[0];
 800190e:	4b50      	ldr	r3, [pc, #320]	@ (8001a50 <HAL_UART_RxCpltCallback+0x4f0>)
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	1c5a      	adds	r2, r3, #1
 8001914:	b2d1      	uxtb	r1, r2
 8001916:	4a4e      	ldr	r2, [pc, #312]	@ (8001a50 <HAL_UART_RxCpltCallback+0x4f0>)
 8001918:	7011      	strb	r1, [r2, #0]
 800191a:	461a      	mov	r2, r3
 800191c:	4b4d      	ldr	r3, [pc, #308]	@ (8001a54 <HAL_UART_RxCpltCallback+0x4f4>)
 800191e:	7819      	ldrb	r1, [r3, #0]
 8001920:	4b4d      	ldr	r3, [pc, #308]	@ (8001a58 <HAL_UART_RxCpltCallback+0x4f8>)
 8001922:	5499      	strb	r1, [r3, r2]
				Overtime = Uart1_RxBuff[0];
 8001924:	4b4b      	ldr	r3, [pc, #300]	@ (8001a54 <HAL_UART_RxCpltCallback+0x4f4>)
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	461a      	mov	r2, r3
 800192a:	4b52      	ldr	r3, [pc, #328]	@ (8001a74 <HAL_UART_RxCpltCallback+0x514>)
 800192c:	801a      	strh	r2, [r3, #0]
				ETHdatastate++;
 800192e:	4b4c      	ldr	r3, [pc, #304]	@ (8001a60 <HAL_UART_RxCpltCallback+0x500>)
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	3301      	adds	r3, #1
 8001934:	b2da      	uxtb	r2, r3
 8001936:	4b4a      	ldr	r3, [pc, #296]	@ (8001a60 <HAL_UART_RxCpltCallback+0x500>)
 8001938:	701a      	strb	r2, [r3, #0]
				break;
 800193a:	e0d3      	b.n	8001ae4 <HAL_UART_RxCpltCallback+0x584>
			case 12:
				ETHdatabuf[ETHdataheadnum++] = Uart1_RxBuff[0];
 800193c:	4b44      	ldr	r3, [pc, #272]	@ (8001a50 <HAL_UART_RxCpltCallback+0x4f0>)
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	1c5a      	adds	r2, r3, #1
 8001942:	b2d1      	uxtb	r1, r2
 8001944:	4a42      	ldr	r2, [pc, #264]	@ (8001a50 <HAL_UART_RxCpltCallback+0x4f0>)
 8001946:	7011      	strb	r1, [r2, #0]
 8001948:	461a      	mov	r2, r3
 800194a:	4b42      	ldr	r3, [pc, #264]	@ (8001a54 <HAL_UART_RxCpltCallback+0x4f4>)
 800194c:	7819      	ldrb	r1, [r3, #0]
 800194e:	4b42      	ldr	r3, [pc, #264]	@ (8001a58 <HAL_UART_RxCpltCallback+0x4f8>)
 8001950:	5499      	strb	r1, [r3, r2]
				Overtime = (Overtime << 8) + Uart1_RxBuff[0];						//超时时间
 8001952:	4b48      	ldr	r3, [pc, #288]	@ (8001a74 <HAL_UART_RxCpltCallback+0x514>)
 8001954:	881b      	ldrh	r3, [r3, #0]
 8001956:	021b      	lsls	r3, r3, #8
 8001958:	b29b      	uxth	r3, r3
 800195a:	4a3e      	ldr	r2, [pc, #248]	@ (8001a54 <HAL_UART_RxCpltCallback+0x4f4>)
 800195c:	7812      	ldrb	r2, [r2, #0]
 800195e:	4413      	add	r3, r2
 8001960:	b29a      	uxth	r2, r3
 8001962:	4b44      	ldr	r3, [pc, #272]	@ (8001a74 <HAL_UART_RxCpltCallback+0x514>)
 8001964:	801a      	strh	r2, [r3, #0]
				ETHdatastate++;
 8001966:	4b3e      	ldr	r3, [pc, #248]	@ (8001a60 <HAL_UART_RxCpltCallback+0x500>)
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	3301      	adds	r3, #1
 800196c:	b2da      	uxtb	r2, r3
 800196e:	4b3c      	ldr	r3, [pc, #240]	@ (8001a60 <HAL_UART_RxCpltCallback+0x500>)
 8001970:	701a      	strb	r2, [r3, #0]
				break;
 8001972:	e0b7      	b.n	8001ae4 <HAL_UART_RxCpltCallback+0x584>
			case 13:
				ETHdatabuf[ETHdataheadnum++] = Uart1_RxBuff[0];
 8001974:	4b36      	ldr	r3, [pc, #216]	@ (8001a50 <HAL_UART_RxCpltCallback+0x4f0>)
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	1c5a      	adds	r2, r3, #1
 800197a:	b2d1      	uxtb	r1, r2
 800197c:	4a34      	ldr	r2, [pc, #208]	@ (8001a50 <HAL_UART_RxCpltCallback+0x4f0>)
 800197e:	7011      	strb	r1, [r2, #0]
 8001980:	461a      	mov	r2, r3
 8001982:	4b34      	ldr	r3, [pc, #208]	@ (8001a54 <HAL_UART_RxCpltCallback+0x4f4>)
 8001984:	7819      	ldrb	r1, [r3, #0]
 8001986:	4b34      	ldr	r3, [pc, #208]	@ (8001a58 <HAL_UART_RxCpltCallback+0x4f8>)
 8001988:	5499      	strb	r1, [r3, r2]
				Reserve = Uart1_RxBuff[0];
 800198a:	4b32      	ldr	r3, [pc, #200]	@ (8001a54 <HAL_UART_RxCpltCallback+0x4f4>)
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	461a      	mov	r2, r3
 8001990:	4b39      	ldr	r3, [pc, #228]	@ (8001a78 <HAL_UART_RxCpltCallback+0x518>)
 8001992:	801a      	strh	r2, [r3, #0]
				ETHdatastate++;
 8001994:	4b32      	ldr	r3, [pc, #200]	@ (8001a60 <HAL_UART_RxCpltCallback+0x500>)
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	3301      	adds	r3, #1
 800199a:	b2da      	uxtb	r2, r3
 800199c:	4b30      	ldr	r3, [pc, #192]	@ (8001a60 <HAL_UART_RxCpltCallback+0x500>)
 800199e:	701a      	strb	r2, [r3, #0]
				break;
 80019a0:	e0a0      	b.n	8001ae4 <HAL_UART_RxCpltCallback+0x584>
			case 14:
				ETHdatabuf[ETHdataheadnum++] = Uart1_RxBuff[0];
 80019a2:	4b2b      	ldr	r3, [pc, #172]	@ (8001a50 <HAL_UART_RxCpltCallback+0x4f0>)
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	1c5a      	adds	r2, r3, #1
 80019a8:	b2d1      	uxtb	r1, r2
 80019aa:	4a29      	ldr	r2, [pc, #164]	@ (8001a50 <HAL_UART_RxCpltCallback+0x4f0>)
 80019ac:	7011      	strb	r1, [r2, #0]
 80019ae:	461a      	mov	r2, r3
 80019b0:	4b28      	ldr	r3, [pc, #160]	@ (8001a54 <HAL_UART_RxCpltCallback+0x4f4>)
 80019b2:	7819      	ldrb	r1, [r3, #0]
 80019b4:	4b28      	ldr	r3, [pc, #160]	@ (8001a58 <HAL_UART_RxCpltCallback+0x4f8>)
 80019b6:	5499      	strb	r1, [r3, r2]
				Reserve = (Reserve << 8) + Uart1_RxBuff[0];
 80019b8:	4b2f      	ldr	r3, [pc, #188]	@ (8001a78 <HAL_UART_RxCpltCallback+0x518>)
 80019ba:	881b      	ldrh	r3, [r3, #0]
 80019bc:	021b      	lsls	r3, r3, #8
 80019be:	b29b      	uxth	r3, r3
 80019c0:	4a24      	ldr	r2, [pc, #144]	@ (8001a54 <HAL_UART_RxCpltCallback+0x4f4>)
 80019c2:	7812      	ldrb	r2, [r2, #0]
 80019c4:	4413      	add	r3, r2
 80019c6:	b29a      	uxth	r2, r3
 80019c8:	4b2b      	ldr	r3, [pc, #172]	@ (8001a78 <HAL_UART_RxCpltCallback+0x518>)
 80019ca:	801a      	strh	r2, [r3, #0]
				ETHdatastate++;
 80019cc:	4b24      	ldr	r3, [pc, #144]	@ (8001a60 <HAL_UART_RxCpltCallback+0x500>)
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	3301      	adds	r3, #1
 80019d2:	b2da      	uxtb	r2, r3
 80019d4:	4b22      	ldr	r3, [pc, #136]	@ (8001a60 <HAL_UART_RxCpltCallback+0x500>)
 80019d6:	701a      	strb	r2, [r3, #0]
				break;
 80019d8:	e084      	b.n	8001ae4 <HAL_UART_RxCpltCallback+0x584>
			case 15:
				ETHdatabuf[ETHdataheadnum++] = Uart1_RxBuff[0];
 80019da:	4b1d      	ldr	r3, [pc, #116]	@ (8001a50 <HAL_UART_RxCpltCallback+0x4f0>)
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	1c5a      	adds	r2, r3, #1
 80019e0:	b2d1      	uxtb	r1, r2
 80019e2:	4a1b      	ldr	r2, [pc, #108]	@ (8001a50 <HAL_UART_RxCpltCallback+0x4f0>)
 80019e4:	7011      	strb	r1, [r2, #0]
 80019e6:	461a      	mov	r2, r3
 80019e8:	4b1a      	ldr	r3, [pc, #104]	@ (8001a54 <HAL_UART_RxCpltCallback+0x4f4>)
 80019ea:	7819      	ldrb	r1, [r3, #0]
 80019ec:	4b1a      	ldr	r3, [pc, #104]	@ (8001a58 <HAL_UART_RxCpltCallback+0x4f8>)
 80019ee:	5499      	strb	r1, [r3, r2]
				ETHbodybuf[ETHdatabodynum++] = Uart1_RxBuff[0];
 80019f0:	4b22      	ldr	r3, [pc, #136]	@ (8001a7c <HAL_UART_RxCpltCallback+0x51c>)
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	1c5a      	adds	r2, r3, #1
 80019f6:	b2d1      	uxtb	r1, r2
 80019f8:	4a20      	ldr	r2, [pc, #128]	@ (8001a7c <HAL_UART_RxCpltCallback+0x51c>)
 80019fa:	7011      	strb	r1, [r2, #0]
 80019fc:	461a      	mov	r2, r3
 80019fe:	4b15      	ldr	r3, [pc, #84]	@ (8001a54 <HAL_UART_RxCpltCallback+0x4f4>)
 8001a00:	7819      	ldrb	r1, [r3, #0]
 8001a02:	4b1f      	ldr	r3, [pc, #124]	@ (8001a80 <HAL_UART_RxCpltCallback+0x520>)
 8001a04:	5499      	strb	r1, [r3, r2]
				if(ETHdatabodynum >= ETHdatalen)
 8001a06:	4b1d      	ldr	r3, [pc, #116]	@ (8001a7c <HAL_UART_RxCpltCallback+0x51c>)
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	4b1d      	ldr	r3, [pc, #116]	@ (8001a84 <HAL_UART_RxCpltCallback+0x524>)
 8001a0e:	881b      	ldrh	r3, [r3, #0]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d366      	bcc.n	8001ae2 <HAL_UART_RxCpltCallback+0x582>
				{
					ETHdatastate++;
 8001a14:	4b12      	ldr	r3, [pc, #72]	@ (8001a60 <HAL_UART_RxCpltCallback+0x500>)
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	3301      	adds	r3, #1
 8001a1a:	b2da      	uxtb	r2, r3
 8001a1c:	4b10      	ldr	r3, [pc, #64]	@ (8001a60 <HAL_UART_RxCpltCallback+0x500>)
 8001a1e:	701a      	strb	r2, [r3, #0]
				}
				break;
 8001a20:	e05f      	b.n	8001ae2 <HAL_UART_RxCpltCallback+0x582>
			case 16:
				ETHdatabuf[ETHdataheadnum++] = Uart1_RxBuff[0];
 8001a22:	4b0b      	ldr	r3, [pc, #44]	@ (8001a50 <HAL_UART_RxCpltCallback+0x4f0>)
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	1c5a      	adds	r2, r3, #1
 8001a28:	b2d1      	uxtb	r1, r2
 8001a2a:	4a09      	ldr	r2, [pc, #36]	@ (8001a50 <HAL_UART_RxCpltCallback+0x4f0>)
 8001a2c:	7011      	strb	r1, [r2, #0]
 8001a2e:	461a      	mov	r2, r3
 8001a30:	4b08      	ldr	r3, [pc, #32]	@ (8001a54 <HAL_UART_RxCpltCallback+0x4f4>)
 8001a32:	7819      	ldrb	r1, [r3, #0]
 8001a34:	4b08      	ldr	r3, [pc, #32]	@ (8001a58 <HAL_UART_RxCpltCallback+0x4f8>)
 8001a36:	5499      	strb	r1, [r3, r2]
				ETH_Checksum = Uart1_RxBuff[0];
 8001a38:	4b06      	ldr	r3, [pc, #24]	@ (8001a54 <HAL_UART_RxCpltCallback+0x4f4>)
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	4b12      	ldr	r3, [pc, #72]	@ (8001a88 <HAL_UART_RxCpltCallback+0x528>)
 8001a40:	801a      	strh	r2, [r3, #0]
				ETHdatastate++;
 8001a42:	4b07      	ldr	r3, [pc, #28]	@ (8001a60 <HAL_UART_RxCpltCallback+0x500>)
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	3301      	adds	r3, #1
 8001a48:	b2da      	uxtb	r2, r3
 8001a4a:	4b05      	ldr	r3, [pc, #20]	@ (8001a60 <HAL_UART_RxCpltCallback+0x500>)
 8001a4c:	701a      	strb	r2, [r3, #0]
				break;
 8001a4e:	e049      	b.n	8001ae4 <HAL_UART_RxCpltCallback+0x584>
 8001a50:	200002f2 	.word	0x200002f2
 8001a54:	20000210 	.word	0x20000210
 8001a58:	200002fc 	.word	0x200002fc
 8001a5c:	20000701 	.word	0x20000701
 8001a60:	200002f0 	.word	0x200002f0
 8001a64:	20000702 	.word	0x20000702
 8001a68:	20000704 	.word	0x20000704
 8001a6c:	20000708 	.word	0x20000708
 8001a70:	40010c00 	.word	0x40010c00
 8001a74:	2000070c 	.word	0x2000070c
 8001a78:	2000070e 	.word	0x2000070e
 8001a7c:	200002f4 	.word	0x200002f4
 8001a80:	200004fc 	.word	0x200004fc
 8001a84:	200006fc 	.word	0x200006fc
 8001a88:	20000710 	.word	0x20000710
			case 17:
				ETHdatabuf[ETHdataheadnum++] = Uart1_RxBuff[0];
 8001a8c:	4b9d      	ldr	r3, [pc, #628]	@ (8001d04 <HAL_UART_RxCpltCallback+0x7a4>)
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	1c5a      	adds	r2, r3, #1
 8001a92:	b2d1      	uxtb	r1, r2
 8001a94:	4a9b      	ldr	r2, [pc, #620]	@ (8001d04 <HAL_UART_RxCpltCallback+0x7a4>)
 8001a96:	7011      	strb	r1, [r2, #0]
 8001a98:	461a      	mov	r2, r3
 8001a9a:	4b9b      	ldr	r3, [pc, #620]	@ (8001d08 <HAL_UART_RxCpltCallback+0x7a8>)
 8001a9c:	7819      	ldrb	r1, [r3, #0]
 8001a9e:	4b9b      	ldr	r3, [pc, #620]	@ (8001d0c <HAL_UART_RxCpltCallback+0x7ac>)
 8001aa0:	5499      	strb	r1, [r3, r2]
				ETH_Checksum = (ETH_Checksum << 8) + Uart1_RxBuff[0];
 8001aa2:	4b9b      	ldr	r3, [pc, #620]	@ (8001d10 <HAL_UART_RxCpltCallback+0x7b0>)
 8001aa4:	881b      	ldrh	r3, [r3, #0]
 8001aa6:	021b      	lsls	r3, r3, #8
 8001aa8:	b29b      	uxth	r3, r3
 8001aaa:	4a97      	ldr	r2, [pc, #604]	@ (8001d08 <HAL_UART_RxCpltCallback+0x7a8>)
 8001aac:	7812      	ldrb	r2, [r2, #0]
 8001aae:	4413      	add	r3, r2
 8001ab0:	b29a      	uxth	r2, r3
 8001ab2:	4b97      	ldr	r3, [pc, #604]	@ (8001d10 <HAL_UART_RxCpltCallback+0x7b0>)
 8001ab4:	801a      	strh	r2, [r3, #0]

				if(ETH_Checksum == Checksum_Reverse(ETHbodybuf,ETHdatalen))
 8001ab6:	4b97      	ldr	r3, [pc, #604]	@ (8001d14 <HAL_UART_RxCpltCallback+0x7b4>)
 8001ab8:	881b      	ldrh	r3, [r3, #0]
 8001aba:	4619      	mov	r1, r3
 8001abc:	4896      	ldr	r0, [pc, #600]	@ (8001d18 <HAL_UART_RxCpltCallback+0x7b8>)
 8001abe:	f7ff f905 	bl	8000ccc <Checksum_Reverse>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	4b92      	ldr	r3, [pc, #584]	@ (8001d10 <HAL_UART_RxCpltCallback+0x7b0>)
 8001ac8:	881b      	ldrh	r3, [r3, #0]
 8001aca:	429a      	cmp	r2, r3
 8001acc:	d103      	bne.n	8001ad6 <HAL_UART_RxCpltCallback+0x576>
				{
					ETHdataoverflag = 1;
 8001ace:	4b93      	ldr	r3, [pc, #588]	@ (8001d1c <HAL_UART_RxCpltCallback+0x7bc>)
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	701a      	strb	r2, [r3, #0]
				}
				else
				{
					Resetstate(ETHCMD);
				}
				break;
 8001ad4:	e006      	b.n	8001ae4 <HAL_UART_RxCpltCallback+0x584>
					Resetstate(ETHCMD);
 8001ad6:	2001      	movs	r0, #1
 8001ad8:	f000 faa6 	bl	8002028 <Resetstate>
				break;
 8001adc:	e002      	b.n	8001ae4 <HAL_UART_RxCpltCallback+0x584>
				break;
 8001ade:	bf00      	nop
 8001ae0:	e000      	b.n	8001ae4 <HAL_UART_RxCpltCallback+0x584>
				break;
 8001ae2:	bf00      	nop
		}
		HAL_UART_Receive_IT(&huart1,Uart1_RxBuff, 1);
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	4988      	ldr	r1, [pc, #544]	@ (8001d08 <HAL_UART_RxCpltCallback+0x7a8>)
 8001ae8:	488d      	ldr	r0, [pc, #564]	@ (8001d20 <HAL_UART_RxCpltCallback+0x7c0>)
 8001aea:	f002 f930 	bl	8003d4e <HAL_UART_Receive_IT>
	}
	if(huart->Instance == UART5)				//如果产生中断的是串口5
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a8c      	ldr	r2, [pc, #560]	@ (8001d24 <HAL_UART_RxCpltCallback+0x7c4>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	f040 8101 	bne.w	8001cfc <HAL_UART_RxCpltCallback+0x79c>
	{
		//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
		Downdatatimeoutnum = 0;
 8001afa:	4b8b      	ldr	r3, [pc, #556]	@ (8001d28 <HAL_UART_RxCpltCallback+0x7c8>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	801a      	strh	r2, [r3, #0]
		switch(DOWNdatastate)
 8001b00:	4b8a      	ldr	r3, [pc, #552]	@ (8001d2c <HAL_UART_RxCpltCallback+0x7cc>)
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	2b07      	cmp	r3, #7
 8001b06:	f200 80f4 	bhi.w	8001cf2 <HAL_UART_RxCpltCallback+0x792>
 8001b0a:	a201      	add	r2, pc, #4	@ (adr r2, 8001b10 <HAL_UART_RxCpltCallback+0x5b0>)
 8001b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b10:	08001b31 	.word	0x08001b31
 8001b14:	08001b65 	.word	0x08001b65
 8001b18:	08001b99 	.word	0x08001b99
 8001b1c:	08001bc9 	.word	0x08001bc9
 8001b20:	08001bff 	.word	0x08001bff
 8001b24:	08001c23 	.word	0x08001c23
 8001b28:	08001c6d 	.word	0x08001c6d
 8001b2c:	08001c9d 	.word	0x08001c9d
		{
			case 0:
				if(Uart5_RxBuff[0] == 0x66)
 8001b30:	4b7f      	ldr	r3, [pc, #508]	@ (8001d30 <HAL_UART_RxCpltCallback+0x7d0>)
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	2b66      	cmp	r3, #102	@ 0x66
 8001b36:	d111      	bne.n	8001b5c <HAL_UART_RxCpltCallback+0x5fc>
				{
					DOWNdatabuf[DOWNheaddatanum++] = Uart5_RxBuff[0];
 8001b38:	4b7e      	ldr	r3, [pc, #504]	@ (8001d34 <HAL_UART_RxCpltCallback+0x7d4>)
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	1c5a      	adds	r2, r3, #1
 8001b3e:	b2d1      	uxtb	r1, r2
 8001b40:	4a7c      	ldr	r2, [pc, #496]	@ (8001d34 <HAL_UART_RxCpltCallback+0x7d4>)
 8001b42:	7011      	strb	r1, [r2, #0]
 8001b44:	461a      	mov	r2, r3
 8001b46:	4b7a      	ldr	r3, [pc, #488]	@ (8001d30 <HAL_UART_RxCpltCallback+0x7d0>)
 8001b48:	7819      	ldrb	r1, [r3, #0]
 8001b4a:	4b7b      	ldr	r3, [pc, #492]	@ (8001d38 <HAL_UART_RxCpltCallback+0x7d8>)
 8001b4c:	5499      	strb	r1, [r3, r2]
					DOWNdatastate++;
 8001b4e:	4b77      	ldr	r3, [pc, #476]	@ (8001d2c <HAL_UART_RxCpltCallback+0x7cc>)
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	3301      	adds	r3, #1
 8001b54:	b2da      	uxtb	r2, r3
 8001b56:	4b75      	ldr	r3, [pc, #468]	@ (8001d2c <HAL_UART_RxCpltCallback+0x7cc>)
 8001b58:	701a      	strb	r2, [r3, #0]
				}
				else
				{
					Resetstate(TOOLDATA);
				}
				break;
 8001b5a:	e0ca      	b.n	8001cf2 <HAL_UART_RxCpltCallback+0x792>
					Resetstate(TOOLDATA);
 8001b5c:	2002      	movs	r0, #2
 8001b5e:	f000 fa63 	bl	8002028 <Resetstate>
				break;
 8001b62:	e0c6      	b.n	8001cf2 <HAL_UART_RxCpltCallback+0x792>
			case 1:
				if(Uart5_RxBuff[0] == 0xCC)
 8001b64:	4b72      	ldr	r3, [pc, #456]	@ (8001d30 <HAL_UART_RxCpltCallback+0x7d0>)
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	2bcc      	cmp	r3, #204	@ 0xcc
 8001b6a:	d111      	bne.n	8001b90 <HAL_UART_RxCpltCallback+0x630>
				{
					DOWNdatabuf[DOWNheaddatanum++] = Uart5_RxBuff[0];
 8001b6c:	4b71      	ldr	r3, [pc, #452]	@ (8001d34 <HAL_UART_RxCpltCallback+0x7d4>)
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	1c5a      	adds	r2, r3, #1
 8001b72:	b2d1      	uxtb	r1, r2
 8001b74:	4a6f      	ldr	r2, [pc, #444]	@ (8001d34 <HAL_UART_RxCpltCallback+0x7d4>)
 8001b76:	7011      	strb	r1, [r2, #0]
 8001b78:	461a      	mov	r2, r3
 8001b7a:	4b6d      	ldr	r3, [pc, #436]	@ (8001d30 <HAL_UART_RxCpltCallback+0x7d0>)
 8001b7c:	7819      	ldrb	r1, [r3, #0]
 8001b7e:	4b6e      	ldr	r3, [pc, #440]	@ (8001d38 <HAL_UART_RxCpltCallback+0x7d8>)
 8001b80:	5499      	strb	r1, [r3, r2]
					DOWNdatastate++;
 8001b82:	4b6a      	ldr	r3, [pc, #424]	@ (8001d2c <HAL_UART_RxCpltCallback+0x7cc>)
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	3301      	adds	r3, #1
 8001b88:	b2da      	uxtb	r2, r3
 8001b8a:	4b68      	ldr	r3, [pc, #416]	@ (8001d2c <HAL_UART_RxCpltCallback+0x7cc>)
 8001b8c:	701a      	strb	r2, [r3, #0]
				}
				else
				{
					Resetstate(TOOLDATA);
				}
				break;
 8001b8e:	e0b0      	b.n	8001cf2 <HAL_UART_RxCpltCallback+0x792>
					Resetstate(TOOLDATA);
 8001b90:	2002      	movs	r0, #2
 8001b92:	f000 fa49 	bl	8002028 <Resetstate>
				break;
 8001b96:	e0ac      	b.n	8001cf2 <HAL_UART_RxCpltCallback+0x792>
			case 2:
				DOWNdatabuf[DOWNheaddatanum++] = Uart5_RxBuff[0];
 8001b98:	4b66      	ldr	r3, [pc, #408]	@ (8001d34 <HAL_UART_RxCpltCallback+0x7d4>)
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	1c5a      	adds	r2, r3, #1
 8001b9e:	b2d1      	uxtb	r1, r2
 8001ba0:	4a64      	ldr	r2, [pc, #400]	@ (8001d34 <HAL_UART_RxCpltCallback+0x7d4>)
 8001ba2:	7011      	strb	r1, [r2, #0]
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	4b62      	ldr	r3, [pc, #392]	@ (8001d30 <HAL_UART_RxCpltCallback+0x7d0>)
 8001ba8:	7819      	ldrb	r1, [r3, #0]
 8001baa:	4b63      	ldr	r3, [pc, #396]	@ (8001d38 <HAL_UART_RxCpltCallback+0x7d8>)
 8001bac:	5499      	strb	r1, [r3, r2]
				DOWNdatalen = Uart5_RxBuff[0]<<8;
 8001bae:	4b60      	ldr	r3, [pc, #384]	@ (8001d30 <HAL_UART_RxCpltCallback+0x7d0>)
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	021b      	lsls	r3, r3, #8
 8001bb4:	b29a      	uxth	r2, r3
 8001bb6:	4b61      	ldr	r3, [pc, #388]	@ (8001d3c <HAL_UART_RxCpltCallback+0x7dc>)
 8001bb8:	801a      	strh	r2, [r3, #0]
				DOWNdatastate++;
 8001bba:	4b5c      	ldr	r3, [pc, #368]	@ (8001d2c <HAL_UART_RxCpltCallback+0x7cc>)
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	3301      	adds	r3, #1
 8001bc0:	b2da      	uxtb	r2, r3
 8001bc2:	4b5a      	ldr	r3, [pc, #360]	@ (8001d2c <HAL_UART_RxCpltCallback+0x7cc>)
 8001bc4:	701a      	strb	r2, [r3, #0]
				break;
 8001bc6:	e094      	b.n	8001cf2 <HAL_UART_RxCpltCallback+0x792>
			case 3:
				DOWNdatabuf[DOWNheaddatanum++] = Uart5_RxBuff[0];
 8001bc8:	4b5a      	ldr	r3, [pc, #360]	@ (8001d34 <HAL_UART_RxCpltCallback+0x7d4>)
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	1c5a      	adds	r2, r3, #1
 8001bce:	b2d1      	uxtb	r1, r2
 8001bd0:	4a58      	ldr	r2, [pc, #352]	@ (8001d34 <HAL_UART_RxCpltCallback+0x7d4>)
 8001bd2:	7011      	strb	r1, [r2, #0]
 8001bd4:	461a      	mov	r2, r3
 8001bd6:	4b56      	ldr	r3, [pc, #344]	@ (8001d30 <HAL_UART_RxCpltCallback+0x7d0>)
 8001bd8:	7819      	ldrb	r1, [r3, #0]
 8001bda:	4b57      	ldr	r3, [pc, #348]	@ (8001d38 <HAL_UART_RxCpltCallback+0x7d8>)
 8001bdc:	5499      	strb	r1, [r3, r2]
				DOWNdatalen = DOWNdatalen + Uart5_RxBuff[0];
 8001bde:	4b54      	ldr	r3, [pc, #336]	@ (8001d30 <HAL_UART_RxCpltCallback+0x7d0>)
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	461a      	mov	r2, r3
 8001be4:	4b55      	ldr	r3, [pc, #340]	@ (8001d3c <HAL_UART_RxCpltCallback+0x7dc>)
 8001be6:	881b      	ldrh	r3, [r3, #0]
 8001be8:	4413      	add	r3, r2
 8001bea:	b29a      	uxth	r2, r3
 8001bec:	4b53      	ldr	r3, [pc, #332]	@ (8001d3c <HAL_UART_RxCpltCallback+0x7dc>)
 8001bee:	801a      	strh	r2, [r3, #0]
				DOWNdatastate++;
 8001bf0:	4b4e      	ldr	r3, [pc, #312]	@ (8001d2c <HAL_UART_RxCpltCallback+0x7cc>)
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	3301      	adds	r3, #1
 8001bf6:	b2da      	uxtb	r2, r3
 8001bf8:	4b4c      	ldr	r3, [pc, #304]	@ (8001d2c <HAL_UART_RxCpltCallback+0x7cc>)
 8001bfa:	701a      	strb	r2, [r3, #0]
				break;
 8001bfc:	e079      	b.n	8001cf2 <HAL_UART_RxCpltCallback+0x792>
			case 4:
				DOWNdatabuf[DOWNheaddatanum++] = Uart5_RxBuff[0];		//数据类型，井下上传只有服务表数据，应为0x01
 8001bfe:	4b4d      	ldr	r3, [pc, #308]	@ (8001d34 <HAL_UART_RxCpltCallback+0x7d4>)
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	1c5a      	adds	r2, r3, #1
 8001c04:	b2d1      	uxtb	r1, r2
 8001c06:	4a4b      	ldr	r2, [pc, #300]	@ (8001d34 <HAL_UART_RxCpltCallback+0x7d4>)
 8001c08:	7011      	strb	r1, [r2, #0]
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	4b48      	ldr	r3, [pc, #288]	@ (8001d30 <HAL_UART_RxCpltCallback+0x7d0>)
 8001c0e:	7819      	ldrb	r1, [r3, #0]
 8001c10:	4b49      	ldr	r3, [pc, #292]	@ (8001d38 <HAL_UART_RxCpltCallback+0x7d8>)
 8001c12:	5499      	strb	r1, [r3, r2]
				DOWNdatastate++;
 8001c14:	4b45      	ldr	r3, [pc, #276]	@ (8001d2c <HAL_UART_RxCpltCallback+0x7cc>)
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	3301      	adds	r3, #1
 8001c1a:	b2da      	uxtb	r2, r3
 8001c1c:	4b43      	ldr	r3, [pc, #268]	@ (8001d2c <HAL_UART_RxCpltCallback+0x7cc>)
 8001c1e:	701a      	strb	r2, [r3, #0]
				break;
 8001c20:	e067      	b.n	8001cf2 <HAL_UART_RxCpltCallback+0x792>
			case 5:
				DOWNdatabuf[DOWNheaddatanum++] = Uart5_RxBuff[0];
 8001c22:	4b44      	ldr	r3, [pc, #272]	@ (8001d34 <HAL_UART_RxCpltCallback+0x7d4>)
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	1c5a      	adds	r2, r3, #1
 8001c28:	b2d1      	uxtb	r1, r2
 8001c2a:	4a42      	ldr	r2, [pc, #264]	@ (8001d34 <HAL_UART_RxCpltCallback+0x7d4>)
 8001c2c:	7011      	strb	r1, [r2, #0]
 8001c2e:	461a      	mov	r2, r3
 8001c30:	4b3f      	ldr	r3, [pc, #252]	@ (8001d30 <HAL_UART_RxCpltCallback+0x7d0>)
 8001c32:	7819      	ldrb	r1, [r3, #0]
 8001c34:	4b40      	ldr	r3, [pc, #256]	@ (8001d38 <HAL_UART_RxCpltCallback+0x7d8>)
 8001c36:	5499      	strb	r1, [r3, r2]
				DOWNbodybuf[DOWNdatabodynum++] = Uart5_RxBuff[0];
 8001c38:	4b41      	ldr	r3, [pc, #260]	@ (8001d40 <HAL_UART_RxCpltCallback+0x7e0>)
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	1c5a      	adds	r2, r3, #1
 8001c3e:	b2d1      	uxtb	r1, r2
 8001c40:	4a3f      	ldr	r2, [pc, #252]	@ (8001d40 <HAL_UART_RxCpltCallback+0x7e0>)
 8001c42:	7011      	strb	r1, [r2, #0]
 8001c44:	461a      	mov	r2, r3
 8001c46:	4b3a      	ldr	r3, [pc, #232]	@ (8001d30 <HAL_UART_RxCpltCallback+0x7d0>)
 8001c48:	7819      	ldrb	r1, [r3, #0]
 8001c4a:	4b3e      	ldr	r3, [pc, #248]	@ (8001d44 <HAL_UART_RxCpltCallback+0x7e4>)
 8001c4c:	5499      	strb	r1, [r3, r2]
				if(DOWNdatabodynum >= DOWNdatalen-1)
 8001c4e:	4b3c      	ldr	r3, [pc, #240]	@ (8001d40 <HAL_UART_RxCpltCallback+0x7e0>)
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	461a      	mov	r2, r3
 8001c54:	4b39      	ldr	r3, [pc, #228]	@ (8001d3c <HAL_UART_RxCpltCallback+0x7dc>)
 8001c56:	881b      	ldrh	r3, [r3, #0]
 8001c58:	3b01      	subs	r3, #1
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	db48      	blt.n	8001cf0 <HAL_UART_RxCpltCallback+0x790>
				{
					DOWNdatastate++;
 8001c5e:	4b33      	ldr	r3, [pc, #204]	@ (8001d2c <HAL_UART_RxCpltCallback+0x7cc>)
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	3301      	adds	r3, #1
 8001c64:	b2da      	uxtb	r2, r3
 8001c66:	4b31      	ldr	r3, [pc, #196]	@ (8001d2c <HAL_UART_RxCpltCallback+0x7cc>)
 8001c68:	701a      	strb	r2, [r3, #0]
				}
				break;
 8001c6a:	e041      	b.n	8001cf0 <HAL_UART_RxCpltCallback+0x790>
			case 6:
				DOWNdatabuf[DOWNheaddatanum++] = Uart5_RxBuff[0];
 8001c6c:	4b31      	ldr	r3, [pc, #196]	@ (8001d34 <HAL_UART_RxCpltCallback+0x7d4>)
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	1c5a      	adds	r2, r3, #1
 8001c72:	b2d1      	uxtb	r1, r2
 8001c74:	4a2f      	ldr	r2, [pc, #188]	@ (8001d34 <HAL_UART_RxCpltCallback+0x7d4>)
 8001c76:	7011      	strb	r1, [r2, #0]
 8001c78:	461a      	mov	r2, r3
 8001c7a:	4b2d      	ldr	r3, [pc, #180]	@ (8001d30 <HAL_UART_RxCpltCallback+0x7d0>)
 8001c7c:	7819      	ldrb	r1, [r3, #0]
 8001c7e:	4b2e      	ldr	r3, [pc, #184]	@ (8001d38 <HAL_UART_RxCpltCallback+0x7d8>)
 8001c80:	5499      	strb	r1, [r3, r2]
				DOWN_Checksum = Uart5_RxBuff[0]<<8;
 8001c82:	4b2b      	ldr	r3, [pc, #172]	@ (8001d30 <HAL_UART_RxCpltCallback+0x7d0>)
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	021b      	lsls	r3, r3, #8
 8001c88:	b29a      	uxth	r2, r3
 8001c8a:	4b2f      	ldr	r3, [pc, #188]	@ (8001d48 <HAL_UART_RxCpltCallback+0x7e8>)
 8001c8c:	801a      	strh	r2, [r3, #0]
				DOWNdatastate++;
 8001c8e:	4b27      	ldr	r3, [pc, #156]	@ (8001d2c <HAL_UART_RxCpltCallback+0x7cc>)
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	3301      	adds	r3, #1
 8001c94:	b2da      	uxtb	r2, r3
 8001c96:	4b25      	ldr	r3, [pc, #148]	@ (8001d2c <HAL_UART_RxCpltCallback+0x7cc>)
 8001c98:	701a      	strb	r2, [r3, #0]
				break;
 8001c9a:	e02a      	b.n	8001cf2 <HAL_UART_RxCpltCallback+0x792>
			case 7:
				DOWNdatabuf[DOWNheaddatanum++] = Uart5_RxBuff[0];
 8001c9c:	4b25      	ldr	r3, [pc, #148]	@ (8001d34 <HAL_UART_RxCpltCallback+0x7d4>)
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	1c5a      	adds	r2, r3, #1
 8001ca2:	b2d1      	uxtb	r1, r2
 8001ca4:	4a23      	ldr	r2, [pc, #140]	@ (8001d34 <HAL_UART_RxCpltCallback+0x7d4>)
 8001ca6:	7011      	strb	r1, [r2, #0]
 8001ca8:	461a      	mov	r2, r3
 8001caa:	4b21      	ldr	r3, [pc, #132]	@ (8001d30 <HAL_UART_RxCpltCallback+0x7d0>)
 8001cac:	7819      	ldrb	r1, [r3, #0]
 8001cae:	4b22      	ldr	r3, [pc, #136]	@ (8001d38 <HAL_UART_RxCpltCallback+0x7d8>)
 8001cb0:	5499      	strb	r1, [r3, r2]
				DOWN_Checksum = DOWN_Checksum + Uart5_RxBuff[0];
 8001cb2:	4b1f      	ldr	r3, [pc, #124]	@ (8001d30 <HAL_UART_RxCpltCallback+0x7d0>)
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	461a      	mov	r2, r3
 8001cb8:	4b23      	ldr	r3, [pc, #140]	@ (8001d48 <HAL_UART_RxCpltCallback+0x7e8>)
 8001cba:	881b      	ldrh	r3, [r3, #0]
 8001cbc:	4413      	add	r3, r2
 8001cbe:	b29a      	uxth	r2, r3
 8001cc0:	4b21      	ldr	r3, [pc, #132]	@ (8001d48 <HAL_UART_RxCpltCallback+0x7e8>)
 8001cc2:	801a      	strh	r2, [r3, #0]
				if(DOWN_Checksum == Checksum_sum(DOWNdatabuf,DOWNheaddatanum-2))
 8001cc4:	4b1b      	ldr	r3, [pc, #108]	@ (8001d34 <HAL_UART_RxCpltCallback+0x7d4>)
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	3b02      	subs	r3, #2
 8001cca:	b29b      	uxth	r3, r3
 8001ccc:	4619      	mov	r1, r3
 8001cce:	481a      	ldr	r0, [pc, #104]	@ (8001d38 <HAL_UART_RxCpltCallback+0x7d8>)
 8001cd0:	f7ff f858 	bl	8000d84 <Checksum_sum>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	4b1b      	ldr	r3, [pc, #108]	@ (8001d48 <HAL_UART_RxCpltCallback+0x7e8>)
 8001cda:	881b      	ldrh	r3, [r3, #0]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d103      	bne.n	8001ce8 <HAL_UART_RxCpltCallback+0x788>
				{
					DOWNdataoverflag = 1;
 8001ce0:	4b1a      	ldr	r3, [pc, #104]	@ (8001d4c <HAL_UART_RxCpltCallback+0x7ec>)
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	701a      	strb	r2, [r3, #0]
				else
				{
					Resetstate(TOOLDATA);
				}

				break;
 8001ce6:	e004      	b.n	8001cf2 <HAL_UART_RxCpltCallback+0x792>
					Resetstate(TOOLDATA);
 8001ce8:	2002      	movs	r0, #2
 8001cea:	f000 f99d 	bl	8002028 <Resetstate>
				break;
 8001cee:	e000      	b.n	8001cf2 <HAL_UART_RxCpltCallback+0x792>
				break;
 8001cf0:	bf00      	nop
		}
		HAL_UART_Receive_IT(&huart5,Uart5_RxBuff,1);
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	490e      	ldr	r1, [pc, #56]	@ (8001d30 <HAL_UART_RxCpltCallback+0x7d0>)
 8001cf6:	4816      	ldr	r0, [pc, #88]	@ (8001d50 <HAL_UART_RxCpltCallback+0x7f0>)
 8001cf8:	f002 f829 	bl	8003d4e <HAL_UART_Receive_IT>
	}
}
 8001cfc:	bf00      	nop
 8001cfe:	3708      	adds	r7, #8
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	200002f2 	.word	0x200002f2
 8001d08:	20000210 	.word	0x20000210
 8001d0c:	200002fc 	.word	0x200002fc
 8001d10:	20000710 	.word	0x20000710
 8001d14:	200006fc 	.word	0x200006fc
 8001d18:	200004fc 	.word	0x200004fc
 8001d1c:	20000714 	.word	0x20000714
 8001d20:	200002a8 	.word	0x200002a8
 8001d24:	40005000 	.word	0x40005000
 8001d28:	2000020c 	.word	0x2000020c
 8001d2c:	200002f1 	.word	0x200002f1
 8001d30:	20000214 	.word	0x20000214
 8001d34:	200002f3 	.word	0x200002f3
 8001d38:	200003fc 	.word	0x200003fc
 8001d3c:	200006fe 	.word	0x200006fe
 8001d40:	200002f5 	.word	0x200002f5
 8001d44:	200005fc 	.word	0x200005fc
 8001d48:	20000712 	.word	0x20000712
 8001d4c:	20000715 	.word	0x20000715
 8001d50:	20000260 	.word	0x20000260

08001d54 <Downcmdsend>:

unsigned char Sertableactbuf[50];
unsigned char Contralcmdbuf[50];

void Downcmdsend (uint8_t type)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	71fb      	strb	r3, [r7, #7]
	if(type == SERVICETABLE)
 8001d5e:	79fb      	ldrb	r3, [r7, #7]
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d157      	bne.n	8001e14 <Downcmdsend+0xc0>
	{
		Downcmdbuf[0] = 0x55;  								//发送包头
 8001d64:	4b60      	ldr	r3, [pc, #384]	@ (8001ee8 <Downcmdsend+0x194>)
 8001d66:	2255      	movs	r2, #85	@ 0x55
 8001d68:	701a      	strb	r2, [r3, #0]
		Downcmdbuf[1] = 0xAA;
 8001d6a:	4b5f      	ldr	r3, [pc, #380]	@ (8001ee8 <Downcmdsend+0x194>)
 8001d6c:	22aa      	movs	r2, #170	@ 0xaa
 8001d6e:	705a      	strb	r2, [r3, #1]
		Downcmdbuf[2] = (Sertableactlen+1)>>8;						//Sertableactlen+1:上位机数据体长度+Downcmdbuf[3]
 8001d70:	4b5e      	ldr	r3, [pc, #376]	@ (8001eec <Downcmdsend+0x198>)
 8001d72:	881b      	ldrh	r3, [r3, #0]
 8001d74:	3301      	adds	r3, #1
 8001d76:	121b      	asrs	r3, r3, #8
 8001d78:	b2da      	uxtb	r2, r3
 8001d7a:	4b5b      	ldr	r3, [pc, #364]	@ (8001ee8 <Downcmdsend+0x194>)
 8001d7c:	709a      	strb	r2, [r3, #2]
		Downcmdbuf[3] = Sertableactlen+1;
 8001d7e:	4b5b      	ldr	r3, [pc, #364]	@ (8001eec <Downcmdsend+0x198>)
 8001d80:	881b      	ldrh	r3, [r3, #0]
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	3301      	adds	r3, #1
 8001d86:	b2da      	uxtb	r2, r3
 8001d88:	4b57      	ldr	r3, [pc, #348]	@ (8001ee8 <Downcmdsend+0x194>)
 8001d8a:	70da      	strb	r2, [r3, #3]
		Downcmdbuf[4] = SERVICETABLE;						//数据类型，不属于上位机数据体
 8001d8c:	4b56      	ldr	r3, [pc, #344]	@ (8001ee8 <Downcmdsend+0x194>)
 8001d8e:	2201      	movs	r2, #1
 8001d90:	711a      	strb	r2, [r3, #4]

		for(unsigned char i=0;i<Sertableactlen;i++)
 8001d92:	2300      	movs	r3, #0
 8001d94:	73fb      	strb	r3, [r7, #15]
 8001d96:	e009      	b.n	8001dac <Downcmdsend+0x58>
		{
			Downcmdbuf[i+5] = Sertableactbuf[i];				//上位机数据体
 8001d98:	7bfa      	ldrb	r2, [r7, #15]
 8001d9a:	7bfb      	ldrb	r3, [r7, #15]
 8001d9c:	3305      	adds	r3, #5
 8001d9e:	4954      	ldr	r1, [pc, #336]	@ (8001ef0 <Downcmdsend+0x19c>)
 8001da0:	5c89      	ldrb	r1, [r1, r2]
 8001da2:	4a51      	ldr	r2, [pc, #324]	@ (8001ee8 <Downcmdsend+0x194>)
 8001da4:	54d1      	strb	r1, [r2, r3]
		for(unsigned char i=0;i<Sertableactlen;i++)
 8001da6:	7bfb      	ldrb	r3, [r7, #15]
 8001da8:	3301      	adds	r3, #1
 8001daa:	73fb      	strb	r3, [r7, #15]
 8001dac:	7bfb      	ldrb	r3, [r7, #15]
 8001dae:	b29a      	uxth	r2, r3
 8001db0:	4b4e      	ldr	r3, [pc, #312]	@ (8001eec <Downcmdsend+0x198>)
 8001db2:	881b      	ldrh	r3, [r3, #0]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d3ef      	bcc.n	8001d98 <Downcmdsend+0x44>
		}
		Downcmdbuf[Sertableactlen+5] = Checksum_sum(Downcmdbuf,Sertableactlen+5)>>8;
 8001db8:	4b4c      	ldr	r3, [pc, #304]	@ (8001eec <Downcmdsend+0x198>)
 8001dba:	881b      	ldrh	r3, [r3, #0]
 8001dbc:	3305      	adds	r3, #5
 8001dbe:	b29b      	uxth	r3, r3
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	4849      	ldr	r0, [pc, #292]	@ (8001ee8 <Downcmdsend+0x194>)
 8001dc4:	f7fe ffde 	bl	8000d84 <Checksum_sum>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	0a1b      	lsrs	r3, r3, #8
 8001dcc:	b29a      	uxth	r2, r3
 8001dce:	4b47      	ldr	r3, [pc, #284]	@ (8001eec <Downcmdsend+0x198>)
 8001dd0:	881b      	ldrh	r3, [r3, #0]
 8001dd2:	3305      	adds	r3, #5
 8001dd4:	b2d1      	uxtb	r1, r2
 8001dd6:	4a44      	ldr	r2, [pc, #272]	@ (8001ee8 <Downcmdsend+0x194>)
 8001dd8:	54d1      	strb	r1, [r2, r3]
		Downcmdbuf[Sertableactlen+6] = Checksum_sum(Downcmdbuf,Sertableactlen+5);
 8001dda:	4b44      	ldr	r3, [pc, #272]	@ (8001eec <Downcmdsend+0x198>)
 8001ddc:	881b      	ldrh	r3, [r3, #0]
 8001dde:	3305      	adds	r3, #5
 8001de0:	b29b      	uxth	r3, r3
 8001de2:	4619      	mov	r1, r3
 8001de4:	4840      	ldr	r0, [pc, #256]	@ (8001ee8 <Downcmdsend+0x194>)
 8001de6:	f7fe ffcd 	bl	8000d84 <Checksum_sum>
 8001dea:	4603      	mov	r3, r0
 8001dec:	461a      	mov	r2, r3
 8001dee:	4b3f      	ldr	r3, [pc, #252]	@ (8001eec <Downcmdsend+0x198>)
 8001df0:	881b      	ldrh	r3, [r3, #0]
 8001df2:	3306      	adds	r3, #6
 8001df4:	b2d1      	uxtb	r1, r2
 8001df6:	4a3c      	ldr	r2, [pc, #240]	@ (8001ee8 <Downcmdsend+0x194>)
 8001df8:	54d1      	strb	r1, [r2, r3]
		ComSendBuf(COM5,Downcmdbuf,Sertableactlen+7);			//ETH_Datalen+6:上位机数据体+2byte帧头+2byte长度和数据类型+2byte校验和/0-ETH_Datalen+5
 8001dfa:	4b3c      	ldr	r3, [pc, #240]	@ (8001eec <Downcmdsend+0x198>)
 8001dfc:	881b      	ldrh	r3, [r3, #0]
 8001dfe:	3307      	adds	r3, #7
 8001e00:	b29b      	uxth	r3, r3
 8001e02:	461a      	mov	r2, r3
 8001e04:	4938      	ldr	r1, [pc, #224]	@ (8001ee8 <Downcmdsend+0x194>)
 8001e06:	20ee      	movs	r0, #238	@ 0xee
 8001e08:	f7ff fb7c 	bl	8001504 <ComSendBuf>
		Workmode = 0;
 8001e0c:	4b39      	ldr	r3, [pc, #228]	@ (8001ef4 <Downcmdsend+0x1a0>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	701a      	strb	r2, [r3, #0]

		//ComSendBuf(COM5,Downcmdbuf,ETH_Datalen+6);			//ETH_Datalen+6:上位机数据体+2byte帧头+2byte长度和数据类型+2byte校验和/0-ETH_Datalen+5
		Workmode = 0;
	}*/
	/***************************************************************************/
}
 8001e12:	e064      	b.n	8001ede <Downcmdsend+0x18a>
	else if(type == CONTRALCMD)
 8001e14:	79fb      	ldrb	r3, [r7, #7]
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d161      	bne.n	8001ede <Downcmdsend+0x18a>
		Downcmdbuf[0] = 0x55;  								//发送包头
 8001e1a:	4b33      	ldr	r3, [pc, #204]	@ (8001ee8 <Downcmdsend+0x194>)
 8001e1c:	2255      	movs	r2, #85	@ 0x55
 8001e1e:	701a      	strb	r2, [r3, #0]
		Downcmdbuf[1] = 0xAA;
 8001e20:	4b31      	ldr	r3, [pc, #196]	@ (8001ee8 <Downcmdsend+0x194>)
 8001e22:	22aa      	movs	r2, #170	@ 0xaa
 8001e24:	705a      	strb	r2, [r3, #1]
		Downcmdbuf[2] = (Contralcmdlen+3)>>8;
 8001e26:	4b34      	ldr	r3, [pc, #208]	@ (8001ef8 <Downcmdsend+0x1a4>)
 8001e28:	881b      	ldrh	r3, [r3, #0]
 8001e2a:	3303      	adds	r3, #3
 8001e2c:	121b      	asrs	r3, r3, #8
 8001e2e:	b2da      	uxtb	r2, r3
 8001e30:	4b2d      	ldr	r3, [pc, #180]	@ (8001ee8 <Downcmdsend+0x194>)
 8001e32:	709a      	strb	r2, [r3, #2]
		Downcmdbuf[3] = Contralcmdlen+3;
 8001e34:	4b30      	ldr	r3, [pc, #192]	@ (8001ef8 <Downcmdsend+0x1a4>)
 8001e36:	881b      	ldrh	r3, [r3, #0]
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	3303      	adds	r3, #3
 8001e3c:	b2da      	uxtb	r2, r3
 8001e3e:	4b2a      	ldr	r3, [pc, #168]	@ (8001ee8 <Downcmdsend+0x194>)
 8001e40:	70da      	strb	r2, [r3, #3]
		Downcmdbuf[4] = CONTRALCMD;							//数据类型，不属于上位机数据体
 8001e42:	4b29      	ldr	r3, [pc, #164]	@ (8001ee8 <Downcmdsend+0x194>)
 8001e44:	2202      	movs	r2, #2
 8001e46:	711a      	strb	r2, [r3, #4]
		Downcmdbuf[5] = Tooladdress;						//命令字，切割仪器为5004
 8001e48:	4b2c      	ldr	r3, [pc, #176]	@ (8001efc <Downcmdsend+0x1a8>)
 8001e4a:	781a      	ldrb	r2, [r3, #0]
 8001e4c:	4b26      	ldr	r3, [pc, #152]	@ (8001ee8 <Downcmdsend+0x194>)
 8001e4e:	715a      	strb	r2, [r3, #5]
		Downcmdbuf[6] = Cmdword>>8;
 8001e50:	4b2b      	ldr	r3, [pc, #172]	@ (8001f00 <Downcmdsend+0x1ac>)
 8001e52:	881b      	ldrh	r3, [r3, #0]
 8001e54:	0a1b      	lsrs	r3, r3, #8
 8001e56:	b29b      	uxth	r3, r3
 8001e58:	b2da      	uxtb	r2, r3
 8001e5a:	4b23      	ldr	r3, [pc, #140]	@ (8001ee8 <Downcmdsend+0x194>)
 8001e5c:	719a      	strb	r2, [r3, #6]
		for(uint8_t i=0;i<Contralcmdlen;i++)
 8001e5e:	2300      	movs	r3, #0
 8001e60:	73bb      	strb	r3, [r7, #14]
 8001e62:	e009      	b.n	8001e78 <Downcmdsend+0x124>
			Downcmdbuf[i+7] = Contralcmdbuf[i];				//上位机数据体，切割仪器控制命令为8字节
 8001e64:	7bba      	ldrb	r2, [r7, #14]
 8001e66:	7bbb      	ldrb	r3, [r7, #14]
 8001e68:	3307      	adds	r3, #7
 8001e6a:	4926      	ldr	r1, [pc, #152]	@ (8001f04 <Downcmdsend+0x1b0>)
 8001e6c:	5c89      	ldrb	r1, [r1, r2]
 8001e6e:	4a1e      	ldr	r2, [pc, #120]	@ (8001ee8 <Downcmdsend+0x194>)
 8001e70:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i=0;i<Contralcmdlen;i++)
 8001e72:	7bbb      	ldrb	r3, [r7, #14]
 8001e74:	3301      	adds	r3, #1
 8001e76:	73bb      	strb	r3, [r7, #14]
 8001e78:	7bbb      	ldrb	r3, [r7, #14]
 8001e7a:	b29a      	uxth	r2, r3
 8001e7c:	4b1e      	ldr	r3, [pc, #120]	@ (8001ef8 <Downcmdsend+0x1a4>)
 8001e7e:	881b      	ldrh	r3, [r3, #0]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d3ef      	bcc.n	8001e64 <Downcmdsend+0x110>
		Downcmdbuf[Contralcmdlen+7] = Checksum_sum(Downcmdbuf,Contralcmdlen+7)>>8;
 8001e84:	4b1c      	ldr	r3, [pc, #112]	@ (8001ef8 <Downcmdsend+0x1a4>)
 8001e86:	881b      	ldrh	r3, [r3, #0]
 8001e88:	3307      	adds	r3, #7
 8001e8a:	b29b      	uxth	r3, r3
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	4816      	ldr	r0, [pc, #88]	@ (8001ee8 <Downcmdsend+0x194>)
 8001e90:	f7fe ff78 	bl	8000d84 <Checksum_sum>
 8001e94:	4603      	mov	r3, r0
 8001e96:	0a1b      	lsrs	r3, r3, #8
 8001e98:	b29a      	uxth	r2, r3
 8001e9a:	4b17      	ldr	r3, [pc, #92]	@ (8001ef8 <Downcmdsend+0x1a4>)
 8001e9c:	881b      	ldrh	r3, [r3, #0]
 8001e9e:	3307      	adds	r3, #7
 8001ea0:	b2d1      	uxtb	r1, r2
 8001ea2:	4a11      	ldr	r2, [pc, #68]	@ (8001ee8 <Downcmdsend+0x194>)
 8001ea4:	54d1      	strb	r1, [r2, r3]
		Downcmdbuf[Contralcmdlen+8] = Checksum_sum(Downcmdbuf,Contralcmdlen+7);
 8001ea6:	4b14      	ldr	r3, [pc, #80]	@ (8001ef8 <Downcmdsend+0x1a4>)
 8001ea8:	881b      	ldrh	r3, [r3, #0]
 8001eaa:	3307      	adds	r3, #7
 8001eac:	b29b      	uxth	r3, r3
 8001eae:	4619      	mov	r1, r3
 8001eb0:	480d      	ldr	r0, [pc, #52]	@ (8001ee8 <Downcmdsend+0x194>)
 8001eb2:	f7fe ff67 	bl	8000d84 <Checksum_sum>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	461a      	mov	r2, r3
 8001eba:	4b0f      	ldr	r3, [pc, #60]	@ (8001ef8 <Downcmdsend+0x1a4>)
 8001ebc:	881b      	ldrh	r3, [r3, #0]
 8001ebe:	3308      	adds	r3, #8
 8001ec0:	b2d1      	uxtb	r1, r2
 8001ec2:	4a09      	ldr	r2, [pc, #36]	@ (8001ee8 <Downcmdsend+0x194>)
 8001ec4:	54d1      	strb	r1, [r2, r3]
		ComSendBuf(COM5,Downcmdbuf,Contralcmdlen+9);			//ETH_Datalen+8:上位机数据体+2byte帧头+2byte长度和数据类型+2byte校验和+2byte命令字/0-ETH_Datalen+7
 8001ec6:	4b0c      	ldr	r3, [pc, #48]	@ (8001ef8 <Downcmdsend+0x1a4>)
 8001ec8:	881b      	ldrh	r3, [r3, #0]
 8001eca:	3309      	adds	r3, #9
 8001ecc:	b29b      	uxth	r3, r3
 8001ece:	461a      	mov	r2, r3
 8001ed0:	4905      	ldr	r1, [pc, #20]	@ (8001ee8 <Downcmdsend+0x194>)
 8001ed2:	20ee      	movs	r0, #238	@ 0xee
 8001ed4:	f7ff fb16 	bl	8001504 <ComSendBuf>
		Workmode = 0;
 8001ed8:	4b06      	ldr	r3, [pc, #24]	@ (8001ef4 <Downcmdsend+0x1a0>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	701a      	strb	r2, [r3, #0]
}
 8001ede:	bf00      	nop
 8001ee0:	3710      	adds	r7, #16
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	20000718 	.word	0x20000718
 8001eec:	200001b6 	.word	0x200001b6
 8001ef0:	20000738 	.word	0x20000738
 8001ef4:	20000700 	.word	0x20000700
 8001ef8:	200001b8 	.word	0x200001b8
 8001efc:	20000701 	.word	0x20000701
 8001f00:	20000702 	.word	0x20000702
 8001f04:	2000076c 	.word	0x2000076c

08001f08 <Downdatasend>:


extern unsigned char Subsetnumber;
extern unsigned int Report_Timestamp;
void Downdatasend (unsigned char type)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	4603      	mov	r3, r0
 8001f10:	71fb      	strb	r3, [r7, #7]
	Downdataloadbuf[4] = DOWNdatabodynum>>8;
 8001f12:	4b3f      	ldr	r3, [pc, #252]	@ (8002010 <Downdatasend+0x108>)
 8001f14:	781b      	ldrb	r3, [r3, #0]
 8001f16:	121b      	asrs	r3, r3, #8
 8001f18:	b2da      	uxtb	r2, r3
 8001f1a:	4b3e      	ldr	r3, [pc, #248]	@ (8002014 <Downdatasend+0x10c>)
 8001f1c:	711a      	strb	r2, [r3, #4]
	Downdataloadbuf[5] = DOWNdatabodynum;
 8001f1e:	4b3c      	ldr	r3, [pc, #240]	@ (8002010 <Downdatasend+0x108>)
 8001f20:	781a      	ldrb	r2, [r3, #0]
 8001f22:	4b3c      	ldr	r3, [pc, #240]	@ (8002014 <Downdatasend+0x10c>)
 8001f24:	715a      	strb	r2, [r3, #5]
	Downdataloadbuf[6] = 0x22;									//从井下读数据：0x20000000，仪器采集数据上行：0x02000000
 8001f26:	4b3b      	ldr	r3, [pc, #236]	@ (8002014 <Downdatasend+0x10c>)
 8001f28:	2222      	movs	r2, #34	@ 0x22
 8001f2a:	719a      	strb	r2, [r3, #6]
	Downdataloadbuf[7] = Tooladdress;
 8001f2c:	4b3a      	ldr	r3, [pc, #232]	@ (8002018 <Downdatasend+0x110>)
 8001f2e:	781a      	ldrb	r2, [r3, #0]
 8001f30:	4b38      	ldr	r3, [pc, #224]	@ (8002014 <Downdatasend+0x10c>)
 8001f32:	71da      	strb	r2, [r3, #7]
	Downdataloadbuf[8] = Subsetnumber>>8;
 8001f34:	4b39      	ldr	r3, [pc, #228]	@ (800201c <Downdatasend+0x114>)
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	121b      	asrs	r3, r3, #8
 8001f3a:	b2da      	uxtb	r2, r3
 8001f3c:	4b35      	ldr	r3, [pc, #212]	@ (8002014 <Downdatasend+0x10c>)
 8001f3e:	721a      	strb	r2, [r3, #8]
	Downdataloadbuf[9] = Subsetnumber;							//subset号，若为命令返回参数则为命令字
 8001f40:	4b36      	ldr	r3, [pc, #216]	@ (800201c <Downdatasend+0x114>)
 8001f42:	781a      	ldrb	r2, [r3, #0]
 8001f44:	4b33      	ldr	r3, [pc, #204]	@ (8002014 <Downdatasend+0x10c>)
 8001f46:	725a      	strb	r2, [r3, #9]
	Downdataloadbuf[10] = Report_Timestamp>>24;
 8001f48:	4b35      	ldr	r3, [pc, #212]	@ (8002020 <Downdatasend+0x118>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	0e1b      	lsrs	r3, r3, #24
 8001f4e:	b2da      	uxtb	r2, r3
 8001f50:	4b30      	ldr	r3, [pc, #192]	@ (8002014 <Downdatasend+0x10c>)
 8001f52:	729a      	strb	r2, [r3, #10]
	Downdataloadbuf[11] = Report_Timestamp>>16;
 8001f54:	4b32      	ldr	r3, [pc, #200]	@ (8002020 <Downdatasend+0x118>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	0c1b      	lsrs	r3, r3, #16
 8001f5a:	b2da      	uxtb	r2, r3
 8001f5c:	4b2d      	ldr	r3, [pc, #180]	@ (8002014 <Downdatasend+0x10c>)
 8001f5e:	72da      	strb	r2, [r3, #11]
	Downdataloadbuf[12] = Report_Timestamp>>8;
 8001f60:	4b2f      	ldr	r3, [pc, #188]	@ (8002020 <Downdatasend+0x118>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	0a1b      	lsrs	r3, r3, #8
 8001f66:	b2da      	uxtb	r2, r3
 8001f68:	4b2a      	ldr	r3, [pc, #168]	@ (8002014 <Downdatasend+0x10c>)
 8001f6a:	731a      	strb	r2, [r3, #12]
	Downdataloadbuf[13] = Report_Timestamp;						//时间标
 8001f6c:	4b2c      	ldr	r3, [pc, #176]	@ (8002020 <Downdatasend+0x118>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	b2da      	uxtb	r2, r3
 8001f72:	4b28      	ldr	r3, [pc, #160]	@ (8002014 <Downdatasend+0x10c>)
 8001f74:	735a      	strb	r2, [r3, #13]
	Downdataloadbuf[14] = 0x00;
 8001f76:	4b27      	ldr	r3, [pc, #156]	@ (8002014 <Downdatasend+0x10c>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	739a      	strb	r2, [r3, #14]
	Downdataloadbuf[15] = 0x00;									//超时时间,井下仪器控制命令超时时间，暂时没有返回
 8001f7c:	4b25      	ldr	r3, [pc, #148]	@ (8002014 <Downdatasend+0x10c>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	73da      	strb	r2, [r3, #15]
	Downdataloadbuf[16] = type;									//超时or数据
 8001f82:	4a24      	ldr	r2, [pc, #144]	@ (8002014 <Downdatasend+0x10c>)
 8001f84:	79fb      	ldrb	r3, [r7, #7]
 8001f86:	7413      	strb	r3, [r2, #16]
	Downdataloadbuf[17] = 0x00;									//预留
 8001f88:	4b22      	ldr	r3, [pc, #136]	@ (8002014 <Downdatasend+0x10c>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	745a      	strb	r2, [r3, #17]
	for(unsigned char i=0;i<DOWNdatabodynum;i++)
 8001f8e:	2300      	movs	r3, #0
 8001f90:	73fb      	strb	r3, [r7, #15]
 8001f92:	e009      	b.n	8001fa8 <Downdatasend+0xa0>
	{
		Downdataloadbuf[18+i] = DOWNbodybuf[i];
 8001f94:	7bfa      	ldrb	r2, [r7, #15]
 8001f96:	7bfb      	ldrb	r3, [r7, #15]
 8001f98:	3312      	adds	r3, #18
 8001f9a:	4922      	ldr	r1, [pc, #136]	@ (8002024 <Downdatasend+0x11c>)
 8001f9c:	5c89      	ldrb	r1, [r1, r2]
 8001f9e:	4a1d      	ldr	r2, [pc, #116]	@ (8002014 <Downdatasend+0x10c>)
 8001fa0:	54d1      	strb	r1, [r2, r3]
	for(unsigned char i=0;i<DOWNdatabodynum;i++)
 8001fa2:	7bfb      	ldrb	r3, [r7, #15]
 8001fa4:	3301      	adds	r3, #1
 8001fa6:	73fb      	strb	r3, [r7, #15]
 8001fa8:	4b19      	ldr	r3, [pc, #100]	@ (8002010 <Downdatasend+0x108>)
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	7bfa      	ldrb	r2, [r7, #15]
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d3f0      	bcc.n	8001f94 <Downdatasend+0x8c>
	}
	Downdataloadbuf[DOWNdatabodynum+18] = Checksum_sum(Downdataloadbuf,DOWNdatabodynum+18)>>8;
 8001fb2:	4b17      	ldr	r3, [pc, #92]	@ (8002010 <Downdatasend+0x108>)
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	3312      	adds	r3, #18
 8001fb8:	b29b      	uxth	r3, r3
 8001fba:	4619      	mov	r1, r3
 8001fbc:	4815      	ldr	r0, [pc, #84]	@ (8002014 <Downdatasend+0x10c>)
 8001fbe:	f7fe fee1 	bl	8000d84 <Checksum_sum>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	0a1b      	lsrs	r3, r3, #8
 8001fc6:	b29a      	uxth	r2, r3
 8001fc8:	4b11      	ldr	r3, [pc, #68]	@ (8002010 <Downdatasend+0x108>)
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	3312      	adds	r3, #18
 8001fce:	b2d1      	uxtb	r1, r2
 8001fd0:	4a10      	ldr	r2, [pc, #64]	@ (8002014 <Downdatasend+0x10c>)
 8001fd2:	54d1      	strb	r1, [r2, r3]
	Downdataloadbuf[DOWNdatabodynum+19] = Checksum_sum(Downdataloadbuf,DOWNdatabodynum+18);
 8001fd4:	4b0e      	ldr	r3, [pc, #56]	@ (8002010 <Downdatasend+0x108>)
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	3312      	adds	r3, #18
 8001fda:	b29b      	uxth	r3, r3
 8001fdc:	4619      	mov	r1, r3
 8001fde:	480d      	ldr	r0, [pc, #52]	@ (8002014 <Downdatasend+0x10c>)
 8001fe0:	f7fe fed0 	bl	8000d84 <Checksum_sum>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	4b09      	ldr	r3, [pc, #36]	@ (8002010 <Downdatasend+0x108>)
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	3313      	adds	r3, #19
 8001fee:	b2d1      	uxtb	r1, r2
 8001ff0:	4a08      	ldr	r2, [pc, #32]	@ (8002014 <Downdatasend+0x10c>)
 8001ff2:	54d1      	strb	r1, [r2, r3]
	ComSendBuf(COM1,Downdataloadbuf,DOWNdatabodynum+20);
 8001ff4:	4b06      	ldr	r3, [pc, #24]	@ (8002010 <Downdatasend+0x108>)
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	3314      	adds	r3, #20
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	4905      	ldr	r1, [pc, #20]	@ (8002014 <Downdatasend+0x10c>)
 8002000:	20dd      	movs	r0, #221	@ 0xdd
 8002002:	f7ff fa7f 	bl	8001504 <ComSendBuf>
}
 8002006:	bf00      	nop
 8002008:	3710      	adds	r7, #16
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	200002f5 	.word	0x200002f5
 8002014:	20000014 	.word	0x20000014
 8002018:	20000701 	.word	0x20000701
 800201c:	200001ad 	.word	0x200001ad
 8002020:	20000208 	.word	0x20000208
 8002024:	200005fc 	.word	0x200005fc

08002028 <Resetstate>:
/* USER CODE END 1 */

void Resetstate(unsigned char tep)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	4603      	mov	r3, r0
 8002030:	71fb      	strb	r3, [r7, #7]
	if(tep == ETHCMD)
 8002032:	79fb      	ldrb	r3, [r7, #7]
 8002034:	2b01      	cmp	r3, #1
 8002036:	d10c      	bne.n	8002052 <Resetstate+0x2a>
	{
		ETHdatabodynum = 0;
 8002038:	4b10      	ldr	r3, [pc, #64]	@ (800207c <Resetstate+0x54>)
 800203a:	2200      	movs	r2, #0
 800203c:	701a      	strb	r2, [r3, #0]
		ETHdatastate = 0;
 800203e:	4b10      	ldr	r3, [pc, #64]	@ (8002080 <Resetstate+0x58>)
 8002040:	2200      	movs	r2, #0
 8002042:	701a      	strb	r2, [r3, #0]
		ETHdataheadnum = 0;
 8002044:	4b0f      	ldr	r3, [pc, #60]	@ (8002084 <Resetstate+0x5c>)
 8002046:	2200      	movs	r2, #0
 8002048:	701a      	strb	r2, [r3, #0]
		ETHdataoverflag = 0;
 800204a:	4b0f      	ldr	r3, [pc, #60]	@ (8002088 <Resetstate+0x60>)
 800204c:	2200      	movs	r2, #0
 800204e:	701a      	strb	r2, [r3, #0]
		DOWNdataoverflag = 0;
		DOWNdatastate = 0;
		DOWNheaddatanum = 0;
		DOWNdatabodynum = 0;
	}
}
 8002050:	e00e      	b.n	8002070 <Resetstate+0x48>
	else if(tep == TOOLDATA)
 8002052:	79fb      	ldrb	r3, [r7, #7]
 8002054:	2b02      	cmp	r3, #2
 8002056:	d10b      	bne.n	8002070 <Resetstate+0x48>
		DOWNdataoverflag = 0;
 8002058:	4b0c      	ldr	r3, [pc, #48]	@ (800208c <Resetstate+0x64>)
 800205a:	2200      	movs	r2, #0
 800205c:	701a      	strb	r2, [r3, #0]
		DOWNdatastate = 0;
 800205e:	4b0c      	ldr	r3, [pc, #48]	@ (8002090 <Resetstate+0x68>)
 8002060:	2200      	movs	r2, #0
 8002062:	701a      	strb	r2, [r3, #0]
		DOWNheaddatanum = 0;
 8002064:	4b0b      	ldr	r3, [pc, #44]	@ (8002094 <Resetstate+0x6c>)
 8002066:	2200      	movs	r2, #0
 8002068:	701a      	strb	r2, [r3, #0]
		DOWNdatabodynum = 0;
 800206a:	4b0b      	ldr	r3, [pc, #44]	@ (8002098 <Resetstate+0x70>)
 800206c:	2200      	movs	r2, #0
 800206e:	701a      	strb	r2, [r3, #0]
}
 8002070:	bf00      	nop
 8002072:	370c      	adds	r7, #12
 8002074:	46bd      	mov	sp, r7
 8002076:	bc80      	pop	{r7}
 8002078:	4770      	bx	lr
 800207a:	bf00      	nop
 800207c:	200002f4 	.word	0x200002f4
 8002080:	200002f0 	.word	0x200002f0
 8002084:	200002f2 	.word	0x200002f2
 8002088:	20000714 	.word	0x20000714
 800208c:	20000715 	.word	0x20000715
 8002090:	200002f1 	.word	0x200002f1
 8002094:	200002f3 	.word	0x200002f3
 8002098:	200002f5 	.word	0x200002f5

0800209c <main>:
  */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

int main(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	af00      	add	r7, sp, #0
  init();												//硬件初始化
 80020a0:	f7fe fd90 	bl	8000bc4 <init>

  while (1)
  {
	  ETH_CMDPOLL();									//ETH指令轮询
 80020a4:	f7fe fed0 	bl	8000e48 <ETH_CMDPOLL>
	  DOWN_DATAPOLL();									//DOWN数据轮询
 80020a8:	f7fe ffaa 	bl	8001000 <DOWN_DATAPOLL>
	  Sendtimestamp();									//时间深度同步
 80020ac:	f7fe ffd8 	bl	8001060 <Sendtimestamp>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
 80020b0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80020b4:	4803      	ldr	r0, [pc, #12]	@ (80020c4 <main+0x28>)
 80020b6:	f000 fe2a 	bl	8002d0e <HAL_GPIO_TogglePin>

	  IWDG_FEED_DOG();									//喂狗，超过410ms未清看门狗，系统复位
 80020ba:	f7fe fdfd 	bl	8000cb8 <IWDG_FEED_DOG>
	  ETH_CMDPOLL();									//ETH指令轮询
 80020be:	bf00      	nop
 80020c0:	e7f0      	b.n	80020a4 <main+0x8>
 80020c2:	bf00      	nop
 80020c4:	40010c00 	.word	0x40010c00

080020c8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80020c8:	f7fe f95a 	bl	8000380 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020cc:	480b      	ldr	r0, [pc, #44]	@ (80020fc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80020ce:	490c      	ldr	r1, [pc, #48]	@ (8002100 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80020d0:	4a0c      	ldr	r2, [pc, #48]	@ (8002104 <LoopFillZerobss+0x16>)
  movs r3, #0
 80020d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020d4:	e002      	b.n	80020dc <LoopCopyDataInit>

080020d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020da:	3304      	adds	r3, #4

080020dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020e0:	d3f9      	bcc.n	80020d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020e2:	4a09      	ldr	r2, [pc, #36]	@ (8002108 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80020e4:	4c09      	ldr	r4, [pc, #36]	@ (800210c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80020e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020e8:	e001      	b.n	80020ee <LoopFillZerobss>

080020ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020ec:	3204      	adds	r2, #4

080020ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020f0:	d3fb      	bcc.n	80020ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80020f2:	f002 fc03 	bl	80048fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80020f6:	f7ff ffd1 	bl	800209c <main>
  bx lr
 80020fa:	4770      	bx	lr
  ldr r0, =_sdata
 80020fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002100:	2000016c 	.word	0x2000016c
  ldr r2, =_sidata
 8002104:	080056f8 	.word	0x080056f8
  ldr r2, =_sbss
 8002108:	2000016c 	.word	0x2000016c
  ldr r4, =_ebss
 800210c:	20000da4 	.word	0x20000da4

08002110 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002110:	e7fe      	b.n	8002110 <ADC1_2_IRQHandler>
	...

08002114 <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
 800211a:	4b21      	ldr	r3, [pc, #132]	@ (80021a0 <_DoInit+0x8c>)
 800211c:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2203      	movs	r2, #3
 8002122:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2203      	movs	r2, #3
 8002128:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4a1d      	ldr	r2, [pc, #116]	@ (80021a4 <_DoInit+0x90>)
 800212e:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	4a1d      	ldr	r2, [pc, #116]	@ (80021a8 <_DoInit+0x94>)
 8002134:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800213c:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2200      	movs	r2, #0
 8002142:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2200      	movs	r2, #0
 8002148:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2200      	movs	r2, #0
 800214e:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	4a14      	ldr	r2, [pc, #80]	@ (80021a4 <_DoInit+0x90>)
 8002154:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4a14      	ldr	r2, [pc, #80]	@ (80021ac <_DoInit+0x98>)
 800215a:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2210      	movs	r2, #16
 8002160:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2200      	movs	r2, #0
 8002166:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2200      	movs	r2, #0
 800216c:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	3307      	adds	r3, #7
 8002178:	4a0d      	ldr	r2, [pc, #52]	@ (80021b0 <_DoInit+0x9c>)
 800217a:	6810      	ldr	r0, [r2, #0]
 800217c:	6018      	str	r0, [r3, #0]
  strcpy(&p->acID[0], "SEGGER");
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a0c      	ldr	r2, [pc, #48]	@ (80021b4 <_DoInit+0xa0>)
 8002182:	6810      	ldr	r0, [r2, #0]
 8002184:	6018      	str	r0, [r3, #0]
 8002186:	8891      	ldrh	r1, [r2, #4]
 8002188:	7992      	ldrb	r2, [r2, #6]
 800218a:	8099      	strh	r1, [r3, #4]
 800218c:	719a      	strb	r2, [r3, #6]
  p->acID[6] = ' ';
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2220      	movs	r2, #32
 8002192:	719a      	strb	r2, [r3, #6]
}
 8002194:	bf00      	nop
 8002196:	370c      	adds	r7, #12
 8002198:	46bd      	mov	sp, r7
 800219a:	bc80      	pop	{r7}
 800219c:	4770      	bx	lr
 800219e:	bf00      	nop
 80021a0:	200007a0 	.word	0x200007a0
 80021a4:	0800527c 	.word	0x0800527c
 80021a8:	20000848 	.word	0x20000848
 80021ac:	20000c48 	.word	0x20000c48
 80021b0:	08005288 	.word	0x08005288
 80021b4:	0800528c 	.word	0x0800528c

080021b8 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b088      	sub	sp, #32
 80021bc:	af00      	add	r7, sp, #0
 80021be:	60f8      	str	r0, [r7, #12]
 80021c0:	60b9      	str	r1, [r7, #8]
 80021c2:	607a      	str	r2, [r7, #4]
  char*    pDst;
#endif
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 80021c4:	2300      	movs	r3, #0
 80021c6:	61bb      	str	r3, [r7, #24]
  WrOff = pRing->WrOff;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	617b      	str	r3, [r7, #20]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	691b      	ldr	r3, [r3, #16]
 80021d2:	613b      	str	r3, [r7, #16]
    if (RdOff > WrOff) {
 80021d4:	693a      	ldr	r2, [r7, #16]
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	429a      	cmp	r2, r3
 80021da:	d905      	bls.n	80021e8 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 80021dc:	693a      	ldr	r2, [r7, #16]
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	3b01      	subs	r3, #1
 80021e4:	61fb      	str	r3, [r7, #28]
 80021e6:	e007      	b.n	80021f8 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	689a      	ldr	r2, [r3, #8]
 80021ec:	6939      	ldr	r1, [r7, #16]
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	1acb      	subs	r3, r1, r3
 80021f2:	4413      	add	r3, r2
 80021f4:	3b01      	subs	r3, #1
 80021f6:	61fb      	str	r3, [r7, #28]
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	689a      	ldr	r2, [r3, #8]
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	1ad3      	subs	r3, r2, r3
 8002200:	69fa      	ldr	r2, [r7, #28]
 8002202:	4293      	cmp	r3, r2
 8002204:	bf28      	it	cs
 8002206:	4613      	movcs	r3, r2
 8002208:	61fb      	str	r3, [r7, #28]
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 800220a:	69fa      	ldr	r2, [r7, #28]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	4293      	cmp	r3, r2
 8002210:	bf28      	it	cs
 8002212:	4613      	movcs	r3, r2
 8002214:	61fb      	str	r3, [r7, #28]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	685a      	ldr	r2, [r3, #4]
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	4413      	add	r3, r2
 800221e:	69fa      	ldr	r2, [r7, #28]
 8002220:	68b9      	ldr	r1, [r7, #8]
 8002222:	4618      	mov	r0, r3
 8002224:	f002 fb90 	bl	8004948 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8002228:	69ba      	ldr	r2, [r7, #24]
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	4413      	add	r3, r2
 800222e:	61bb      	str	r3, [r7, #24]
    pBuffer         += NumBytesToWrite;
 8002230:	68ba      	ldr	r2, [r7, #8]
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	4413      	add	r3, r2
 8002236:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8002238:	687a      	ldr	r2, [r7, #4]
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8002240:	697a      	ldr	r2, [r7, #20]
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	4413      	add	r3, r2
 8002246:	617b      	str	r3, [r7, #20]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	697a      	ldr	r2, [r7, #20]
 800224e:	429a      	cmp	r2, r3
 8002250:	d101      	bne.n	8002256 <_WriteBlocking+0x9e>
      WrOff = 0u;
 8002252:	2300      	movs	r3, #0
 8002254:	617b      	str	r3, [r7, #20]
    }
    pRing->WrOff = WrOff;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	697a      	ldr	r2, [r7, #20]
 800225a:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d1b5      	bne.n	80021ce <_WriteBlocking+0x16>
  //
  return NumBytesWritten;
 8002262:	69bb      	ldr	r3, [r7, #24]
}
 8002264:	4618      	mov	r0, r3
 8002266:	3720      	adds	r7, #32
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}

0800226c <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 800226c:	b580      	push	{r7, lr}
 800226e:	b088      	sub	sp, #32
 8002270:	af00      	add	r7, sp, #0
 8002272:	60f8      	str	r0, [r7, #12]
 8002274:	60b9      	str	r1, [r7, #8]
 8002276:	607a      	str	r2, [r7, #4]
  unsigned Rem;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  char*    pDst;
#endif

  WrOff = pRing->WrOff;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	689a      	ldr	r2, [r3, #8]
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8002288:	69ba      	ldr	r2, [r7, #24]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	429a      	cmp	r2, r3
 800228e:	d90e      	bls.n	80022ae <_WriteNoCheck+0x42>
    while (NumBytes--) {
      *pDst++ = *pData++;
    };
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	685a      	ldr	r2, [r3, #4]
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	4413      	add	r3, r2
 8002298:	687a      	ldr	r2, [r7, #4]
 800229a:	68b9      	ldr	r1, [r7, #8]
 800229c:	4618      	mov	r0, r3
 800229e:	f002 fb53 	bl	8004948 <memcpy>
    pRing->WrOff = WrOff + NumBytes;
 80022a2:	69fa      	ldr	r2, [r7, #28]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	441a      	add	r2, r3
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	60da      	str	r2, [r3, #12]
    NumBytesAtOnce = NumBytes - Rem;
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 80022ac:	e01a      	b.n	80022e4 <_WriteNoCheck+0x78>
    NumBytesAtOnce = Rem;
 80022ae:	69bb      	ldr	r3, [r7, #24]
 80022b0:	617b      	str	r3, [r7, #20]
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	685a      	ldr	r2, [r3, #4]
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	4413      	add	r3, r2
 80022ba:	697a      	ldr	r2, [r7, #20]
 80022bc:	68b9      	ldr	r1, [r7, #8]
 80022be:	4618      	mov	r0, r3
 80022c0:	f002 fb42 	bl	8004948 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 80022c4:	687a      	ldr	r2, [r7, #4]
 80022c6:	69bb      	ldr	r3, [r7, #24]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	617b      	str	r3, [r7, #20]
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	6858      	ldr	r0, [r3, #4]
 80022d0:	68ba      	ldr	r2, [r7, #8]
 80022d2:	69bb      	ldr	r3, [r7, #24]
 80022d4:	4413      	add	r3, r2
 80022d6:	697a      	ldr	r2, [r7, #20]
 80022d8:	4619      	mov	r1, r3
 80022da:	f002 fb35 	bl	8004948 <memcpy>
    pRing->WrOff = NumBytesAtOnce;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	697a      	ldr	r2, [r7, #20]
 80022e2:	60da      	str	r2, [r3, #12]
}
 80022e4:	bf00      	nop
 80022e6:	3720      	adds	r7, #32
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}

080022ec <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 80022ec:	b480      	push	{r7}
 80022ee:	b087      	sub	sp, #28
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	691b      	ldr	r3, [r3, #16]
 80022f8:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	68db      	ldr	r3, [r3, #12]
 80022fe:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8002300:	693a      	ldr	r2, [r7, #16]
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	429a      	cmp	r2, r3
 8002306:	d808      	bhi.n	800231a <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	689a      	ldr	r2, [r3, #8]
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	1ad2      	subs	r2, r2, r3
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	4413      	add	r3, r2
 8002314:	3b01      	subs	r3, #1
 8002316:	617b      	str	r3, [r7, #20]
 8002318:	e004      	b.n	8002324 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 800231a:	693a      	ldr	r2, [r7, #16]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	1ad3      	subs	r3, r2, r3
 8002320:	3b01      	subs	r3, #1
 8002322:	617b      	str	r3, [r7, #20]
  }
  return r;
 8002324:	697b      	ldr	r3, [r7, #20]
}
 8002326:	4618      	mov	r0, r3
 8002328:	371c      	adds	r7, #28
 800232a:	46bd      	mov	sp, r7
 800232c:	bc80      	pop	{r7}
 800232e:	4770      	bx	lr

08002330 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8002330:	b580      	push	{r7, lr}
 8002332:	b088      	sub	sp, #32
 8002334:	af00      	add	r7, sp, #0
 8002336:	60f8      	str	r0, [r7, #12]
 8002338:	60b9      	str	r1, [r7, #8]
 800233a:	607a      	str	r2, [r7, #4]
  unsigned              Status;
  unsigned              Avail;
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;

  pData = (const char *)pBuffer;
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	61bb      	str	r3, [r7, #24]
  //
  // Get "to-host" ring buffer.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	1c5a      	adds	r2, r3, #1
 8002344:	4613      	mov	r3, r2
 8002346:	005b      	lsls	r3, r3, #1
 8002348:	4413      	add	r3, r2
 800234a:	00db      	lsls	r3, r3, #3
 800234c:	4a1f      	ldr	r2, [pc, #124]	@ (80023cc <SEGGER_RTT_WriteNoLock+0x9c>)
 800234e:	4413      	add	r3, r2
 8002350:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	695b      	ldr	r3, [r3, #20]
 8002356:	2b02      	cmp	r3, #2
 8002358:	d029      	beq.n	80023ae <SEGGER_RTT_WriteNoLock+0x7e>
 800235a:	2b02      	cmp	r3, #2
 800235c:	d82e      	bhi.n	80023bc <SEGGER_RTT_WriteNoLock+0x8c>
 800235e:	2b00      	cmp	r3, #0
 8002360:	d002      	beq.n	8002368 <SEGGER_RTT_WriteNoLock+0x38>
 8002362:	2b01      	cmp	r3, #1
 8002364:	d013      	beq.n	800238e <SEGGER_RTT_WriteNoLock+0x5e>
 8002366:	e029      	b.n	80023bc <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8002368:	6978      	ldr	r0, [r7, #20]
 800236a:	f7ff ffbf 	bl	80022ec <_GetAvailWriteSpace>
 800236e:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8002370:	693a      	ldr	r2, [r7, #16]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	429a      	cmp	r2, r3
 8002376:	d202      	bcs.n	800237e <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 8002378:	2300      	movs	r3, #0
 800237a:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 800237c:	e021      	b.n	80023c2 <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	69b9      	ldr	r1, [r7, #24]
 8002386:	6978      	ldr	r0, [r7, #20]
 8002388:	f7ff ff70 	bl	800226c <_WriteNoCheck>
    break;
 800238c:	e019      	b.n	80023c2 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800238e:	6978      	ldr	r0, [r7, #20]
 8002390:	f7ff ffac 	bl	80022ec <_GetAvailWriteSpace>
 8002394:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	4293      	cmp	r3, r2
 800239c:	bf28      	it	cs
 800239e:	4613      	movcs	r3, r2
 80023a0:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 80023a2:	69fa      	ldr	r2, [r7, #28]
 80023a4:	69b9      	ldr	r1, [r7, #24]
 80023a6:	6978      	ldr	r0, [r7, #20]
 80023a8:	f7ff ff60 	bl	800226c <_WriteNoCheck>
    break;
 80023ac:	e009      	b.n	80023c2 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	69b9      	ldr	r1, [r7, #24]
 80023b2:	6978      	ldr	r0, [r7, #20]
 80023b4:	f7ff ff00 	bl	80021b8 <_WriteBlocking>
 80023b8:	61f8      	str	r0, [r7, #28]
    break;
 80023ba:	e002      	b.n	80023c2 <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 80023bc:	2300      	movs	r3, #0
 80023be:	61fb      	str	r3, [r7, #28]
    break;
 80023c0:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 80023c2:	69fb      	ldr	r3, [r7, #28]
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	3720      	adds	r7, #32
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	200007a0 	.word	0x200007a0

080023d0 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b086      	sub	sp, #24
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	60f8      	str	r0, [r7, #12]
 80023d8:	60b9      	str	r1, [r7, #8]
 80023da:	607a      	str	r2, [r7, #4]
  unsigned Status;
  //
  INIT();
 80023dc:	4b0d      	ldr	r3, [pc, #52]	@ (8002414 <SEGGER_RTT_Write+0x44>)
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d101      	bne.n	80023e8 <SEGGER_RTT_Write+0x18>
 80023e4:	f7ff fe96 	bl	8002114 <_DoInit>
  SEGGER_RTT_LOCK();
 80023e8:	f3ef 8311 	mrs	r3, BASEPRI
 80023ec:	f04f 0120 	mov.w	r1, #32
 80023f0:	f381 8811 	msr	BASEPRI, r1
 80023f4:	617b      	str	r3, [r7, #20]
  //
  // Call the non-locking write function
  //
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	68b9      	ldr	r1, [r7, #8]
 80023fa:	68f8      	ldr	r0, [r7, #12]
 80023fc:	f7ff ff98 	bl	8002330 <SEGGER_RTT_WriteNoLock>
 8002400:	6138      	str	r0, [r7, #16]
  //
  // Finish up.
  //
  SEGGER_RTT_UNLOCK();
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	f383 8811 	msr	BASEPRI, r3
  //
  return Status;
 8002408:	693b      	ldr	r3, [r7, #16]
}
 800240a:	4618      	mov	r0, r3
 800240c:	3718      	adds	r7, #24
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	200007a0 	.word	0x200007a0

08002418 <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
 8002418:	b580      	push	{r7, lr}
 800241a:	af00      	add	r7, sp, #0
  _DoInit();
 800241c:	f7ff fe7a 	bl	8002114 <_DoInit>
}
 8002420:	bf00      	nop
 8002422:	bd80      	pop	{r7, pc}

08002424 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002428:	4b08      	ldr	r3, [pc, #32]	@ (800244c <HAL_Init+0x28>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a07      	ldr	r2, [pc, #28]	@ (800244c <HAL_Init+0x28>)
 800242e:	f043 0310 	orr.w	r3, r3, #16
 8002432:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002434:	2003      	movs	r0, #3
 8002436:	f000 f923 	bl	8002680 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800243a:	200f      	movs	r0, #15
 800243c:	f000 f808 	bl	8002450 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002440:	f7fd fef0 	bl	8000224 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002444:	2300      	movs	r3, #0
}
 8002446:	4618      	mov	r0, r3
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	40022000 	.word	0x40022000

08002450 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002458:	4b12      	ldr	r3, [pc, #72]	@ (80024a4 <HAL_InitTick+0x54>)
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	4b12      	ldr	r3, [pc, #72]	@ (80024a8 <HAL_InitTick+0x58>)
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	4619      	mov	r1, r3
 8002462:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002466:	fbb3 f3f1 	udiv	r3, r3, r1
 800246a:	fbb2 f3f3 	udiv	r3, r2, r3
 800246e:	4618      	mov	r0, r3
 8002470:	f000 f93b 	bl	80026ea <HAL_SYSTICK_Config>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d001      	beq.n	800247e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e00e      	b.n	800249c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2b0f      	cmp	r3, #15
 8002482:	d80a      	bhi.n	800249a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002484:	2200      	movs	r2, #0
 8002486:	6879      	ldr	r1, [r7, #4]
 8002488:	f04f 30ff 	mov.w	r0, #4294967295
 800248c:	f000 f903 	bl	8002696 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002490:	4a06      	ldr	r2, [pc, #24]	@ (80024ac <HAL_InitTick+0x5c>)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002496:	2300      	movs	r3, #0
 8002498:	e000      	b.n	800249c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
}
 800249c:	4618      	mov	r0, r3
 800249e:	3708      	adds	r7, #8
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	20000000 	.word	0x20000000
 80024a8:	20000118 	.word	0x20000118
 80024ac:	20000114 	.word	0x20000114

080024b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024b0:	b480      	push	{r7}
 80024b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024b4:	4b05      	ldr	r3, [pc, #20]	@ (80024cc <HAL_IncTick+0x1c>)
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	461a      	mov	r2, r3
 80024ba:	4b05      	ldr	r3, [pc, #20]	@ (80024d0 <HAL_IncTick+0x20>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4413      	add	r3, r2
 80024c0:	4a03      	ldr	r2, [pc, #12]	@ (80024d0 <HAL_IncTick+0x20>)
 80024c2:	6013      	str	r3, [r2, #0]
}
 80024c4:	bf00      	nop
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bc80      	pop	{r7}
 80024ca:	4770      	bx	lr
 80024cc:	20000118 	.word	0x20000118
 80024d0:	20000c58 	.word	0x20000c58

080024d4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024d4:	b480      	push	{r7}
 80024d6:	af00      	add	r7, sp, #0
  return uwTick;
 80024d8:	4b02      	ldr	r3, [pc, #8]	@ (80024e4 <HAL_GetTick+0x10>)
 80024da:	681b      	ldr	r3, [r3, #0]
}
 80024dc:	4618      	mov	r0, r3
 80024de:	46bd      	mov	sp, r7
 80024e0:	bc80      	pop	{r7}
 80024e2:	4770      	bx	lr
 80024e4:	20000c58 	.word	0x20000c58

080024e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b085      	sub	sp, #20
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	f003 0307 	and.w	r3, r3, #7
 80024f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024f8:	4b0c      	ldr	r3, [pc, #48]	@ (800252c <__NVIC_SetPriorityGrouping+0x44>)
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024fe:	68ba      	ldr	r2, [r7, #8]
 8002500:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002504:	4013      	ands	r3, r2
 8002506:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002510:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002514:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002518:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800251a:	4a04      	ldr	r2, [pc, #16]	@ (800252c <__NVIC_SetPriorityGrouping+0x44>)
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	60d3      	str	r3, [r2, #12]
}
 8002520:	bf00      	nop
 8002522:	3714      	adds	r7, #20
 8002524:	46bd      	mov	sp, r7
 8002526:	bc80      	pop	{r7}
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	e000ed00 	.word	0xe000ed00

08002530 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002534:	4b04      	ldr	r3, [pc, #16]	@ (8002548 <__NVIC_GetPriorityGrouping+0x18>)
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	0a1b      	lsrs	r3, r3, #8
 800253a:	f003 0307 	and.w	r3, r3, #7
}
 800253e:	4618      	mov	r0, r3
 8002540:	46bd      	mov	sp, r7
 8002542:	bc80      	pop	{r7}
 8002544:	4770      	bx	lr
 8002546:	bf00      	nop
 8002548:	e000ed00 	.word	0xe000ed00

0800254c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	4603      	mov	r3, r0
 8002554:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800255a:	2b00      	cmp	r3, #0
 800255c:	db0b      	blt.n	8002576 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800255e:	79fb      	ldrb	r3, [r7, #7]
 8002560:	f003 021f 	and.w	r2, r3, #31
 8002564:	4906      	ldr	r1, [pc, #24]	@ (8002580 <__NVIC_EnableIRQ+0x34>)
 8002566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800256a:	095b      	lsrs	r3, r3, #5
 800256c:	2001      	movs	r0, #1
 800256e:	fa00 f202 	lsl.w	r2, r0, r2
 8002572:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002576:	bf00      	nop
 8002578:	370c      	adds	r7, #12
 800257a:	46bd      	mov	sp, r7
 800257c:	bc80      	pop	{r7}
 800257e:	4770      	bx	lr
 8002580:	e000e100 	.word	0xe000e100

08002584 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	4603      	mov	r3, r0
 800258c:	6039      	str	r1, [r7, #0]
 800258e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002590:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002594:	2b00      	cmp	r3, #0
 8002596:	db0a      	blt.n	80025ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	b2da      	uxtb	r2, r3
 800259c:	490c      	ldr	r1, [pc, #48]	@ (80025d0 <__NVIC_SetPriority+0x4c>)
 800259e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a2:	0112      	lsls	r2, r2, #4
 80025a4:	b2d2      	uxtb	r2, r2
 80025a6:	440b      	add	r3, r1
 80025a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025ac:	e00a      	b.n	80025c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	b2da      	uxtb	r2, r3
 80025b2:	4908      	ldr	r1, [pc, #32]	@ (80025d4 <__NVIC_SetPriority+0x50>)
 80025b4:	79fb      	ldrb	r3, [r7, #7]
 80025b6:	f003 030f 	and.w	r3, r3, #15
 80025ba:	3b04      	subs	r3, #4
 80025bc:	0112      	lsls	r2, r2, #4
 80025be:	b2d2      	uxtb	r2, r2
 80025c0:	440b      	add	r3, r1
 80025c2:	761a      	strb	r2, [r3, #24]
}
 80025c4:	bf00      	nop
 80025c6:	370c      	adds	r7, #12
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bc80      	pop	{r7}
 80025cc:	4770      	bx	lr
 80025ce:	bf00      	nop
 80025d0:	e000e100 	.word	0xe000e100
 80025d4:	e000ed00 	.word	0xe000ed00

080025d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025d8:	b480      	push	{r7}
 80025da:	b089      	sub	sp, #36	@ 0x24
 80025dc:	af00      	add	r7, sp, #0
 80025de:	60f8      	str	r0, [r7, #12]
 80025e0:	60b9      	str	r1, [r7, #8]
 80025e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f003 0307 	and.w	r3, r3, #7
 80025ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	f1c3 0307 	rsb	r3, r3, #7
 80025f2:	2b04      	cmp	r3, #4
 80025f4:	bf28      	it	cs
 80025f6:	2304      	movcs	r3, #4
 80025f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	3304      	adds	r3, #4
 80025fe:	2b06      	cmp	r3, #6
 8002600:	d902      	bls.n	8002608 <NVIC_EncodePriority+0x30>
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	3b03      	subs	r3, #3
 8002606:	e000      	b.n	800260a <NVIC_EncodePriority+0x32>
 8002608:	2300      	movs	r3, #0
 800260a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800260c:	f04f 32ff 	mov.w	r2, #4294967295
 8002610:	69bb      	ldr	r3, [r7, #24]
 8002612:	fa02 f303 	lsl.w	r3, r2, r3
 8002616:	43da      	mvns	r2, r3
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	401a      	ands	r2, r3
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002620:	f04f 31ff 	mov.w	r1, #4294967295
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	fa01 f303 	lsl.w	r3, r1, r3
 800262a:	43d9      	mvns	r1, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002630:	4313      	orrs	r3, r2
         );
}
 8002632:	4618      	mov	r0, r3
 8002634:	3724      	adds	r7, #36	@ 0x24
 8002636:	46bd      	mov	sp, r7
 8002638:	bc80      	pop	{r7}
 800263a:	4770      	bx	lr

0800263c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	3b01      	subs	r3, #1
 8002648:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800264c:	d301      	bcc.n	8002652 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800264e:	2301      	movs	r3, #1
 8002650:	e00f      	b.n	8002672 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002652:	4a0a      	ldr	r2, [pc, #40]	@ (800267c <SysTick_Config+0x40>)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	3b01      	subs	r3, #1
 8002658:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800265a:	210f      	movs	r1, #15
 800265c:	f04f 30ff 	mov.w	r0, #4294967295
 8002660:	f7ff ff90 	bl	8002584 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002664:	4b05      	ldr	r3, [pc, #20]	@ (800267c <SysTick_Config+0x40>)
 8002666:	2200      	movs	r2, #0
 8002668:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800266a:	4b04      	ldr	r3, [pc, #16]	@ (800267c <SysTick_Config+0x40>)
 800266c:	2207      	movs	r2, #7
 800266e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002670:	2300      	movs	r3, #0
}
 8002672:	4618      	mov	r0, r3
 8002674:	3708      	adds	r7, #8
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	e000e010 	.word	0xe000e010

08002680 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f7ff ff2d 	bl	80024e8 <__NVIC_SetPriorityGrouping>
}
 800268e:	bf00      	nop
 8002690:	3708      	adds	r7, #8
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}

08002696 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002696:	b580      	push	{r7, lr}
 8002698:	b086      	sub	sp, #24
 800269a:	af00      	add	r7, sp, #0
 800269c:	4603      	mov	r3, r0
 800269e:	60b9      	str	r1, [r7, #8]
 80026a0:	607a      	str	r2, [r7, #4]
 80026a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026a4:	2300      	movs	r3, #0
 80026a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026a8:	f7ff ff42 	bl	8002530 <__NVIC_GetPriorityGrouping>
 80026ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	68b9      	ldr	r1, [r7, #8]
 80026b2:	6978      	ldr	r0, [r7, #20]
 80026b4:	f7ff ff90 	bl	80025d8 <NVIC_EncodePriority>
 80026b8:	4602      	mov	r2, r0
 80026ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026be:	4611      	mov	r1, r2
 80026c0:	4618      	mov	r0, r3
 80026c2:	f7ff ff5f 	bl	8002584 <__NVIC_SetPriority>
}
 80026c6:	bf00      	nop
 80026c8:	3718      	adds	r7, #24
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}

080026ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026ce:	b580      	push	{r7, lr}
 80026d0:	b082      	sub	sp, #8
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	4603      	mov	r3, r0
 80026d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026dc:	4618      	mov	r0, r3
 80026de:	f7ff ff35 	bl	800254c <__NVIC_EnableIRQ>
}
 80026e2:	bf00      	nop
 80026e4:	3708      	adds	r7, #8
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}

080026ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026ea:	b580      	push	{r7, lr}
 80026ec:	b082      	sub	sp, #8
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f7ff ffa2 	bl	800263c <SysTick_Config>
 80026f8:	4603      	mov	r3, r0
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3708      	adds	r7, #8
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}

08002702 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002702:	b480      	push	{r7}
 8002704:	b085      	sub	sp, #20
 8002706:	af00      	add	r7, sp, #0
 8002708:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800270a:	2300      	movs	r3, #0
 800270c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002714:	b2db      	uxtb	r3, r3
 8002716:	2b02      	cmp	r3, #2
 8002718:	d008      	beq.n	800272c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2204      	movs	r2, #4
 800271e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2200      	movs	r2, #0
 8002724:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	e020      	b.n	800276e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f022 020e 	bic.w	r2, r2, #14
 800273a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f022 0201 	bic.w	r2, r2, #1
 800274a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002754:	2101      	movs	r1, #1
 8002756:	fa01 f202 	lsl.w	r2, r1, r2
 800275a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2201      	movs	r2, #1
 8002760:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2200      	movs	r2, #0
 8002768:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800276c:	7bfb      	ldrb	r3, [r7, #15]
}
 800276e:	4618      	mov	r0, r3
 8002770:	3714      	adds	r7, #20
 8002772:	46bd      	mov	sp, r7
 8002774:	bc80      	pop	{r7}
 8002776:	4770      	bx	lr

08002778 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002778:	b580      	push	{r7, lr}
 800277a:	b084      	sub	sp, #16
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002780:	2300      	movs	r3, #0
 8002782:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800278a:	b2db      	uxtb	r3, r3
 800278c:	2b02      	cmp	r3, #2
 800278e:	d005      	beq.n	800279c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2204      	movs	r2, #4
 8002794:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	73fb      	strb	r3, [r7, #15]
 800279a:	e0d6      	b.n	800294a <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f022 020e 	bic.w	r2, r2, #14
 80027aa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f022 0201 	bic.w	r2, r2, #1
 80027ba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	461a      	mov	r2, r3
 80027c2:	4b64      	ldr	r3, [pc, #400]	@ (8002954 <HAL_DMA_Abort_IT+0x1dc>)
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d958      	bls.n	800287a <HAL_DMA_Abort_IT+0x102>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a62      	ldr	r2, [pc, #392]	@ (8002958 <HAL_DMA_Abort_IT+0x1e0>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d04f      	beq.n	8002872 <HAL_DMA_Abort_IT+0xfa>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a61      	ldr	r2, [pc, #388]	@ (800295c <HAL_DMA_Abort_IT+0x1e4>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d048      	beq.n	800286e <HAL_DMA_Abort_IT+0xf6>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a5f      	ldr	r2, [pc, #380]	@ (8002960 <HAL_DMA_Abort_IT+0x1e8>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d040      	beq.n	8002868 <HAL_DMA_Abort_IT+0xf0>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a5e      	ldr	r2, [pc, #376]	@ (8002964 <HAL_DMA_Abort_IT+0x1ec>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d038      	beq.n	8002862 <HAL_DMA_Abort_IT+0xea>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a5c      	ldr	r2, [pc, #368]	@ (8002968 <HAL_DMA_Abort_IT+0x1f0>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d030      	beq.n	800285c <HAL_DMA_Abort_IT+0xe4>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a5b      	ldr	r2, [pc, #364]	@ (800296c <HAL_DMA_Abort_IT+0x1f4>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d028      	beq.n	8002856 <HAL_DMA_Abort_IT+0xde>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a52      	ldr	r2, [pc, #328]	@ (8002954 <HAL_DMA_Abort_IT+0x1dc>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d020      	beq.n	8002850 <HAL_DMA_Abort_IT+0xd8>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a57      	ldr	r2, [pc, #348]	@ (8002970 <HAL_DMA_Abort_IT+0x1f8>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d019      	beq.n	800284c <HAL_DMA_Abort_IT+0xd4>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a55      	ldr	r2, [pc, #340]	@ (8002974 <HAL_DMA_Abort_IT+0x1fc>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d012      	beq.n	8002848 <HAL_DMA_Abort_IT+0xd0>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a54      	ldr	r2, [pc, #336]	@ (8002978 <HAL_DMA_Abort_IT+0x200>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d00a      	beq.n	8002842 <HAL_DMA_Abort_IT+0xca>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a52      	ldr	r2, [pc, #328]	@ (800297c <HAL_DMA_Abort_IT+0x204>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d102      	bne.n	800283c <HAL_DMA_Abort_IT+0xc4>
 8002836:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800283a:	e01b      	b.n	8002874 <HAL_DMA_Abort_IT+0xfc>
 800283c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002840:	e018      	b.n	8002874 <HAL_DMA_Abort_IT+0xfc>
 8002842:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002846:	e015      	b.n	8002874 <HAL_DMA_Abort_IT+0xfc>
 8002848:	2310      	movs	r3, #16
 800284a:	e013      	b.n	8002874 <HAL_DMA_Abort_IT+0xfc>
 800284c:	2301      	movs	r3, #1
 800284e:	e011      	b.n	8002874 <HAL_DMA_Abort_IT+0xfc>
 8002850:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002854:	e00e      	b.n	8002874 <HAL_DMA_Abort_IT+0xfc>
 8002856:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800285a:	e00b      	b.n	8002874 <HAL_DMA_Abort_IT+0xfc>
 800285c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002860:	e008      	b.n	8002874 <HAL_DMA_Abort_IT+0xfc>
 8002862:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002866:	e005      	b.n	8002874 <HAL_DMA_Abort_IT+0xfc>
 8002868:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800286c:	e002      	b.n	8002874 <HAL_DMA_Abort_IT+0xfc>
 800286e:	2310      	movs	r3, #16
 8002870:	e000      	b.n	8002874 <HAL_DMA_Abort_IT+0xfc>
 8002872:	2301      	movs	r3, #1
 8002874:	4a42      	ldr	r2, [pc, #264]	@ (8002980 <HAL_DMA_Abort_IT+0x208>)
 8002876:	6053      	str	r3, [r2, #4]
 8002878:	e057      	b.n	800292a <HAL_DMA_Abort_IT+0x1b2>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a36      	ldr	r2, [pc, #216]	@ (8002958 <HAL_DMA_Abort_IT+0x1e0>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d04f      	beq.n	8002924 <HAL_DMA_Abort_IT+0x1ac>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a34      	ldr	r2, [pc, #208]	@ (800295c <HAL_DMA_Abort_IT+0x1e4>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d048      	beq.n	8002920 <HAL_DMA_Abort_IT+0x1a8>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a33      	ldr	r2, [pc, #204]	@ (8002960 <HAL_DMA_Abort_IT+0x1e8>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d040      	beq.n	800291a <HAL_DMA_Abort_IT+0x1a2>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a31      	ldr	r2, [pc, #196]	@ (8002964 <HAL_DMA_Abort_IT+0x1ec>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d038      	beq.n	8002914 <HAL_DMA_Abort_IT+0x19c>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a30      	ldr	r2, [pc, #192]	@ (8002968 <HAL_DMA_Abort_IT+0x1f0>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d030      	beq.n	800290e <HAL_DMA_Abort_IT+0x196>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a2e      	ldr	r2, [pc, #184]	@ (800296c <HAL_DMA_Abort_IT+0x1f4>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d028      	beq.n	8002908 <HAL_DMA_Abort_IT+0x190>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a26      	ldr	r2, [pc, #152]	@ (8002954 <HAL_DMA_Abort_IT+0x1dc>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d020      	beq.n	8002902 <HAL_DMA_Abort_IT+0x18a>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a2a      	ldr	r2, [pc, #168]	@ (8002970 <HAL_DMA_Abort_IT+0x1f8>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d019      	beq.n	80028fe <HAL_DMA_Abort_IT+0x186>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a29      	ldr	r2, [pc, #164]	@ (8002974 <HAL_DMA_Abort_IT+0x1fc>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d012      	beq.n	80028fa <HAL_DMA_Abort_IT+0x182>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a27      	ldr	r2, [pc, #156]	@ (8002978 <HAL_DMA_Abort_IT+0x200>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d00a      	beq.n	80028f4 <HAL_DMA_Abort_IT+0x17c>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a26      	ldr	r2, [pc, #152]	@ (800297c <HAL_DMA_Abort_IT+0x204>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d102      	bne.n	80028ee <HAL_DMA_Abort_IT+0x176>
 80028e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80028ec:	e01b      	b.n	8002926 <HAL_DMA_Abort_IT+0x1ae>
 80028ee:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80028f2:	e018      	b.n	8002926 <HAL_DMA_Abort_IT+0x1ae>
 80028f4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80028f8:	e015      	b.n	8002926 <HAL_DMA_Abort_IT+0x1ae>
 80028fa:	2310      	movs	r3, #16
 80028fc:	e013      	b.n	8002926 <HAL_DMA_Abort_IT+0x1ae>
 80028fe:	2301      	movs	r3, #1
 8002900:	e011      	b.n	8002926 <HAL_DMA_Abort_IT+0x1ae>
 8002902:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002906:	e00e      	b.n	8002926 <HAL_DMA_Abort_IT+0x1ae>
 8002908:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800290c:	e00b      	b.n	8002926 <HAL_DMA_Abort_IT+0x1ae>
 800290e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002912:	e008      	b.n	8002926 <HAL_DMA_Abort_IT+0x1ae>
 8002914:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002918:	e005      	b.n	8002926 <HAL_DMA_Abort_IT+0x1ae>
 800291a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800291e:	e002      	b.n	8002926 <HAL_DMA_Abort_IT+0x1ae>
 8002920:	2310      	movs	r3, #16
 8002922:	e000      	b.n	8002926 <HAL_DMA_Abort_IT+0x1ae>
 8002924:	2301      	movs	r3, #1
 8002926:	4a17      	ldr	r2, [pc, #92]	@ (8002984 <HAL_DMA_Abort_IT+0x20c>)
 8002928:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2201      	movs	r2, #1
 800292e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2200      	movs	r2, #0
 8002936:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800293e:	2b00      	cmp	r3, #0
 8002940:	d003      	beq.n	800294a <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	4798      	blx	r3
    } 
  }
  return status;
 800294a:	7bfb      	ldrb	r3, [r7, #15]
}
 800294c:	4618      	mov	r0, r3
 800294e:	3710      	adds	r7, #16
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}
 8002954:	40020080 	.word	0x40020080
 8002958:	40020008 	.word	0x40020008
 800295c:	4002001c 	.word	0x4002001c
 8002960:	40020030 	.word	0x40020030
 8002964:	40020044 	.word	0x40020044
 8002968:	40020058 	.word	0x40020058
 800296c:	4002006c 	.word	0x4002006c
 8002970:	40020408 	.word	0x40020408
 8002974:	4002041c 	.word	0x4002041c
 8002978:	40020430 	.word	0x40020430
 800297c:	40020444 	.word	0x40020444
 8002980:	40020400 	.word	0x40020400
 8002984:	40020000 	.word	0x40020000

08002988 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002988:	b480      	push	{r7}
 800298a:	b08b      	sub	sp, #44	@ 0x2c
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002992:	2300      	movs	r3, #0
 8002994:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002996:	2300      	movs	r3, #0
 8002998:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800299a:	e179      	b.n	8002c90 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800299c:	2201      	movs	r2, #1
 800299e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029a0:	fa02 f303 	lsl.w	r3, r2, r3
 80029a4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	69fa      	ldr	r2, [r7, #28]
 80029ac:	4013      	ands	r3, r2
 80029ae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80029b0:	69ba      	ldr	r2, [r7, #24]
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	429a      	cmp	r2, r3
 80029b6:	f040 8168 	bne.w	8002c8a <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	4a96      	ldr	r2, [pc, #600]	@ (8002c18 <HAL_GPIO_Init+0x290>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d05e      	beq.n	8002a82 <HAL_GPIO_Init+0xfa>
 80029c4:	4a94      	ldr	r2, [pc, #592]	@ (8002c18 <HAL_GPIO_Init+0x290>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d875      	bhi.n	8002ab6 <HAL_GPIO_Init+0x12e>
 80029ca:	4a94      	ldr	r2, [pc, #592]	@ (8002c1c <HAL_GPIO_Init+0x294>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d058      	beq.n	8002a82 <HAL_GPIO_Init+0xfa>
 80029d0:	4a92      	ldr	r2, [pc, #584]	@ (8002c1c <HAL_GPIO_Init+0x294>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d86f      	bhi.n	8002ab6 <HAL_GPIO_Init+0x12e>
 80029d6:	4a92      	ldr	r2, [pc, #584]	@ (8002c20 <HAL_GPIO_Init+0x298>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d052      	beq.n	8002a82 <HAL_GPIO_Init+0xfa>
 80029dc:	4a90      	ldr	r2, [pc, #576]	@ (8002c20 <HAL_GPIO_Init+0x298>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d869      	bhi.n	8002ab6 <HAL_GPIO_Init+0x12e>
 80029e2:	4a90      	ldr	r2, [pc, #576]	@ (8002c24 <HAL_GPIO_Init+0x29c>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d04c      	beq.n	8002a82 <HAL_GPIO_Init+0xfa>
 80029e8:	4a8e      	ldr	r2, [pc, #568]	@ (8002c24 <HAL_GPIO_Init+0x29c>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d863      	bhi.n	8002ab6 <HAL_GPIO_Init+0x12e>
 80029ee:	4a8e      	ldr	r2, [pc, #568]	@ (8002c28 <HAL_GPIO_Init+0x2a0>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d046      	beq.n	8002a82 <HAL_GPIO_Init+0xfa>
 80029f4:	4a8c      	ldr	r2, [pc, #560]	@ (8002c28 <HAL_GPIO_Init+0x2a0>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d85d      	bhi.n	8002ab6 <HAL_GPIO_Init+0x12e>
 80029fa:	2b12      	cmp	r3, #18
 80029fc:	d82a      	bhi.n	8002a54 <HAL_GPIO_Init+0xcc>
 80029fe:	2b12      	cmp	r3, #18
 8002a00:	d859      	bhi.n	8002ab6 <HAL_GPIO_Init+0x12e>
 8002a02:	a201      	add	r2, pc, #4	@ (adr r2, 8002a08 <HAL_GPIO_Init+0x80>)
 8002a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a08:	08002a83 	.word	0x08002a83
 8002a0c:	08002a5d 	.word	0x08002a5d
 8002a10:	08002a6f 	.word	0x08002a6f
 8002a14:	08002ab1 	.word	0x08002ab1
 8002a18:	08002ab7 	.word	0x08002ab7
 8002a1c:	08002ab7 	.word	0x08002ab7
 8002a20:	08002ab7 	.word	0x08002ab7
 8002a24:	08002ab7 	.word	0x08002ab7
 8002a28:	08002ab7 	.word	0x08002ab7
 8002a2c:	08002ab7 	.word	0x08002ab7
 8002a30:	08002ab7 	.word	0x08002ab7
 8002a34:	08002ab7 	.word	0x08002ab7
 8002a38:	08002ab7 	.word	0x08002ab7
 8002a3c:	08002ab7 	.word	0x08002ab7
 8002a40:	08002ab7 	.word	0x08002ab7
 8002a44:	08002ab7 	.word	0x08002ab7
 8002a48:	08002ab7 	.word	0x08002ab7
 8002a4c:	08002a65 	.word	0x08002a65
 8002a50:	08002a79 	.word	0x08002a79
 8002a54:	4a75      	ldr	r2, [pc, #468]	@ (8002c2c <HAL_GPIO_Init+0x2a4>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d013      	beq.n	8002a82 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002a5a:	e02c      	b.n	8002ab6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	623b      	str	r3, [r7, #32]
          break;
 8002a62:	e029      	b.n	8002ab8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	3304      	adds	r3, #4
 8002a6a:	623b      	str	r3, [r7, #32]
          break;
 8002a6c:	e024      	b.n	8002ab8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	68db      	ldr	r3, [r3, #12]
 8002a72:	3308      	adds	r3, #8
 8002a74:	623b      	str	r3, [r7, #32]
          break;
 8002a76:	e01f      	b.n	8002ab8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	330c      	adds	r3, #12
 8002a7e:	623b      	str	r3, [r7, #32]
          break;
 8002a80:	e01a      	b.n	8002ab8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d102      	bne.n	8002a90 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002a8a:	2304      	movs	r3, #4
 8002a8c:	623b      	str	r3, [r7, #32]
          break;
 8002a8e:	e013      	b.n	8002ab8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d105      	bne.n	8002aa4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002a98:	2308      	movs	r3, #8
 8002a9a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	69fa      	ldr	r2, [r7, #28]
 8002aa0:	611a      	str	r2, [r3, #16]
          break;
 8002aa2:	e009      	b.n	8002ab8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002aa4:	2308      	movs	r3, #8
 8002aa6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	69fa      	ldr	r2, [r7, #28]
 8002aac:	615a      	str	r2, [r3, #20]
          break;
 8002aae:	e003      	b.n	8002ab8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	623b      	str	r3, [r7, #32]
          break;
 8002ab4:	e000      	b.n	8002ab8 <HAL_GPIO_Init+0x130>
          break;
 8002ab6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002ab8:	69bb      	ldr	r3, [r7, #24]
 8002aba:	2bff      	cmp	r3, #255	@ 0xff
 8002abc:	d801      	bhi.n	8002ac2 <HAL_GPIO_Init+0x13a>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	e001      	b.n	8002ac6 <HAL_GPIO_Init+0x13e>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	3304      	adds	r3, #4
 8002ac6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002ac8:	69bb      	ldr	r3, [r7, #24]
 8002aca:	2bff      	cmp	r3, #255	@ 0xff
 8002acc:	d802      	bhi.n	8002ad4 <HAL_GPIO_Init+0x14c>
 8002ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	e002      	b.n	8002ada <HAL_GPIO_Init+0x152>
 8002ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ad6:	3b08      	subs	r3, #8
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	210f      	movs	r1, #15
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ae8:	43db      	mvns	r3, r3
 8002aea:	401a      	ands	r2, r3
 8002aec:	6a39      	ldr	r1, [r7, #32]
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	fa01 f303 	lsl.w	r3, r1, r3
 8002af4:	431a      	orrs	r2, r3
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	f000 80c1 	beq.w	8002c8a <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002b08:	4b49      	ldr	r3, [pc, #292]	@ (8002c30 <HAL_GPIO_Init+0x2a8>)
 8002b0a:	699b      	ldr	r3, [r3, #24]
 8002b0c:	4a48      	ldr	r2, [pc, #288]	@ (8002c30 <HAL_GPIO_Init+0x2a8>)
 8002b0e:	f043 0301 	orr.w	r3, r3, #1
 8002b12:	6193      	str	r3, [r2, #24]
 8002b14:	4b46      	ldr	r3, [pc, #280]	@ (8002c30 <HAL_GPIO_Init+0x2a8>)
 8002b16:	699b      	ldr	r3, [r3, #24]
 8002b18:	f003 0301 	and.w	r3, r3, #1
 8002b1c:	60bb      	str	r3, [r7, #8]
 8002b1e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002b20:	4a44      	ldr	r2, [pc, #272]	@ (8002c34 <HAL_GPIO_Init+0x2ac>)
 8002b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b24:	089b      	lsrs	r3, r3, #2
 8002b26:	3302      	adds	r3, #2
 8002b28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b2c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b30:	f003 0303 	and.w	r3, r3, #3
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	220f      	movs	r2, #15
 8002b38:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3c:	43db      	mvns	r3, r3
 8002b3e:	68fa      	ldr	r2, [r7, #12]
 8002b40:	4013      	ands	r3, r2
 8002b42:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	4a3c      	ldr	r2, [pc, #240]	@ (8002c38 <HAL_GPIO_Init+0x2b0>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d01f      	beq.n	8002b8c <HAL_GPIO_Init+0x204>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	4a3b      	ldr	r2, [pc, #236]	@ (8002c3c <HAL_GPIO_Init+0x2b4>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d019      	beq.n	8002b88 <HAL_GPIO_Init+0x200>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	4a3a      	ldr	r2, [pc, #232]	@ (8002c40 <HAL_GPIO_Init+0x2b8>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d013      	beq.n	8002b84 <HAL_GPIO_Init+0x1fc>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	4a39      	ldr	r2, [pc, #228]	@ (8002c44 <HAL_GPIO_Init+0x2bc>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d00d      	beq.n	8002b80 <HAL_GPIO_Init+0x1f8>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	4a38      	ldr	r2, [pc, #224]	@ (8002c48 <HAL_GPIO_Init+0x2c0>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d007      	beq.n	8002b7c <HAL_GPIO_Init+0x1f4>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	4a37      	ldr	r2, [pc, #220]	@ (8002c4c <HAL_GPIO_Init+0x2c4>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d101      	bne.n	8002b78 <HAL_GPIO_Init+0x1f0>
 8002b74:	2305      	movs	r3, #5
 8002b76:	e00a      	b.n	8002b8e <HAL_GPIO_Init+0x206>
 8002b78:	2306      	movs	r3, #6
 8002b7a:	e008      	b.n	8002b8e <HAL_GPIO_Init+0x206>
 8002b7c:	2304      	movs	r3, #4
 8002b7e:	e006      	b.n	8002b8e <HAL_GPIO_Init+0x206>
 8002b80:	2303      	movs	r3, #3
 8002b82:	e004      	b.n	8002b8e <HAL_GPIO_Init+0x206>
 8002b84:	2302      	movs	r3, #2
 8002b86:	e002      	b.n	8002b8e <HAL_GPIO_Init+0x206>
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e000      	b.n	8002b8e <HAL_GPIO_Init+0x206>
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b90:	f002 0203 	and.w	r2, r2, #3
 8002b94:	0092      	lsls	r2, r2, #2
 8002b96:	4093      	lsls	r3, r2
 8002b98:	68fa      	ldr	r2, [r7, #12]
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002b9e:	4925      	ldr	r1, [pc, #148]	@ (8002c34 <HAL_GPIO_Init+0x2ac>)
 8002ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ba2:	089b      	lsrs	r3, r3, #2
 8002ba4:	3302      	adds	r3, #2
 8002ba6:	68fa      	ldr	r2, [r7, #12]
 8002ba8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d006      	beq.n	8002bc6 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002bb8:	4b25      	ldr	r3, [pc, #148]	@ (8002c50 <HAL_GPIO_Init+0x2c8>)
 8002bba:	689a      	ldr	r2, [r3, #8]
 8002bbc:	4924      	ldr	r1, [pc, #144]	@ (8002c50 <HAL_GPIO_Init+0x2c8>)
 8002bbe:	69bb      	ldr	r3, [r7, #24]
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	608b      	str	r3, [r1, #8]
 8002bc4:	e006      	b.n	8002bd4 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002bc6:	4b22      	ldr	r3, [pc, #136]	@ (8002c50 <HAL_GPIO_Init+0x2c8>)
 8002bc8:	689a      	ldr	r2, [r3, #8]
 8002bca:	69bb      	ldr	r3, [r7, #24]
 8002bcc:	43db      	mvns	r3, r3
 8002bce:	4920      	ldr	r1, [pc, #128]	@ (8002c50 <HAL_GPIO_Init+0x2c8>)
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d006      	beq.n	8002bee <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002be0:	4b1b      	ldr	r3, [pc, #108]	@ (8002c50 <HAL_GPIO_Init+0x2c8>)
 8002be2:	68da      	ldr	r2, [r3, #12]
 8002be4:	491a      	ldr	r1, [pc, #104]	@ (8002c50 <HAL_GPIO_Init+0x2c8>)
 8002be6:	69bb      	ldr	r3, [r7, #24]
 8002be8:	4313      	orrs	r3, r2
 8002bea:	60cb      	str	r3, [r1, #12]
 8002bec:	e006      	b.n	8002bfc <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002bee:	4b18      	ldr	r3, [pc, #96]	@ (8002c50 <HAL_GPIO_Init+0x2c8>)
 8002bf0:	68da      	ldr	r2, [r3, #12]
 8002bf2:	69bb      	ldr	r3, [r7, #24]
 8002bf4:	43db      	mvns	r3, r3
 8002bf6:	4916      	ldr	r1, [pc, #88]	@ (8002c50 <HAL_GPIO_Init+0x2c8>)
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d025      	beq.n	8002c54 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002c08:	4b11      	ldr	r3, [pc, #68]	@ (8002c50 <HAL_GPIO_Init+0x2c8>)
 8002c0a:	685a      	ldr	r2, [r3, #4]
 8002c0c:	4910      	ldr	r1, [pc, #64]	@ (8002c50 <HAL_GPIO_Init+0x2c8>)
 8002c0e:	69bb      	ldr	r3, [r7, #24]
 8002c10:	4313      	orrs	r3, r2
 8002c12:	604b      	str	r3, [r1, #4]
 8002c14:	e025      	b.n	8002c62 <HAL_GPIO_Init+0x2da>
 8002c16:	bf00      	nop
 8002c18:	10320000 	.word	0x10320000
 8002c1c:	10310000 	.word	0x10310000
 8002c20:	10220000 	.word	0x10220000
 8002c24:	10210000 	.word	0x10210000
 8002c28:	10120000 	.word	0x10120000
 8002c2c:	10110000 	.word	0x10110000
 8002c30:	40021000 	.word	0x40021000
 8002c34:	40010000 	.word	0x40010000
 8002c38:	40010800 	.word	0x40010800
 8002c3c:	40010c00 	.word	0x40010c00
 8002c40:	40011000 	.word	0x40011000
 8002c44:	40011400 	.word	0x40011400
 8002c48:	40011800 	.word	0x40011800
 8002c4c:	40011c00 	.word	0x40011c00
 8002c50:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002c54:	4b15      	ldr	r3, [pc, #84]	@ (8002cac <HAL_GPIO_Init+0x324>)
 8002c56:	685a      	ldr	r2, [r3, #4]
 8002c58:	69bb      	ldr	r3, [r7, #24]
 8002c5a:	43db      	mvns	r3, r3
 8002c5c:	4913      	ldr	r1, [pc, #76]	@ (8002cac <HAL_GPIO_Init+0x324>)
 8002c5e:	4013      	ands	r3, r2
 8002c60:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d006      	beq.n	8002c7c <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002c6e:	4b0f      	ldr	r3, [pc, #60]	@ (8002cac <HAL_GPIO_Init+0x324>)
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	490e      	ldr	r1, [pc, #56]	@ (8002cac <HAL_GPIO_Init+0x324>)
 8002c74:	69bb      	ldr	r3, [r7, #24]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	600b      	str	r3, [r1, #0]
 8002c7a:	e006      	b.n	8002c8a <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002c7c:	4b0b      	ldr	r3, [pc, #44]	@ (8002cac <HAL_GPIO_Init+0x324>)
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	69bb      	ldr	r3, [r7, #24]
 8002c82:	43db      	mvns	r3, r3
 8002c84:	4909      	ldr	r1, [pc, #36]	@ (8002cac <HAL_GPIO_Init+0x324>)
 8002c86:	4013      	ands	r3, r2
 8002c88:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c8c:	3301      	adds	r3, #1
 8002c8e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c96:	fa22 f303 	lsr.w	r3, r2, r3
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	f47f ae7e 	bne.w	800299c <HAL_GPIO_Init+0x14>
  }
}
 8002ca0:	bf00      	nop
 8002ca2:	bf00      	nop
 8002ca4:	372c      	adds	r7, #44	@ 0x2c
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bc80      	pop	{r7}
 8002caa:	4770      	bx	lr
 8002cac:	40010400 	.word	0x40010400

08002cb0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b085      	sub	sp, #20
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
 8002cb8:	460b      	mov	r3, r1
 8002cba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	689a      	ldr	r2, [r3, #8]
 8002cc0:	887b      	ldrh	r3, [r7, #2]
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d002      	beq.n	8002cce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	73fb      	strb	r3, [r7, #15]
 8002ccc:	e001      	b.n	8002cd2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002cd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3714      	adds	r7, #20
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bc80      	pop	{r7}
 8002cdc:	4770      	bx	lr

08002cde <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cde:	b480      	push	{r7}
 8002ce0:	b083      	sub	sp, #12
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	6078      	str	r0, [r7, #4]
 8002ce6:	460b      	mov	r3, r1
 8002ce8:	807b      	strh	r3, [r7, #2]
 8002cea:	4613      	mov	r3, r2
 8002cec:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002cee:	787b      	ldrb	r3, [r7, #1]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d003      	beq.n	8002cfc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cf4:	887a      	ldrh	r2, [r7, #2]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002cfa:	e003      	b.n	8002d04 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002cfc:	887b      	ldrh	r3, [r7, #2]
 8002cfe:	041a      	lsls	r2, r3, #16
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	611a      	str	r2, [r3, #16]
}
 8002d04:	bf00      	nop
 8002d06:	370c      	adds	r7, #12
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bc80      	pop	{r7}
 8002d0c:	4770      	bx	lr

08002d0e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002d0e:	b480      	push	{r7}
 8002d10:	b085      	sub	sp, #20
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	6078      	str	r0, [r7, #4]
 8002d16:	460b      	mov	r3, r1
 8002d18:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	68db      	ldr	r3, [r3, #12]
 8002d1e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002d20:	887a      	ldrh	r2, [r7, #2]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	4013      	ands	r3, r2
 8002d26:	041a      	lsls	r2, r3, #16
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	43d9      	mvns	r1, r3
 8002d2c:	887b      	ldrh	r3, [r7, #2]
 8002d2e:	400b      	ands	r3, r1
 8002d30:	431a      	orrs	r2, r3
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	611a      	str	r2, [r3, #16]
}
 8002d36:	bf00      	nop
 8002d38:	3714      	adds	r7, #20
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bc80      	pop	{r7}
 8002d3e:	4770      	bx	lr

08002d40 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b084      	sub	sp, #16
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d101      	bne.n	8002d52 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e036      	b.n	8002dc0 <HAL_IWDG_Init+0x80>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 8002d5a:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f245 5255 	movw	r2, #21845	@ 0x5555
 8002d64:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	6852      	ldr	r2, [r2, #4]
 8002d6e:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	687a      	ldr	r2, [r7, #4]
 8002d76:	6892      	ldr	r2, [r2, #8]
 8002d78:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8002d7a:	f7ff fbab 	bl	80024d4 <HAL_GetTick>
 8002d7e:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002d80:	e011      	b.n	8002da6 <HAL_IWDG_Init+0x66>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8002d82:	f7ff fba7 	bl	80024d4 <HAL_GetTick>
 8002d86:	4602      	mov	r2, r0
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	f241 323c 	movw	r2, #4924	@ 0x133c
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d908      	bls.n	8002da6 <HAL_IWDG_Init+0x66>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	68db      	ldr	r3, [r3, #12]
 8002d9a:	f003 0303 	and.w	r3, r3, #3
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d001      	beq.n	8002da6 <HAL_IWDG_Init+0x66>
      {
        return HAL_TIMEOUT;
 8002da2:	2303      	movs	r3, #3
 8002da4:	e00c      	b.n	8002dc0 <HAL_IWDG_Init+0x80>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	f003 0303 	and.w	r3, r3, #3
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d1e6      	bne.n	8002d82 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8002dbc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002dbe:	2300      	movs	r3, #0
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3710      	adds	r7, #16
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}

08002dc8 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8002dd8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002dda:	2300      	movs	r3, #0
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	370c      	adds	r7, #12
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bc80      	pop	{r7}
 8002de4:	4770      	bx	lr
	...

08002de8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b086      	sub	sp, #24
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d101      	bne.n	8002dfa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e272      	b.n	80032e0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0301 	and.w	r3, r3, #1
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	f000 8087 	beq.w	8002f16 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e08:	4b92      	ldr	r3, [pc, #584]	@ (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	f003 030c 	and.w	r3, r3, #12
 8002e10:	2b04      	cmp	r3, #4
 8002e12:	d00c      	beq.n	8002e2e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002e14:	4b8f      	ldr	r3, [pc, #572]	@ (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f003 030c 	and.w	r3, r3, #12
 8002e1c:	2b08      	cmp	r3, #8
 8002e1e:	d112      	bne.n	8002e46 <HAL_RCC_OscConfig+0x5e>
 8002e20:	4b8c      	ldr	r3, [pc, #560]	@ (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e2c:	d10b      	bne.n	8002e46 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e2e:	4b89      	ldr	r3, [pc, #548]	@ (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d06c      	beq.n	8002f14 <HAL_RCC_OscConfig+0x12c>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d168      	bne.n	8002f14 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e24c      	b.n	80032e0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e4e:	d106      	bne.n	8002e5e <HAL_RCC_OscConfig+0x76>
 8002e50:	4b80      	ldr	r3, [pc, #512]	@ (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a7f      	ldr	r2, [pc, #508]	@ (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002e56:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e5a:	6013      	str	r3, [r2, #0]
 8002e5c:	e02e      	b.n	8002ebc <HAL_RCC_OscConfig+0xd4>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d10c      	bne.n	8002e80 <HAL_RCC_OscConfig+0x98>
 8002e66:	4b7b      	ldr	r3, [pc, #492]	@ (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a7a      	ldr	r2, [pc, #488]	@ (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002e6c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e70:	6013      	str	r3, [r2, #0]
 8002e72:	4b78      	ldr	r3, [pc, #480]	@ (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a77      	ldr	r2, [pc, #476]	@ (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002e78:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e7c:	6013      	str	r3, [r2, #0]
 8002e7e:	e01d      	b.n	8002ebc <HAL_RCC_OscConfig+0xd4>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002e88:	d10c      	bne.n	8002ea4 <HAL_RCC_OscConfig+0xbc>
 8002e8a:	4b72      	ldr	r3, [pc, #456]	@ (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a71      	ldr	r2, [pc, #452]	@ (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002e90:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e94:	6013      	str	r3, [r2, #0]
 8002e96:	4b6f      	ldr	r3, [pc, #444]	@ (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a6e      	ldr	r2, [pc, #440]	@ (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002e9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ea0:	6013      	str	r3, [r2, #0]
 8002ea2:	e00b      	b.n	8002ebc <HAL_RCC_OscConfig+0xd4>
 8002ea4:	4b6b      	ldr	r3, [pc, #428]	@ (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a6a      	ldr	r2, [pc, #424]	@ (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002eaa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002eae:	6013      	str	r3, [r2, #0]
 8002eb0:	4b68      	ldr	r3, [pc, #416]	@ (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a67      	ldr	r2, [pc, #412]	@ (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002eb6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002eba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d013      	beq.n	8002eec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ec4:	f7ff fb06 	bl	80024d4 <HAL_GetTick>
 8002ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eca:	e008      	b.n	8002ede <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ecc:	f7ff fb02 	bl	80024d4 <HAL_GetTick>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	2b64      	cmp	r3, #100	@ 0x64
 8002ed8:	d901      	bls.n	8002ede <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e200      	b.n	80032e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ede:	4b5d      	ldr	r3, [pc, #372]	@ (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d0f0      	beq.n	8002ecc <HAL_RCC_OscConfig+0xe4>
 8002eea:	e014      	b.n	8002f16 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eec:	f7ff faf2 	bl	80024d4 <HAL_GetTick>
 8002ef0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ef2:	e008      	b.n	8002f06 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ef4:	f7ff faee 	bl	80024d4 <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	2b64      	cmp	r3, #100	@ 0x64
 8002f00:	d901      	bls.n	8002f06 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	e1ec      	b.n	80032e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f06:	4b53      	ldr	r3, [pc, #332]	@ (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d1f0      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x10c>
 8002f12:	e000      	b.n	8002f16 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0302 	and.w	r3, r3, #2
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d063      	beq.n	8002fea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f22:	4b4c      	ldr	r3, [pc, #304]	@ (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	f003 030c 	and.w	r3, r3, #12
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d00b      	beq.n	8002f46 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002f2e:	4b49      	ldr	r3, [pc, #292]	@ (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	f003 030c 	and.w	r3, r3, #12
 8002f36:	2b08      	cmp	r3, #8
 8002f38:	d11c      	bne.n	8002f74 <HAL_RCC_OscConfig+0x18c>
 8002f3a:	4b46      	ldr	r3, [pc, #280]	@ (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d116      	bne.n	8002f74 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f46:	4b43      	ldr	r3, [pc, #268]	@ (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0302 	and.w	r3, r3, #2
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d005      	beq.n	8002f5e <HAL_RCC_OscConfig+0x176>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	691b      	ldr	r3, [r3, #16]
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d001      	beq.n	8002f5e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e1c0      	b.n	80032e0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f5e:	4b3d      	ldr	r3, [pc, #244]	@ (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	695b      	ldr	r3, [r3, #20]
 8002f6a:	00db      	lsls	r3, r3, #3
 8002f6c:	4939      	ldr	r1, [pc, #228]	@ (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f72:	e03a      	b.n	8002fea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	691b      	ldr	r3, [r3, #16]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d020      	beq.n	8002fbe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f7c:	4b36      	ldr	r3, [pc, #216]	@ (8003058 <HAL_RCC_OscConfig+0x270>)
 8002f7e:	2201      	movs	r2, #1
 8002f80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f82:	f7ff faa7 	bl	80024d4 <HAL_GetTick>
 8002f86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f88:	e008      	b.n	8002f9c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f8a:	f7ff faa3 	bl	80024d4 <HAL_GetTick>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	d901      	bls.n	8002f9c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	e1a1      	b.n	80032e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f9c:	4b2d      	ldr	r3, [pc, #180]	@ (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0302 	and.w	r3, r3, #2
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d0f0      	beq.n	8002f8a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fa8:	4b2a      	ldr	r3, [pc, #168]	@ (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	695b      	ldr	r3, [r3, #20]
 8002fb4:	00db      	lsls	r3, r3, #3
 8002fb6:	4927      	ldr	r1, [pc, #156]	@ (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	600b      	str	r3, [r1, #0]
 8002fbc:	e015      	b.n	8002fea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fbe:	4b26      	ldr	r3, [pc, #152]	@ (8003058 <HAL_RCC_OscConfig+0x270>)
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fc4:	f7ff fa86 	bl	80024d4 <HAL_GetTick>
 8002fc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fca:	e008      	b.n	8002fde <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fcc:	f7ff fa82 	bl	80024d4 <HAL_GetTick>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d901      	bls.n	8002fde <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e180      	b.n	80032e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fde:	4b1d      	ldr	r3, [pc, #116]	@ (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 0302 	and.w	r3, r3, #2
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d1f0      	bne.n	8002fcc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0308 	and.w	r3, r3, #8
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d03a      	beq.n	800306c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	699b      	ldr	r3, [r3, #24]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d019      	beq.n	8003032 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ffe:	4b17      	ldr	r3, [pc, #92]	@ (800305c <HAL_RCC_OscConfig+0x274>)
 8003000:	2201      	movs	r2, #1
 8003002:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003004:	f7ff fa66 	bl	80024d4 <HAL_GetTick>
 8003008:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800300a:	e008      	b.n	800301e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800300c:	f7ff fa62 	bl	80024d4 <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	2b02      	cmp	r3, #2
 8003018:	d901      	bls.n	800301e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e160      	b.n	80032e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800301e:	4b0d      	ldr	r3, [pc, #52]	@ (8003054 <HAL_RCC_OscConfig+0x26c>)
 8003020:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003022:	f003 0302 	and.w	r3, r3, #2
 8003026:	2b00      	cmp	r3, #0
 8003028:	d0f0      	beq.n	800300c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800302a:	2001      	movs	r0, #1
 800302c:	f000 face 	bl	80035cc <RCC_Delay>
 8003030:	e01c      	b.n	800306c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003032:	4b0a      	ldr	r3, [pc, #40]	@ (800305c <HAL_RCC_OscConfig+0x274>)
 8003034:	2200      	movs	r2, #0
 8003036:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003038:	f7ff fa4c 	bl	80024d4 <HAL_GetTick>
 800303c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800303e:	e00f      	b.n	8003060 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003040:	f7ff fa48 	bl	80024d4 <HAL_GetTick>
 8003044:	4602      	mov	r2, r0
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	2b02      	cmp	r3, #2
 800304c:	d908      	bls.n	8003060 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	e146      	b.n	80032e0 <HAL_RCC_OscConfig+0x4f8>
 8003052:	bf00      	nop
 8003054:	40021000 	.word	0x40021000
 8003058:	42420000 	.word	0x42420000
 800305c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003060:	4b92      	ldr	r3, [pc, #584]	@ (80032ac <HAL_RCC_OscConfig+0x4c4>)
 8003062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003064:	f003 0302 	and.w	r3, r3, #2
 8003068:	2b00      	cmp	r3, #0
 800306a:	d1e9      	bne.n	8003040 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 0304 	and.w	r3, r3, #4
 8003074:	2b00      	cmp	r3, #0
 8003076:	f000 80a6 	beq.w	80031c6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800307a:	2300      	movs	r3, #0
 800307c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800307e:	4b8b      	ldr	r3, [pc, #556]	@ (80032ac <HAL_RCC_OscConfig+0x4c4>)
 8003080:	69db      	ldr	r3, [r3, #28]
 8003082:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d10d      	bne.n	80030a6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800308a:	4b88      	ldr	r3, [pc, #544]	@ (80032ac <HAL_RCC_OscConfig+0x4c4>)
 800308c:	69db      	ldr	r3, [r3, #28]
 800308e:	4a87      	ldr	r2, [pc, #540]	@ (80032ac <HAL_RCC_OscConfig+0x4c4>)
 8003090:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003094:	61d3      	str	r3, [r2, #28]
 8003096:	4b85      	ldr	r3, [pc, #532]	@ (80032ac <HAL_RCC_OscConfig+0x4c4>)
 8003098:	69db      	ldr	r3, [r3, #28]
 800309a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800309e:	60bb      	str	r3, [r7, #8]
 80030a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030a2:	2301      	movs	r3, #1
 80030a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030a6:	4b82      	ldr	r3, [pc, #520]	@ (80032b0 <HAL_RCC_OscConfig+0x4c8>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d118      	bne.n	80030e4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030b2:	4b7f      	ldr	r3, [pc, #508]	@ (80032b0 <HAL_RCC_OscConfig+0x4c8>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a7e      	ldr	r2, [pc, #504]	@ (80032b0 <HAL_RCC_OscConfig+0x4c8>)
 80030b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030be:	f7ff fa09 	bl	80024d4 <HAL_GetTick>
 80030c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030c4:	e008      	b.n	80030d8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030c6:	f7ff fa05 	bl	80024d4 <HAL_GetTick>
 80030ca:	4602      	mov	r2, r0
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	1ad3      	subs	r3, r2, r3
 80030d0:	2b64      	cmp	r3, #100	@ 0x64
 80030d2:	d901      	bls.n	80030d8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80030d4:	2303      	movs	r3, #3
 80030d6:	e103      	b.n	80032e0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030d8:	4b75      	ldr	r3, [pc, #468]	@ (80032b0 <HAL_RCC_OscConfig+0x4c8>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d0f0      	beq.n	80030c6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d106      	bne.n	80030fa <HAL_RCC_OscConfig+0x312>
 80030ec:	4b6f      	ldr	r3, [pc, #444]	@ (80032ac <HAL_RCC_OscConfig+0x4c4>)
 80030ee:	6a1b      	ldr	r3, [r3, #32]
 80030f0:	4a6e      	ldr	r2, [pc, #440]	@ (80032ac <HAL_RCC_OscConfig+0x4c4>)
 80030f2:	f043 0301 	orr.w	r3, r3, #1
 80030f6:	6213      	str	r3, [r2, #32]
 80030f8:	e02d      	b.n	8003156 <HAL_RCC_OscConfig+0x36e>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d10c      	bne.n	800311c <HAL_RCC_OscConfig+0x334>
 8003102:	4b6a      	ldr	r3, [pc, #424]	@ (80032ac <HAL_RCC_OscConfig+0x4c4>)
 8003104:	6a1b      	ldr	r3, [r3, #32]
 8003106:	4a69      	ldr	r2, [pc, #420]	@ (80032ac <HAL_RCC_OscConfig+0x4c4>)
 8003108:	f023 0301 	bic.w	r3, r3, #1
 800310c:	6213      	str	r3, [r2, #32]
 800310e:	4b67      	ldr	r3, [pc, #412]	@ (80032ac <HAL_RCC_OscConfig+0x4c4>)
 8003110:	6a1b      	ldr	r3, [r3, #32]
 8003112:	4a66      	ldr	r2, [pc, #408]	@ (80032ac <HAL_RCC_OscConfig+0x4c4>)
 8003114:	f023 0304 	bic.w	r3, r3, #4
 8003118:	6213      	str	r3, [r2, #32]
 800311a:	e01c      	b.n	8003156 <HAL_RCC_OscConfig+0x36e>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	2b05      	cmp	r3, #5
 8003122:	d10c      	bne.n	800313e <HAL_RCC_OscConfig+0x356>
 8003124:	4b61      	ldr	r3, [pc, #388]	@ (80032ac <HAL_RCC_OscConfig+0x4c4>)
 8003126:	6a1b      	ldr	r3, [r3, #32]
 8003128:	4a60      	ldr	r2, [pc, #384]	@ (80032ac <HAL_RCC_OscConfig+0x4c4>)
 800312a:	f043 0304 	orr.w	r3, r3, #4
 800312e:	6213      	str	r3, [r2, #32]
 8003130:	4b5e      	ldr	r3, [pc, #376]	@ (80032ac <HAL_RCC_OscConfig+0x4c4>)
 8003132:	6a1b      	ldr	r3, [r3, #32]
 8003134:	4a5d      	ldr	r2, [pc, #372]	@ (80032ac <HAL_RCC_OscConfig+0x4c4>)
 8003136:	f043 0301 	orr.w	r3, r3, #1
 800313a:	6213      	str	r3, [r2, #32]
 800313c:	e00b      	b.n	8003156 <HAL_RCC_OscConfig+0x36e>
 800313e:	4b5b      	ldr	r3, [pc, #364]	@ (80032ac <HAL_RCC_OscConfig+0x4c4>)
 8003140:	6a1b      	ldr	r3, [r3, #32]
 8003142:	4a5a      	ldr	r2, [pc, #360]	@ (80032ac <HAL_RCC_OscConfig+0x4c4>)
 8003144:	f023 0301 	bic.w	r3, r3, #1
 8003148:	6213      	str	r3, [r2, #32]
 800314a:	4b58      	ldr	r3, [pc, #352]	@ (80032ac <HAL_RCC_OscConfig+0x4c4>)
 800314c:	6a1b      	ldr	r3, [r3, #32]
 800314e:	4a57      	ldr	r2, [pc, #348]	@ (80032ac <HAL_RCC_OscConfig+0x4c4>)
 8003150:	f023 0304 	bic.w	r3, r3, #4
 8003154:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d015      	beq.n	800318a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800315e:	f7ff f9b9 	bl	80024d4 <HAL_GetTick>
 8003162:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003164:	e00a      	b.n	800317c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003166:	f7ff f9b5 	bl	80024d4 <HAL_GetTick>
 800316a:	4602      	mov	r2, r0
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	1ad3      	subs	r3, r2, r3
 8003170:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003174:	4293      	cmp	r3, r2
 8003176:	d901      	bls.n	800317c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003178:	2303      	movs	r3, #3
 800317a:	e0b1      	b.n	80032e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800317c:	4b4b      	ldr	r3, [pc, #300]	@ (80032ac <HAL_RCC_OscConfig+0x4c4>)
 800317e:	6a1b      	ldr	r3, [r3, #32]
 8003180:	f003 0302 	and.w	r3, r3, #2
 8003184:	2b00      	cmp	r3, #0
 8003186:	d0ee      	beq.n	8003166 <HAL_RCC_OscConfig+0x37e>
 8003188:	e014      	b.n	80031b4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800318a:	f7ff f9a3 	bl	80024d4 <HAL_GetTick>
 800318e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003190:	e00a      	b.n	80031a8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003192:	f7ff f99f 	bl	80024d4 <HAL_GetTick>
 8003196:	4602      	mov	r2, r0
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	1ad3      	subs	r3, r2, r3
 800319c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d901      	bls.n	80031a8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80031a4:	2303      	movs	r3, #3
 80031a6:	e09b      	b.n	80032e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031a8:	4b40      	ldr	r3, [pc, #256]	@ (80032ac <HAL_RCC_OscConfig+0x4c4>)
 80031aa:	6a1b      	ldr	r3, [r3, #32]
 80031ac:	f003 0302 	and.w	r3, r3, #2
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d1ee      	bne.n	8003192 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80031b4:	7dfb      	ldrb	r3, [r7, #23]
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d105      	bne.n	80031c6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031ba:	4b3c      	ldr	r3, [pc, #240]	@ (80032ac <HAL_RCC_OscConfig+0x4c4>)
 80031bc:	69db      	ldr	r3, [r3, #28]
 80031be:	4a3b      	ldr	r2, [pc, #236]	@ (80032ac <HAL_RCC_OscConfig+0x4c4>)
 80031c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80031c4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	69db      	ldr	r3, [r3, #28]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	f000 8087 	beq.w	80032de <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031d0:	4b36      	ldr	r3, [pc, #216]	@ (80032ac <HAL_RCC_OscConfig+0x4c4>)
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f003 030c 	and.w	r3, r3, #12
 80031d8:	2b08      	cmp	r3, #8
 80031da:	d061      	beq.n	80032a0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	69db      	ldr	r3, [r3, #28]
 80031e0:	2b02      	cmp	r3, #2
 80031e2:	d146      	bne.n	8003272 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031e4:	4b33      	ldr	r3, [pc, #204]	@ (80032b4 <HAL_RCC_OscConfig+0x4cc>)
 80031e6:	2200      	movs	r2, #0
 80031e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ea:	f7ff f973 	bl	80024d4 <HAL_GetTick>
 80031ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031f0:	e008      	b.n	8003204 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031f2:	f7ff f96f 	bl	80024d4 <HAL_GetTick>
 80031f6:	4602      	mov	r2, r0
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	1ad3      	subs	r3, r2, r3
 80031fc:	2b02      	cmp	r3, #2
 80031fe:	d901      	bls.n	8003204 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003200:	2303      	movs	r3, #3
 8003202:	e06d      	b.n	80032e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003204:	4b29      	ldr	r3, [pc, #164]	@ (80032ac <HAL_RCC_OscConfig+0x4c4>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800320c:	2b00      	cmp	r3, #0
 800320e:	d1f0      	bne.n	80031f2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6a1b      	ldr	r3, [r3, #32]
 8003214:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003218:	d108      	bne.n	800322c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800321a:	4b24      	ldr	r3, [pc, #144]	@ (80032ac <HAL_RCC_OscConfig+0x4c4>)
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	4921      	ldr	r1, [pc, #132]	@ (80032ac <HAL_RCC_OscConfig+0x4c4>)
 8003228:	4313      	orrs	r3, r2
 800322a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800322c:	4b1f      	ldr	r3, [pc, #124]	@ (80032ac <HAL_RCC_OscConfig+0x4c4>)
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6a19      	ldr	r1, [r3, #32]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800323c:	430b      	orrs	r3, r1
 800323e:	491b      	ldr	r1, [pc, #108]	@ (80032ac <HAL_RCC_OscConfig+0x4c4>)
 8003240:	4313      	orrs	r3, r2
 8003242:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003244:	4b1b      	ldr	r3, [pc, #108]	@ (80032b4 <HAL_RCC_OscConfig+0x4cc>)
 8003246:	2201      	movs	r2, #1
 8003248:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800324a:	f7ff f943 	bl	80024d4 <HAL_GetTick>
 800324e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003250:	e008      	b.n	8003264 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003252:	f7ff f93f 	bl	80024d4 <HAL_GetTick>
 8003256:	4602      	mov	r2, r0
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	1ad3      	subs	r3, r2, r3
 800325c:	2b02      	cmp	r3, #2
 800325e:	d901      	bls.n	8003264 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003260:	2303      	movs	r3, #3
 8003262:	e03d      	b.n	80032e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003264:	4b11      	ldr	r3, [pc, #68]	@ (80032ac <HAL_RCC_OscConfig+0x4c4>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800326c:	2b00      	cmp	r3, #0
 800326e:	d0f0      	beq.n	8003252 <HAL_RCC_OscConfig+0x46a>
 8003270:	e035      	b.n	80032de <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003272:	4b10      	ldr	r3, [pc, #64]	@ (80032b4 <HAL_RCC_OscConfig+0x4cc>)
 8003274:	2200      	movs	r2, #0
 8003276:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003278:	f7ff f92c 	bl	80024d4 <HAL_GetTick>
 800327c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800327e:	e008      	b.n	8003292 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003280:	f7ff f928 	bl	80024d4 <HAL_GetTick>
 8003284:	4602      	mov	r2, r0
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	2b02      	cmp	r3, #2
 800328c:	d901      	bls.n	8003292 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800328e:	2303      	movs	r3, #3
 8003290:	e026      	b.n	80032e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003292:	4b06      	ldr	r3, [pc, #24]	@ (80032ac <HAL_RCC_OscConfig+0x4c4>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d1f0      	bne.n	8003280 <HAL_RCC_OscConfig+0x498>
 800329e:	e01e      	b.n	80032de <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	69db      	ldr	r3, [r3, #28]
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d107      	bne.n	80032b8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	e019      	b.n	80032e0 <HAL_RCC_OscConfig+0x4f8>
 80032ac:	40021000 	.word	0x40021000
 80032b0:	40007000 	.word	0x40007000
 80032b4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80032b8:	4b0b      	ldr	r3, [pc, #44]	@ (80032e8 <HAL_RCC_OscConfig+0x500>)
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6a1b      	ldr	r3, [r3, #32]
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d106      	bne.n	80032da <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d001      	beq.n	80032de <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e000      	b.n	80032e0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80032de:	2300      	movs	r3, #0
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3718      	adds	r7, #24
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	40021000 	.word	0x40021000

080032ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b084      	sub	sp, #16
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d101      	bne.n	8003300 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	e0d0      	b.n	80034a2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003300:	4b6a      	ldr	r3, [pc, #424]	@ (80034ac <HAL_RCC_ClockConfig+0x1c0>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 0307 	and.w	r3, r3, #7
 8003308:	683a      	ldr	r2, [r7, #0]
 800330a:	429a      	cmp	r2, r3
 800330c:	d910      	bls.n	8003330 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800330e:	4b67      	ldr	r3, [pc, #412]	@ (80034ac <HAL_RCC_ClockConfig+0x1c0>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f023 0207 	bic.w	r2, r3, #7
 8003316:	4965      	ldr	r1, [pc, #404]	@ (80034ac <HAL_RCC_ClockConfig+0x1c0>)
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	4313      	orrs	r3, r2
 800331c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800331e:	4b63      	ldr	r3, [pc, #396]	@ (80034ac <HAL_RCC_ClockConfig+0x1c0>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0307 	and.w	r3, r3, #7
 8003326:	683a      	ldr	r2, [r7, #0]
 8003328:	429a      	cmp	r2, r3
 800332a:	d001      	beq.n	8003330 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e0b8      	b.n	80034a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 0302 	and.w	r3, r3, #2
 8003338:	2b00      	cmp	r3, #0
 800333a:	d020      	beq.n	800337e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0304 	and.w	r3, r3, #4
 8003344:	2b00      	cmp	r3, #0
 8003346:	d005      	beq.n	8003354 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003348:	4b59      	ldr	r3, [pc, #356]	@ (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	4a58      	ldr	r2, [pc, #352]	@ (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 800334e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003352:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0308 	and.w	r3, r3, #8
 800335c:	2b00      	cmp	r3, #0
 800335e:	d005      	beq.n	800336c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003360:	4b53      	ldr	r3, [pc, #332]	@ (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	4a52      	ldr	r2, [pc, #328]	@ (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003366:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800336a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800336c:	4b50      	ldr	r3, [pc, #320]	@ (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	494d      	ldr	r1, [pc, #308]	@ (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 800337a:	4313      	orrs	r3, r2
 800337c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0301 	and.w	r3, r3, #1
 8003386:	2b00      	cmp	r3, #0
 8003388:	d040      	beq.n	800340c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	2b01      	cmp	r3, #1
 8003390:	d107      	bne.n	80033a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003392:	4b47      	ldr	r3, [pc, #284]	@ (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d115      	bne.n	80033ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e07f      	b.n	80034a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d107      	bne.n	80033ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033aa:	4b41      	ldr	r3, [pc, #260]	@ (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d109      	bne.n	80033ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e073      	b.n	80034a2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033ba:	4b3d      	ldr	r3, [pc, #244]	@ (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0302 	and.w	r3, r3, #2
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d101      	bne.n	80033ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e06b      	b.n	80034a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033ca:	4b39      	ldr	r3, [pc, #228]	@ (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	f023 0203 	bic.w	r2, r3, #3
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	4936      	ldr	r1, [pc, #216]	@ (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 80033d8:	4313      	orrs	r3, r2
 80033da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033dc:	f7ff f87a 	bl	80024d4 <HAL_GetTick>
 80033e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033e2:	e00a      	b.n	80033fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033e4:	f7ff f876 	bl	80024d4 <HAL_GetTick>
 80033e8:	4602      	mov	r2, r0
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d901      	bls.n	80033fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033f6:	2303      	movs	r3, #3
 80033f8:	e053      	b.n	80034a2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033fa:	4b2d      	ldr	r3, [pc, #180]	@ (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	f003 020c 	and.w	r2, r3, #12
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	429a      	cmp	r2, r3
 800340a:	d1eb      	bne.n	80033e4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800340c:	4b27      	ldr	r3, [pc, #156]	@ (80034ac <HAL_RCC_ClockConfig+0x1c0>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 0307 	and.w	r3, r3, #7
 8003414:	683a      	ldr	r2, [r7, #0]
 8003416:	429a      	cmp	r2, r3
 8003418:	d210      	bcs.n	800343c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800341a:	4b24      	ldr	r3, [pc, #144]	@ (80034ac <HAL_RCC_ClockConfig+0x1c0>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f023 0207 	bic.w	r2, r3, #7
 8003422:	4922      	ldr	r1, [pc, #136]	@ (80034ac <HAL_RCC_ClockConfig+0x1c0>)
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	4313      	orrs	r3, r2
 8003428:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800342a:	4b20      	ldr	r3, [pc, #128]	@ (80034ac <HAL_RCC_ClockConfig+0x1c0>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0307 	and.w	r3, r3, #7
 8003432:	683a      	ldr	r2, [r7, #0]
 8003434:	429a      	cmp	r2, r3
 8003436:	d001      	beq.n	800343c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	e032      	b.n	80034a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 0304 	and.w	r3, r3, #4
 8003444:	2b00      	cmp	r3, #0
 8003446:	d008      	beq.n	800345a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003448:	4b19      	ldr	r3, [pc, #100]	@ (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	4916      	ldr	r1, [pc, #88]	@ (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003456:	4313      	orrs	r3, r2
 8003458:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0308 	and.w	r3, r3, #8
 8003462:	2b00      	cmp	r3, #0
 8003464:	d009      	beq.n	800347a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003466:	4b12      	ldr	r3, [pc, #72]	@ (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	691b      	ldr	r3, [r3, #16]
 8003472:	00db      	lsls	r3, r3, #3
 8003474:	490e      	ldr	r1, [pc, #56]	@ (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003476:	4313      	orrs	r3, r2
 8003478:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800347a:	f000 f821 	bl	80034c0 <HAL_RCC_GetSysClockFreq>
 800347e:	4602      	mov	r2, r0
 8003480:	4b0b      	ldr	r3, [pc, #44]	@ (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	091b      	lsrs	r3, r3, #4
 8003486:	f003 030f 	and.w	r3, r3, #15
 800348a:	490a      	ldr	r1, [pc, #40]	@ (80034b4 <HAL_RCC_ClockConfig+0x1c8>)
 800348c:	5ccb      	ldrb	r3, [r1, r3]
 800348e:	fa22 f303 	lsr.w	r3, r2, r3
 8003492:	4a09      	ldr	r2, [pc, #36]	@ (80034b8 <HAL_RCC_ClockConfig+0x1cc>)
 8003494:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003496:	4b09      	ldr	r3, [pc, #36]	@ (80034bc <HAL_RCC_ClockConfig+0x1d0>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4618      	mov	r0, r3
 800349c:	f7fe ffd8 	bl	8002450 <HAL_InitTick>

  return HAL_OK;
 80034a0:	2300      	movs	r3, #0
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3710      	adds	r7, #16
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	40022000 	.word	0x40022000
 80034b0:	40021000 	.word	0x40021000
 80034b4:	08005294 	.word	0x08005294
 80034b8:	20000000 	.word	0x20000000
 80034bc:	20000114 	.word	0x20000114

080034c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b087      	sub	sp, #28
 80034c4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80034c6:	2300      	movs	r3, #0
 80034c8:	60fb      	str	r3, [r7, #12]
 80034ca:	2300      	movs	r3, #0
 80034cc:	60bb      	str	r3, [r7, #8]
 80034ce:	2300      	movs	r3, #0
 80034d0:	617b      	str	r3, [r7, #20]
 80034d2:	2300      	movs	r3, #0
 80034d4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80034d6:	2300      	movs	r3, #0
 80034d8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80034da:	4b1e      	ldr	r3, [pc, #120]	@ (8003554 <HAL_RCC_GetSysClockFreq+0x94>)
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f003 030c 	and.w	r3, r3, #12
 80034e6:	2b04      	cmp	r3, #4
 80034e8:	d002      	beq.n	80034f0 <HAL_RCC_GetSysClockFreq+0x30>
 80034ea:	2b08      	cmp	r3, #8
 80034ec:	d003      	beq.n	80034f6 <HAL_RCC_GetSysClockFreq+0x36>
 80034ee:	e027      	b.n	8003540 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80034f0:	4b19      	ldr	r3, [pc, #100]	@ (8003558 <HAL_RCC_GetSysClockFreq+0x98>)
 80034f2:	613b      	str	r3, [r7, #16]
      break;
 80034f4:	e027      	b.n	8003546 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	0c9b      	lsrs	r3, r3, #18
 80034fa:	f003 030f 	and.w	r3, r3, #15
 80034fe:	4a17      	ldr	r2, [pc, #92]	@ (800355c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003500:	5cd3      	ldrb	r3, [r2, r3]
 8003502:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800350a:	2b00      	cmp	r3, #0
 800350c:	d010      	beq.n	8003530 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800350e:	4b11      	ldr	r3, [pc, #68]	@ (8003554 <HAL_RCC_GetSysClockFreq+0x94>)
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	0c5b      	lsrs	r3, r3, #17
 8003514:	f003 0301 	and.w	r3, r3, #1
 8003518:	4a11      	ldr	r2, [pc, #68]	@ (8003560 <HAL_RCC_GetSysClockFreq+0xa0>)
 800351a:	5cd3      	ldrb	r3, [r2, r3]
 800351c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4a0d      	ldr	r2, [pc, #52]	@ (8003558 <HAL_RCC_GetSysClockFreq+0x98>)
 8003522:	fb03 f202 	mul.w	r2, r3, r2
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	fbb2 f3f3 	udiv	r3, r2, r3
 800352c:	617b      	str	r3, [r7, #20]
 800352e:	e004      	b.n	800353a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	4a0c      	ldr	r2, [pc, #48]	@ (8003564 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003534:	fb02 f303 	mul.w	r3, r2, r3
 8003538:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	613b      	str	r3, [r7, #16]
      break;
 800353e:	e002      	b.n	8003546 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003540:	4b05      	ldr	r3, [pc, #20]	@ (8003558 <HAL_RCC_GetSysClockFreq+0x98>)
 8003542:	613b      	str	r3, [r7, #16]
      break;
 8003544:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003546:	693b      	ldr	r3, [r7, #16]
}
 8003548:	4618      	mov	r0, r3
 800354a:	371c      	adds	r7, #28
 800354c:	46bd      	mov	sp, r7
 800354e:	bc80      	pop	{r7}
 8003550:	4770      	bx	lr
 8003552:	bf00      	nop
 8003554:	40021000 	.word	0x40021000
 8003558:	007a1200 	.word	0x007a1200
 800355c:	080056a8 	.word	0x080056a8
 8003560:	080056b8 	.word	0x080056b8
 8003564:	003d0900 	.word	0x003d0900

08003568 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003568:	b480      	push	{r7}
 800356a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800356c:	4b02      	ldr	r3, [pc, #8]	@ (8003578 <HAL_RCC_GetHCLKFreq+0x10>)
 800356e:	681b      	ldr	r3, [r3, #0]
}
 8003570:	4618      	mov	r0, r3
 8003572:	46bd      	mov	sp, r7
 8003574:	bc80      	pop	{r7}
 8003576:	4770      	bx	lr
 8003578:	20000000 	.word	0x20000000

0800357c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003580:	f7ff fff2 	bl	8003568 <HAL_RCC_GetHCLKFreq>
 8003584:	4602      	mov	r2, r0
 8003586:	4b05      	ldr	r3, [pc, #20]	@ (800359c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	0a1b      	lsrs	r3, r3, #8
 800358c:	f003 0307 	and.w	r3, r3, #7
 8003590:	4903      	ldr	r1, [pc, #12]	@ (80035a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003592:	5ccb      	ldrb	r3, [r1, r3]
 8003594:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003598:	4618      	mov	r0, r3
 800359a:	bd80      	pop	{r7, pc}
 800359c:	40021000 	.word	0x40021000
 80035a0:	080052a4 	.word	0x080052a4

080035a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80035a8:	f7ff ffde 	bl	8003568 <HAL_RCC_GetHCLKFreq>
 80035ac:	4602      	mov	r2, r0
 80035ae:	4b05      	ldr	r3, [pc, #20]	@ (80035c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	0adb      	lsrs	r3, r3, #11
 80035b4:	f003 0307 	and.w	r3, r3, #7
 80035b8:	4903      	ldr	r1, [pc, #12]	@ (80035c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035ba:	5ccb      	ldrb	r3, [r1, r3]
 80035bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	40021000 	.word	0x40021000
 80035c8:	080052a4 	.word	0x080052a4

080035cc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b085      	sub	sp, #20
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80035d4:	4b0a      	ldr	r3, [pc, #40]	@ (8003600 <RCC_Delay+0x34>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a0a      	ldr	r2, [pc, #40]	@ (8003604 <RCC_Delay+0x38>)
 80035da:	fba2 2303 	umull	r2, r3, r2, r3
 80035de:	0a5b      	lsrs	r3, r3, #9
 80035e0:	687a      	ldr	r2, [r7, #4]
 80035e2:	fb02 f303 	mul.w	r3, r2, r3
 80035e6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80035e8:	bf00      	nop
  }
  while (Delay --);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	1e5a      	subs	r2, r3, #1
 80035ee:	60fa      	str	r2, [r7, #12]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d1f9      	bne.n	80035e8 <RCC_Delay+0x1c>
}
 80035f4:	bf00      	nop
 80035f6:	bf00      	nop
 80035f8:	3714      	adds	r7, #20
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bc80      	pop	{r7}
 80035fe:	4770      	bx	lr
 8003600:	20000000 	.word	0x20000000
 8003604:	10624dd3 	.word	0x10624dd3

08003608 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b082      	sub	sp, #8
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d101      	bne.n	800361a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e041      	b.n	800369e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003620:	b2db      	uxtb	r3, r3
 8003622:	2b00      	cmp	r3, #0
 8003624:	d106      	bne.n	8003634 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f7fd fd88 	bl	8001144 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2202      	movs	r2, #2
 8003638:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	3304      	adds	r3, #4
 8003644:	4619      	mov	r1, r3
 8003646:	4610      	mov	r0, r2
 8003648:	f000 f9a2 	bl	8003990 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2201      	movs	r2, #1
 8003650:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2201      	movs	r2, #1
 8003658:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2201      	movs	r2, #1
 8003660:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2201      	movs	r2, #1
 8003668:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2201      	movs	r2, #1
 8003670:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2201      	movs	r2, #1
 8003678:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2201      	movs	r2, #1
 8003680:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2201      	movs	r2, #1
 8003688:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2201      	movs	r2, #1
 8003690:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2201      	movs	r2, #1
 8003698:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800369c:	2300      	movs	r3, #0
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3708      	adds	r7, #8
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}
	...

080036a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b085      	sub	sp, #20
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d001      	beq.n	80036c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	e044      	b.n	800374a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2202      	movs	r2, #2
 80036c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	68da      	ldr	r2, [r3, #12]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f042 0201 	orr.w	r2, r2, #1
 80036d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a1d      	ldr	r2, [pc, #116]	@ (8003754 <HAL_TIM_Base_Start_IT+0xac>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d018      	beq.n	8003714 <HAL_TIM_Base_Start_IT+0x6c>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a1c      	ldr	r2, [pc, #112]	@ (8003758 <HAL_TIM_Base_Start_IT+0xb0>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d013      	beq.n	8003714 <HAL_TIM_Base_Start_IT+0x6c>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036f4:	d00e      	beq.n	8003714 <HAL_TIM_Base_Start_IT+0x6c>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a18      	ldr	r2, [pc, #96]	@ (800375c <HAL_TIM_Base_Start_IT+0xb4>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d009      	beq.n	8003714 <HAL_TIM_Base_Start_IT+0x6c>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a16      	ldr	r2, [pc, #88]	@ (8003760 <HAL_TIM_Base_Start_IT+0xb8>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d004      	beq.n	8003714 <HAL_TIM_Base_Start_IT+0x6c>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a15      	ldr	r2, [pc, #84]	@ (8003764 <HAL_TIM_Base_Start_IT+0xbc>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d111      	bne.n	8003738 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	f003 0307 	and.w	r3, r3, #7
 800371e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2b06      	cmp	r3, #6
 8003724:	d010      	beq.n	8003748 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f042 0201 	orr.w	r2, r2, #1
 8003734:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003736:	e007      	b.n	8003748 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f042 0201 	orr.w	r2, r2, #1
 8003746:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003748:	2300      	movs	r3, #0
}
 800374a:	4618      	mov	r0, r3
 800374c:	3714      	adds	r7, #20
 800374e:	46bd      	mov	sp, r7
 8003750:	bc80      	pop	{r7}
 8003752:	4770      	bx	lr
 8003754:	40012c00 	.word	0x40012c00
 8003758:	40013400 	.word	0x40013400
 800375c:	40000400 	.word	0x40000400
 8003760:	40000800 	.word	0x40000800
 8003764:	40000c00 	.word	0x40000c00

08003768 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b084      	sub	sp, #16
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	68db      	ldr	r3, [r3, #12]
 8003776:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	691b      	ldr	r3, [r3, #16]
 800377e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	f003 0302 	and.w	r3, r3, #2
 8003786:	2b00      	cmp	r3, #0
 8003788:	d020      	beq.n	80037cc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	f003 0302 	and.w	r3, r3, #2
 8003790:	2b00      	cmp	r3, #0
 8003792:	d01b      	beq.n	80037cc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f06f 0202 	mvn.w	r2, #2
 800379c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2201      	movs	r2, #1
 80037a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	699b      	ldr	r3, [r3, #24]
 80037aa:	f003 0303 	and.w	r3, r3, #3
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d003      	beq.n	80037ba <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f000 f8d1 	bl	800395a <HAL_TIM_IC_CaptureCallback>
 80037b8:	e005      	b.n	80037c6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f000 f8c4 	bl	8003948 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f000 f8d3 	bl	800396c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2200      	movs	r2, #0
 80037ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	f003 0304 	and.w	r3, r3, #4
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d020      	beq.n	8003818 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	f003 0304 	and.w	r3, r3, #4
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d01b      	beq.n	8003818 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f06f 0204 	mvn.w	r2, #4
 80037e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2202      	movs	r2, #2
 80037ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	699b      	ldr	r3, [r3, #24]
 80037f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d003      	beq.n	8003806 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f000 f8ab 	bl	800395a <HAL_TIM_IC_CaptureCallback>
 8003804:	e005      	b.n	8003812 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f000 f89e 	bl	8003948 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f000 f8ad 	bl	800396c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	f003 0308 	and.w	r3, r3, #8
 800381e:	2b00      	cmp	r3, #0
 8003820:	d020      	beq.n	8003864 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	f003 0308 	and.w	r3, r3, #8
 8003828:	2b00      	cmp	r3, #0
 800382a:	d01b      	beq.n	8003864 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f06f 0208 	mvn.w	r2, #8
 8003834:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2204      	movs	r2, #4
 800383a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	69db      	ldr	r3, [r3, #28]
 8003842:	f003 0303 	and.w	r3, r3, #3
 8003846:	2b00      	cmp	r3, #0
 8003848:	d003      	beq.n	8003852 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f000 f885 	bl	800395a <HAL_TIM_IC_CaptureCallback>
 8003850:	e005      	b.n	800385e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f000 f878 	bl	8003948 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f000 f887 	bl	800396c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	f003 0310 	and.w	r3, r3, #16
 800386a:	2b00      	cmp	r3, #0
 800386c:	d020      	beq.n	80038b0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	f003 0310 	and.w	r3, r3, #16
 8003874:	2b00      	cmp	r3, #0
 8003876:	d01b      	beq.n	80038b0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f06f 0210 	mvn.w	r2, #16
 8003880:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2208      	movs	r2, #8
 8003886:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	69db      	ldr	r3, [r3, #28]
 800388e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003892:	2b00      	cmp	r3, #0
 8003894:	d003      	beq.n	800389e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f000 f85f 	bl	800395a <HAL_TIM_IC_CaptureCallback>
 800389c:	e005      	b.n	80038aa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f000 f852 	bl	8003948 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	f000 f861 	bl	800396c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	f003 0301 	and.w	r3, r3, #1
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d00c      	beq.n	80038d4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	f003 0301 	and.w	r3, r3, #1
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d007      	beq.n	80038d4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f06f 0201 	mvn.w	r2, #1
 80038cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f7fd fc5e 	bl	8001190 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d00c      	beq.n	80038f8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d007      	beq.n	80038f8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80038f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f000 f947 	bl	8003b86 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d00c      	beq.n	800391c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003908:	2b00      	cmp	r3, #0
 800390a:	d007      	beq.n	800391c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003914:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f000 f831 	bl	800397e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	f003 0320 	and.w	r3, r3, #32
 8003922:	2b00      	cmp	r3, #0
 8003924:	d00c      	beq.n	8003940 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	f003 0320 	and.w	r3, r3, #32
 800392c:	2b00      	cmp	r3, #0
 800392e:	d007      	beq.n	8003940 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f06f 0220 	mvn.w	r2, #32
 8003938:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f000 f91a 	bl	8003b74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003940:	bf00      	nop
 8003942:	3710      	adds	r7, #16
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}

08003948 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003948:	b480      	push	{r7}
 800394a:	b083      	sub	sp, #12
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003950:	bf00      	nop
 8003952:	370c      	adds	r7, #12
 8003954:	46bd      	mov	sp, r7
 8003956:	bc80      	pop	{r7}
 8003958:	4770      	bx	lr

0800395a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800395a:	b480      	push	{r7}
 800395c:	b083      	sub	sp, #12
 800395e:	af00      	add	r7, sp, #0
 8003960:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003962:	bf00      	nop
 8003964:	370c      	adds	r7, #12
 8003966:	46bd      	mov	sp, r7
 8003968:	bc80      	pop	{r7}
 800396a:	4770      	bx	lr

0800396c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003974:	bf00      	nop
 8003976:	370c      	adds	r7, #12
 8003978:	46bd      	mov	sp, r7
 800397a:	bc80      	pop	{r7}
 800397c:	4770      	bx	lr

0800397e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800397e:	b480      	push	{r7}
 8003980:	b083      	sub	sp, #12
 8003982:	af00      	add	r7, sp, #0
 8003984:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003986:	bf00      	nop
 8003988:	370c      	adds	r7, #12
 800398a:	46bd      	mov	sp, r7
 800398c:	bc80      	pop	{r7}
 800398e:	4770      	bx	lr

08003990 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003990:	b480      	push	{r7}
 8003992:	b085      	sub	sp, #20
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	4a39      	ldr	r2, [pc, #228]	@ (8003a88 <TIM_Base_SetConfig+0xf8>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d013      	beq.n	80039d0 <TIM_Base_SetConfig+0x40>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	4a38      	ldr	r2, [pc, #224]	@ (8003a8c <TIM_Base_SetConfig+0xfc>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d00f      	beq.n	80039d0 <TIM_Base_SetConfig+0x40>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039b6:	d00b      	beq.n	80039d0 <TIM_Base_SetConfig+0x40>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	4a35      	ldr	r2, [pc, #212]	@ (8003a90 <TIM_Base_SetConfig+0x100>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d007      	beq.n	80039d0 <TIM_Base_SetConfig+0x40>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	4a34      	ldr	r2, [pc, #208]	@ (8003a94 <TIM_Base_SetConfig+0x104>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d003      	beq.n	80039d0 <TIM_Base_SetConfig+0x40>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	4a33      	ldr	r2, [pc, #204]	@ (8003a98 <TIM_Base_SetConfig+0x108>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d108      	bne.n	80039e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	68fa      	ldr	r2, [r7, #12]
 80039de:	4313      	orrs	r3, r2
 80039e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	4a28      	ldr	r2, [pc, #160]	@ (8003a88 <TIM_Base_SetConfig+0xf8>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d013      	beq.n	8003a12 <TIM_Base_SetConfig+0x82>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	4a27      	ldr	r2, [pc, #156]	@ (8003a8c <TIM_Base_SetConfig+0xfc>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d00f      	beq.n	8003a12 <TIM_Base_SetConfig+0x82>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039f8:	d00b      	beq.n	8003a12 <TIM_Base_SetConfig+0x82>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a24      	ldr	r2, [pc, #144]	@ (8003a90 <TIM_Base_SetConfig+0x100>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d007      	beq.n	8003a12 <TIM_Base_SetConfig+0x82>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4a23      	ldr	r2, [pc, #140]	@ (8003a94 <TIM_Base_SetConfig+0x104>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d003      	beq.n	8003a12 <TIM_Base_SetConfig+0x82>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4a22      	ldr	r2, [pc, #136]	@ (8003a98 <TIM_Base_SetConfig+0x108>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d108      	bne.n	8003a24 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	68db      	ldr	r3, [r3, #12]
 8003a1e:	68fa      	ldr	r2, [r7, #12]
 8003a20:	4313      	orrs	r3, r2
 8003a22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	695b      	ldr	r3, [r3, #20]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	68fa      	ldr	r2, [r7, #12]
 8003a36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	689a      	ldr	r2, [r3, #8]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	4a0f      	ldr	r2, [pc, #60]	@ (8003a88 <TIM_Base_SetConfig+0xf8>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d003      	beq.n	8003a58 <TIM_Base_SetConfig+0xc8>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	4a0e      	ldr	r2, [pc, #56]	@ (8003a8c <TIM_Base_SetConfig+0xfc>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d103      	bne.n	8003a60 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	691a      	ldr	r2, [r3, #16]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	691b      	ldr	r3, [r3, #16]
 8003a6a:	f003 0301 	and.w	r3, r3, #1
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d005      	beq.n	8003a7e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	691b      	ldr	r3, [r3, #16]
 8003a76:	f023 0201 	bic.w	r2, r3, #1
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	611a      	str	r2, [r3, #16]
  }
}
 8003a7e:	bf00      	nop
 8003a80:	3714      	adds	r7, #20
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bc80      	pop	{r7}
 8003a86:	4770      	bx	lr
 8003a88:	40012c00 	.word	0x40012c00
 8003a8c:	40013400 	.word	0x40013400
 8003a90:	40000400 	.word	0x40000400
 8003a94:	40000800 	.word	0x40000800
 8003a98:	40000c00 	.word	0x40000c00

08003a9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b085      	sub	sp, #20
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d101      	bne.n	8003ab4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ab0:	2302      	movs	r3, #2
 8003ab2:	e050      	b.n	8003b56 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2202      	movs	r2, #2
 8003ac0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ada:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	68fa      	ldr	r2, [r7, #12]
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	68fa      	ldr	r2, [r7, #12]
 8003aec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a1b      	ldr	r2, [pc, #108]	@ (8003b60 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d018      	beq.n	8003b2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a19      	ldr	r2, [pc, #100]	@ (8003b64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d013      	beq.n	8003b2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b0a:	d00e      	beq.n	8003b2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a15      	ldr	r2, [pc, #84]	@ (8003b68 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d009      	beq.n	8003b2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a14      	ldr	r2, [pc, #80]	@ (8003b6c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d004      	beq.n	8003b2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a12      	ldr	r2, [pc, #72]	@ (8003b70 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d10c      	bne.n	8003b44 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b30:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	68ba      	ldr	r2, [r7, #8]
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	68ba      	ldr	r2, [r7, #8]
 8003b42:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2201      	movs	r2, #1
 8003b48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003b54:	2300      	movs	r3, #0
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3714      	adds	r7, #20
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bc80      	pop	{r7}
 8003b5e:	4770      	bx	lr
 8003b60:	40012c00 	.word	0x40012c00
 8003b64:	40013400 	.word	0x40013400
 8003b68:	40000400 	.word	0x40000400
 8003b6c:	40000800 	.word	0x40000800
 8003b70:	40000c00 	.word	0x40000c00

08003b74 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b083      	sub	sp, #12
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b7c:	bf00      	nop
 8003b7e:	370c      	adds	r7, #12
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bc80      	pop	{r7}
 8003b84:	4770      	bx	lr

08003b86 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b86:	b480      	push	{r7}
 8003b88:	b083      	sub	sp, #12
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b8e:	bf00      	nop
 8003b90:	370c      	adds	r7, #12
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bc80      	pop	{r7}
 8003b96:	4770      	bx	lr

08003b98 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b082      	sub	sp, #8
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d101      	bne.n	8003baa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e042      	b.n	8003c30 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d106      	bne.n	8003bc4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f7fd fbc0 	bl	8001344 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2224      	movs	r2, #36	@ 0x24
 8003bc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	68da      	ldr	r2, [r3, #12]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003bda:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	f000 fdb7 	bl	8004750 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	691a      	ldr	r2, [r3, #16]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003bf0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	695a      	ldr	r2, [r3, #20]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003c00:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	68da      	ldr	r2, [r3, #12]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003c10:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2200      	movs	r2, #0
 8003c16:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2220      	movs	r2, #32
 8003c1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2220      	movs	r2, #32
 8003c24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003c2e:	2300      	movs	r3, #0
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3708      	adds	r7, #8
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}

08003c38 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b08a      	sub	sp, #40	@ 0x28
 8003c3c:	af02      	add	r7, sp, #8
 8003c3e:	60f8      	str	r0, [r7, #12]
 8003c40:	60b9      	str	r1, [r7, #8]
 8003c42:	603b      	str	r3, [r7, #0]
 8003c44:	4613      	mov	r3, r2
 8003c46:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c52:	b2db      	uxtb	r3, r3
 8003c54:	2b20      	cmp	r3, #32
 8003c56:	d175      	bne.n	8003d44 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d002      	beq.n	8003c64 <HAL_UART_Transmit+0x2c>
 8003c5e:	88fb      	ldrh	r3, [r7, #6]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d101      	bne.n	8003c68 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	e06e      	b.n	8003d46 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2221      	movs	r2, #33	@ 0x21
 8003c72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c76:	f7fe fc2d 	bl	80024d4 <HAL_GetTick>
 8003c7a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	88fa      	ldrh	r2, [r7, #6]
 8003c80:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	88fa      	ldrh	r2, [r7, #6]
 8003c86:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c90:	d108      	bne.n	8003ca4 <HAL_UART_Transmit+0x6c>
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	691b      	ldr	r3, [r3, #16]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d104      	bne.n	8003ca4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	61bb      	str	r3, [r7, #24]
 8003ca2:	e003      	b.n	8003cac <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003cac:	e02e      	b.n	8003d0c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	9300      	str	r3, [sp, #0]
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	2180      	movs	r1, #128	@ 0x80
 8003cb8:	68f8      	ldr	r0, [r7, #12]
 8003cba:	f000 fb1c 	bl	80042f6 <UART_WaitOnFlagUntilTimeout>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d005      	beq.n	8003cd0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2220      	movs	r2, #32
 8003cc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003ccc:	2303      	movs	r3, #3
 8003cce:	e03a      	b.n	8003d46 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003cd0:	69fb      	ldr	r3, [r7, #28]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d10b      	bne.n	8003cee <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003cd6:	69bb      	ldr	r3, [r7, #24]
 8003cd8:	881b      	ldrh	r3, [r3, #0]
 8003cda:	461a      	mov	r2, r3
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ce4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003ce6:	69bb      	ldr	r3, [r7, #24]
 8003ce8:	3302      	adds	r3, #2
 8003cea:	61bb      	str	r3, [r7, #24]
 8003cec:	e007      	b.n	8003cfe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003cee:	69fb      	ldr	r3, [r7, #28]
 8003cf0:	781a      	ldrb	r2, [r3, #0]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003cf8:	69fb      	ldr	r3, [r7, #28]
 8003cfa:	3301      	adds	r3, #1
 8003cfc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003d02:	b29b      	uxth	r3, r3
 8003d04:	3b01      	subs	r3, #1
 8003d06:	b29a      	uxth	r2, r3
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003d10:	b29b      	uxth	r3, r3
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d1cb      	bne.n	8003cae <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	9300      	str	r3, [sp, #0]
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	2140      	movs	r1, #64	@ 0x40
 8003d20:	68f8      	ldr	r0, [r7, #12]
 8003d22:	f000 fae8 	bl	80042f6 <UART_WaitOnFlagUntilTimeout>
 8003d26:	4603      	mov	r3, r0
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d005      	beq.n	8003d38 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2220      	movs	r2, #32
 8003d30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003d34:	2303      	movs	r3, #3
 8003d36:	e006      	b.n	8003d46 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2220      	movs	r2, #32
 8003d3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003d40:	2300      	movs	r3, #0
 8003d42:	e000      	b.n	8003d46 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003d44:	2302      	movs	r3, #2
  }
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3720      	adds	r7, #32
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}

08003d4e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d4e:	b580      	push	{r7, lr}
 8003d50:	b084      	sub	sp, #16
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	60f8      	str	r0, [r7, #12]
 8003d56:	60b9      	str	r1, [r7, #8]
 8003d58:	4613      	mov	r3, r2
 8003d5a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	2b20      	cmp	r3, #32
 8003d66:	d112      	bne.n	8003d8e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d002      	beq.n	8003d74 <HAL_UART_Receive_IT+0x26>
 8003d6e:	88fb      	ldrh	r3, [r7, #6]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d101      	bne.n	8003d78 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	e00b      	b.n	8003d90 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003d7e:	88fb      	ldrh	r3, [r7, #6]
 8003d80:	461a      	mov	r2, r3
 8003d82:	68b9      	ldr	r1, [r7, #8]
 8003d84:	68f8      	ldr	r0, [r7, #12]
 8003d86:	f000 fb0f 	bl	80043a8 <UART_Start_Receive_IT>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	e000      	b.n	8003d90 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003d8e:	2302      	movs	r3, #2
  }
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3710      	adds	r7, #16
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}

08003d98 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b0ba      	sub	sp, #232	@ 0xe8
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	695b      	ldr	r3, [r3, #20]
 8003dba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003dca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003dce:	f003 030f 	and.w	r3, r3, #15
 8003dd2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003dd6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d10f      	bne.n	8003dfe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003dde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003de2:	f003 0320 	and.w	r3, r3, #32
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d009      	beq.n	8003dfe <HAL_UART_IRQHandler+0x66>
 8003dea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003dee:	f003 0320 	and.w	r3, r3, #32
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d003      	beq.n	8003dfe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f000 fbec 	bl	80045d4 <UART_Receive_IT>
      return;
 8003dfc:	e25b      	b.n	80042b6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003dfe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	f000 80de 	beq.w	8003fc4 <HAL_UART_IRQHandler+0x22c>
 8003e08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003e0c:	f003 0301 	and.w	r3, r3, #1
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d106      	bne.n	8003e22 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003e14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e18:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	f000 80d1 	beq.w	8003fc4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003e22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e26:	f003 0301 	and.w	r3, r3, #1
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d00b      	beq.n	8003e46 <HAL_UART_IRQHandler+0xae>
 8003e2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d005      	beq.n	8003e46 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e3e:	f043 0201 	orr.w	r2, r3, #1
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e4a:	f003 0304 	and.w	r3, r3, #4
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d00b      	beq.n	8003e6a <HAL_UART_IRQHandler+0xd2>
 8003e52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003e56:	f003 0301 	and.w	r3, r3, #1
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d005      	beq.n	8003e6a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e62:	f043 0202 	orr.w	r2, r3, #2
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e6e:	f003 0302 	and.w	r3, r3, #2
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d00b      	beq.n	8003e8e <HAL_UART_IRQHandler+0xf6>
 8003e76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003e7a:	f003 0301 	and.w	r3, r3, #1
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d005      	beq.n	8003e8e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e86:	f043 0204 	orr.w	r2, r3, #4
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003e8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e92:	f003 0308 	and.w	r3, r3, #8
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d011      	beq.n	8003ebe <HAL_UART_IRQHandler+0x126>
 8003e9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e9e:	f003 0320 	and.w	r3, r3, #32
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d105      	bne.n	8003eb2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003ea6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003eaa:	f003 0301 	and.w	r3, r3, #1
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d005      	beq.n	8003ebe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eb6:	f043 0208 	orr.w	r2, r3, #8
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	f000 81f2 	beq.w	80042ac <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ec8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ecc:	f003 0320 	and.w	r3, r3, #32
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d008      	beq.n	8003ee6 <HAL_UART_IRQHandler+0x14e>
 8003ed4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ed8:	f003 0320 	and.w	r3, r3, #32
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d002      	beq.n	8003ee6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	f000 fb77 	bl	80045d4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	695b      	ldr	r3, [r3, #20]
 8003eec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	bf14      	ite	ne
 8003ef4:	2301      	movne	r3, #1
 8003ef6:	2300      	moveq	r3, #0
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f02:	f003 0308 	and.w	r3, r3, #8
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d103      	bne.n	8003f12 <HAL_UART_IRQHandler+0x17a>
 8003f0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d04f      	beq.n	8003fb2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f000 fa81 	bl	800441a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	695b      	ldr	r3, [r3, #20]
 8003f1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d041      	beq.n	8003faa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	3314      	adds	r3, #20
 8003f2c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f30:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003f34:	e853 3f00 	ldrex	r3, [r3]
 8003f38:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003f3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003f40:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f44:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	3314      	adds	r3, #20
 8003f4e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003f52:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003f56:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f5a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003f5e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003f62:	e841 2300 	strex	r3, r2, [r1]
 8003f66:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003f6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d1d9      	bne.n	8003f26 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d013      	beq.n	8003fa2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f7e:	4a7e      	ldr	r2, [pc, #504]	@ (8004178 <HAL_UART_IRQHandler+0x3e0>)
 8003f80:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f86:	4618      	mov	r0, r3
 8003f88:	f7fe fbf6 	bl	8002778 <HAL_DMA_Abort_IT>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d016      	beq.n	8003fc0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f98:	687a      	ldr	r2, [r7, #4]
 8003f9a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003f9c:	4610      	mov	r0, r2
 8003f9e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fa0:	e00e      	b.n	8003fc0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f000 f993 	bl	80042ce <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fa8:	e00a      	b.n	8003fc0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f000 f98f 	bl	80042ce <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fb0:	e006      	b.n	8003fc0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f000 f98b 	bl	80042ce <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003fbe:	e175      	b.n	80042ac <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fc0:	bf00      	nop
    return;
 8003fc2:	e173      	b.n	80042ac <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	f040 814f 	bne.w	800426c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003fce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fd2:	f003 0310 	and.w	r3, r3, #16
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	f000 8148 	beq.w	800426c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003fdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fe0:	f003 0310 	and.w	r3, r3, #16
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	f000 8141 	beq.w	800426c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003fea:	2300      	movs	r3, #0
 8003fec:	60bb      	str	r3, [r7, #8]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	60bb      	str	r3, [r7, #8]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	60bb      	str	r3, [r7, #8]
 8003ffe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	695b      	ldr	r3, [r3, #20]
 8004006:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800400a:	2b00      	cmp	r3, #0
 800400c:	f000 80b6 	beq.w	800417c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800401c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004020:	2b00      	cmp	r3, #0
 8004022:	f000 8145 	beq.w	80042b0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800402a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800402e:	429a      	cmp	r2, r3
 8004030:	f080 813e 	bcs.w	80042b0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800403a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004040:	699b      	ldr	r3, [r3, #24]
 8004042:	2b20      	cmp	r3, #32
 8004044:	f000 8088 	beq.w	8004158 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	330c      	adds	r3, #12
 800404e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004052:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004056:	e853 3f00 	ldrex	r3, [r3]
 800405a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800405e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004062:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004066:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	330c      	adds	r3, #12
 8004070:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004074:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004078:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800407c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004080:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004084:	e841 2300 	strex	r3, r2, [r1]
 8004088:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800408c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004090:	2b00      	cmp	r3, #0
 8004092:	d1d9      	bne.n	8004048 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	3314      	adds	r3, #20
 800409a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800409c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800409e:	e853 3f00 	ldrex	r3, [r3]
 80040a2:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80040a4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80040a6:	f023 0301 	bic.w	r3, r3, #1
 80040aa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	3314      	adds	r3, #20
 80040b4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80040b8:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80040bc:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040be:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80040c0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80040c4:	e841 2300 	strex	r3, r2, [r1]
 80040c8:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80040ca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d1e1      	bne.n	8004094 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	3314      	adds	r3, #20
 80040d6:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040d8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80040da:	e853 3f00 	ldrex	r3, [r3]
 80040de:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80040e0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80040e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80040e6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	3314      	adds	r3, #20
 80040f0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80040f4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80040f6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040f8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80040fa:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80040fc:	e841 2300 	strex	r3, r2, [r1]
 8004100:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004102:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004104:	2b00      	cmp	r3, #0
 8004106:	d1e3      	bne.n	80040d0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2220      	movs	r2, #32
 800410c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2200      	movs	r2, #0
 8004114:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	330c      	adds	r3, #12
 800411c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800411e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004120:	e853 3f00 	ldrex	r3, [r3]
 8004124:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004126:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004128:	f023 0310 	bic.w	r3, r3, #16
 800412c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	330c      	adds	r3, #12
 8004136:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800413a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800413c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800413e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004140:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004142:	e841 2300 	strex	r3, r2, [r1]
 8004146:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004148:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800414a:	2b00      	cmp	r3, #0
 800414c:	d1e3      	bne.n	8004116 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004152:	4618      	mov	r0, r3
 8004154:	f7fe fad5 	bl	8002702 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2202      	movs	r2, #2
 800415c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004166:	b29b      	uxth	r3, r3
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	b29b      	uxth	r3, r3
 800416c:	4619      	mov	r1, r3
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f000 f8b6 	bl	80042e0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004174:	e09c      	b.n	80042b0 <HAL_UART_IRQHandler+0x518>
 8004176:	bf00      	nop
 8004178:	080044df 	.word	0x080044df
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004184:	b29b      	uxth	r3, r3
 8004186:	1ad3      	subs	r3, r2, r3
 8004188:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004190:	b29b      	uxth	r3, r3
 8004192:	2b00      	cmp	r3, #0
 8004194:	f000 808e 	beq.w	80042b4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004198:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800419c:	2b00      	cmp	r3, #0
 800419e:	f000 8089 	beq.w	80042b4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	330c      	adds	r3, #12
 80041a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041ac:	e853 3f00 	ldrex	r3, [r3]
 80041b0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80041b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80041b8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	330c      	adds	r3, #12
 80041c2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80041c6:	647a      	str	r2, [r7, #68]	@ 0x44
 80041c8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ca:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80041cc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80041ce:	e841 2300 	strex	r3, r2, [r1]
 80041d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80041d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d1e3      	bne.n	80041a2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	3314      	adds	r3, #20
 80041e0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041e4:	e853 3f00 	ldrex	r3, [r3]
 80041e8:	623b      	str	r3, [r7, #32]
   return(result);
 80041ea:	6a3b      	ldr	r3, [r7, #32]
 80041ec:	f023 0301 	bic.w	r3, r3, #1
 80041f0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	3314      	adds	r3, #20
 80041fa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80041fe:	633a      	str	r2, [r7, #48]	@ 0x30
 8004200:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004202:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004204:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004206:	e841 2300 	strex	r3, r2, [r1]
 800420a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800420c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800420e:	2b00      	cmp	r3, #0
 8004210:	d1e3      	bne.n	80041da <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2220      	movs	r2, #32
 8004216:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2200      	movs	r2, #0
 800421e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	330c      	adds	r3, #12
 8004226:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	e853 3f00 	ldrex	r3, [r3]
 800422e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f023 0310 	bic.w	r3, r3, #16
 8004236:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	330c      	adds	r3, #12
 8004240:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004244:	61fa      	str	r2, [r7, #28]
 8004246:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004248:	69b9      	ldr	r1, [r7, #24]
 800424a:	69fa      	ldr	r2, [r7, #28]
 800424c:	e841 2300 	strex	r3, r2, [r1]
 8004250:	617b      	str	r3, [r7, #20]
   return(result);
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d1e3      	bne.n	8004220 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2202      	movs	r2, #2
 800425c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800425e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004262:	4619      	mov	r1, r3
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f000 f83b 	bl	80042e0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800426a:	e023      	b.n	80042b4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800426c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004270:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004274:	2b00      	cmp	r3, #0
 8004276:	d009      	beq.n	800428c <HAL_UART_IRQHandler+0x4f4>
 8004278:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800427c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004280:	2b00      	cmp	r3, #0
 8004282:	d003      	beq.n	800428c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	f000 f93e 	bl	8004506 <UART_Transmit_IT>
    return;
 800428a:	e014      	b.n	80042b6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800428c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004290:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004294:	2b00      	cmp	r3, #0
 8004296:	d00e      	beq.n	80042b6 <HAL_UART_IRQHandler+0x51e>
 8004298:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800429c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d008      	beq.n	80042b6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	f000 f97d 	bl	80045a4 <UART_EndTransmit_IT>
    return;
 80042aa:	e004      	b.n	80042b6 <HAL_UART_IRQHandler+0x51e>
    return;
 80042ac:	bf00      	nop
 80042ae:	e002      	b.n	80042b6 <HAL_UART_IRQHandler+0x51e>
      return;
 80042b0:	bf00      	nop
 80042b2:	e000      	b.n	80042b6 <HAL_UART_IRQHandler+0x51e>
      return;
 80042b4:	bf00      	nop
  }
}
 80042b6:	37e8      	adds	r7, #232	@ 0xe8
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}

080042bc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80042bc:	b480      	push	{r7}
 80042be:	b083      	sub	sp, #12
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80042c4:	bf00      	nop
 80042c6:	370c      	adds	r7, #12
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bc80      	pop	{r7}
 80042cc:	4770      	bx	lr

080042ce <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80042ce:	b480      	push	{r7}
 80042d0:	b083      	sub	sp, #12
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80042d6:	bf00      	nop
 80042d8:	370c      	adds	r7, #12
 80042da:	46bd      	mov	sp, r7
 80042dc:	bc80      	pop	{r7}
 80042de:	4770      	bx	lr

080042e0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b083      	sub	sp, #12
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
 80042e8:	460b      	mov	r3, r1
 80042ea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80042ec:	bf00      	nop
 80042ee:	370c      	adds	r7, #12
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bc80      	pop	{r7}
 80042f4:	4770      	bx	lr

080042f6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80042f6:	b580      	push	{r7, lr}
 80042f8:	b086      	sub	sp, #24
 80042fa:	af00      	add	r7, sp, #0
 80042fc:	60f8      	str	r0, [r7, #12]
 80042fe:	60b9      	str	r1, [r7, #8]
 8004300:	603b      	str	r3, [r7, #0]
 8004302:	4613      	mov	r3, r2
 8004304:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004306:	e03b      	b.n	8004380 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004308:	6a3b      	ldr	r3, [r7, #32]
 800430a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800430e:	d037      	beq.n	8004380 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004310:	f7fe f8e0 	bl	80024d4 <HAL_GetTick>
 8004314:	4602      	mov	r2, r0
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	6a3a      	ldr	r2, [r7, #32]
 800431c:	429a      	cmp	r2, r3
 800431e:	d302      	bcc.n	8004326 <UART_WaitOnFlagUntilTimeout+0x30>
 8004320:	6a3b      	ldr	r3, [r7, #32]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d101      	bne.n	800432a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004326:	2303      	movs	r3, #3
 8004328:	e03a      	b.n	80043a0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	68db      	ldr	r3, [r3, #12]
 8004330:	f003 0304 	and.w	r3, r3, #4
 8004334:	2b00      	cmp	r3, #0
 8004336:	d023      	beq.n	8004380 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	2b80      	cmp	r3, #128	@ 0x80
 800433c:	d020      	beq.n	8004380 <UART_WaitOnFlagUntilTimeout+0x8a>
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	2b40      	cmp	r3, #64	@ 0x40
 8004342:	d01d      	beq.n	8004380 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 0308 	and.w	r3, r3, #8
 800434e:	2b08      	cmp	r3, #8
 8004350:	d116      	bne.n	8004380 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004352:	2300      	movs	r3, #0
 8004354:	617b      	str	r3, [r7, #20]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	617b      	str	r3, [r7, #20]
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	617b      	str	r3, [r7, #20]
 8004366:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004368:	68f8      	ldr	r0, [r7, #12]
 800436a:	f000 f856 	bl	800441a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2208      	movs	r2, #8
 8004372:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2200      	movs	r2, #0
 8004378:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	e00f      	b.n	80043a0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	4013      	ands	r3, r2
 800438a:	68ba      	ldr	r2, [r7, #8]
 800438c:	429a      	cmp	r2, r3
 800438e:	bf0c      	ite	eq
 8004390:	2301      	moveq	r3, #1
 8004392:	2300      	movne	r3, #0
 8004394:	b2db      	uxtb	r3, r3
 8004396:	461a      	mov	r2, r3
 8004398:	79fb      	ldrb	r3, [r7, #7]
 800439a:	429a      	cmp	r2, r3
 800439c:	d0b4      	beq.n	8004308 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800439e:	2300      	movs	r3, #0
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	3718      	adds	r7, #24
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}

080043a8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b085      	sub	sp, #20
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	60f8      	str	r0, [r7, #12]
 80043b0:	60b9      	str	r1, [r7, #8]
 80043b2:	4613      	mov	r3, r2
 80043b4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	68ba      	ldr	r2, [r7, #8]
 80043ba:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	88fa      	ldrh	r2, [r7, #6]
 80043c0:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	88fa      	ldrh	r2, [r7, #6]
 80043c6:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2200      	movs	r2, #0
 80043cc:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2222      	movs	r2, #34	@ 0x22
 80043d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	691b      	ldr	r3, [r3, #16]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d007      	beq.n	80043ee <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	68da      	ldr	r2, [r3, #12]
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80043ec:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	695a      	ldr	r2, [r3, #20]
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f042 0201 	orr.w	r2, r2, #1
 80043fc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	68da      	ldr	r2, [r3, #12]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f042 0220 	orr.w	r2, r2, #32
 800440c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800440e:	2300      	movs	r3, #0
}
 8004410:	4618      	mov	r0, r3
 8004412:	3714      	adds	r7, #20
 8004414:	46bd      	mov	sp, r7
 8004416:	bc80      	pop	{r7}
 8004418:	4770      	bx	lr

0800441a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800441a:	b480      	push	{r7}
 800441c:	b095      	sub	sp, #84	@ 0x54
 800441e:	af00      	add	r7, sp, #0
 8004420:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	330c      	adds	r3, #12
 8004428:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800442a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800442c:	e853 3f00 	ldrex	r3, [r3]
 8004430:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004434:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004438:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	330c      	adds	r3, #12
 8004440:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004442:	643a      	str	r2, [r7, #64]	@ 0x40
 8004444:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004446:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004448:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800444a:	e841 2300 	strex	r3, r2, [r1]
 800444e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004450:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004452:	2b00      	cmp	r3, #0
 8004454:	d1e5      	bne.n	8004422 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	3314      	adds	r3, #20
 800445c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800445e:	6a3b      	ldr	r3, [r7, #32]
 8004460:	e853 3f00 	ldrex	r3, [r3]
 8004464:	61fb      	str	r3, [r7, #28]
   return(result);
 8004466:	69fb      	ldr	r3, [r7, #28]
 8004468:	f023 0301 	bic.w	r3, r3, #1
 800446c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	3314      	adds	r3, #20
 8004474:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004476:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004478:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800447a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800447c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800447e:	e841 2300 	strex	r3, r2, [r1]
 8004482:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004486:	2b00      	cmp	r3, #0
 8004488:	d1e5      	bne.n	8004456 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800448e:	2b01      	cmp	r3, #1
 8004490:	d119      	bne.n	80044c6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	330c      	adds	r3, #12
 8004498:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	e853 3f00 	ldrex	r3, [r3]
 80044a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	f023 0310 	bic.w	r3, r3, #16
 80044a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	330c      	adds	r3, #12
 80044b0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80044b2:	61ba      	str	r2, [r7, #24]
 80044b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044b6:	6979      	ldr	r1, [r7, #20]
 80044b8:	69ba      	ldr	r2, [r7, #24]
 80044ba:	e841 2300 	strex	r3, r2, [r1]
 80044be:	613b      	str	r3, [r7, #16]
   return(result);
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d1e5      	bne.n	8004492 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2220      	movs	r2, #32
 80044ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2200      	movs	r2, #0
 80044d2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80044d4:	bf00      	nop
 80044d6:	3754      	adds	r7, #84	@ 0x54
 80044d8:	46bd      	mov	sp, r7
 80044da:	bc80      	pop	{r7}
 80044dc:	4770      	bx	lr

080044de <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80044de:	b580      	push	{r7, lr}
 80044e0:	b084      	sub	sp, #16
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ea:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2200      	movs	r2, #0
 80044f0:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2200      	movs	r2, #0
 80044f6:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80044f8:	68f8      	ldr	r0, [r7, #12]
 80044fa:	f7ff fee8 	bl	80042ce <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80044fe:	bf00      	nop
 8004500:	3710      	adds	r7, #16
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}

08004506 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004506:	b480      	push	{r7}
 8004508:	b085      	sub	sp, #20
 800450a:	af00      	add	r7, sp, #0
 800450c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004514:	b2db      	uxtb	r3, r3
 8004516:	2b21      	cmp	r3, #33	@ 0x21
 8004518:	d13e      	bne.n	8004598 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004522:	d114      	bne.n	800454e <UART_Transmit_IT+0x48>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	691b      	ldr	r3, [r3, #16]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d110      	bne.n	800454e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6a1b      	ldr	r3, [r3, #32]
 8004530:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	881b      	ldrh	r3, [r3, #0]
 8004536:	461a      	mov	r2, r3
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004540:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6a1b      	ldr	r3, [r3, #32]
 8004546:	1c9a      	adds	r2, r3, #2
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	621a      	str	r2, [r3, #32]
 800454c:	e008      	b.n	8004560 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6a1b      	ldr	r3, [r3, #32]
 8004552:	1c59      	adds	r1, r3, #1
 8004554:	687a      	ldr	r2, [r7, #4]
 8004556:	6211      	str	r1, [r2, #32]
 8004558:	781a      	ldrb	r2, [r3, #0]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004564:	b29b      	uxth	r3, r3
 8004566:	3b01      	subs	r3, #1
 8004568:	b29b      	uxth	r3, r3
 800456a:	687a      	ldr	r2, [r7, #4]
 800456c:	4619      	mov	r1, r3
 800456e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004570:	2b00      	cmp	r3, #0
 8004572:	d10f      	bne.n	8004594 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	68da      	ldr	r2, [r3, #12]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004582:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	68da      	ldr	r2, [r3, #12]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004592:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004594:	2300      	movs	r3, #0
 8004596:	e000      	b.n	800459a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004598:	2302      	movs	r3, #2
  }
}
 800459a:	4618      	mov	r0, r3
 800459c:	3714      	adds	r7, #20
 800459e:	46bd      	mov	sp, r7
 80045a0:	bc80      	pop	{r7}
 80045a2:	4770      	bx	lr

080045a4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b082      	sub	sp, #8
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	68da      	ldr	r2, [r3, #12]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80045ba:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2220      	movs	r2, #32
 80045c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f7ff fe79 	bl	80042bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80045ca:	2300      	movs	r3, #0
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	3708      	adds	r7, #8
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}

080045d4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b08c      	sub	sp, #48	@ 0x30
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80045e2:	b2db      	uxtb	r3, r3
 80045e4:	2b22      	cmp	r3, #34	@ 0x22
 80045e6:	f040 80ae 	bne.w	8004746 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045f2:	d117      	bne.n	8004624 <UART_Receive_IT+0x50>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	691b      	ldr	r3, [r3, #16]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d113      	bne.n	8004624 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80045fc:	2300      	movs	r3, #0
 80045fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004604:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	b29b      	uxth	r3, r3
 800460e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004612:	b29a      	uxth	r2, r3
 8004614:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004616:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800461c:	1c9a      	adds	r2, r3, #2
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	629a      	str	r2, [r3, #40]	@ 0x28
 8004622:	e026      	b.n	8004672 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004628:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800462a:	2300      	movs	r3, #0
 800462c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004636:	d007      	beq.n	8004648 <UART_Receive_IT+0x74>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d10a      	bne.n	8004656 <UART_Receive_IT+0x82>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	691b      	ldr	r3, [r3, #16]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d106      	bne.n	8004656 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	b2da      	uxtb	r2, r3
 8004650:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004652:	701a      	strb	r2, [r3, #0]
 8004654:	e008      	b.n	8004668 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	b2db      	uxtb	r3, r3
 800465e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004662:	b2da      	uxtb	r2, r3
 8004664:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004666:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800466c:	1c5a      	adds	r2, r3, #1
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004676:	b29b      	uxth	r3, r3
 8004678:	3b01      	subs	r3, #1
 800467a:	b29b      	uxth	r3, r3
 800467c:	687a      	ldr	r2, [r7, #4]
 800467e:	4619      	mov	r1, r3
 8004680:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004682:	2b00      	cmp	r3, #0
 8004684:	d15d      	bne.n	8004742 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	68da      	ldr	r2, [r3, #12]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f022 0220 	bic.w	r2, r2, #32
 8004694:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	68da      	ldr	r2, [r3, #12]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80046a4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	695a      	ldr	r2, [r3, #20]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f022 0201 	bic.w	r2, r2, #1
 80046b4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2220      	movs	r2, #32
 80046ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2200      	movs	r2, #0
 80046c2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d135      	bne.n	8004738 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2200      	movs	r2, #0
 80046d0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	330c      	adds	r3, #12
 80046d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	e853 3f00 	ldrex	r3, [r3]
 80046e0:	613b      	str	r3, [r7, #16]
   return(result);
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	f023 0310 	bic.w	r3, r3, #16
 80046e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	330c      	adds	r3, #12
 80046f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046f2:	623a      	str	r2, [r7, #32]
 80046f4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046f6:	69f9      	ldr	r1, [r7, #28]
 80046f8:	6a3a      	ldr	r2, [r7, #32]
 80046fa:	e841 2300 	strex	r3, r2, [r1]
 80046fe:	61bb      	str	r3, [r7, #24]
   return(result);
 8004700:	69bb      	ldr	r3, [r7, #24]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d1e5      	bne.n	80046d2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 0310 	and.w	r3, r3, #16
 8004710:	2b10      	cmp	r3, #16
 8004712:	d10a      	bne.n	800472a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004714:	2300      	movs	r3, #0
 8004716:	60fb      	str	r3, [r7, #12]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	60fb      	str	r3, [r7, #12]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	60fb      	str	r3, [r7, #12]
 8004728:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800472e:	4619      	mov	r1, r3
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	f7ff fdd5 	bl	80042e0 <HAL_UARTEx_RxEventCallback>
 8004736:	e002      	b.n	800473e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	f7fc ff11 	bl	8001560 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800473e:	2300      	movs	r3, #0
 8004740:	e002      	b.n	8004748 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004742:	2300      	movs	r3, #0
 8004744:	e000      	b.n	8004748 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004746:	2302      	movs	r3, #2
  }
}
 8004748:	4618      	mov	r0, r3
 800474a:	3730      	adds	r7, #48	@ 0x30
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}

08004750 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b084      	sub	sp, #16
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	691b      	ldr	r3, [r3, #16]
 800475e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	68da      	ldr	r2, [r3, #12]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	430a      	orrs	r2, r1
 800476c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	689a      	ldr	r2, [r3, #8]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	691b      	ldr	r3, [r3, #16]
 8004776:	431a      	orrs	r2, r3
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	695b      	ldr	r3, [r3, #20]
 800477c:	4313      	orrs	r3, r2
 800477e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	68db      	ldr	r3, [r3, #12]
 8004786:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800478a:	f023 030c 	bic.w	r3, r3, #12
 800478e:	687a      	ldr	r2, [r7, #4]
 8004790:	6812      	ldr	r2, [r2, #0]
 8004792:	68b9      	ldr	r1, [r7, #8]
 8004794:	430b      	orrs	r3, r1
 8004796:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	695b      	ldr	r3, [r3, #20]
 800479e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	699a      	ldr	r2, [r3, #24]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	430a      	orrs	r2, r1
 80047ac:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a2c      	ldr	r2, [pc, #176]	@ (8004864 <UART_SetConfig+0x114>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d103      	bne.n	80047c0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80047b8:	f7fe fef4 	bl	80035a4 <HAL_RCC_GetPCLK2Freq>
 80047bc:	60f8      	str	r0, [r7, #12]
 80047be:	e002      	b.n	80047c6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80047c0:	f7fe fedc 	bl	800357c <HAL_RCC_GetPCLK1Freq>
 80047c4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80047c6:	68fa      	ldr	r2, [r7, #12]
 80047c8:	4613      	mov	r3, r2
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	4413      	add	r3, r2
 80047ce:	009a      	lsls	r2, r3, #2
 80047d0:	441a      	add	r2, r3
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80047dc:	4a22      	ldr	r2, [pc, #136]	@ (8004868 <UART_SetConfig+0x118>)
 80047de:	fba2 2303 	umull	r2, r3, r2, r3
 80047e2:	095b      	lsrs	r3, r3, #5
 80047e4:	0119      	lsls	r1, r3, #4
 80047e6:	68fa      	ldr	r2, [r7, #12]
 80047e8:	4613      	mov	r3, r2
 80047ea:	009b      	lsls	r3, r3, #2
 80047ec:	4413      	add	r3, r2
 80047ee:	009a      	lsls	r2, r3, #2
 80047f0:	441a      	add	r2, r3
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	009b      	lsls	r3, r3, #2
 80047f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80047fc:	4b1a      	ldr	r3, [pc, #104]	@ (8004868 <UART_SetConfig+0x118>)
 80047fe:	fba3 0302 	umull	r0, r3, r3, r2
 8004802:	095b      	lsrs	r3, r3, #5
 8004804:	2064      	movs	r0, #100	@ 0x64
 8004806:	fb00 f303 	mul.w	r3, r0, r3
 800480a:	1ad3      	subs	r3, r2, r3
 800480c:	011b      	lsls	r3, r3, #4
 800480e:	3332      	adds	r3, #50	@ 0x32
 8004810:	4a15      	ldr	r2, [pc, #84]	@ (8004868 <UART_SetConfig+0x118>)
 8004812:	fba2 2303 	umull	r2, r3, r2, r3
 8004816:	095b      	lsrs	r3, r3, #5
 8004818:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800481c:	4419      	add	r1, r3
 800481e:	68fa      	ldr	r2, [r7, #12]
 8004820:	4613      	mov	r3, r2
 8004822:	009b      	lsls	r3, r3, #2
 8004824:	4413      	add	r3, r2
 8004826:	009a      	lsls	r2, r3, #2
 8004828:	441a      	add	r2, r3
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	fbb2 f2f3 	udiv	r2, r2, r3
 8004834:	4b0c      	ldr	r3, [pc, #48]	@ (8004868 <UART_SetConfig+0x118>)
 8004836:	fba3 0302 	umull	r0, r3, r3, r2
 800483a:	095b      	lsrs	r3, r3, #5
 800483c:	2064      	movs	r0, #100	@ 0x64
 800483e:	fb00 f303 	mul.w	r3, r0, r3
 8004842:	1ad3      	subs	r3, r2, r3
 8004844:	011b      	lsls	r3, r3, #4
 8004846:	3332      	adds	r3, #50	@ 0x32
 8004848:	4a07      	ldr	r2, [pc, #28]	@ (8004868 <UART_SetConfig+0x118>)
 800484a:	fba2 2303 	umull	r2, r3, r2, r3
 800484e:	095b      	lsrs	r3, r3, #5
 8004850:	f003 020f 	and.w	r2, r3, #15
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	440a      	add	r2, r1
 800485a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800485c:	bf00      	nop
 800485e:	3710      	adds	r7, #16
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}
 8004864:	40013800 	.word	0x40013800
 8004868:	51eb851f 	.word	0x51eb851f

0800486c <_vsniprintf_r>:
 800486c:	b530      	push	{r4, r5, lr}
 800486e:	4614      	mov	r4, r2
 8004870:	2c00      	cmp	r4, #0
 8004872:	4605      	mov	r5, r0
 8004874:	461a      	mov	r2, r3
 8004876:	b09b      	sub	sp, #108	@ 0x6c
 8004878:	da05      	bge.n	8004886 <_vsniprintf_r+0x1a>
 800487a:	238b      	movs	r3, #139	@ 0x8b
 800487c:	6003      	str	r3, [r0, #0]
 800487e:	f04f 30ff 	mov.w	r0, #4294967295
 8004882:	b01b      	add	sp, #108	@ 0x6c
 8004884:	bd30      	pop	{r4, r5, pc}
 8004886:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800488a:	f8ad 300c 	strh.w	r3, [sp, #12]
 800488e:	bf0c      	ite	eq
 8004890:	4623      	moveq	r3, r4
 8004892:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004896:	9302      	str	r3, [sp, #8]
 8004898:	9305      	str	r3, [sp, #20]
 800489a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800489e:	9100      	str	r1, [sp, #0]
 80048a0:	9104      	str	r1, [sp, #16]
 80048a2:	f8ad 300e 	strh.w	r3, [sp, #14]
 80048a6:	4669      	mov	r1, sp
 80048a8:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80048aa:	f000 f9ad 	bl	8004c08 <_svfiprintf_r>
 80048ae:	1c43      	adds	r3, r0, #1
 80048b0:	bfbc      	itt	lt
 80048b2:	238b      	movlt	r3, #139	@ 0x8b
 80048b4:	602b      	strlt	r3, [r5, #0]
 80048b6:	2c00      	cmp	r4, #0
 80048b8:	d0e3      	beq.n	8004882 <_vsniprintf_r+0x16>
 80048ba:	2200      	movs	r2, #0
 80048bc:	9b00      	ldr	r3, [sp, #0]
 80048be:	701a      	strb	r2, [r3, #0]
 80048c0:	e7df      	b.n	8004882 <_vsniprintf_r+0x16>
	...

080048c4 <vsniprintf>:
 80048c4:	b507      	push	{r0, r1, r2, lr}
 80048c6:	9300      	str	r3, [sp, #0]
 80048c8:	4613      	mov	r3, r2
 80048ca:	460a      	mov	r2, r1
 80048cc:	4601      	mov	r1, r0
 80048ce:	4803      	ldr	r0, [pc, #12]	@ (80048dc <vsniprintf+0x18>)
 80048d0:	6800      	ldr	r0, [r0, #0]
 80048d2:	f7ff ffcb 	bl	800486c <_vsniprintf_r>
 80048d6:	b003      	add	sp, #12
 80048d8:	f85d fb04 	ldr.w	pc, [sp], #4
 80048dc:	2000011c 	.word	0x2000011c

080048e0 <memset>:
 80048e0:	4603      	mov	r3, r0
 80048e2:	4402      	add	r2, r0
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d100      	bne.n	80048ea <memset+0xa>
 80048e8:	4770      	bx	lr
 80048ea:	f803 1b01 	strb.w	r1, [r3], #1
 80048ee:	e7f9      	b.n	80048e4 <memset+0x4>

080048f0 <__errno>:
 80048f0:	4b01      	ldr	r3, [pc, #4]	@ (80048f8 <__errno+0x8>)
 80048f2:	6818      	ldr	r0, [r3, #0]
 80048f4:	4770      	bx	lr
 80048f6:	bf00      	nop
 80048f8:	2000011c 	.word	0x2000011c

080048fc <__libc_init_array>:
 80048fc:	b570      	push	{r4, r5, r6, lr}
 80048fe:	2600      	movs	r6, #0
 8004900:	4d0c      	ldr	r5, [pc, #48]	@ (8004934 <__libc_init_array+0x38>)
 8004902:	4c0d      	ldr	r4, [pc, #52]	@ (8004938 <__libc_init_array+0x3c>)
 8004904:	1b64      	subs	r4, r4, r5
 8004906:	10a4      	asrs	r4, r4, #2
 8004908:	42a6      	cmp	r6, r4
 800490a:	d109      	bne.n	8004920 <__libc_init_array+0x24>
 800490c:	f000 fc78 	bl	8005200 <_init>
 8004910:	2600      	movs	r6, #0
 8004912:	4d0a      	ldr	r5, [pc, #40]	@ (800493c <__libc_init_array+0x40>)
 8004914:	4c0a      	ldr	r4, [pc, #40]	@ (8004940 <__libc_init_array+0x44>)
 8004916:	1b64      	subs	r4, r4, r5
 8004918:	10a4      	asrs	r4, r4, #2
 800491a:	42a6      	cmp	r6, r4
 800491c:	d105      	bne.n	800492a <__libc_init_array+0x2e>
 800491e:	bd70      	pop	{r4, r5, r6, pc}
 8004920:	f855 3b04 	ldr.w	r3, [r5], #4
 8004924:	4798      	blx	r3
 8004926:	3601      	adds	r6, #1
 8004928:	e7ee      	b.n	8004908 <__libc_init_array+0xc>
 800492a:	f855 3b04 	ldr.w	r3, [r5], #4
 800492e:	4798      	blx	r3
 8004930:	3601      	adds	r6, #1
 8004932:	e7f2      	b.n	800491a <__libc_init_array+0x1e>
 8004934:	080056f0 	.word	0x080056f0
 8004938:	080056f0 	.word	0x080056f0
 800493c:	080056f0 	.word	0x080056f0
 8004940:	080056f4 	.word	0x080056f4

08004944 <__retarget_lock_acquire_recursive>:
 8004944:	4770      	bx	lr

08004946 <__retarget_lock_release_recursive>:
 8004946:	4770      	bx	lr

08004948 <memcpy>:
 8004948:	440a      	add	r2, r1
 800494a:	4291      	cmp	r1, r2
 800494c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004950:	d100      	bne.n	8004954 <memcpy+0xc>
 8004952:	4770      	bx	lr
 8004954:	b510      	push	{r4, lr}
 8004956:	f811 4b01 	ldrb.w	r4, [r1], #1
 800495a:	4291      	cmp	r1, r2
 800495c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004960:	d1f9      	bne.n	8004956 <memcpy+0xe>
 8004962:	bd10      	pop	{r4, pc}

08004964 <_free_r>:
 8004964:	b538      	push	{r3, r4, r5, lr}
 8004966:	4605      	mov	r5, r0
 8004968:	2900      	cmp	r1, #0
 800496a:	d040      	beq.n	80049ee <_free_r+0x8a>
 800496c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004970:	1f0c      	subs	r4, r1, #4
 8004972:	2b00      	cmp	r3, #0
 8004974:	bfb8      	it	lt
 8004976:	18e4      	addlt	r4, r4, r3
 8004978:	f000 f8de 	bl	8004b38 <__malloc_lock>
 800497c:	4a1c      	ldr	r2, [pc, #112]	@ (80049f0 <_free_r+0x8c>)
 800497e:	6813      	ldr	r3, [r2, #0]
 8004980:	b933      	cbnz	r3, 8004990 <_free_r+0x2c>
 8004982:	6063      	str	r3, [r4, #4]
 8004984:	6014      	str	r4, [r2, #0]
 8004986:	4628      	mov	r0, r5
 8004988:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800498c:	f000 b8da 	b.w	8004b44 <__malloc_unlock>
 8004990:	42a3      	cmp	r3, r4
 8004992:	d908      	bls.n	80049a6 <_free_r+0x42>
 8004994:	6820      	ldr	r0, [r4, #0]
 8004996:	1821      	adds	r1, r4, r0
 8004998:	428b      	cmp	r3, r1
 800499a:	bf01      	itttt	eq
 800499c:	6819      	ldreq	r1, [r3, #0]
 800499e:	685b      	ldreq	r3, [r3, #4]
 80049a0:	1809      	addeq	r1, r1, r0
 80049a2:	6021      	streq	r1, [r4, #0]
 80049a4:	e7ed      	b.n	8004982 <_free_r+0x1e>
 80049a6:	461a      	mov	r2, r3
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	b10b      	cbz	r3, 80049b0 <_free_r+0x4c>
 80049ac:	42a3      	cmp	r3, r4
 80049ae:	d9fa      	bls.n	80049a6 <_free_r+0x42>
 80049b0:	6811      	ldr	r1, [r2, #0]
 80049b2:	1850      	adds	r0, r2, r1
 80049b4:	42a0      	cmp	r0, r4
 80049b6:	d10b      	bne.n	80049d0 <_free_r+0x6c>
 80049b8:	6820      	ldr	r0, [r4, #0]
 80049ba:	4401      	add	r1, r0
 80049bc:	1850      	adds	r0, r2, r1
 80049be:	4283      	cmp	r3, r0
 80049c0:	6011      	str	r1, [r2, #0]
 80049c2:	d1e0      	bne.n	8004986 <_free_r+0x22>
 80049c4:	6818      	ldr	r0, [r3, #0]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	4408      	add	r0, r1
 80049ca:	6010      	str	r0, [r2, #0]
 80049cc:	6053      	str	r3, [r2, #4]
 80049ce:	e7da      	b.n	8004986 <_free_r+0x22>
 80049d0:	d902      	bls.n	80049d8 <_free_r+0x74>
 80049d2:	230c      	movs	r3, #12
 80049d4:	602b      	str	r3, [r5, #0]
 80049d6:	e7d6      	b.n	8004986 <_free_r+0x22>
 80049d8:	6820      	ldr	r0, [r4, #0]
 80049da:	1821      	adds	r1, r4, r0
 80049dc:	428b      	cmp	r3, r1
 80049de:	bf01      	itttt	eq
 80049e0:	6819      	ldreq	r1, [r3, #0]
 80049e2:	685b      	ldreq	r3, [r3, #4]
 80049e4:	1809      	addeq	r1, r1, r0
 80049e6:	6021      	streq	r1, [r4, #0]
 80049e8:	6063      	str	r3, [r4, #4]
 80049ea:	6054      	str	r4, [r2, #4]
 80049ec:	e7cb      	b.n	8004986 <_free_r+0x22>
 80049ee:	bd38      	pop	{r3, r4, r5, pc}
 80049f0:	20000da0 	.word	0x20000da0

080049f4 <sbrk_aligned>:
 80049f4:	b570      	push	{r4, r5, r6, lr}
 80049f6:	4e0f      	ldr	r6, [pc, #60]	@ (8004a34 <sbrk_aligned+0x40>)
 80049f8:	460c      	mov	r4, r1
 80049fa:	6831      	ldr	r1, [r6, #0]
 80049fc:	4605      	mov	r5, r0
 80049fe:	b911      	cbnz	r1, 8004a06 <sbrk_aligned+0x12>
 8004a00:	f000 fbaa 	bl	8005158 <_sbrk_r>
 8004a04:	6030      	str	r0, [r6, #0]
 8004a06:	4621      	mov	r1, r4
 8004a08:	4628      	mov	r0, r5
 8004a0a:	f000 fba5 	bl	8005158 <_sbrk_r>
 8004a0e:	1c43      	adds	r3, r0, #1
 8004a10:	d103      	bne.n	8004a1a <sbrk_aligned+0x26>
 8004a12:	f04f 34ff 	mov.w	r4, #4294967295
 8004a16:	4620      	mov	r0, r4
 8004a18:	bd70      	pop	{r4, r5, r6, pc}
 8004a1a:	1cc4      	adds	r4, r0, #3
 8004a1c:	f024 0403 	bic.w	r4, r4, #3
 8004a20:	42a0      	cmp	r0, r4
 8004a22:	d0f8      	beq.n	8004a16 <sbrk_aligned+0x22>
 8004a24:	1a21      	subs	r1, r4, r0
 8004a26:	4628      	mov	r0, r5
 8004a28:	f000 fb96 	bl	8005158 <_sbrk_r>
 8004a2c:	3001      	adds	r0, #1
 8004a2e:	d1f2      	bne.n	8004a16 <sbrk_aligned+0x22>
 8004a30:	e7ef      	b.n	8004a12 <sbrk_aligned+0x1e>
 8004a32:	bf00      	nop
 8004a34:	20000d9c 	.word	0x20000d9c

08004a38 <_malloc_r>:
 8004a38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a3c:	1ccd      	adds	r5, r1, #3
 8004a3e:	f025 0503 	bic.w	r5, r5, #3
 8004a42:	3508      	adds	r5, #8
 8004a44:	2d0c      	cmp	r5, #12
 8004a46:	bf38      	it	cc
 8004a48:	250c      	movcc	r5, #12
 8004a4a:	2d00      	cmp	r5, #0
 8004a4c:	4606      	mov	r6, r0
 8004a4e:	db01      	blt.n	8004a54 <_malloc_r+0x1c>
 8004a50:	42a9      	cmp	r1, r5
 8004a52:	d904      	bls.n	8004a5e <_malloc_r+0x26>
 8004a54:	230c      	movs	r3, #12
 8004a56:	6033      	str	r3, [r6, #0]
 8004a58:	2000      	movs	r0, #0
 8004a5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a5e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004b34 <_malloc_r+0xfc>
 8004a62:	f000 f869 	bl	8004b38 <__malloc_lock>
 8004a66:	f8d8 3000 	ldr.w	r3, [r8]
 8004a6a:	461c      	mov	r4, r3
 8004a6c:	bb44      	cbnz	r4, 8004ac0 <_malloc_r+0x88>
 8004a6e:	4629      	mov	r1, r5
 8004a70:	4630      	mov	r0, r6
 8004a72:	f7ff ffbf 	bl	80049f4 <sbrk_aligned>
 8004a76:	1c43      	adds	r3, r0, #1
 8004a78:	4604      	mov	r4, r0
 8004a7a:	d158      	bne.n	8004b2e <_malloc_r+0xf6>
 8004a7c:	f8d8 4000 	ldr.w	r4, [r8]
 8004a80:	4627      	mov	r7, r4
 8004a82:	2f00      	cmp	r7, #0
 8004a84:	d143      	bne.n	8004b0e <_malloc_r+0xd6>
 8004a86:	2c00      	cmp	r4, #0
 8004a88:	d04b      	beq.n	8004b22 <_malloc_r+0xea>
 8004a8a:	6823      	ldr	r3, [r4, #0]
 8004a8c:	4639      	mov	r1, r7
 8004a8e:	4630      	mov	r0, r6
 8004a90:	eb04 0903 	add.w	r9, r4, r3
 8004a94:	f000 fb60 	bl	8005158 <_sbrk_r>
 8004a98:	4581      	cmp	r9, r0
 8004a9a:	d142      	bne.n	8004b22 <_malloc_r+0xea>
 8004a9c:	6821      	ldr	r1, [r4, #0]
 8004a9e:	4630      	mov	r0, r6
 8004aa0:	1a6d      	subs	r5, r5, r1
 8004aa2:	4629      	mov	r1, r5
 8004aa4:	f7ff ffa6 	bl	80049f4 <sbrk_aligned>
 8004aa8:	3001      	adds	r0, #1
 8004aaa:	d03a      	beq.n	8004b22 <_malloc_r+0xea>
 8004aac:	6823      	ldr	r3, [r4, #0]
 8004aae:	442b      	add	r3, r5
 8004ab0:	6023      	str	r3, [r4, #0]
 8004ab2:	f8d8 3000 	ldr.w	r3, [r8]
 8004ab6:	685a      	ldr	r2, [r3, #4]
 8004ab8:	bb62      	cbnz	r2, 8004b14 <_malloc_r+0xdc>
 8004aba:	f8c8 7000 	str.w	r7, [r8]
 8004abe:	e00f      	b.n	8004ae0 <_malloc_r+0xa8>
 8004ac0:	6822      	ldr	r2, [r4, #0]
 8004ac2:	1b52      	subs	r2, r2, r5
 8004ac4:	d420      	bmi.n	8004b08 <_malloc_r+0xd0>
 8004ac6:	2a0b      	cmp	r2, #11
 8004ac8:	d917      	bls.n	8004afa <_malloc_r+0xc2>
 8004aca:	1961      	adds	r1, r4, r5
 8004acc:	42a3      	cmp	r3, r4
 8004ace:	6025      	str	r5, [r4, #0]
 8004ad0:	bf18      	it	ne
 8004ad2:	6059      	strne	r1, [r3, #4]
 8004ad4:	6863      	ldr	r3, [r4, #4]
 8004ad6:	bf08      	it	eq
 8004ad8:	f8c8 1000 	streq.w	r1, [r8]
 8004adc:	5162      	str	r2, [r4, r5]
 8004ade:	604b      	str	r3, [r1, #4]
 8004ae0:	4630      	mov	r0, r6
 8004ae2:	f000 f82f 	bl	8004b44 <__malloc_unlock>
 8004ae6:	f104 000b 	add.w	r0, r4, #11
 8004aea:	1d23      	adds	r3, r4, #4
 8004aec:	f020 0007 	bic.w	r0, r0, #7
 8004af0:	1ac2      	subs	r2, r0, r3
 8004af2:	bf1c      	itt	ne
 8004af4:	1a1b      	subne	r3, r3, r0
 8004af6:	50a3      	strne	r3, [r4, r2]
 8004af8:	e7af      	b.n	8004a5a <_malloc_r+0x22>
 8004afa:	6862      	ldr	r2, [r4, #4]
 8004afc:	42a3      	cmp	r3, r4
 8004afe:	bf0c      	ite	eq
 8004b00:	f8c8 2000 	streq.w	r2, [r8]
 8004b04:	605a      	strne	r2, [r3, #4]
 8004b06:	e7eb      	b.n	8004ae0 <_malloc_r+0xa8>
 8004b08:	4623      	mov	r3, r4
 8004b0a:	6864      	ldr	r4, [r4, #4]
 8004b0c:	e7ae      	b.n	8004a6c <_malloc_r+0x34>
 8004b0e:	463c      	mov	r4, r7
 8004b10:	687f      	ldr	r7, [r7, #4]
 8004b12:	e7b6      	b.n	8004a82 <_malloc_r+0x4a>
 8004b14:	461a      	mov	r2, r3
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	42a3      	cmp	r3, r4
 8004b1a:	d1fb      	bne.n	8004b14 <_malloc_r+0xdc>
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	6053      	str	r3, [r2, #4]
 8004b20:	e7de      	b.n	8004ae0 <_malloc_r+0xa8>
 8004b22:	230c      	movs	r3, #12
 8004b24:	4630      	mov	r0, r6
 8004b26:	6033      	str	r3, [r6, #0]
 8004b28:	f000 f80c 	bl	8004b44 <__malloc_unlock>
 8004b2c:	e794      	b.n	8004a58 <_malloc_r+0x20>
 8004b2e:	6005      	str	r5, [r0, #0]
 8004b30:	e7d6      	b.n	8004ae0 <_malloc_r+0xa8>
 8004b32:	bf00      	nop
 8004b34:	20000da0 	.word	0x20000da0

08004b38 <__malloc_lock>:
 8004b38:	4801      	ldr	r0, [pc, #4]	@ (8004b40 <__malloc_lock+0x8>)
 8004b3a:	f7ff bf03 	b.w	8004944 <__retarget_lock_acquire_recursive>
 8004b3e:	bf00      	nop
 8004b40:	20000d98 	.word	0x20000d98

08004b44 <__malloc_unlock>:
 8004b44:	4801      	ldr	r0, [pc, #4]	@ (8004b4c <__malloc_unlock+0x8>)
 8004b46:	f7ff befe 	b.w	8004946 <__retarget_lock_release_recursive>
 8004b4a:	bf00      	nop
 8004b4c:	20000d98 	.word	0x20000d98

08004b50 <__ssputs_r>:
 8004b50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b54:	461f      	mov	r7, r3
 8004b56:	688e      	ldr	r6, [r1, #8]
 8004b58:	4682      	mov	sl, r0
 8004b5a:	42be      	cmp	r6, r7
 8004b5c:	460c      	mov	r4, r1
 8004b5e:	4690      	mov	r8, r2
 8004b60:	680b      	ldr	r3, [r1, #0]
 8004b62:	d82d      	bhi.n	8004bc0 <__ssputs_r+0x70>
 8004b64:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004b68:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004b6c:	d026      	beq.n	8004bbc <__ssputs_r+0x6c>
 8004b6e:	6965      	ldr	r5, [r4, #20]
 8004b70:	6909      	ldr	r1, [r1, #16]
 8004b72:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004b76:	eba3 0901 	sub.w	r9, r3, r1
 8004b7a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004b7e:	1c7b      	adds	r3, r7, #1
 8004b80:	444b      	add	r3, r9
 8004b82:	106d      	asrs	r5, r5, #1
 8004b84:	429d      	cmp	r5, r3
 8004b86:	bf38      	it	cc
 8004b88:	461d      	movcc	r5, r3
 8004b8a:	0553      	lsls	r3, r2, #21
 8004b8c:	d527      	bpl.n	8004bde <__ssputs_r+0x8e>
 8004b8e:	4629      	mov	r1, r5
 8004b90:	f7ff ff52 	bl	8004a38 <_malloc_r>
 8004b94:	4606      	mov	r6, r0
 8004b96:	b360      	cbz	r0, 8004bf2 <__ssputs_r+0xa2>
 8004b98:	464a      	mov	r2, r9
 8004b9a:	6921      	ldr	r1, [r4, #16]
 8004b9c:	f7ff fed4 	bl	8004948 <memcpy>
 8004ba0:	89a3      	ldrh	r3, [r4, #12]
 8004ba2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004ba6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004baa:	81a3      	strh	r3, [r4, #12]
 8004bac:	6126      	str	r6, [r4, #16]
 8004bae:	444e      	add	r6, r9
 8004bb0:	6026      	str	r6, [r4, #0]
 8004bb2:	463e      	mov	r6, r7
 8004bb4:	6165      	str	r5, [r4, #20]
 8004bb6:	eba5 0509 	sub.w	r5, r5, r9
 8004bba:	60a5      	str	r5, [r4, #8]
 8004bbc:	42be      	cmp	r6, r7
 8004bbe:	d900      	bls.n	8004bc2 <__ssputs_r+0x72>
 8004bc0:	463e      	mov	r6, r7
 8004bc2:	4632      	mov	r2, r6
 8004bc4:	4641      	mov	r1, r8
 8004bc6:	6820      	ldr	r0, [r4, #0]
 8004bc8:	f000 faac 	bl	8005124 <memmove>
 8004bcc:	2000      	movs	r0, #0
 8004bce:	68a3      	ldr	r3, [r4, #8]
 8004bd0:	1b9b      	subs	r3, r3, r6
 8004bd2:	60a3      	str	r3, [r4, #8]
 8004bd4:	6823      	ldr	r3, [r4, #0]
 8004bd6:	4433      	add	r3, r6
 8004bd8:	6023      	str	r3, [r4, #0]
 8004bda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bde:	462a      	mov	r2, r5
 8004be0:	f000 fad8 	bl	8005194 <_realloc_r>
 8004be4:	4606      	mov	r6, r0
 8004be6:	2800      	cmp	r0, #0
 8004be8:	d1e0      	bne.n	8004bac <__ssputs_r+0x5c>
 8004bea:	4650      	mov	r0, sl
 8004bec:	6921      	ldr	r1, [r4, #16]
 8004bee:	f7ff feb9 	bl	8004964 <_free_r>
 8004bf2:	230c      	movs	r3, #12
 8004bf4:	f8ca 3000 	str.w	r3, [sl]
 8004bf8:	89a3      	ldrh	r3, [r4, #12]
 8004bfa:	f04f 30ff 	mov.w	r0, #4294967295
 8004bfe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004c02:	81a3      	strh	r3, [r4, #12]
 8004c04:	e7e9      	b.n	8004bda <__ssputs_r+0x8a>
	...

08004c08 <_svfiprintf_r>:
 8004c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c0c:	4698      	mov	r8, r3
 8004c0e:	898b      	ldrh	r3, [r1, #12]
 8004c10:	4607      	mov	r7, r0
 8004c12:	061b      	lsls	r3, r3, #24
 8004c14:	460d      	mov	r5, r1
 8004c16:	4614      	mov	r4, r2
 8004c18:	b09d      	sub	sp, #116	@ 0x74
 8004c1a:	d510      	bpl.n	8004c3e <_svfiprintf_r+0x36>
 8004c1c:	690b      	ldr	r3, [r1, #16]
 8004c1e:	b973      	cbnz	r3, 8004c3e <_svfiprintf_r+0x36>
 8004c20:	2140      	movs	r1, #64	@ 0x40
 8004c22:	f7ff ff09 	bl	8004a38 <_malloc_r>
 8004c26:	6028      	str	r0, [r5, #0]
 8004c28:	6128      	str	r0, [r5, #16]
 8004c2a:	b930      	cbnz	r0, 8004c3a <_svfiprintf_r+0x32>
 8004c2c:	230c      	movs	r3, #12
 8004c2e:	603b      	str	r3, [r7, #0]
 8004c30:	f04f 30ff 	mov.w	r0, #4294967295
 8004c34:	b01d      	add	sp, #116	@ 0x74
 8004c36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c3a:	2340      	movs	r3, #64	@ 0x40
 8004c3c:	616b      	str	r3, [r5, #20]
 8004c3e:	2300      	movs	r3, #0
 8004c40:	9309      	str	r3, [sp, #36]	@ 0x24
 8004c42:	2320      	movs	r3, #32
 8004c44:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004c48:	2330      	movs	r3, #48	@ 0x30
 8004c4a:	f04f 0901 	mov.w	r9, #1
 8004c4e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004c52:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8004dec <_svfiprintf_r+0x1e4>
 8004c56:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004c5a:	4623      	mov	r3, r4
 8004c5c:	469a      	mov	sl, r3
 8004c5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004c62:	b10a      	cbz	r2, 8004c68 <_svfiprintf_r+0x60>
 8004c64:	2a25      	cmp	r2, #37	@ 0x25
 8004c66:	d1f9      	bne.n	8004c5c <_svfiprintf_r+0x54>
 8004c68:	ebba 0b04 	subs.w	fp, sl, r4
 8004c6c:	d00b      	beq.n	8004c86 <_svfiprintf_r+0x7e>
 8004c6e:	465b      	mov	r3, fp
 8004c70:	4622      	mov	r2, r4
 8004c72:	4629      	mov	r1, r5
 8004c74:	4638      	mov	r0, r7
 8004c76:	f7ff ff6b 	bl	8004b50 <__ssputs_r>
 8004c7a:	3001      	adds	r0, #1
 8004c7c:	f000 80a7 	beq.w	8004dce <_svfiprintf_r+0x1c6>
 8004c80:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004c82:	445a      	add	r2, fp
 8004c84:	9209      	str	r2, [sp, #36]	@ 0x24
 8004c86:	f89a 3000 	ldrb.w	r3, [sl]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	f000 809f 	beq.w	8004dce <_svfiprintf_r+0x1c6>
 8004c90:	2300      	movs	r3, #0
 8004c92:	f04f 32ff 	mov.w	r2, #4294967295
 8004c96:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004c9a:	f10a 0a01 	add.w	sl, sl, #1
 8004c9e:	9304      	str	r3, [sp, #16]
 8004ca0:	9307      	str	r3, [sp, #28]
 8004ca2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004ca6:	931a      	str	r3, [sp, #104]	@ 0x68
 8004ca8:	4654      	mov	r4, sl
 8004caa:	2205      	movs	r2, #5
 8004cac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004cb0:	484e      	ldr	r0, [pc, #312]	@ (8004dec <_svfiprintf_r+0x1e4>)
 8004cb2:	f000 fa61 	bl	8005178 <memchr>
 8004cb6:	9a04      	ldr	r2, [sp, #16]
 8004cb8:	b9d8      	cbnz	r0, 8004cf2 <_svfiprintf_r+0xea>
 8004cba:	06d0      	lsls	r0, r2, #27
 8004cbc:	bf44      	itt	mi
 8004cbe:	2320      	movmi	r3, #32
 8004cc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004cc4:	0711      	lsls	r1, r2, #28
 8004cc6:	bf44      	itt	mi
 8004cc8:	232b      	movmi	r3, #43	@ 0x2b
 8004cca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004cce:	f89a 3000 	ldrb.w	r3, [sl]
 8004cd2:	2b2a      	cmp	r3, #42	@ 0x2a
 8004cd4:	d015      	beq.n	8004d02 <_svfiprintf_r+0xfa>
 8004cd6:	4654      	mov	r4, sl
 8004cd8:	2000      	movs	r0, #0
 8004cda:	f04f 0c0a 	mov.w	ip, #10
 8004cde:	9a07      	ldr	r2, [sp, #28]
 8004ce0:	4621      	mov	r1, r4
 8004ce2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ce6:	3b30      	subs	r3, #48	@ 0x30
 8004ce8:	2b09      	cmp	r3, #9
 8004cea:	d94b      	bls.n	8004d84 <_svfiprintf_r+0x17c>
 8004cec:	b1b0      	cbz	r0, 8004d1c <_svfiprintf_r+0x114>
 8004cee:	9207      	str	r2, [sp, #28]
 8004cf0:	e014      	b.n	8004d1c <_svfiprintf_r+0x114>
 8004cf2:	eba0 0308 	sub.w	r3, r0, r8
 8004cf6:	fa09 f303 	lsl.w	r3, r9, r3
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	46a2      	mov	sl, r4
 8004cfe:	9304      	str	r3, [sp, #16]
 8004d00:	e7d2      	b.n	8004ca8 <_svfiprintf_r+0xa0>
 8004d02:	9b03      	ldr	r3, [sp, #12]
 8004d04:	1d19      	adds	r1, r3, #4
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	9103      	str	r1, [sp, #12]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	bfbb      	ittet	lt
 8004d0e:	425b      	neglt	r3, r3
 8004d10:	f042 0202 	orrlt.w	r2, r2, #2
 8004d14:	9307      	strge	r3, [sp, #28]
 8004d16:	9307      	strlt	r3, [sp, #28]
 8004d18:	bfb8      	it	lt
 8004d1a:	9204      	strlt	r2, [sp, #16]
 8004d1c:	7823      	ldrb	r3, [r4, #0]
 8004d1e:	2b2e      	cmp	r3, #46	@ 0x2e
 8004d20:	d10a      	bne.n	8004d38 <_svfiprintf_r+0x130>
 8004d22:	7863      	ldrb	r3, [r4, #1]
 8004d24:	2b2a      	cmp	r3, #42	@ 0x2a
 8004d26:	d132      	bne.n	8004d8e <_svfiprintf_r+0x186>
 8004d28:	9b03      	ldr	r3, [sp, #12]
 8004d2a:	3402      	adds	r4, #2
 8004d2c:	1d1a      	adds	r2, r3, #4
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	9203      	str	r2, [sp, #12]
 8004d32:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004d36:	9305      	str	r3, [sp, #20]
 8004d38:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8004df0 <_svfiprintf_r+0x1e8>
 8004d3c:	2203      	movs	r2, #3
 8004d3e:	4650      	mov	r0, sl
 8004d40:	7821      	ldrb	r1, [r4, #0]
 8004d42:	f000 fa19 	bl	8005178 <memchr>
 8004d46:	b138      	cbz	r0, 8004d58 <_svfiprintf_r+0x150>
 8004d48:	2240      	movs	r2, #64	@ 0x40
 8004d4a:	9b04      	ldr	r3, [sp, #16]
 8004d4c:	eba0 000a 	sub.w	r0, r0, sl
 8004d50:	4082      	lsls	r2, r0
 8004d52:	4313      	orrs	r3, r2
 8004d54:	3401      	adds	r4, #1
 8004d56:	9304      	str	r3, [sp, #16]
 8004d58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d5c:	2206      	movs	r2, #6
 8004d5e:	4825      	ldr	r0, [pc, #148]	@ (8004df4 <_svfiprintf_r+0x1ec>)
 8004d60:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004d64:	f000 fa08 	bl	8005178 <memchr>
 8004d68:	2800      	cmp	r0, #0
 8004d6a:	d036      	beq.n	8004dda <_svfiprintf_r+0x1d2>
 8004d6c:	4b22      	ldr	r3, [pc, #136]	@ (8004df8 <_svfiprintf_r+0x1f0>)
 8004d6e:	bb1b      	cbnz	r3, 8004db8 <_svfiprintf_r+0x1b0>
 8004d70:	9b03      	ldr	r3, [sp, #12]
 8004d72:	3307      	adds	r3, #7
 8004d74:	f023 0307 	bic.w	r3, r3, #7
 8004d78:	3308      	adds	r3, #8
 8004d7a:	9303      	str	r3, [sp, #12]
 8004d7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d7e:	4433      	add	r3, r6
 8004d80:	9309      	str	r3, [sp, #36]	@ 0x24
 8004d82:	e76a      	b.n	8004c5a <_svfiprintf_r+0x52>
 8004d84:	460c      	mov	r4, r1
 8004d86:	2001      	movs	r0, #1
 8004d88:	fb0c 3202 	mla	r2, ip, r2, r3
 8004d8c:	e7a8      	b.n	8004ce0 <_svfiprintf_r+0xd8>
 8004d8e:	2300      	movs	r3, #0
 8004d90:	f04f 0c0a 	mov.w	ip, #10
 8004d94:	4619      	mov	r1, r3
 8004d96:	3401      	adds	r4, #1
 8004d98:	9305      	str	r3, [sp, #20]
 8004d9a:	4620      	mov	r0, r4
 8004d9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004da0:	3a30      	subs	r2, #48	@ 0x30
 8004da2:	2a09      	cmp	r2, #9
 8004da4:	d903      	bls.n	8004dae <_svfiprintf_r+0x1a6>
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d0c6      	beq.n	8004d38 <_svfiprintf_r+0x130>
 8004daa:	9105      	str	r1, [sp, #20]
 8004dac:	e7c4      	b.n	8004d38 <_svfiprintf_r+0x130>
 8004dae:	4604      	mov	r4, r0
 8004db0:	2301      	movs	r3, #1
 8004db2:	fb0c 2101 	mla	r1, ip, r1, r2
 8004db6:	e7f0      	b.n	8004d9a <_svfiprintf_r+0x192>
 8004db8:	ab03      	add	r3, sp, #12
 8004dba:	9300      	str	r3, [sp, #0]
 8004dbc:	462a      	mov	r2, r5
 8004dbe:	4638      	mov	r0, r7
 8004dc0:	4b0e      	ldr	r3, [pc, #56]	@ (8004dfc <_svfiprintf_r+0x1f4>)
 8004dc2:	a904      	add	r1, sp, #16
 8004dc4:	f3af 8000 	nop.w
 8004dc8:	1c42      	adds	r2, r0, #1
 8004dca:	4606      	mov	r6, r0
 8004dcc:	d1d6      	bne.n	8004d7c <_svfiprintf_r+0x174>
 8004dce:	89ab      	ldrh	r3, [r5, #12]
 8004dd0:	065b      	lsls	r3, r3, #25
 8004dd2:	f53f af2d 	bmi.w	8004c30 <_svfiprintf_r+0x28>
 8004dd6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004dd8:	e72c      	b.n	8004c34 <_svfiprintf_r+0x2c>
 8004dda:	ab03      	add	r3, sp, #12
 8004ddc:	9300      	str	r3, [sp, #0]
 8004dde:	462a      	mov	r2, r5
 8004de0:	4638      	mov	r0, r7
 8004de2:	4b06      	ldr	r3, [pc, #24]	@ (8004dfc <_svfiprintf_r+0x1f4>)
 8004de4:	a904      	add	r1, sp, #16
 8004de6:	f000 f87d 	bl	8004ee4 <_printf_i>
 8004dea:	e7ed      	b.n	8004dc8 <_svfiprintf_r+0x1c0>
 8004dec:	080056ba 	.word	0x080056ba
 8004df0:	080056c0 	.word	0x080056c0
 8004df4:	080056c4 	.word	0x080056c4
 8004df8:	00000000 	.word	0x00000000
 8004dfc:	08004b51 	.word	0x08004b51

08004e00 <_printf_common>:
 8004e00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e04:	4616      	mov	r6, r2
 8004e06:	4698      	mov	r8, r3
 8004e08:	688a      	ldr	r2, [r1, #8]
 8004e0a:	690b      	ldr	r3, [r1, #16]
 8004e0c:	4607      	mov	r7, r0
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	bfb8      	it	lt
 8004e12:	4613      	movlt	r3, r2
 8004e14:	6033      	str	r3, [r6, #0]
 8004e16:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004e1a:	460c      	mov	r4, r1
 8004e1c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004e20:	b10a      	cbz	r2, 8004e26 <_printf_common+0x26>
 8004e22:	3301      	adds	r3, #1
 8004e24:	6033      	str	r3, [r6, #0]
 8004e26:	6823      	ldr	r3, [r4, #0]
 8004e28:	0699      	lsls	r1, r3, #26
 8004e2a:	bf42      	ittt	mi
 8004e2c:	6833      	ldrmi	r3, [r6, #0]
 8004e2e:	3302      	addmi	r3, #2
 8004e30:	6033      	strmi	r3, [r6, #0]
 8004e32:	6825      	ldr	r5, [r4, #0]
 8004e34:	f015 0506 	ands.w	r5, r5, #6
 8004e38:	d106      	bne.n	8004e48 <_printf_common+0x48>
 8004e3a:	f104 0a19 	add.w	sl, r4, #25
 8004e3e:	68e3      	ldr	r3, [r4, #12]
 8004e40:	6832      	ldr	r2, [r6, #0]
 8004e42:	1a9b      	subs	r3, r3, r2
 8004e44:	42ab      	cmp	r3, r5
 8004e46:	dc2b      	bgt.n	8004ea0 <_printf_common+0xa0>
 8004e48:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004e4c:	6822      	ldr	r2, [r4, #0]
 8004e4e:	3b00      	subs	r3, #0
 8004e50:	bf18      	it	ne
 8004e52:	2301      	movne	r3, #1
 8004e54:	0692      	lsls	r2, r2, #26
 8004e56:	d430      	bmi.n	8004eba <_printf_common+0xba>
 8004e58:	4641      	mov	r1, r8
 8004e5a:	4638      	mov	r0, r7
 8004e5c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004e60:	47c8      	blx	r9
 8004e62:	3001      	adds	r0, #1
 8004e64:	d023      	beq.n	8004eae <_printf_common+0xae>
 8004e66:	6823      	ldr	r3, [r4, #0]
 8004e68:	6922      	ldr	r2, [r4, #16]
 8004e6a:	f003 0306 	and.w	r3, r3, #6
 8004e6e:	2b04      	cmp	r3, #4
 8004e70:	bf14      	ite	ne
 8004e72:	2500      	movne	r5, #0
 8004e74:	6833      	ldreq	r3, [r6, #0]
 8004e76:	f04f 0600 	mov.w	r6, #0
 8004e7a:	bf08      	it	eq
 8004e7c:	68e5      	ldreq	r5, [r4, #12]
 8004e7e:	f104 041a 	add.w	r4, r4, #26
 8004e82:	bf08      	it	eq
 8004e84:	1aed      	subeq	r5, r5, r3
 8004e86:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004e8a:	bf08      	it	eq
 8004e8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004e90:	4293      	cmp	r3, r2
 8004e92:	bfc4      	itt	gt
 8004e94:	1a9b      	subgt	r3, r3, r2
 8004e96:	18ed      	addgt	r5, r5, r3
 8004e98:	42b5      	cmp	r5, r6
 8004e9a:	d11a      	bne.n	8004ed2 <_printf_common+0xd2>
 8004e9c:	2000      	movs	r0, #0
 8004e9e:	e008      	b.n	8004eb2 <_printf_common+0xb2>
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	4652      	mov	r2, sl
 8004ea4:	4641      	mov	r1, r8
 8004ea6:	4638      	mov	r0, r7
 8004ea8:	47c8      	blx	r9
 8004eaa:	3001      	adds	r0, #1
 8004eac:	d103      	bne.n	8004eb6 <_printf_common+0xb6>
 8004eae:	f04f 30ff 	mov.w	r0, #4294967295
 8004eb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004eb6:	3501      	adds	r5, #1
 8004eb8:	e7c1      	b.n	8004e3e <_printf_common+0x3e>
 8004eba:	2030      	movs	r0, #48	@ 0x30
 8004ebc:	18e1      	adds	r1, r4, r3
 8004ebe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004ec2:	1c5a      	adds	r2, r3, #1
 8004ec4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004ec8:	4422      	add	r2, r4
 8004eca:	3302      	adds	r3, #2
 8004ecc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004ed0:	e7c2      	b.n	8004e58 <_printf_common+0x58>
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	4622      	mov	r2, r4
 8004ed6:	4641      	mov	r1, r8
 8004ed8:	4638      	mov	r0, r7
 8004eda:	47c8      	blx	r9
 8004edc:	3001      	adds	r0, #1
 8004ede:	d0e6      	beq.n	8004eae <_printf_common+0xae>
 8004ee0:	3601      	adds	r6, #1
 8004ee2:	e7d9      	b.n	8004e98 <_printf_common+0x98>

08004ee4 <_printf_i>:
 8004ee4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ee8:	7e0f      	ldrb	r7, [r1, #24]
 8004eea:	4691      	mov	r9, r2
 8004eec:	2f78      	cmp	r7, #120	@ 0x78
 8004eee:	4680      	mov	r8, r0
 8004ef0:	460c      	mov	r4, r1
 8004ef2:	469a      	mov	sl, r3
 8004ef4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004ef6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004efa:	d807      	bhi.n	8004f0c <_printf_i+0x28>
 8004efc:	2f62      	cmp	r7, #98	@ 0x62
 8004efe:	d80a      	bhi.n	8004f16 <_printf_i+0x32>
 8004f00:	2f00      	cmp	r7, #0
 8004f02:	f000 80d3 	beq.w	80050ac <_printf_i+0x1c8>
 8004f06:	2f58      	cmp	r7, #88	@ 0x58
 8004f08:	f000 80ba 	beq.w	8005080 <_printf_i+0x19c>
 8004f0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004f10:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004f14:	e03a      	b.n	8004f8c <_printf_i+0xa8>
 8004f16:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004f1a:	2b15      	cmp	r3, #21
 8004f1c:	d8f6      	bhi.n	8004f0c <_printf_i+0x28>
 8004f1e:	a101      	add	r1, pc, #4	@ (adr r1, 8004f24 <_printf_i+0x40>)
 8004f20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004f24:	08004f7d 	.word	0x08004f7d
 8004f28:	08004f91 	.word	0x08004f91
 8004f2c:	08004f0d 	.word	0x08004f0d
 8004f30:	08004f0d 	.word	0x08004f0d
 8004f34:	08004f0d 	.word	0x08004f0d
 8004f38:	08004f0d 	.word	0x08004f0d
 8004f3c:	08004f91 	.word	0x08004f91
 8004f40:	08004f0d 	.word	0x08004f0d
 8004f44:	08004f0d 	.word	0x08004f0d
 8004f48:	08004f0d 	.word	0x08004f0d
 8004f4c:	08004f0d 	.word	0x08004f0d
 8004f50:	08005093 	.word	0x08005093
 8004f54:	08004fbb 	.word	0x08004fbb
 8004f58:	0800504d 	.word	0x0800504d
 8004f5c:	08004f0d 	.word	0x08004f0d
 8004f60:	08004f0d 	.word	0x08004f0d
 8004f64:	080050b5 	.word	0x080050b5
 8004f68:	08004f0d 	.word	0x08004f0d
 8004f6c:	08004fbb 	.word	0x08004fbb
 8004f70:	08004f0d 	.word	0x08004f0d
 8004f74:	08004f0d 	.word	0x08004f0d
 8004f78:	08005055 	.word	0x08005055
 8004f7c:	6833      	ldr	r3, [r6, #0]
 8004f7e:	1d1a      	adds	r2, r3, #4
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	6032      	str	r2, [r6, #0]
 8004f84:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004f88:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	e09e      	b.n	80050ce <_printf_i+0x1ea>
 8004f90:	6833      	ldr	r3, [r6, #0]
 8004f92:	6820      	ldr	r0, [r4, #0]
 8004f94:	1d19      	adds	r1, r3, #4
 8004f96:	6031      	str	r1, [r6, #0]
 8004f98:	0606      	lsls	r6, r0, #24
 8004f9a:	d501      	bpl.n	8004fa0 <_printf_i+0xbc>
 8004f9c:	681d      	ldr	r5, [r3, #0]
 8004f9e:	e003      	b.n	8004fa8 <_printf_i+0xc4>
 8004fa0:	0645      	lsls	r5, r0, #25
 8004fa2:	d5fb      	bpl.n	8004f9c <_printf_i+0xb8>
 8004fa4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004fa8:	2d00      	cmp	r5, #0
 8004faa:	da03      	bge.n	8004fb4 <_printf_i+0xd0>
 8004fac:	232d      	movs	r3, #45	@ 0x2d
 8004fae:	426d      	negs	r5, r5
 8004fb0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004fb4:	230a      	movs	r3, #10
 8004fb6:	4859      	ldr	r0, [pc, #356]	@ (800511c <_printf_i+0x238>)
 8004fb8:	e011      	b.n	8004fde <_printf_i+0xfa>
 8004fba:	6821      	ldr	r1, [r4, #0]
 8004fbc:	6833      	ldr	r3, [r6, #0]
 8004fbe:	0608      	lsls	r0, r1, #24
 8004fc0:	f853 5b04 	ldr.w	r5, [r3], #4
 8004fc4:	d402      	bmi.n	8004fcc <_printf_i+0xe8>
 8004fc6:	0649      	lsls	r1, r1, #25
 8004fc8:	bf48      	it	mi
 8004fca:	b2ad      	uxthmi	r5, r5
 8004fcc:	2f6f      	cmp	r7, #111	@ 0x6f
 8004fce:	6033      	str	r3, [r6, #0]
 8004fd0:	bf14      	ite	ne
 8004fd2:	230a      	movne	r3, #10
 8004fd4:	2308      	moveq	r3, #8
 8004fd6:	4851      	ldr	r0, [pc, #324]	@ (800511c <_printf_i+0x238>)
 8004fd8:	2100      	movs	r1, #0
 8004fda:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004fde:	6866      	ldr	r6, [r4, #4]
 8004fe0:	2e00      	cmp	r6, #0
 8004fe2:	bfa8      	it	ge
 8004fe4:	6821      	ldrge	r1, [r4, #0]
 8004fe6:	60a6      	str	r6, [r4, #8]
 8004fe8:	bfa4      	itt	ge
 8004fea:	f021 0104 	bicge.w	r1, r1, #4
 8004fee:	6021      	strge	r1, [r4, #0]
 8004ff0:	b90d      	cbnz	r5, 8004ff6 <_printf_i+0x112>
 8004ff2:	2e00      	cmp	r6, #0
 8004ff4:	d04b      	beq.n	800508e <_printf_i+0x1aa>
 8004ff6:	4616      	mov	r6, r2
 8004ff8:	fbb5 f1f3 	udiv	r1, r5, r3
 8004ffc:	fb03 5711 	mls	r7, r3, r1, r5
 8005000:	5dc7      	ldrb	r7, [r0, r7]
 8005002:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005006:	462f      	mov	r7, r5
 8005008:	42bb      	cmp	r3, r7
 800500a:	460d      	mov	r5, r1
 800500c:	d9f4      	bls.n	8004ff8 <_printf_i+0x114>
 800500e:	2b08      	cmp	r3, #8
 8005010:	d10b      	bne.n	800502a <_printf_i+0x146>
 8005012:	6823      	ldr	r3, [r4, #0]
 8005014:	07df      	lsls	r7, r3, #31
 8005016:	d508      	bpl.n	800502a <_printf_i+0x146>
 8005018:	6923      	ldr	r3, [r4, #16]
 800501a:	6861      	ldr	r1, [r4, #4]
 800501c:	4299      	cmp	r1, r3
 800501e:	bfde      	ittt	le
 8005020:	2330      	movle	r3, #48	@ 0x30
 8005022:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005026:	f106 36ff 	addle.w	r6, r6, #4294967295
 800502a:	1b92      	subs	r2, r2, r6
 800502c:	6122      	str	r2, [r4, #16]
 800502e:	464b      	mov	r3, r9
 8005030:	4621      	mov	r1, r4
 8005032:	4640      	mov	r0, r8
 8005034:	f8cd a000 	str.w	sl, [sp]
 8005038:	aa03      	add	r2, sp, #12
 800503a:	f7ff fee1 	bl	8004e00 <_printf_common>
 800503e:	3001      	adds	r0, #1
 8005040:	d14a      	bne.n	80050d8 <_printf_i+0x1f4>
 8005042:	f04f 30ff 	mov.w	r0, #4294967295
 8005046:	b004      	add	sp, #16
 8005048:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800504c:	6823      	ldr	r3, [r4, #0]
 800504e:	f043 0320 	orr.w	r3, r3, #32
 8005052:	6023      	str	r3, [r4, #0]
 8005054:	2778      	movs	r7, #120	@ 0x78
 8005056:	4832      	ldr	r0, [pc, #200]	@ (8005120 <_printf_i+0x23c>)
 8005058:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800505c:	6823      	ldr	r3, [r4, #0]
 800505e:	6831      	ldr	r1, [r6, #0]
 8005060:	061f      	lsls	r7, r3, #24
 8005062:	f851 5b04 	ldr.w	r5, [r1], #4
 8005066:	d402      	bmi.n	800506e <_printf_i+0x18a>
 8005068:	065f      	lsls	r7, r3, #25
 800506a:	bf48      	it	mi
 800506c:	b2ad      	uxthmi	r5, r5
 800506e:	6031      	str	r1, [r6, #0]
 8005070:	07d9      	lsls	r1, r3, #31
 8005072:	bf44      	itt	mi
 8005074:	f043 0320 	orrmi.w	r3, r3, #32
 8005078:	6023      	strmi	r3, [r4, #0]
 800507a:	b11d      	cbz	r5, 8005084 <_printf_i+0x1a0>
 800507c:	2310      	movs	r3, #16
 800507e:	e7ab      	b.n	8004fd8 <_printf_i+0xf4>
 8005080:	4826      	ldr	r0, [pc, #152]	@ (800511c <_printf_i+0x238>)
 8005082:	e7e9      	b.n	8005058 <_printf_i+0x174>
 8005084:	6823      	ldr	r3, [r4, #0]
 8005086:	f023 0320 	bic.w	r3, r3, #32
 800508a:	6023      	str	r3, [r4, #0]
 800508c:	e7f6      	b.n	800507c <_printf_i+0x198>
 800508e:	4616      	mov	r6, r2
 8005090:	e7bd      	b.n	800500e <_printf_i+0x12a>
 8005092:	6833      	ldr	r3, [r6, #0]
 8005094:	6825      	ldr	r5, [r4, #0]
 8005096:	1d18      	adds	r0, r3, #4
 8005098:	6961      	ldr	r1, [r4, #20]
 800509a:	6030      	str	r0, [r6, #0]
 800509c:	062e      	lsls	r6, r5, #24
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	d501      	bpl.n	80050a6 <_printf_i+0x1c2>
 80050a2:	6019      	str	r1, [r3, #0]
 80050a4:	e002      	b.n	80050ac <_printf_i+0x1c8>
 80050a6:	0668      	lsls	r0, r5, #25
 80050a8:	d5fb      	bpl.n	80050a2 <_printf_i+0x1be>
 80050aa:	8019      	strh	r1, [r3, #0]
 80050ac:	2300      	movs	r3, #0
 80050ae:	4616      	mov	r6, r2
 80050b0:	6123      	str	r3, [r4, #16]
 80050b2:	e7bc      	b.n	800502e <_printf_i+0x14a>
 80050b4:	6833      	ldr	r3, [r6, #0]
 80050b6:	2100      	movs	r1, #0
 80050b8:	1d1a      	adds	r2, r3, #4
 80050ba:	6032      	str	r2, [r6, #0]
 80050bc:	681e      	ldr	r6, [r3, #0]
 80050be:	6862      	ldr	r2, [r4, #4]
 80050c0:	4630      	mov	r0, r6
 80050c2:	f000 f859 	bl	8005178 <memchr>
 80050c6:	b108      	cbz	r0, 80050cc <_printf_i+0x1e8>
 80050c8:	1b80      	subs	r0, r0, r6
 80050ca:	6060      	str	r0, [r4, #4]
 80050cc:	6863      	ldr	r3, [r4, #4]
 80050ce:	6123      	str	r3, [r4, #16]
 80050d0:	2300      	movs	r3, #0
 80050d2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80050d6:	e7aa      	b.n	800502e <_printf_i+0x14a>
 80050d8:	4632      	mov	r2, r6
 80050da:	4649      	mov	r1, r9
 80050dc:	4640      	mov	r0, r8
 80050de:	6923      	ldr	r3, [r4, #16]
 80050e0:	47d0      	blx	sl
 80050e2:	3001      	adds	r0, #1
 80050e4:	d0ad      	beq.n	8005042 <_printf_i+0x15e>
 80050e6:	6823      	ldr	r3, [r4, #0]
 80050e8:	079b      	lsls	r3, r3, #30
 80050ea:	d413      	bmi.n	8005114 <_printf_i+0x230>
 80050ec:	68e0      	ldr	r0, [r4, #12]
 80050ee:	9b03      	ldr	r3, [sp, #12]
 80050f0:	4298      	cmp	r0, r3
 80050f2:	bfb8      	it	lt
 80050f4:	4618      	movlt	r0, r3
 80050f6:	e7a6      	b.n	8005046 <_printf_i+0x162>
 80050f8:	2301      	movs	r3, #1
 80050fa:	4632      	mov	r2, r6
 80050fc:	4649      	mov	r1, r9
 80050fe:	4640      	mov	r0, r8
 8005100:	47d0      	blx	sl
 8005102:	3001      	adds	r0, #1
 8005104:	d09d      	beq.n	8005042 <_printf_i+0x15e>
 8005106:	3501      	adds	r5, #1
 8005108:	68e3      	ldr	r3, [r4, #12]
 800510a:	9903      	ldr	r1, [sp, #12]
 800510c:	1a5b      	subs	r3, r3, r1
 800510e:	42ab      	cmp	r3, r5
 8005110:	dcf2      	bgt.n	80050f8 <_printf_i+0x214>
 8005112:	e7eb      	b.n	80050ec <_printf_i+0x208>
 8005114:	2500      	movs	r5, #0
 8005116:	f104 0619 	add.w	r6, r4, #25
 800511a:	e7f5      	b.n	8005108 <_printf_i+0x224>
 800511c:	080056cb 	.word	0x080056cb
 8005120:	080056dc 	.word	0x080056dc

08005124 <memmove>:
 8005124:	4288      	cmp	r0, r1
 8005126:	b510      	push	{r4, lr}
 8005128:	eb01 0402 	add.w	r4, r1, r2
 800512c:	d902      	bls.n	8005134 <memmove+0x10>
 800512e:	4284      	cmp	r4, r0
 8005130:	4623      	mov	r3, r4
 8005132:	d807      	bhi.n	8005144 <memmove+0x20>
 8005134:	1e43      	subs	r3, r0, #1
 8005136:	42a1      	cmp	r1, r4
 8005138:	d008      	beq.n	800514c <memmove+0x28>
 800513a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800513e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005142:	e7f8      	b.n	8005136 <memmove+0x12>
 8005144:	4601      	mov	r1, r0
 8005146:	4402      	add	r2, r0
 8005148:	428a      	cmp	r2, r1
 800514a:	d100      	bne.n	800514e <memmove+0x2a>
 800514c:	bd10      	pop	{r4, pc}
 800514e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005152:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005156:	e7f7      	b.n	8005148 <memmove+0x24>

08005158 <_sbrk_r>:
 8005158:	b538      	push	{r3, r4, r5, lr}
 800515a:	2300      	movs	r3, #0
 800515c:	4d05      	ldr	r5, [pc, #20]	@ (8005174 <_sbrk_r+0x1c>)
 800515e:	4604      	mov	r4, r0
 8005160:	4608      	mov	r0, r1
 8005162:	602b      	str	r3, [r5, #0]
 8005164:	f7fb f8d6 	bl	8000314 <_sbrk>
 8005168:	1c43      	adds	r3, r0, #1
 800516a:	d102      	bne.n	8005172 <_sbrk_r+0x1a>
 800516c:	682b      	ldr	r3, [r5, #0]
 800516e:	b103      	cbz	r3, 8005172 <_sbrk_r+0x1a>
 8005170:	6023      	str	r3, [r4, #0]
 8005172:	bd38      	pop	{r3, r4, r5, pc}
 8005174:	20000d94 	.word	0x20000d94

08005178 <memchr>:
 8005178:	4603      	mov	r3, r0
 800517a:	b510      	push	{r4, lr}
 800517c:	b2c9      	uxtb	r1, r1
 800517e:	4402      	add	r2, r0
 8005180:	4293      	cmp	r3, r2
 8005182:	4618      	mov	r0, r3
 8005184:	d101      	bne.n	800518a <memchr+0x12>
 8005186:	2000      	movs	r0, #0
 8005188:	e003      	b.n	8005192 <memchr+0x1a>
 800518a:	7804      	ldrb	r4, [r0, #0]
 800518c:	3301      	adds	r3, #1
 800518e:	428c      	cmp	r4, r1
 8005190:	d1f6      	bne.n	8005180 <memchr+0x8>
 8005192:	bd10      	pop	{r4, pc}

08005194 <_realloc_r>:
 8005194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005198:	4680      	mov	r8, r0
 800519a:	4615      	mov	r5, r2
 800519c:	460c      	mov	r4, r1
 800519e:	b921      	cbnz	r1, 80051aa <_realloc_r+0x16>
 80051a0:	4611      	mov	r1, r2
 80051a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80051a6:	f7ff bc47 	b.w	8004a38 <_malloc_r>
 80051aa:	b92a      	cbnz	r2, 80051b8 <_realloc_r+0x24>
 80051ac:	f7ff fbda 	bl	8004964 <_free_r>
 80051b0:	2400      	movs	r4, #0
 80051b2:	4620      	mov	r0, r4
 80051b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80051b8:	f000 f81a 	bl	80051f0 <_malloc_usable_size_r>
 80051bc:	4285      	cmp	r5, r0
 80051be:	4606      	mov	r6, r0
 80051c0:	d802      	bhi.n	80051c8 <_realloc_r+0x34>
 80051c2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80051c6:	d8f4      	bhi.n	80051b2 <_realloc_r+0x1e>
 80051c8:	4629      	mov	r1, r5
 80051ca:	4640      	mov	r0, r8
 80051cc:	f7ff fc34 	bl	8004a38 <_malloc_r>
 80051d0:	4607      	mov	r7, r0
 80051d2:	2800      	cmp	r0, #0
 80051d4:	d0ec      	beq.n	80051b0 <_realloc_r+0x1c>
 80051d6:	42b5      	cmp	r5, r6
 80051d8:	462a      	mov	r2, r5
 80051da:	4621      	mov	r1, r4
 80051dc:	bf28      	it	cs
 80051de:	4632      	movcs	r2, r6
 80051e0:	f7ff fbb2 	bl	8004948 <memcpy>
 80051e4:	4621      	mov	r1, r4
 80051e6:	4640      	mov	r0, r8
 80051e8:	f7ff fbbc 	bl	8004964 <_free_r>
 80051ec:	463c      	mov	r4, r7
 80051ee:	e7e0      	b.n	80051b2 <_realloc_r+0x1e>

080051f0 <_malloc_usable_size_r>:
 80051f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80051f4:	1f18      	subs	r0, r3, #4
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	bfbc      	itt	lt
 80051fa:	580b      	ldrlt	r3, [r1, r0]
 80051fc:	18c0      	addlt	r0, r0, r3
 80051fe:	4770      	bx	lr

08005200 <_init>:
 8005200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005202:	bf00      	nop
 8005204:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005206:	bc08      	pop	{r3}
 8005208:	469e      	mov	lr, r3
 800520a:	4770      	bx	lr

0800520c <_fini>:
 800520c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800520e:	bf00      	nop
 8005210:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005212:	bc08      	pop	{r3}
 8005214:	469e      	mov	lr, r3
 8005216:	4770      	bx	lr
