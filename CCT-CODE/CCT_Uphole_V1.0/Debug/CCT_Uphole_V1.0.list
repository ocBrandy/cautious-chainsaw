
CCT_Uphole_V1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042d4  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000428  080044b8  080044b8  000054b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048e0  080048e0  00006020  2**0
                  CONTENTS
  4 .ARM          00000000  080048e0  080048e0  00006020  2**0
                  CONTENTS
  5 .preinit_array 00000000  080048e0  080048e0  00006020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048e0  080048e0  000058e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080048e4  080048e4  000058e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000020  20000000  080048e8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000654  20000020  08004908  00006020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000674  08004908  00006674  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006020  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cbb4  00000000  00000000  00006049  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024c7  00000000  00000000  00012bfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d48  00000000  00000000  000150c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a4b  00000000  00000000  00015e10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019c3b  00000000  00000000  0001685b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011a56  00000000  00000000  00030496  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095947  00000000  00000000  00041eec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d7833  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000355c  00000000  00000000  000d7878  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000dadd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000020 	.word	0x20000020
 8000200:	00000000 	.word	0x00000000
 8000204:	080044a0 	.word	0x080044a0

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000024 	.word	0x20000024
 8000220:	080044a0 	.word	0x080044a0

08000224 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000224:	b480      	push	{r7}
 8000226:	b085      	sub	sp, #20
 8000228:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800022a:	4b13      	ldr	r3, [pc, #76]	@ (8000278 <HAL_MspInit+0x54>)
 800022c:	699b      	ldr	r3, [r3, #24]
 800022e:	4a12      	ldr	r2, [pc, #72]	@ (8000278 <HAL_MspInit+0x54>)
 8000230:	f043 0301 	orr.w	r3, r3, #1
 8000234:	6193      	str	r3, [r2, #24]
 8000236:	4b10      	ldr	r3, [pc, #64]	@ (8000278 <HAL_MspInit+0x54>)
 8000238:	699b      	ldr	r3, [r3, #24]
 800023a:	f003 0301 	and.w	r3, r3, #1
 800023e:	60bb      	str	r3, [r7, #8]
 8000240:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000242:	4b0d      	ldr	r3, [pc, #52]	@ (8000278 <HAL_MspInit+0x54>)
 8000244:	69db      	ldr	r3, [r3, #28]
 8000246:	4a0c      	ldr	r2, [pc, #48]	@ (8000278 <HAL_MspInit+0x54>)
 8000248:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800024c:	61d3      	str	r3, [r2, #28]
 800024e:	4b0a      	ldr	r3, [pc, #40]	@ (8000278 <HAL_MspInit+0x54>)
 8000250:	69db      	ldr	r3, [r3, #28]
 8000252:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000256:	607b      	str	r3, [r7, #4]
 8000258:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** ENABLE: Full SWJ (JTAG-DP + SW-DP): Reset State
  */
  __HAL_AFIO_REMAP_SWJ_ENABLE();
 800025a:	4b08      	ldr	r3, [pc, #32]	@ (800027c <HAL_MspInit+0x58>)
 800025c:	685b      	ldr	r3, [r3, #4]
 800025e:	60fb      	str	r3, [r7, #12]
 8000260:	68fb      	ldr	r3, [r7, #12]
 8000262:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000266:	60fb      	str	r3, [r7, #12]
 8000268:	4a04      	ldr	r2, [pc, #16]	@ (800027c <HAL_MspInit+0x58>)
 800026a:	68fb      	ldr	r3, [r7, #12]
 800026c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800026e:	bf00      	nop
 8000270:	3714      	adds	r7, #20
 8000272:	46bd      	mov	sp, r7
 8000274:	bc80      	pop	{r7}
 8000276:	4770      	bx	lr
 8000278:	40021000 	.word	0x40021000
 800027c:	40010000 	.word	0x40010000

08000280 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000280:	b480      	push	{r7}
 8000282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000284:	bf00      	nop
 8000286:	e7fd      	b.n	8000284 <NMI_Handler+0x4>

08000288 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000288:	b480      	push	{r7}
 800028a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800028c:	bf00      	nop
 800028e:	e7fd      	b.n	800028c <HardFault_Handler+0x4>

08000290 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000290:	b480      	push	{r7}
 8000292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000294:	bf00      	nop
 8000296:	e7fd      	b.n	8000294 <MemManage_Handler+0x4>

08000298 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000298:	b480      	push	{r7}
 800029a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800029c:	bf00      	nop
 800029e:	e7fd      	b.n	800029c <BusFault_Handler+0x4>

080002a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80002a0:	b480      	push	{r7}
 80002a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80002a4:	bf00      	nop
 80002a6:	e7fd      	b.n	80002a4 <UsageFault_Handler+0x4>

080002a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80002a8:	b480      	push	{r7}
 80002aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80002ac:	bf00      	nop
 80002ae:	46bd      	mov	sp, r7
 80002b0:	bc80      	pop	{r7}
 80002b2:	4770      	bx	lr

080002b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80002b4:	b480      	push	{r7}
 80002b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80002b8:	bf00      	nop
 80002ba:	46bd      	mov	sp, r7
 80002bc:	bc80      	pop	{r7}
 80002be:	4770      	bx	lr

080002c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80002c0:	b480      	push	{r7}
 80002c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80002c4:	bf00      	nop
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bc80      	pop	{r7}
 80002ca:	4770      	bx	lr

080002cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80002d0:	f001 fedc 	bl	800208c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80002d4:	bf00      	nop
 80002d6:	bd80      	pop	{r7, pc}

080002d8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80002dc:	4802      	ldr	r0, [pc, #8]	@ (80002e8 <USART1_IRQHandler+0x10>)
 80002de:	f003 fb49 	bl	8003974 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80002e2:	bf00      	nop
 80002e4:	bd80      	pop	{r7, pc}
 80002e6:	bf00      	nop
 80002e8:	20000168 	.word	0x20000168

080002ec <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80002f0:	4802      	ldr	r0, [pc, #8]	@ (80002fc <UART5_IRQHandler+0x10>)
 80002f2:	f003 fb3f 	bl	8003974 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80002f6:	bf00      	nop
 80002f8:	bd80      	pop	{r7, pc}
 80002fa:	bf00      	nop
 80002fc:	20000120 	.word	0x20000120

08000300 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000304:	4802      	ldr	r0, [pc, #8]	@ (8000310 <TIM6_IRQHandler+0x10>)
 8000306:	f003 f81d 	bl	8003344 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 800030a:	bf00      	nop
 800030c:	bd80      	pop	{r7, pc}
 800030e:	bf00      	nop
 8000310:	20000074 	.word	0x20000074

08000314 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000314:	b480      	push	{r7}
 8000316:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000318:	bf00      	nop
 800031a:	46bd      	mov	sp, r7
 800031c:	bc80      	pop	{r7}
 800031e:	4770      	bx	lr

08000320 <FPGA_init>:


unsigned char fp_online;

void FPGA_init(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b082      	sub	sp, #8
 8000324:	af00      	add	r7, sp, #0
	while(fp_online != 0x11)
 8000326:	e021      	b.n	800036c <FPGA_init+0x4c>
	{
		fp_online = Fpga_Read(0x00);
 8000328:	2000      	movs	r0, #0
 800032a:	f000 f82b 	bl	8000384 <Fpga_Read>
 800032e:	4603      	mov	r3, r0
 8000330:	461a      	mov	r2, r3
 8000332:	4b13      	ldr	r3, [pc, #76]	@ (8000380 <FPGA_init+0x60>)
 8000334:	701a      	strb	r2, [r3, #0]

		//Fpga_Write(0x0a,fp_online);
		ComSendChar(COM1,fp_online);
 8000336:	4b12      	ldr	r3, [pc, #72]	@ (8000380 <FPGA_init+0x60>)
 8000338:	781b      	ldrb	r3, [r3, #0]
 800033a:	4619      	mov	r1, r3
 800033c:	20dd      	movs	r0, #221	@ 0xdd
 800033e:	f001 f8a5 	bl	800148c <ComSendChar>

		for(unsigned int i=0;i<1000;i++)
 8000342:	2300      	movs	r3, #0
 8000344:	607b      	str	r3, [r7, #4]
 8000346:	e00d      	b.n	8000364 <FPGA_init+0x44>
		{
			for(unsigned int j=0;j<10000;j++);
 8000348:	2300      	movs	r3, #0
 800034a:	603b      	str	r3, [r7, #0]
 800034c:	e002      	b.n	8000354 <FPGA_init+0x34>
 800034e:	683b      	ldr	r3, [r7, #0]
 8000350:	3301      	adds	r3, #1
 8000352:	603b      	str	r3, [r7, #0]
 8000354:	683b      	ldr	r3, [r7, #0]
 8000356:	f242 720f 	movw	r2, #9999	@ 0x270f
 800035a:	4293      	cmp	r3, r2
 800035c:	d9f7      	bls.n	800034e <FPGA_init+0x2e>
		for(unsigned int i=0;i<1000;i++)
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	3301      	adds	r3, #1
 8000362:	607b      	str	r3, [r7, #4]
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800036a:	d3ed      	bcc.n	8000348 <FPGA_init+0x28>
	while(fp_online != 0x11)
 800036c:	4b04      	ldr	r3, [pc, #16]	@ (8000380 <FPGA_init+0x60>)
 800036e:	781b      	ldrb	r3, [r3, #0]
 8000370:	2b11      	cmp	r3, #17
 8000372:	d1d9      	bne.n	8000328 <FPGA_init+0x8>
		}
	}
	Write_Fir_Parameter();
 8000374:	f000 fa7c 	bl	8000870 <Write_Fir_Parameter>
}
 8000378:	bf00      	nop
 800037a:	3708      	adds	r7, #8
 800037c:	46bd      	mov	sp, r7
 800037e:	bd80      	pop	{r7, pc}
 8000380:	2000004c 	.word	0x2000004c

08000384 <Fpga_Read>:

unsigned char Fpga_Read(unsigned char addRead)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b086      	sub	sp, #24
 8000388:	af00      	add	r7, sp, #0
 800038a:	4603      	mov	r3, r0
 800038c:	71fb      	strb	r3, [r7, #7]
	unsigned char data,A,B,C,D,E,F,G,H;

	/*-----------------------地址&片选初始化，读时为输出----------------------------*/

	GPIO_InitStruct.Pin = ADDR0_Pin|ADDR1_Pin|ADDR2_Pin|ADDR3_Pin|MCU_CS_Pin;
 800038e:	4b8b      	ldr	r3, [pc, #556]	@ (80005bc <Fpga_Read+0x238>)
 8000390:	223d      	movs	r2, #61	@ 0x3d
 8000392:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000394:	4b89      	ldr	r3, [pc, #548]	@ (80005bc <Fpga_Read+0x238>)
 8000396:	2201      	movs	r2, #1
 8000398:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800039a:	4b88      	ldr	r3, [pc, #544]	@ (80005bc <Fpga_Read+0x238>)
 800039c:	2200      	movs	r2, #0
 800039e:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80003a0:	4b86      	ldr	r3, [pc, #536]	@ (80005bc <Fpga_Read+0x238>)
 80003a2:	2203      	movs	r2, #3
 80003a4:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80003a6:	4985      	ldr	r1, [pc, #532]	@ (80005bc <Fpga_Read+0x238>)
 80003a8:	4885      	ldr	r0, [pc, #532]	@ (80005c0 <Fpga_Read+0x23c>)
 80003aa:	f002 f8db 	bl	8002564 <HAL_GPIO_Init>

	/*-----------------------读写初始化，读时为输出---------------------------------*/

	GPIO_InitStruct.Pin = MCU_WR_Pin;
 80003ae:	4b83      	ldr	r3, [pc, #524]	@ (80005bc <Fpga_Read+0x238>)
 80003b0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80003b4:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003b6:	4b81      	ldr	r3, [pc, #516]	@ (80005bc <Fpga_Read+0x238>)
 80003b8:	2201      	movs	r2, #1
 80003ba:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003bc:	4b7f      	ldr	r3, [pc, #508]	@ (80005bc <Fpga_Read+0x238>)
 80003be:	2200      	movs	r2, #0
 80003c0:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80003c2:	4b7e      	ldr	r3, [pc, #504]	@ (80005bc <Fpga_Read+0x238>)
 80003c4:	2203      	movs	r2, #3
 80003c6:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003c8:	497c      	ldr	r1, [pc, #496]	@ (80005bc <Fpga_Read+0x238>)
 80003ca:	487e      	ldr	r0, [pc, #504]	@ (80005c4 <Fpga_Read+0x240>)
 80003cc:	f002 f8ca 	bl	8002564 <HAL_GPIO_Init>

	/*-----------------------数据初始化，读时为输入---------------------------------*/

	GPIO_InitStruct.Pin = DATA1_Pin|DATA0_Pin;
 80003d0:	4b7a      	ldr	r3, [pc, #488]	@ (80005bc <Fpga_Read+0x238>)
 80003d2:	f241 0204 	movw	r2, #4100	@ 0x1004
 80003d6:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003d8:	4b78      	ldr	r3, [pc, #480]	@ (80005bc <Fpga_Read+0x238>)
 80003da:	2200      	movs	r2, #0
 80003dc:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003de:	4b77      	ldr	r3, [pc, #476]	@ (80005bc <Fpga_Read+0x238>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80003e4:	4b75      	ldr	r3, [pc, #468]	@ (80005bc <Fpga_Read+0x238>)
 80003e6:	2203      	movs	r2, #3
 80003e8:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003ea:	4974      	ldr	r1, [pc, #464]	@ (80005bc <Fpga_Read+0x238>)
 80003ec:	4875      	ldr	r0, [pc, #468]	@ (80005c4 <Fpga_Read+0x240>)
 80003ee:	f002 f8b9 	bl	8002564 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = DATA2_Pin;
 80003f2:	4b72      	ldr	r3, [pc, #456]	@ (80005bc <Fpga_Read+0x238>)
 80003f4:	2208      	movs	r2, #8
 80003f6:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003f8:	4b70      	ldr	r3, [pc, #448]	@ (80005bc <Fpga_Read+0x238>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003fe:	4b6f      	ldr	r3, [pc, #444]	@ (80005bc <Fpga_Read+0x238>)
 8000400:	2200      	movs	r2, #0
 8000402:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000404:	4b6d      	ldr	r3, [pc, #436]	@ (80005bc <Fpga_Read+0x238>)
 8000406:	2202      	movs	r2, #2
 8000408:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(DATA2_GPIO_Port, &GPIO_InitStruct);
 800040a:	496c      	ldr	r1, [pc, #432]	@ (80005bc <Fpga_Read+0x238>)
 800040c:	486d      	ldr	r0, [pc, #436]	@ (80005c4 <Fpga_Read+0x240>)
 800040e:	f002 f8a9 	bl	8002564 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = DATA3_Pin|DATA4_Pin;
 8000412:	4b6a      	ldr	r3, [pc, #424]	@ (80005bc <Fpga_Read+0x238>)
 8000414:	2248      	movs	r2, #72	@ 0x48
 8000416:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000418:	4b68      	ldr	r3, [pc, #416]	@ (80005bc <Fpga_Read+0x238>)
 800041a:	2200      	movs	r2, #0
 800041c:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800041e:	4b67      	ldr	r3, [pc, #412]	@ (80005bc <Fpga_Read+0x238>)
 8000420:	2200      	movs	r2, #0
 8000422:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000424:	4b65      	ldr	r3, [pc, #404]	@ (80005bc <Fpga_Read+0x238>)
 8000426:	2203      	movs	r2, #3
 8000428:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800042a:	4964      	ldr	r1, [pc, #400]	@ (80005bc <Fpga_Read+0x238>)
 800042c:	4866      	ldr	r0, [pc, #408]	@ (80005c8 <Fpga_Read+0x244>)
 800042e:	f002 f899 	bl	8002564 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = DATA5_Pin|DATA6_Pin|DATA7_Pin;
 8000432:	4b62      	ldr	r3, [pc, #392]	@ (80005bc <Fpga_Read+0x238>)
 8000434:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8000438:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800043a:	4b60      	ldr	r3, [pc, #384]	@ (80005bc <Fpga_Read+0x238>)
 800043c:	2200      	movs	r2, #0
 800043e:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000440:	4b5e      	ldr	r3, [pc, #376]	@ (80005bc <Fpga_Read+0x238>)
 8000442:	2200      	movs	r2, #0
 8000444:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000446:	4b5d      	ldr	r3, [pc, #372]	@ (80005bc <Fpga_Read+0x238>)
 8000448:	2203      	movs	r2, #3
 800044a:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800044c:	495b      	ldr	r1, [pc, #364]	@ (80005bc <Fpga_Read+0x238>)
 800044e:	485f      	ldr	r0, [pc, #380]	@ (80005cc <Fpga_Read+0x248>)
 8000450:	f002 f888 	bl	8002564 <HAL_GPIO_Init>


	HAL_GPIO_WritePin(MCU_WR_GPIO_Port,MCU_WR_Pin,GPIO_PIN_RESET);			//读:WR拉低
 8000454:	2200      	movs	r2, #0
 8000456:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800045a:	485a      	ldr	r0, [pc, #360]	@ (80005c4 <Fpga_Read+0x240>)
 800045c:	f002 fa2d 	bl	80028ba <HAL_GPIO_WritePin>

	if(addRead & 0x08)
 8000460:	79fb      	ldrb	r3, [r7, #7]
 8000462:	f003 0308 	and.w	r3, r3, #8
 8000466:	2b00      	cmp	r3, #0
 8000468:	d005      	beq.n	8000476 <Fpga_Read+0xf2>
		HAL_GPIO_WritePin(ADDR3_GPIO_Port,ADDR3_Pin,GPIO_PIN_SET);
 800046a:	2201      	movs	r2, #1
 800046c:	2120      	movs	r1, #32
 800046e:	4854      	ldr	r0, [pc, #336]	@ (80005c0 <Fpga_Read+0x23c>)
 8000470:	f002 fa23 	bl	80028ba <HAL_GPIO_WritePin>
 8000474:	e004      	b.n	8000480 <Fpga_Read+0xfc>
	else
		HAL_GPIO_WritePin(ADDR3_GPIO_Port,ADDR3_Pin,GPIO_PIN_RESET);
 8000476:	2200      	movs	r2, #0
 8000478:	2120      	movs	r1, #32
 800047a:	4851      	ldr	r0, [pc, #324]	@ (80005c0 <Fpga_Read+0x23c>)
 800047c:	f002 fa1d 	bl	80028ba <HAL_GPIO_WritePin>

	if(addRead & 0x04)
 8000480:	79fb      	ldrb	r3, [r7, #7]
 8000482:	f003 0304 	and.w	r3, r3, #4
 8000486:	2b00      	cmp	r3, #0
 8000488:	d005      	beq.n	8000496 <Fpga_Read+0x112>
		HAL_GPIO_WritePin(ADDR2_GPIO_Port,ADDR2_Pin,GPIO_PIN_SET);
 800048a:	2201      	movs	r2, #1
 800048c:	2110      	movs	r1, #16
 800048e:	484c      	ldr	r0, [pc, #304]	@ (80005c0 <Fpga_Read+0x23c>)
 8000490:	f002 fa13 	bl	80028ba <HAL_GPIO_WritePin>
 8000494:	e004      	b.n	80004a0 <Fpga_Read+0x11c>
	else
		HAL_GPIO_WritePin(ADDR2_GPIO_Port,ADDR2_Pin,GPIO_PIN_RESET);		//例:addRead = d'6/b'0110,  ADDR3=0,ADDR2=1,ADDR1=1;ADDR0=0
 8000496:	2200      	movs	r2, #0
 8000498:	2110      	movs	r1, #16
 800049a:	4849      	ldr	r0, [pc, #292]	@ (80005c0 <Fpga_Read+0x23c>)
 800049c:	f002 fa0d 	bl	80028ba <HAL_GPIO_WritePin>

	if(addRead & 0x02)
 80004a0:	79fb      	ldrb	r3, [r7, #7]
 80004a2:	f003 0302 	and.w	r3, r3, #2
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d005      	beq.n	80004b6 <Fpga_Read+0x132>
		HAL_GPIO_WritePin(ADDR1_GPIO_Port,ADDR1_Pin,GPIO_PIN_SET);
 80004aa:	2201      	movs	r2, #1
 80004ac:	2108      	movs	r1, #8
 80004ae:	4844      	ldr	r0, [pc, #272]	@ (80005c0 <Fpga_Read+0x23c>)
 80004b0:	f002 fa03 	bl	80028ba <HAL_GPIO_WritePin>
 80004b4:	e004      	b.n	80004c0 <Fpga_Read+0x13c>
	else
		HAL_GPIO_WritePin(ADDR1_GPIO_Port,ADDR1_Pin,GPIO_PIN_RESET);
 80004b6:	2200      	movs	r2, #0
 80004b8:	2108      	movs	r1, #8
 80004ba:	4841      	ldr	r0, [pc, #260]	@ (80005c0 <Fpga_Read+0x23c>)
 80004bc:	f002 f9fd 	bl	80028ba <HAL_GPIO_WritePin>

	if(addRead & 0x01)
 80004c0:	79fb      	ldrb	r3, [r7, #7]
 80004c2:	f003 0301 	and.w	r3, r3, #1
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d005      	beq.n	80004d6 <Fpga_Read+0x152>
		HAL_GPIO_WritePin(ADDR0_GPIO_Port,ADDR0_Pin,GPIO_PIN_SET);
 80004ca:	2201      	movs	r2, #1
 80004cc:	2104      	movs	r1, #4
 80004ce:	483c      	ldr	r0, [pc, #240]	@ (80005c0 <Fpga_Read+0x23c>)
 80004d0:	f002 f9f3 	bl	80028ba <HAL_GPIO_WritePin>
 80004d4:	e004      	b.n	80004e0 <Fpga_Read+0x15c>
	else
		HAL_GPIO_WritePin(ADDR0_GPIO_Port,ADDR0_Pin,GPIO_PIN_RESET);
 80004d6:	2200      	movs	r2, #0
 80004d8:	2104      	movs	r1, #4
 80004da:	4839      	ldr	r0, [pc, #228]	@ (80005c0 <Fpga_Read+0x23c>)
 80004dc:	f002 f9ed 	bl	80028ba <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(MCU_CS_GPIO_Port,MCU_CS_Pin,GPIO_PIN_RESET);			//片选拉低
 80004e0:	2200      	movs	r2, #0
 80004e2:	2101      	movs	r1, #1
 80004e4:	4836      	ldr	r0, [pc, #216]	@ (80005c0 <Fpga_Read+0x23c>)
 80004e6:	f002 f9e8 	bl	80028ba <HAL_GPIO_WritePin>

	A = HAL_GPIO_ReadPin(DATA0_GPIO_Port,DATA0_Pin);
 80004ea:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80004ee:	4835      	ldr	r0, [pc, #212]	@ (80005c4 <Fpga_Read+0x240>)
 80004f0:	f002 f9cc 	bl	800288c <HAL_GPIO_ReadPin>
 80004f4:	4603      	mov	r3, r0
 80004f6:	75fb      	strb	r3, [r7, #23]
	B = HAL_GPIO_ReadPin(DATA1_GPIO_Port,DATA1_Pin);
 80004f8:	2104      	movs	r1, #4
 80004fa:	4832      	ldr	r0, [pc, #200]	@ (80005c4 <Fpga_Read+0x240>)
 80004fc:	f002 f9c6 	bl	800288c <HAL_GPIO_ReadPin>
 8000500:	4603      	mov	r3, r0
 8000502:	75bb      	strb	r3, [r7, #22]
	C = HAL_GPIO_ReadPin(DATA2_GPIO_Port,DATA2_Pin);
 8000504:	2108      	movs	r1, #8
 8000506:	482f      	ldr	r0, [pc, #188]	@ (80005c4 <Fpga_Read+0x240>)
 8000508:	f002 f9c0 	bl	800288c <HAL_GPIO_ReadPin>
 800050c:	4603      	mov	r3, r0
 800050e:	757b      	strb	r3, [r7, #21]
	D = HAL_GPIO_ReadPin(DATA3_GPIO_Port,DATA3_Pin);
 8000510:	2108      	movs	r1, #8
 8000512:	482d      	ldr	r0, [pc, #180]	@ (80005c8 <Fpga_Read+0x244>)
 8000514:	f002 f9ba 	bl	800288c <HAL_GPIO_ReadPin>
 8000518:	4603      	mov	r3, r0
 800051a:	753b      	strb	r3, [r7, #20]
	E = HAL_GPIO_ReadPin(DATA4_GPIO_Port,DATA4_Pin);
 800051c:	2140      	movs	r1, #64	@ 0x40
 800051e:	482a      	ldr	r0, [pc, #168]	@ (80005c8 <Fpga_Read+0x244>)
 8000520:	f002 f9b4 	bl	800288c <HAL_GPIO_ReadPin>
 8000524:	4603      	mov	r3, r0
 8000526:	74fb      	strb	r3, [r7, #19]
	F = HAL_GPIO_ReadPin(DATA5_GPIO_Port,DATA5_Pin);
 8000528:	2120      	movs	r1, #32
 800052a:	4828      	ldr	r0, [pc, #160]	@ (80005cc <Fpga_Read+0x248>)
 800052c:	f002 f9ae 	bl	800288c <HAL_GPIO_ReadPin>
 8000530:	4603      	mov	r3, r0
 8000532:	74bb      	strb	r3, [r7, #18]
	G = HAL_GPIO_ReadPin(DATA6_GPIO_Port,DATA6_Pin);
 8000534:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000538:	4824      	ldr	r0, [pc, #144]	@ (80005cc <Fpga_Read+0x248>)
 800053a:	f002 f9a7 	bl	800288c <HAL_GPIO_ReadPin>
 800053e:	4603      	mov	r3, r0
 8000540:	747b      	strb	r3, [r7, #17]
	H = HAL_GPIO_ReadPin(DATA7_GPIO_Port,DATA7_Pin);
 8000542:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000546:	4821      	ldr	r0, [pc, #132]	@ (80005cc <Fpga_Read+0x248>)
 8000548:	f002 f9a0 	bl	800288c <HAL_GPIO_ReadPin>
 800054c:	4603      	mov	r3, r0
 800054e:	743b      	strb	r3, [r7, #16]

	HAL_GPIO_WritePin(MCU_CS_GPIO_Port,MCU_CS_Pin,GPIO_PIN_SET);			//片选拉高
 8000550:	2201      	movs	r2, #1
 8000552:	2101      	movs	r1, #1
 8000554:	481a      	ldr	r0, [pc, #104]	@ (80005c0 <Fpga_Read+0x23c>)
 8000556:	f002 f9b0 	bl	80028ba <HAL_GPIO_WritePin>

	data =  H<<7;
 800055a:	7c3b      	ldrb	r3, [r7, #16]
 800055c:	01db      	lsls	r3, r3, #7
 800055e:	73fb      	strb	r3, [r7, #15]
	data += G<<6;
 8000560:	7c7b      	ldrb	r3, [r7, #17]
 8000562:	019b      	lsls	r3, r3, #6
 8000564:	b2da      	uxtb	r2, r3
 8000566:	7bfb      	ldrb	r3, [r7, #15]
 8000568:	4413      	add	r3, r2
 800056a:	73fb      	strb	r3, [r7, #15]
	data += F<<5;
 800056c:	7cbb      	ldrb	r3, [r7, #18]
 800056e:	015b      	lsls	r3, r3, #5
 8000570:	b2da      	uxtb	r2, r3
 8000572:	7bfb      	ldrb	r3, [r7, #15]
 8000574:	4413      	add	r3, r2
 8000576:	73fb      	strb	r3, [r7, #15]
	data += E<<4;
 8000578:	7cfb      	ldrb	r3, [r7, #19]
 800057a:	011b      	lsls	r3, r3, #4
 800057c:	b2da      	uxtb	r2, r3
 800057e:	7bfb      	ldrb	r3, [r7, #15]
 8000580:	4413      	add	r3, r2
 8000582:	73fb      	strb	r3, [r7, #15]
	data += D<<3;
 8000584:	7d3b      	ldrb	r3, [r7, #20]
 8000586:	00db      	lsls	r3, r3, #3
 8000588:	b2da      	uxtb	r2, r3
 800058a:	7bfb      	ldrb	r3, [r7, #15]
 800058c:	4413      	add	r3, r2
 800058e:	73fb      	strb	r3, [r7, #15]
	data += C<<2;
 8000590:	7d7b      	ldrb	r3, [r7, #21]
 8000592:	009b      	lsls	r3, r3, #2
 8000594:	b2da      	uxtb	r2, r3
 8000596:	7bfb      	ldrb	r3, [r7, #15]
 8000598:	4413      	add	r3, r2
 800059a:	73fb      	strb	r3, [r7, #15]
	data += B<<1;
 800059c:	7dbb      	ldrb	r3, [r7, #22]
 800059e:	005b      	lsls	r3, r3, #1
 80005a0:	b2da      	uxtb	r2, r3
 80005a2:	7bfb      	ldrb	r3, [r7, #15]
 80005a4:	4413      	add	r3, r2
 80005a6:	73fb      	strb	r3, [r7, #15]
	data += A;
 80005a8:	7bfa      	ldrb	r2, [r7, #15]
 80005aa:	7dfb      	ldrb	r3, [r7, #23]
 80005ac:	4413      	add	r3, r2
 80005ae:	73fb      	strb	r3, [r7, #15]

	return data;
 80005b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80005b2:	4618      	mov	r0, r3
 80005b4:	3718      	adds	r7, #24
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	2000003c 	.word	0x2000003c
 80005c0:	40011800 	.word	0x40011800
 80005c4:	40010800 	.word	0x40010800
 80005c8:	40011400 	.word	0x40011400
 80005cc:	40010c00 	.word	0x40010c00

080005d0 <Fpga_Write>:

void Fpga_Write(unsigned char addWrite,unsigned char Data)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	4603      	mov	r3, r0
 80005d8:	460a      	mov	r2, r1
 80005da:	71fb      	strb	r3, [r7, #7]
 80005dc:	4613      	mov	r3, r2
 80005de:	71bb      	strb	r3, [r7, #6]

	/*------------------------------数据，写时为输出---------------------------------*/

	GPIO_InitStruct.Pin = DATA1_Pin|DATA0_Pin|DATA2_Pin;
 80005e0:	4b9e      	ldr	r3, [pc, #632]	@ (800085c <Fpga_Write+0x28c>)
 80005e2:	f241 020c 	movw	r2, #4108	@ 0x100c
 80005e6:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005e8:	4b9c      	ldr	r3, [pc, #624]	@ (800085c <Fpga_Write+0x28c>)
 80005ea:	2201      	movs	r2, #1
 80005ec:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ee:	4b9b      	ldr	r3, [pc, #620]	@ (800085c <Fpga_Write+0x28c>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005f4:	4b99      	ldr	r3, [pc, #612]	@ (800085c <Fpga_Write+0x28c>)
 80005f6:	2203      	movs	r2, #3
 80005f8:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005fa:	4998      	ldr	r1, [pc, #608]	@ (800085c <Fpga_Write+0x28c>)
 80005fc:	4898      	ldr	r0, [pc, #608]	@ (8000860 <Fpga_Write+0x290>)
 80005fe:	f001 ffb1 	bl	8002564 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = DATA3_Pin|DATA4_Pin;
 8000602:	4b96      	ldr	r3, [pc, #600]	@ (800085c <Fpga_Write+0x28c>)
 8000604:	2248      	movs	r2, #72	@ 0x48
 8000606:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000608:	4b94      	ldr	r3, [pc, #592]	@ (800085c <Fpga_Write+0x28c>)
 800060a:	2201      	movs	r2, #1
 800060c:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060e:	4b93      	ldr	r3, [pc, #588]	@ (800085c <Fpga_Write+0x28c>)
 8000610:	2200      	movs	r2, #0
 8000612:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000614:	4b91      	ldr	r3, [pc, #580]	@ (800085c <Fpga_Write+0x28c>)
 8000616:	2203      	movs	r2, #3
 8000618:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800061a:	4990      	ldr	r1, [pc, #576]	@ (800085c <Fpga_Write+0x28c>)
 800061c:	4891      	ldr	r0, [pc, #580]	@ (8000864 <Fpga_Write+0x294>)
 800061e:	f001 ffa1 	bl	8002564 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = DATA5_Pin|DATA6_Pin|DATA7_Pin;
 8000622:	4b8e      	ldr	r3, [pc, #568]	@ (800085c <Fpga_Write+0x28c>)
 8000624:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8000628:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800062a:	4b8c      	ldr	r3, [pc, #560]	@ (800085c <Fpga_Write+0x28c>)
 800062c:	2201      	movs	r2, #1
 800062e:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000630:	4b8a      	ldr	r3, [pc, #552]	@ (800085c <Fpga_Write+0x28c>)
 8000632:	2200      	movs	r2, #0
 8000634:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000636:	4b89      	ldr	r3, [pc, #548]	@ (800085c <Fpga_Write+0x28c>)
 8000638:	2203      	movs	r2, #3
 800063a:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800063c:	4987      	ldr	r1, [pc, #540]	@ (800085c <Fpga_Write+0x28c>)
 800063e:	488a      	ldr	r0, [pc, #552]	@ (8000868 <Fpga_Write+0x298>)
 8000640:	f001 ff90 	bl	8002564 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(MCU_WR_GPIO_Port,MCU_WR_Pin,GPIO_PIN_SET);			//写:WR拉高
 8000644:	2201      	movs	r2, #1
 8000646:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800064a:	4885      	ldr	r0, [pc, #532]	@ (8000860 <Fpga_Write+0x290>)
 800064c:	f002 f935 	bl	80028ba <HAL_GPIO_WritePin>

	/*----------------------4位地址--------------------------------*/
	if(addWrite & 0x08)
 8000650:	79fb      	ldrb	r3, [r7, #7]
 8000652:	f003 0308 	and.w	r3, r3, #8
 8000656:	2b00      	cmp	r3, #0
 8000658:	d005      	beq.n	8000666 <Fpga_Write+0x96>
		HAL_GPIO_WritePin(ADDR3_GPIO_Port,ADDR3_Pin,GPIO_PIN_SET);
 800065a:	2201      	movs	r2, #1
 800065c:	2120      	movs	r1, #32
 800065e:	4883      	ldr	r0, [pc, #524]	@ (800086c <Fpga_Write+0x29c>)
 8000660:	f002 f92b 	bl	80028ba <HAL_GPIO_WritePin>
 8000664:	e004      	b.n	8000670 <Fpga_Write+0xa0>
	else
		HAL_GPIO_WritePin(ADDR3_GPIO_Port,ADDR3_Pin,GPIO_PIN_RESET);
 8000666:	2200      	movs	r2, #0
 8000668:	2120      	movs	r1, #32
 800066a:	4880      	ldr	r0, [pc, #512]	@ (800086c <Fpga_Write+0x29c>)
 800066c:	f002 f925 	bl	80028ba <HAL_GPIO_WritePin>

	if(addWrite & 0x04)
 8000670:	79fb      	ldrb	r3, [r7, #7]
 8000672:	f003 0304 	and.w	r3, r3, #4
 8000676:	2b00      	cmp	r3, #0
 8000678:	d005      	beq.n	8000686 <Fpga_Write+0xb6>
		HAL_GPIO_WritePin(ADDR2_GPIO_Port,ADDR2_Pin,GPIO_PIN_SET);
 800067a:	2201      	movs	r2, #1
 800067c:	2110      	movs	r1, #16
 800067e:	487b      	ldr	r0, [pc, #492]	@ (800086c <Fpga_Write+0x29c>)
 8000680:	f002 f91b 	bl	80028ba <HAL_GPIO_WritePin>
 8000684:	e004      	b.n	8000690 <Fpga_Write+0xc0>
	else
		HAL_GPIO_WritePin(ADDR2_GPIO_Port,ADDR2_Pin,GPIO_PIN_RESET);		//例:addRead = d'6/b'0110,  ADDR3=0,ADDR2=1,ADDR1=1;ADDR0=0
 8000686:	2200      	movs	r2, #0
 8000688:	2110      	movs	r1, #16
 800068a:	4878      	ldr	r0, [pc, #480]	@ (800086c <Fpga_Write+0x29c>)
 800068c:	f002 f915 	bl	80028ba <HAL_GPIO_WritePin>

	if(addWrite & 0x02)
 8000690:	79fb      	ldrb	r3, [r7, #7]
 8000692:	f003 0302 	and.w	r3, r3, #2
 8000696:	2b00      	cmp	r3, #0
 8000698:	d005      	beq.n	80006a6 <Fpga_Write+0xd6>
		HAL_GPIO_WritePin(ADDR1_GPIO_Port,ADDR1_Pin,GPIO_PIN_SET);
 800069a:	2201      	movs	r2, #1
 800069c:	2108      	movs	r1, #8
 800069e:	4873      	ldr	r0, [pc, #460]	@ (800086c <Fpga_Write+0x29c>)
 80006a0:	f002 f90b 	bl	80028ba <HAL_GPIO_WritePin>
 80006a4:	e004      	b.n	80006b0 <Fpga_Write+0xe0>
	else
		HAL_GPIO_WritePin(ADDR1_GPIO_Port,ADDR1_Pin,GPIO_PIN_RESET);
 80006a6:	2200      	movs	r2, #0
 80006a8:	2108      	movs	r1, #8
 80006aa:	4870      	ldr	r0, [pc, #448]	@ (800086c <Fpga_Write+0x29c>)
 80006ac:	f002 f905 	bl	80028ba <HAL_GPIO_WritePin>

	if(addWrite & 0x01)
 80006b0:	79fb      	ldrb	r3, [r7, #7]
 80006b2:	f003 0301 	and.w	r3, r3, #1
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d005      	beq.n	80006c6 <Fpga_Write+0xf6>
		HAL_GPIO_WritePin(ADDR0_GPIO_Port,ADDR0_Pin,GPIO_PIN_SET);
 80006ba:	2201      	movs	r2, #1
 80006bc:	2104      	movs	r1, #4
 80006be:	486b      	ldr	r0, [pc, #428]	@ (800086c <Fpga_Write+0x29c>)
 80006c0:	f002 f8fb 	bl	80028ba <HAL_GPIO_WritePin>
 80006c4:	e004      	b.n	80006d0 <Fpga_Write+0x100>
	else
		HAL_GPIO_WritePin(ADDR0_GPIO_Port,ADDR0_Pin,GPIO_PIN_RESET);
 80006c6:	2200      	movs	r2, #0
 80006c8:	2104      	movs	r1, #4
 80006ca:	4868      	ldr	r0, [pc, #416]	@ (800086c <Fpga_Write+0x29c>)
 80006cc:	f002 f8f5 	bl	80028ba <HAL_GPIO_WritePin>

	/*----------------------8位数据--------------------------------*/
	if(Data & 0x80)
 80006d0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	da06      	bge.n	80006e6 <Fpga_Write+0x116>
		HAL_GPIO_WritePin(DATA7_GPIO_Port,DATA7_Pin,GPIO_PIN_SET);
 80006d8:	2201      	movs	r2, #1
 80006da:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80006de:	4862      	ldr	r0, [pc, #392]	@ (8000868 <Fpga_Write+0x298>)
 80006e0:	f002 f8eb 	bl	80028ba <HAL_GPIO_WritePin>
 80006e4:	e005      	b.n	80006f2 <Fpga_Write+0x122>
	else
		HAL_GPIO_WritePin(DATA7_GPIO_Port,DATA7_Pin,GPIO_PIN_RESET);
 80006e6:	2200      	movs	r2, #0
 80006e8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80006ec:	485e      	ldr	r0, [pc, #376]	@ (8000868 <Fpga_Write+0x298>)
 80006ee:	f002 f8e4 	bl	80028ba <HAL_GPIO_WritePin>

	if(Data & 0x40)
 80006f2:	79bb      	ldrb	r3, [r7, #6]
 80006f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d006      	beq.n	800070a <Fpga_Write+0x13a>
		HAL_GPIO_WritePin(DATA6_GPIO_Port,DATA6_Pin,GPIO_PIN_SET);
 80006fc:	2201      	movs	r2, #1
 80006fe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000702:	4859      	ldr	r0, [pc, #356]	@ (8000868 <Fpga_Write+0x298>)
 8000704:	f002 f8d9 	bl	80028ba <HAL_GPIO_WritePin>
 8000708:	e005      	b.n	8000716 <Fpga_Write+0x146>
	else
		HAL_GPIO_WritePin(DATA6_GPIO_Port,DATA6_Pin,GPIO_PIN_RESET);
 800070a:	2200      	movs	r2, #0
 800070c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000710:	4855      	ldr	r0, [pc, #340]	@ (8000868 <Fpga_Write+0x298>)
 8000712:	f002 f8d2 	bl	80028ba <HAL_GPIO_WritePin>

	if(Data & 0x20)
 8000716:	79bb      	ldrb	r3, [r7, #6]
 8000718:	f003 0320 	and.w	r3, r3, #32
 800071c:	2b00      	cmp	r3, #0
 800071e:	d005      	beq.n	800072c <Fpga_Write+0x15c>
		HAL_GPIO_WritePin(DATA5_GPIO_Port,DATA5_Pin,GPIO_PIN_SET);
 8000720:	2201      	movs	r2, #1
 8000722:	2120      	movs	r1, #32
 8000724:	4850      	ldr	r0, [pc, #320]	@ (8000868 <Fpga_Write+0x298>)
 8000726:	f002 f8c8 	bl	80028ba <HAL_GPIO_WritePin>
 800072a:	e004      	b.n	8000736 <Fpga_Write+0x166>
	else
		HAL_GPIO_WritePin(DATA5_GPIO_Port,DATA5_Pin,GPIO_PIN_RESET);
 800072c:	2200      	movs	r2, #0
 800072e:	2120      	movs	r1, #32
 8000730:	484d      	ldr	r0, [pc, #308]	@ (8000868 <Fpga_Write+0x298>)
 8000732:	f002 f8c2 	bl	80028ba <HAL_GPIO_WritePin>

	if(Data & 0x10)
 8000736:	79bb      	ldrb	r3, [r7, #6]
 8000738:	f003 0310 	and.w	r3, r3, #16
 800073c:	2b00      	cmp	r3, #0
 800073e:	d005      	beq.n	800074c <Fpga_Write+0x17c>
		HAL_GPIO_WritePin(DATA4_GPIO_Port,DATA4_Pin,GPIO_PIN_SET);
 8000740:	2201      	movs	r2, #1
 8000742:	2140      	movs	r1, #64	@ 0x40
 8000744:	4847      	ldr	r0, [pc, #284]	@ (8000864 <Fpga_Write+0x294>)
 8000746:	f002 f8b8 	bl	80028ba <HAL_GPIO_WritePin>
 800074a:	e004      	b.n	8000756 <Fpga_Write+0x186>
	else
		HAL_GPIO_WritePin(DATA4_GPIO_Port,DATA4_Pin,GPIO_PIN_RESET);
 800074c:	2200      	movs	r2, #0
 800074e:	2140      	movs	r1, #64	@ 0x40
 8000750:	4844      	ldr	r0, [pc, #272]	@ (8000864 <Fpga_Write+0x294>)
 8000752:	f002 f8b2 	bl	80028ba <HAL_GPIO_WritePin>



	if(Data & 0x08)
 8000756:	79bb      	ldrb	r3, [r7, #6]
 8000758:	f003 0308 	and.w	r3, r3, #8
 800075c:	2b00      	cmp	r3, #0
 800075e:	d005      	beq.n	800076c <Fpga_Write+0x19c>
		HAL_GPIO_WritePin(DATA3_GPIO_Port,DATA3_Pin,GPIO_PIN_SET);
 8000760:	2201      	movs	r2, #1
 8000762:	2108      	movs	r1, #8
 8000764:	483f      	ldr	r0, [pc, #252]	@ (8000864 <Fpga_Write+0x294>)
 8000766:	f002 f8a8 	bl	80028ba <HAL_GPIO_WritePin>
 800076a:	e004      	b.n	8000776 <Fpga_Write+0x1a6>
	else
		HAL_GPIO_WritePin(DATA3_GPIO_Port,DATA3_Pin,GPIO_PIN_RESET);
 800076c:	2200      	movs	r2, #0
 800076e:	2108      	movs	r1, #8
 8000770:	483c      	ldr	r0, [pc, #240]	@ (8000864 <Fpga_Write+0x294>)
 8000772:	f002 f8a2 	bl	80028ba <HAL_GPIO_WritePin>

	if(Data & 0x04)
 8000776:	79bb      	ldrb	r3, [r7, #6]
 8000778:	f003 0304 	and.w	r3, r3, #4
 800077c:	2b00      	cmp	r3, #0
 800077e:	d005      	beq.n	800078c <Fpga_Write+0x1bc>
		HAL_GPIO_WritePin(DATA2_GPIO_Port,DATA2_Pin,GPIO_PIN_SET);
 8000780:	2201      	movs	r2, #1
 8000782:	2108      	movs	r1, #8
 8000784:	4836      	ldr	r0, [pc, #216]	@ (8000860 <Fpga_Write+0x290>)
 8000786:	f002 f898 	bl	80028ba <HAL_GPIO_WritePin>
 800078a:	e004      	b.n	8000796 <Fpga_Write+0x1c6>
	else
		HAL_GPIO_WritePin(DATA2_GPIO_Port,DATA2_Pin,GPIO_PIN_RESET);
 800078c:	2200      	movs	r2, #0
 800078e:	2108      	movs	r1, #8
 8000790:	4833      	ldr	r0, [pc, #204]	@ (8000860 <Fpga_Write+0x290>)
 8000792:	f002 f892 	bl	80028ba <HAL_GPIO_WritePin>

	if(Data & 0x02)
 8000796:	79bb      	ldrb	r3, [r7, #6]
 8000798:	f003 0302 	and.w	r3, r3, #2
 800079c:	2b00      	cmp	r3, #0
 800079e:	d005      	beq.n	80007ac <Fpga_Write+0x1dc>
		HAL_GPIO_WritePin(DATA1_GPIO_Port,DATA1_Pin,GPIO_PIN_SET);
 80007a0:	2201      	movs	r2, #1
 80007a2:	2104      	movs	r1, #4
 80007a4:	482e      	ldr	r0, [pc, #184]	@ (8000860 <Fpga_Write+0x290>)
 80007a6:	f002 f888 	bl	80028ba <HAL_GPIO_WritePin>
 80007aa:	e004      	b.n	80007b6 <Fpga_Write+0x1e6>
	else
		HAL_GPIO_WritePin(DATA1_GPIO_Port,DATA1_Pin,GPIO_PIN_RESET);
 80007ac:	2200      	movs	r2, #0
 80007ae:	2104      	movs	r1, #4
 80007b0:	482b      	ldr	r0, [pc, #172]	@ (8000860 <Fpga_Write+0x290>)
 80007b2:	f002 f882 	bl	80028ba <HAL_GPIO_WritePin>

	if(Data & 0x01)
 80007b6:	79bb      	ldrb	r3, [r7, #6]
 80007b8:	f003 0301 	and.w	r3, r3, #1
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d006      	beq.n	80007ce <Fpga_Write+0x1fe>
		HAL_GPIO_WritePin(DATA0_GPIO_Port,DATA0_Pin,GPIO_PIN_SET);
 80007c0:	2201      	movs	r2, #1
 80007c2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80007c6:	4826      	ldr	r0, [pc, #152]	@ (8000860 <Fpga_Write+0x290>)
 80007c8:	f002 f877 	bl	80028ba <HAL_GPIO_WritePin>
 80007cc:	e005      	b.n	80007da <Fpga_Write+0x20a>
	else
		HAL_GPIO_WritePin(DATA0_GPIO_Port,DATA0_Pin,GPIO_PIN_RESET);
 80007ce:	2200      	movs	r2, #0
 80007d0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80007d4:	4822      	ldr	r0, [pc, #136]	@ (8000860 <Fpga_Write+0x290>)
 80007d6:	f002 f870 	bl	80028ba <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(MCU_CS_GPIO_Port,MCU_CS_Pin,GPIO_PIN_RESET);			//片选拉低
 80007da:	2200      	movs	r2, #0
 80007dc:	2101      	movs	r1, #1
 80007de:	4823      	ldr	r0, [pc, #140]	@ (800086c <Fpga_Write+0x29c>)
 80007e0:	f002 f86b 	bl	80028ba <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(MCU_CS_GPIO_Port,MCU_CS_Pin,GPIO_PIN_SET);			//片选拉高
 80007e4:	2201      	movs	r2, #1
 80007e6:	2101      	movs	r1, #1
 80007e8:	4820      	ldr	r0, [pc, #128]	@ (800086c <Fpga_Write+0x29c>)
 80007ea:	f002 f866 	bl	80028ba <HAL_GPIO_WritePin>


	GPIO_InitStruct.Pin = DATA1_Pin|DATA0_Pin|DATA2_Pin;
 80007ee:	4b1b      	ldr	r3, [pc, #108]	@ (800085c <Fpga_Write+0x28c>)
 80007f0:	f241 020c 	movw	r2, #4108	@ 0x100c
 80007f4:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007f6:	4b19      	ldr	r3, [pc, #100]	@ (800085c <Fpga_Write+0x28c>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fc:	4b17      	ldr	r3, [pc, #92]	@ (800085c <Fpga_Write+0x28c>)
 80007fe:	2200      	movs	r2, #0
 8000800:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000802:	4b16      	ldr	r3, [pc, #88]	@ (800085c <Fpga_Write+0x28c>)
 8000804:	2203      	movs	r2, #3
 8000806:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000808:	4914      	ldr	r1, [pc, #80]	@ (800085c <Fpga_Write+0x28c>)
 800080a:	4815      	ldr	r0, [pc, #84]	@ (8000860 <Fpga_Write+0x290>)
 800080c:	f001 feaa 	bl	8002564 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = DATA3_Pin|DATA4_Pin;
 8000810:	4b12      	ldr	r3, [pc, #72]	@ (800085c <Fpga_Write+0x28c>)
 8000812:	2248      	movs	r2, #72	@ 0x48
 8000814:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000816:	4b11      	ldr	r3, [pc, #68]	@ (800085c <Fpga_Write+0x28c>)
 8000818:	2200      	movs	r2, #0
 800081a:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081c:	4b0f      	ldr	r3, [pc, #60]	@ (800085c <Fpga_Write+0x28c>)
 800081e:	2200      	movs	r2, #0
 8000820:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000822:	4b0e      	ldr	r3, [pc, #56]	@ (800085c <Fpga_Write+0x28c>)
 8000824:	2203      	movs	r2, #3
 8000826:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000828:	490c      	ldr	r1, [pc, #48]	@ (800085c <Fpga_Write+0x28c>)
 800082a:	480e      	ldr	r0, [pc, #56]	@ (8000864 <Fpga_Write+0x294>)
 800082c:	f001 fe9a 	bl	8002564 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = DATA5_Pin|DATA6_Pin|DATA7_Pin;
 8000830:	4b0a      	ldr	r3, [pc, #40]	@ (800085c <Fpga_Write+0x28c>)
 8000832:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8000836:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000838:	4b08      	ldr	r3, [pc, #32]	@ (800085c <Fpga_Write+0x28c>)
 800083a:	2200      	movs	r2, #0
 800083c:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083e:	4b07      	ldr	r3, [pc, #28]	@ (800085c <Fpga_Write+0x28c>)
 8000840:	2200      	movs	r2, #0
 8000842:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000844:	4b05      	ldr	r3, [pc, #20]	@ (800085c <Fpga_Write+0x28c>)
 8000846:	2203      	movs	r2, #3
 8000848:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800084a:	4904      	ldr	r1, [pc, #16]	@ (800085c <Fpga_Write+0x28c>)
 800084c:	4806      	ldr	r0, [pc, #24]	@ (8000868 <Fpga_Write+0x298>)
 800084e:	f001 fe89 	bl	8002564 <HAL_GPIO_Init>
}
 8000852:	bf00      	nop
 8000854:	3708      	adds	r7, #8
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	2000003c 	.word	0x2000003c
 8000860:	40010800 	.word	0x40010800
 8000864:	40011400 	.word	0x40011400
 8000868:	40010c00 	.word	0x40010c00
 800086c:	40011800 	.word	0x40011800

08000870 <Write_Fir_Parameter>:

#define Filter_Order 		255

void Write_Fir_Parameter(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b086      	sub	sp, #24
 8000874:	af00      	add	r7, sp, #0
    unsigned int i,j,t,d;
	unsigned char init_cn;
	unsigned char sum1,sum2;

    Fpga_Write(7,Filter_Order >> 8);
 8000876:	2100      	movs	r1, #0
 8000878:	2007      	movs	r0, #7
 800087a:	f7ff fea9 	bl	80005d0 <Fpga_Write>
    Fpga_Write(8,(Filter_Order & 0x00FF));
 800087e:	21ff      	movs	r1, #255	@ 0xff
 8000880:	2008      	movs	r0, #8
 8000882:	f7ff fea5 	bl	80005d0 <Fpga_Write>

	init_cn = 0;
 8000886:	2300      	movs	r3, #0
 8000888:	72fb      	strb	r3, [r7, #11]
	while(init_cn < 10)
 800088a:	e0a1      	b.n	80009d0 <Write_Fir_Parameter+0x160>
	{
		sum1 = 0;
 800088c:	2300      	movs	r3, #0
 800088e:	72bb      	strb	r3, [r7, #10]
		sum2 = 0;
 8000890:	2300      	movs	r3, #0
 8000892:	727b      	strb	r3, [r7, #9]

		t = 0x80;
 8000894:	2380      	movs	r3, #128	@ 0x80
 8000896:	60fb      	str	r3, [r7, #12]
		for(i=0; i<Filter_Order;)
 8000898:	2300      	movs	r3, #0
 800089a:	617b      	str	r3, [r7, #20]
 800089c:	e04d      	b.n	800093a <Write_Fir_Parameter+0xca>
		{
			for(j=0; j<32; j++,i++)
 800089e:	2300      	movs	r3, #0
 80008a0:	613b      	str	r3, [r7, #16]
 80008a2:	e044      	b.n	800092e <Write_Fir_Parameter+0xbe>
			{
				if(i < Filter_Order)
 80008a4:	697b      	ldr	r3, [r7, #20]
 80008a6:	2bfe      	cmp	r3, #254	@ 0xfe
 80008a8:	d827      	bhi.n	80008fa <Write_Fir_Parameter+0x8a>
				{
					Fpga_Write(0x09,j);
 80008aa:	693b      	ldr	r3, [r7, #16]
 80008ac:	b2db      	uxtb	r3, r3
 80008ae:	4619      	mov	r1, r3
 80008b0:	2009      	movs	r0, #9
 80008b2:	f7ff fe8d 	bl	80005d0 <Fpga_Write>
					Fpga_Write(0x0A,FIR_Parameter[i] >> 8);
 80008b6:	4a59      	ldr	r2, [pc, #356]	@ (8000a1c <Write_Fir_Parameter+0x1ac>)
 80008b8:	697b      	ldr	r3, [r7, #20]
 80008ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008be:	121b      	asrs	r3, r3, #8
 80008c0:	b2db      	uxtb	r3, r3
 80008c2:	4619      	mov	r1, r3
 80008c4:	200a      	movs	r0, #10
 80008c6:	f7ff fe83 	bl	80005d0 <Fpga_Write>
					Fpga_Write(0x0B,FIR_Parameter[i]);
 80008ca:	4a54      	ldr	r2, [pc, #336]	@ (8000a1c <Write_Fir_Parameter+0x1ac>)
 80008cc:	697b      	ldr	r3, [r7, #20]
 80008ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008d2:	b2db      	uxtb	r3, r3
 80008d4:	4619      	mov	r1, r3
 80008d6:	200b      	movs	r0, #11
 80008d8:	f7ff fe7a 	bl	80005d0 <Fpga_Write>
					Fpga_Write(0x0C,t);		//Fir_Parameter_Ram_WR(MSB),Fir_Parameter_Ram_sel
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	b2db      	uxtb	r3, r3
 80008e0:	4619      	mov	r1, r3
 80008e2:	200c      	movs	r0, #12
 80008e4:	f7ff fe74 	bl	80005d0 <Fpga_Write>
					sum1 += FIR_Parameter[i];
 80008e8:	4a4c      	ldr	r2, [pc, #304]	@ (8000a1c <Write_Fir_Parameter+0x1ac>)
 80008ea:	697b      	ldr	r3, [r7, #20]
 80008ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008f0:	b2da      	uxtb	r2, r3
 80008f2:	7abb      	ldrb	r3, [r7, #10]
 80008f4:	4413      	add	r3, r2
 80008f6:	72bb      	strb	r3, [r7, #10]
 80008f8:	e013      	b.n	8000922 <Write_Fir_Parameter+0xb2>
				}
				else
				{
					Fpga_Write(0x09,j);
 80008fa:	693b      	ldr	r3, [r7, #16]
 80008fc:	b2db      	uxtb	r3, r3
 80008fe:	4619      	mov	r1, r3
 8000900:	2009      	movs	r0, #9
 8000902:	f7ff fe65 	bl	80005d0 <Fpga_Write>
					Fpga_Write(0x0A,0);
 8000906:	2100      	movs	r1, #0
 8000908:	200a      	movs	r0, #10
 800090a:	f7ff fe61 	bl	80005d0 <Fpga_Write>
					Fpga_Write(0x0B,0);
 800090e:	2100      	movs	r1, #0
 8000910:	200b      	movs	r0, #11
 8000912:	f7ff fe5d 	bl	80005d0 <Fpga_Write>
					Fpga_Write(0x0C,t);		//Fir_Parameter_Ram_WR(MSB),Fir_Parameter_Ram_sel
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	b2db      	uxtb	r3, r3
 800091a:	4619      	mov	r1, r3
 800091c:	200c      	movs	r0, #12
 800091e:	f7ff fe57 	bl	80005d0 <Fpga_Write>
			for(j=0; j<32; j++,i++)
 8000922:	693b      	ldr	r3, [r7, #16]
 8000924:	3301      	adds	r3, #1
 8000926:	613b      	str	r3, [r7, #16]
 8000928:	697b      	ldr	r3, [r7, #20]
 800092a:	3301      	adds	r3, #1
 800092c:	617b      	str	r3, [r7, #20]
 800092e:	693b      	ldr	r3, [r7, #16]
 8000930:	2b1f      	cmp	r3, #31
 8000932:	d9b7      	bls.n	80008a4 <Write_Fir_Parameter+0x34>
				}
			}
			t++;
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	3301      	adds	r3, #1
 8000938:	60fb      	str	r3, [r7, #12]
		for(i=0; i<Filter_Order;)
 800093a:	697b      	ldr	r3, [r7, #20]
 800093c:	2bfe      	cmp	r3, #254	@ 0xfe
 800093e:	d9ae      	bls.n	800089e <Write_Fir_Parameter+0x2e>
		}

		t = 0x00;
 8000940:	2300      	movs	r3, #0
 8000942:	60fb      	str	r3, [r7, #12]
		for(i=0; i<Filter_Order;)
 8000944:	2300      	movs	r3, #0
 8000946:	617b      	str	r3, [r7, #20]
 8000948:	e035      	b.n	80009b6 <Write_Fir_Parameter+0x146>
		{
			for(j=0; j<32; j++,i++)
 800094a:	2300      	movs	r3, #0
 800094c:	613b      	str	r3, [r7, #16]
 800094e:	e02c      	b.n	80009aa <Write_Fir_Parameter+0x13a>
			{
				if(i < Filter_Order)
 8000950:	697b      	ldr	r3, [r7, #20]
 8000952:	2bfe      	cmp	r3, #254	@ 0xfe
 8000954:	d821      	bhi.n	800099a <Write_Fir_Parameter+0x12a>
				{
					Fpga_Write(0x09,j);
 8000956:	693b      	ldr	r3, [r7, #16]
 8000958:	b2db      	uxtb	r3, r3
 800095a:	4619      	mov	r1, r3
 800095c:	2009      	movs	r0, #9
 800095e:	f7ff fe37 	bl	80005d0 <Fpga_Write>
					Fpga_Write(0x0C,t);		//Fir_Parameter_Ram_WR(MSB),Fir_Parameter_Ram_sel
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	b2db      	uxtb	r3, r3
 8000966:	4619      	mov	r1, r3
 8000968:	200c      	movs	r0, #12
 800096a:	f7ff fe31 	bl	80005d0 <Fpga_Write>
					d = Fpga_Read(0x0A);
 800096e:	200a      	movs	r0, #10
 8000970:	f7ff fd08 	bl	8000384 <Fpga_Read>
 8000974:	4603      	mov	r3, r0
 8000976:	607b      	str	r3, [r7, #4]
					d = d << 8;
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	021b      	lsls	r3, r3, #8
 800097c:	607b      	str	r3, [r7, #4]
					d |= Fpga_Read(0x0B);
 800097e:	200b      	movs	r0, #11
 8000980:	f7ff fd00 	bl	8000384 <Fpga_Read>
 8000984:	4603      	mov	r3, r0
 8000986:	461a      	mov	r2, r3
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	4313      	orrs	r3, r2
 800098c:	607b      	str	r3, [r7, #4]
					sum2 += d;
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	b2da      	uxtb	r2, r3
 8000992:	7a7b      	ldrb	r3, [r7, #9]
 8000994:	4413      	add	r3, r2
 8000996:	727b      	strb	r3, [r7, #9]
 8000998:	e001      	b.n	800099e <Write_Fir_Parameter+0x12e>
				}
				else
				{
					d = 0;
 800099a:	2300      	movs	r3, #0
 800099c:	607b      	str	r3, [r7, #4]
			for(j=0; j<32; j++,i++)
 800099e:	693b      	ldr	r3, [r7, #16]
 80009a0:	3301      	adds	r3, #1
 80009a2:	613b      	str	r3, [r7, #16]
 80009a4:	697b      	ldr	r3, [r7, #20]
 80009a6:	3301      	adds	r3, #1
 80009a8:	617b      	str	r3, [r7, #20]
 80009aa:	693b      	ldr	r3, [r7, #16]
 80009ac:	2b1f      	cmp	r3, #31
 80009ae:	d9cf      	bls.n	8000950 <Write_Fir_Parameter+0xe0>
				}
			}
			t++;
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	3301      	adds	r3, #1
 80009b4:	60fb      	str	r3, [r7, #12]
		for(i=0; i<Filter_Order;)
 80009b6:	697b      	ldr	r3, [r7, #20]
 80009b8:	2bfe      	cmp	r3, #254	@ 0xfe
 80009ba:	d9c6      	bls.n	800094a <Write_Fir_Parameter+0xda>
		}

		if(sum1 != sum2)
 80009bc:	7aba      	ldrb	r2, [r7, #10]
 80009be:	7a7b      	ldrb	r3, [r7, #9]
 80009c0:	429a      	cmp	r2, r3
 80009c2:	d003      	beq.n	80009cc <Write_Fir_Parameter+0x15c>
			init_cn++;
 80009c4:	7afb      	ldrb	r3, [r7, #11]
 80009c6:	3301      	adds	r3, #1
 80009c8:	72fb      	strb	r3, [r7, #11]
 80009ca:	e001      	b.n	80009d0 <Write_Fir_Parameter+0x160>
		else
			init_cn = 10;
 80009cc:	230a      	movs	r3, #10
 80009ce:	72fb      	strb	r3, [r7, #11]
	while(init_cn < 10)
 80009d0:	7afb      	ldrb	r3, [r7, #11]
 80009d2:	2b09      	cmp	r3, #9
 80009d4:	f67f af5a 	bls.w	800088c <Write_Fir_Parameter+0x1c>
	}

	ComSendChar(COM1,(sum1 >> 8));
 80009d8:	7abb      	ldrb	r3, [r7, #10]
 80009da:	121b      	asrs	r3, r3, #8
 80009dc:	b2db      	uxtb	r3, r3
 80009de:	4619      	mov	r1, r3
 80009e0:	20dd      	movs	r0, #221	@ 0xdd
 80009e2:	f000 fd53 	bl	800148c <ComSendChar>
	ComSendChar(COM1,sum1);
 80009e6:	7abb      	ldrb	r3, [r7, #10]
 80009e8:	4619      	mov	r1, r3
 80009ea:	20dd      	movs	r0, #221	@ 0xdd
 80009ec:	f000 fd4e 	bl	800148c <ComSendChar>

	ComSendChar(COM1,(sum2 >> 8));
 80009f0:	7a7b      	ldrb	r3, [r7, #9]
 80009f2:	121b      	asrs	r3, r3, #8
 80009f4:	b2db      	uxtb	r3, r3
 80009f6:	4619      	mov	r1, r3
 80009f8:	20dd      	movs	r0, #221	@ 0xdd
 80009fa:	f000 fd47 	bl	800148c <ComSendChar>
	ComSendChar(COM1,sum2);
 80009fe:	7a7b      	ldrb	r3, [r7, #9]
 8000a00:	4619      	mov	r1, r3
 8000a02:	20dd      	movs	r0, #221	@ 0xdd
 8000a04:	f000 fd42 	bl	800148c <ComSendChar>

	ComSendChar(COM1,init_cn);
 8000a08:	7afb      	ldrb	r3, [r7, #11]
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	20dd      	movs	r0, #221	@ 0xdd
 8000a0e:	f000 fd3d 	bl	800148c <ComSendChar>

}
 8000a12:	bf00      	nop
 8000a14:	3718      	adds	r7, #24
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	080044d0 	.word	0x080044d0

08000a20 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b08a      	sub	sp, #40	@ 0x28
 8000a24:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a26:	f107 0318 	add.w	r3, r7, #24
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	601a      	str	r2, [r3, #0]
 8000a2e:	605a      	str	r2, [r3, #4]
 8000a30:	609a      	str	r2, [r3, #8]
 8000a32:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a34:	4b54      	ldr	r3, [pc, #336]	@ (8000b88 <MX_GPIO_Init+0x168>)
 8000a36:	699b      	ldr	r3, [r3, #24]
 8000a38:	4a53      	ldr	r2, [pc, #332]	@ (8000b88 <MX_GPIO_Init+0x168>)
 8000a3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a3e:	6193      	str	r3, [r2, #24]
 8000a40:	4b51      	ldr	r3, [pc, #324]	@ (8000b88 <MX_GPIO_Init+0x168>)
 8000a42:	699b      	ldr	r3, [r3, #24]
 8000a44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a48:	617b      	str	r3, [r7, #20]
 8000a4a:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4c:	4b4e      	ldr	r3, [pc, #312]	@ (8000b88 <MX_GPIO_Init+0x168>)
 8000a4e:	699b      	ldr	r3, [r3, #24]
 8000a50:	4a4d      	ldr	r2, [pc, #308]	@ (8000b88 <MX_GPIO_Init+0x168>)
 8000a52:	f043 0304 	orr.w	r3, r3, #4
 8000a56:	6193      	str	r3, [r2, #24]
 8000a58:	4b4b      	ldr	r3, [pc, #300]	@ (8000b88 <MX_GPIO_Init+0x168>)
 8000a5a:	699b      	ldr	r3, [r3, #24]
 8000a5c:	f003 0304 	and.w	r3, r3, #4
 8000a60:	613b      	str	r3, [r7, #16]
 8000a62:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a64:	4b48      	ldr	r3, [pc, #288]	@ (8000b88 <MX_GPIO_Init+0x168>)
 8000a66:	699b      	ldr	r3, [r3, #24]
 8000a68:	4a47      	ldr	r2, [pc, #284]	@ (8000b88 <MX_GPIO_Init+0x168>)
 8000a6a:	f043 0310 	orr.w	r3, r3, #16
 8000a6e:	6193      	str	r3, [r2, #24]
 8000a70:	4b45      	ldr	r3, [pc, #276]	@ (8000b88 <MX_GPIO_Init+0x168>)
 8000a72:	699b      	ldr	r3, [r3, #24]
 8000a74:	f003 0310 	and.w	r3, r3, #16
 8000a78:	60fb      	str	r3, [r7, #12]
 8000a7a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a7c:	4b42      	ldr	r3, [pc, #264]	@ (8000b88 <MX_GPIO_Init+0x168>)
 8000a7e:	699b      	ldr	r3, [r3, #24]
 8000a80:	4a41      	ldr	r2, [pc, #260]	@ (8000b88 <MX_GPIO_Init+0x168>)
 8000a82:	f043 0320 	orr.w	r3, r3, #32
 8000a86:	6193      	str	r3, [r2, #24]
 8000a88:	4b3f      	ldr	r3, [pc, #252]	@ (8000b88 <MX_GPIO_Init+0x168>)
 8000a8a:	699b      	ldr	r3, [r3, #24]
 8000a8c:	f003 0320 	and.w	r3, r3, #32
 8000a90:	60bb      	str	r3, [r7, #8]
 8000a92:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a94:	4b3c      	ldr	r3, [pc, #240]	@ (8000b88 <MX_GPIO_Init+0x168>)
 8000a96:	699b      	ldr	r3, [r3, #24]
 8000a98:	4a3b      	ldr	r2, [pc, #236]	@ (8000b88 <MX_GPIO_Init+0x168>)
 8000a9a:	f043 0308 	orr.w	r3, r3, #8
 8000a9e:	6193      	str	r3, [r2, #24]
 8000aa0:	4b39      	ldr	r3, [pc, #228]	@ (8000b88 <MX_GPIO_Init+0x168>)
 8000aa2:	699b      	ldr	r3, [r3, #24]
 8000aa4:	f003 0308 	and.w	r3, r3, #8
 8000aa8:	607b      	str	r3, [r7, #4]
 8000aaa:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ADDR0_Pin|ADDR1_Pin|ADDR2_Pin|ADDR3_Pin
 8000aac:	2200      	movs	r2, #0
 8000aae:	213d      	movs	r1, #61	@ 0x3d
 8000ab0:	4836      	ldr	r0, [pc, #216]	@ (8000b8c <MX_GPIO_Init+0x16c>)
 8000ab2:	f001 ff02 	bl	80028ba <HAL_GPIO_WritePin>
                          |MCU_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DATA1_Pin|MCU_WR_Pin|DATA0_Pin, GPIO_PIN_RESET);
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	f641 0104 	movw	r1, #6148	@ 0x1804
 8000abc:	4834      	ldr	r0, [pc, #208]	@ (8000b90 <MX_GPIO_Init+0x170>)
 8000abe:	f001 fefc 	bl	80028ba <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DATA2_GPIO_Port, DATA2_Pin, GPIO_PIN_RESET);
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	2108      	movs	r1, #8
 8000ac6:	4832      	ldr	r0, [pc, #200]	@ (8000b90 <MX_GPIO_Init+0x170>)
 8000ac8:	f001 fef7 	bl	80028ba <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, DATA3_Pin|DATA4_Pin, GPIO_PIN_RESET);
 8000acc:	2200      	movs	r2, #0
 8000ace:	2148      	movs	r1, #72	@ 0x48
 8000ad0:	4830      	ldr	r0, [pc, #192]	@ (8000b94 <MX_GPIO_Init+0x174>)
 8000ad2:	f001 fef2 	bl	80028ba <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DATA5_Pin|DATA6_Pin|DATA7_Pin, GPIO_PIN_RESET);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	f44f 7148 	mov.w	r1, #800	@ 0x320
 8000adc:	482e      	ldr	r0, [pc, #184]	@ (8000b98 <MX_GPIO_Init+0x178>)
 8000ade:	f001 feec 	bl	80028ba <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
	GPIO_InitStruct.Pin = ADDR0_Pin|ADDR1_Pin|ADDR2_Pin|ADDR3_Pin
 8000ae2:	233d      	movs	r3, #61	@ 0x3d
 8000ae4:	61bb      	str	r3, [r7, #24]
						  |MCU_CS_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aea:	2300      	movs	r3, #0
 8000aec:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000aee:	2303      	movs	r3, #3
 8000af0:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000af2:	f107 0318 	add.w	r3, r7, #24
 8000af6:	4619      	mov	r1, r3
 8000af8:	4824      	ldr	r0, [pc, #144]	@ (8000b8c <MX_GPIO_Init+0x16c>)
 8000afa:	f001 fd33 	bl	8002564 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = MCU_WR_Pin;
 8000afe:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000b02:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b04:	2301      	movs	r3, #1
 8000b06:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b0c:	2303      	movs	r3, #3
 8000b0e:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b10:	f107 0318 	add.w	r3, r7, #24
 8000b14:	4619      	mov	r1, r3
 8000b16:	481e      	ldr	r0, [pc, #120]	@ (8000b90 <MX_GPIO_Init+0x170>)
 8000b18:	f001 fd24 	bl	8002564 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = DATA1_Pin|MCU_WR_Pin|DATA0_Pin|DATA2_Pin;
 8000b1c:	f641 030c 	movw	r3, #6156	@ 0x180c
 8000b20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b22:	2301      	movs	r3, #1
 8000b24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b26:	2300      	movs	r3, #0
 8000b28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b2a:	2303      	movs	r3, #3
 8000b2c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b2e:	f107 0318 	add.w	r3, r7, #24
 8000b32:	4619      	mov	r1, r3
 8000b34:	4816      	ldr	r0, [pc, #88]	@ (8000b90 <MX_GPIO_Init+0x170>)
 8000b36:	f001 fd15 	bl	8002564 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = DATA3_Pin|DATA4_Pin;
 8000b3a:	2348      	movs	r3, #72	@ 0x48
 8000b3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b42:	2300      	movs	r3, #0
 8000b44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b46:	2303      	movs	r3, #3
 8000b48:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b4a:	f107 0318 	add.w	r3, r7, #24
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4810      	ldr	r0, [pc, #64]	@ (8000b94 <MX_GPIO_Init+0x174>)
 8000b52:	f001 fd07 	bl	8002564 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DATA5_Pin|DATA6_Pin|DATA7_Pin|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8000b56:	f247 3320 	movw	r3, #29472	@ 0x7320
 8000b5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b60:	2300      	movs	r3, #0
 8000b62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b64:	2303      	movs	r3, #3
 8000b66:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b68:	f107 0318 	add.w	r3, r7, #24
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	480a      	ldr	r0, [pc, #40]	@ (8000b98 <MX_GPIO_Init+0x178>)
 8000b70:	f001 fcf8 	bl	8002564 <HAL_GPIO_Init>


  HAL_GPIO_WritePin(GPIOE,MCU_CS_Pin,GPIO_PIN_SET);//fpga片选拉高
 8000b74:	2201      	movs	r2, #1
 8000b76:	2101      	movs	r1, #1
 8000b78:	4804      	ldr	r0, [pc, #16]	@ (8000b8c <MX_GPIO_Init+0x16c>)
 8000b7a:	f001 fe9e 	bl	80028ba <HAL_GPIO_WritePin>

}
 8000b7e:	bf00      	nop
 8000b80:	3728      	adds	r7, #40	@ 0x28
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	40021000 	.word	0x40021000
 8000b8c:	40011800 	.word	0x40011800
 8000b90:	40010800 	.word	0x40010800
 8000b94:	40011400 	.word	0x40011400
 8000b98:	40010c00 	.word	0x40010c00

08000b9c <init>:
 *      Author: 16194
 */
#include "main.h"

void init (void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
	SystemClock_Config();			//时钟配置
 8000ba0:	f000 f80e 	bl	8000bc0 <SystemClock_Config>

	HAL_Init();						//HAL库初始化
 8000ba4:	f001 fa2c 	bl	8002000 <HAL_Init>
	MX_GPIO_Init();					//GPIO初始化
 8000ba8:	f7ff ff3a 	bl	8000a20 <MX_GPIO_Init>
	TIM_init();						//定时器初始化
 8000bac:	f000 fa18 	bl	8000fe0 <TIM_init>
	usart_init();					//串口初始化
 8000bb0:	f000 faca 	bl	8001148 <usart_init>
	FPGA_init();					//FPGA初始化
 8000bb4:	f7ff fbb4 	bl	8000320 <FPGA_init>
	MX_IWDG_Init();					//独立看门狗初始化
 8000bb8:	f000 f848 	bl	8000c4c <MX_IWDG_Init>

}
 8000bbc:	bf00      	nop
 8000bbe:	bd80      	pop	{r7, pc}

08000bc0 <SystemClock_Config>:

void SystemClock_Config(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b090      	sub	sp, #64	@ 0x40
 8000bc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bc6:	f107 0318 	add.w	r3, r7, #24
 8000bca:	2228      	movs	r2, #40	@ 0x28
 8000bcc:	2100      	movs	r1, #0
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f003 fc3a 	bl	8004448 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bd4:	1d3b      	adds	r3, r7, #4
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	601a      	str	r2, [r3, #0]
 8000bda:	605a      	str	r2, [r3, #4]
 8000bdc:	609a      	str	r2, [r3, #8]
 8000bde:	60da      	str	r2, [r3, #12]
 8000be0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000be2:	2301      	movs	r3, #1
 8000be4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000be6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000bea:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000bec:	2300      	movs	r3, #0
 8000bee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bf8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000bfc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000bfe:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000c02:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c04:	f107 0318 	add.w	r3, r7, #24
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f001 fedb 	bl	80029c4 <HAL_RCC_OscConfig>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000c14:	f000 f8bb 	bl	8000d8e <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c18:	230f      	movs	r3, #15
 8000c1a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c1c:	2302      	movs	r3, #2
 8000c1e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c20:	2300      	movs	r3, #0
 8000c22:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c24:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c28:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c2e:	1d3b      	adds	r3, r7, #4
 8000c30:	2102      	movs	r1, #2
 8000c32:	4618      	mov	r0, r3
 8000c34:	f002 f948 	bl	8002ec8 <HAL_RCC_ClockConfig>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000c3e:	f000 f8a6 	bl	8000d8e <Error_Handler>
  }
}
 8000c42:	bf00      	nop
 8000c44:	3740      	adds	r7, #64	@ 0x40
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
	...

08000c4c <MX_IWDG_Init>:

IWDG_HandleTypeDef iwdg;
void MX_IWDG_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
	iwdg.Instance = IWDG;
 8000c50:	4b09      	ldr	r3, [pc, #36]	@ (8000c78 <MX_IWDG_Init+0x2c>)
 8000c52:	4a0a      	ldr	r2, [pc, #40]	@ (8000c7c <MX_IWDG_Init+0x30>)
 8000c54:	601a      	str	r2, [r3, #0]
	iwdg.Init.Prescaler = IWDG_PRESCALER_4;
 8000c56:	4b08      	ldr	r3, [pc, #32]	@ (8000c78 <MX_IWDG_Init+0x2c>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	605a      	str	r2, [r3, #4]
	iwdg.Init.Reload = 5000;
 8000c5c:	4b06      	ldr	r3, [pc, #24]	@ (8000c78 <MX_IWDG_Init+0x2c>)
 8000c5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000c62:	609a      	str	r2, [r3, #8]
	if(HAL_IWDG_Init(&iwdg) != HAL_OK)
 8000c64:	4804      	ldr	r0, [pc, #16]	@ (8000c78 <MX_IWDG_Init+0x2c>)
 8000c66:	f001 fe59 	bl	800291c <HAL_IWDG_Init>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <MX_IWDG_Init+0x28>
	{
		Error_Handler();
 8000c70:	f000 f88d 	bl	8000d8e <Error_Handler>
	}
}
 8000c74:	bf00      	nop
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	20000050 	.word	0x20000050
 8000c7c:	40003000 	.word	0x40003000

08000c80 <IWDG_FEED_DOG>:

void IWDG_FEED_DOG(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
	HAL_IWDG_Refresh(&iwdg);	//410ms内清掉看门狗
 8000c84:	4802      	ldr	r0, [pc, #8]	@ (8000c90 <IWDG_FEED_DOG+0x10>)
 8000c86:	f001 fe8d 	bl	80029a4 <HAL_IWDG_Refresh>
}
 8000c8a:	bf00      	nop
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	20000050 	.word	0x20000050

08000c94 <Checksum_Reverse>:

/****************************************************************/
/*-----------------ETH下发数据校验和计算函数------------------------*/
uint16_t Checksum_Reverse(uint8_t * p,uint16_t _len)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b0b6      	sub	sp, #216	@ 0xd8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
 8000c9c:	460b      	mov	r3, r1
 8000c9e:	807b      	strh	r3, [r7, #2]
	uint16_t sum = 0;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	f8a7 30d6 	strh.w	r3, [r7, #214]	@ 0xd6
	uint16_t i,y;
	uint16_t Buf[100] = {0};
 8000ca6:	f107 0308 	add.w	r3, r7, #8
 8000caa:	22c8      	movs	r2, #200	@ 0xc8
 8000cac:	2100      	movs	r1, #0
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f003 fbca 	bl	8004448 <memset>
	for(i=0;i<(_len/2);i++)
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	f8a7 30d4 	strh.w	r3, [r7, #212]	@ 0xd4
 8000cba:	e01e      	b.n	8000cfa <Checksum_Reverse+0x66>
	{
		Buf[i] = (p[2*i+1] << 8) + p[2*i];
 8000cbc:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	@ 0xd4
 8000cc0:	005b      	lsls	r3, r3, #1
 8000cc2:	3301      	adds	r3, #1
 8000cc4:	687a      	ldr	r2, [r7, #4]
 8000cc6:	4413      	add	r3, r2
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	021b      	lsls	r3, r3, #8
 8000ccc:	b29a      	uxth	r2, r3
 8000cce:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	@ 0xd4
 8000cd2:	005b      	lsls	r3, r3, #1
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	440b      	add	r3, r1
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	4619      	mov	r1, r3
 8000cde:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	@ 0xd4
 8000ce2:	440a      	add	r2, r1
 8000ce4:	b292      	uxth	r2, r2
 8000ce6:	005b      	lsls	r3, r3, #1
 8000ce8:	33d8      	adds	r3, #216	@ 0xd8
 8000cea:	443b      	add	r3, r7
 8000cec:	f823 2cd0 	strh.w	r2, [r3, #-208]
	for(i=0;i<(_len/2);i++)
 8000cf0:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	@ 0xd4
 8000cf4:	3301      	adds	r3, #1
 8000cf6:	f8a7 30d4 	strh.w	r3, [r7, #212]	@ 0xd4
 8000cfa:	887b      	ldrh	r3, [r7, #2]
 8000cfc:	085b      	lsrs	r3, r3, #1
 8000cfe:	b29b      	uxth	r3, r3
 8000d00:	f8b7 20d4 	ldrh.w	r2, [r7, #212]	@ 0xd4
 8000d04:	429a      	cmp	r2, r3
 8000d06:	d3d9      	bcc.n	8000cbc <Checksum_Reverse+0x28>
	}
	for(y=0;y<(_len/2);y++)
 8000d08:	2300      	movs	r3, #0
 8000d0a:	f8a7 30d2 	strh.w	r3, [r7, #210]	@ 0xd2
 8000d0e:	e010      	b.n	8000d32 <Checksum_Reverse+0x9e>
	{
		sum += Buf[y];
 8000d10:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	@ 0xd2
 8000d14:	005b      	lsls	r3, r3, #1
 8000d16:	33d8      	adds	r3, #216	@ 0xd8
 8000d18:	443b      	add	r3, r7
 8000d1a:	f833 2cd0 	ldrh.w	r2, [r3, #-208]
 8000d1e:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	@ 0xd6
 8000d22:	4413      	add	r3, r2
 8000d24:	f8a7 30d6 	strh.w	r3, [r7, #214]	@ 0xd6
	for(y=0;y<(_len/2);y++)
 8000d28:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	@ 0xd2
 8000d2c:	3301      	adds	r3, #1
 8000d2e:	f8a7 30d2 	strh.w	r3, [r7, #210]	@ 0xd2
 8000d32:	887b      	ldrh	r3, [r7, #2]
 8000d34:	085b      	lsrs	r3, r3, #1
 8000d36:	b29b      	uxth	r3, r3
 8000d38:	f8b7 20d2 	ldrh.w	r2, [r7, #210]	@ 0xd2
 8000d3c:	429a      	cmp	r2, r3
 8000d3e:	d3e7      	bcc.n	8000d10 <Checksum_Reverse+0x7c>
	}
	return sum;
 8000d40:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	@ 0xd6
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	37d8      	adds	r7, #216	@ 0xd8
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}

08000d4c <Checksum_sum>:

/*---------------------------校验和计算函数------------------------*/
uint16_t Checksum_sum(uint8_t * p,uint16_t _len)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b085      	sub	sp, #20
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
 8000d54:	460b      	mov	r3, r1
 8000d56:	807b      	strh	r3, [r7, #2]
	uint16_t sum = 0;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	81fb      	strh	r3, [r7, #14]
	for(unsigned char i=0;i<_len;i++)
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	737b      	strb	r3, [r7, #13]
 8000d60:	e00a      	b.n	8000d78 <Checksum_sum+0x2c>
	{
		sum += p[i];
 8000d62:	7b7b      	ldrb	r3, [r7, #13]
 8000d64:	687a      	ldr	r2, [r7, #4]
 8000d66:	4413      	add	r3, r2
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	461a      	mov	r2, r3
 8000d6c:	89fb      	ldrh	r3, [r7, #14]
 8000d6e:	4413      	add	r3, r2
 8000d70:	81fb      	strh	r3, [r7, #14]
	for(unsigned char i=0;i<_len;i++)
 8000d72:	7b7b      	ldrb	r3, [r7, #13]
 8000d74:	3301      	adds	r3, #1
 8000d76:	737b      	strb	r3, [r7, #13]
 8000d78:	7b7b      	ldrb	r3, [r7, #13]
 8000d7a:	b29b      	uxth	r3, r3
 8000d7c:	887a      	ldrh	r2, [r7, #2]
 8000d7e:	429a      	cmp	r2, r3
 8000d80:	d8ef      	bhi.n	8000d62 <Checksum_sum+0x16>
	}
	return sum;
 8000d82:	89fb      	ldrh	r3, [r7, #14]
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	3714      	adds	r7, #20
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bc80      	pop	{r7}
 8000d8c:	4770      	bx	lr

08000d8e <Error_Handler>:

void Error_Handler(void)
{
 8000d8e:	b480      	push	{r7}
 8000d90:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d92:	b672      	cpsid	i
}
 8000d94:	bf00      	nop
  __disable_irq();
  while (1)
 8000d96:	bf00      	nop
 8000d98:	e7fd      	b.n	8000d96 <Error_Handler+0x8>
	...

08000d9c <ETH_CMDPOLL>:
unsigned char CONTRALCMDFLAG = 0;
unsigned int Sertableactlen;
unsigned int Contralcmdlen;

void ETH_CMDPOLL(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
	if(ETHdataoverflag == 1)
 8000da2:	4b4f      	ldr	r3, [pc, #316]	@ (8000ee0 <ETH_CMDPOLL+0x144>)
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	2b01      	cmp	r3, #1
 8000da8:	d17b      	bne.n	8000ea2 <ETH_CMDPOLL+0x106>
	{
		Resetstate(ETHCMD);
 8000daa:	2001      	movs	r0, #1
 8000dac:	f001 f8ba 	bl	8001f24 <Resetstate>

		switch(Workmode)
 8000db0:	4b4c      	ldr	r3, [pc, #304]	@ (8000ee4 <ETH_CMDPOLL+0x148>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	2b04      	cmp	r3, #4
 8000db6:	d06c      	beq.n	8000e92 <ETH_CMDPOLL+0xf6>
 8000db8:	2b04      	cmp	r3, #4
 8000dba:	dc72      	bgt.n	8000ea2 <ETH_CMDPOLL+0x106>
 8000dbc:	2b01      	cmp	r3, #1
 8000dbe:	d002      	beq.n	8000dc6 <ETH_CMDPOLL+0x2a>
 8000dc0:	2b02      	cmp	r3, #2
 8000dc2:	d04c      	beq.n	8000e5e <ETH_CMDPOLL+0xc2>
 8000dc4:	e06d      	b.n	8000ea2 <ETH_CMDPOLL+0x106>
		{
			case SERVICETABLE:								//服务表激活
					ToolID = ETHbodybuf[0];
 8000dc6:	4b48      	ldr	r3, [pc, #288]	@ (8000ee8 <ETH_CMDPOLL+0x14c>)
 8000dc8:	781a      	ldrb	r2, [r3, #0]
 8000dca:	4b48      	ldr	r3, [pc, #288]	@ (8000eec <ETH_CMDPOLL+0x150>)
 8000dcc:	701a      	strb	r2, [r3, #0]
					Subsetnumber = ETHbodybuf[1];
 8000dce:	4b46      	ldr	r3, [pc, #280]	@ (8000ee8 <ETH_CMDPOLL+0x14c>)
 8000dd0:	785a      	ldrb	r2, [r3, #1]
 8000dd2:	4b47      	ldr	r3, [pc, #284]	@ (8000ef0 <ETH_CMDPOLL+0x154>)
 8000dd4:	701a      	strb	r2, [r3, #0]
					Tool_Datalen = (ETHbodybuf[2] << 8) + ETHbodybuf[3];
 8000dd6:	4b44      	ldr	r3, [pc, #272]	@ (8000ee8 <ETH_CMDPOLL+0x14c>)
 8000dd8:	789b      	ldrb	r3, [r3, #2]
 8000dda:	021b      	lsls	r3, r3, #8
 8000ddc:	4a42      	ldr	r2, [pc, #264]	@ (8000ee8 <ETH_CMDPOLL+0x14c>)
 8000dde:	78d2      	ldrb	r2, [r2, #3]
 8000de0:	4413      	add	r3, r2
 8000de2:	461a      	mov	r2, r3
 8000de4:	4b43      	ldr	r3, [pc, #268]	@ (8000ef4 <ETH_CMDPOLL+0x158>)
 8000de6:	601a      	str	r2, [r3, #0]
					Sampleperiod = (ETHbodybuf[4] << 8) + ETHbodybuf[5];
 8000de8:	4b3f      	ldr	r3, [pc, #252]	@ (8000ee8 <ETH_CMDPOLL+0x14c>)
 8000dea:	791b      	ldrb	r3, [r3, #4]
 8000dec:	021b      	lsls	r3, r3, #8
 8000dee:	4a3e      	ldr	r2, [pc, #248]	@ (8000ee8 <ETH_CMDPOLL+0x14c>)
 8000df0:	7952      	ldrb	r2, [r2, #5]
 8000df2:	4413      	add	r3, r2
 8000df4:	461a      	mov	r2, r3
 8000df6:	4b40      	ldr	r3, [pc, #256]	@ (8000ef8 <ETH_CMDPOLL+0x15c>)
 8000df8:	601a      	str	r2, [r3, #0]
					Delaytime = (ETHbodybuf[6] << 8) + ETHbodybuf[7];
 8000dfa:	4b3b      	ldr	r3, [pc, #236]	@ (8000ee8 <ETH_CMDPOLL+0x14c>)
 8000dfc:	799b      	ldrb	r3, [r3, #6]
 8000dfe:	021b      	lsls	r3, r3, #8
 8000e00:	4a39      	ldr	r2, [pc, #228]	@ (8000ee8 <ETH_CMDPOLL+0x14c>)
 8000e02:	79d2      	ldrb	r2, [r2, #7]
 8000e04:	4413      	add	r3, r2
 8000e06:	461a      	mov	r2, r3
 8000e08:	4b3c      	ldr	r3, [pc, #240]	@ (8000efc <ETH_CMDPOLL+0x160>)
 8000e0a:	601a      	str	r2, [r3, #0]
					Teleset = (ETHbodybuf[8] << 8) + ETHbodybuf[9];
 8000e0c:	4b36      	ldr	r3, [pc, #216]	@ (8000ee8 <ETH_CMDPOLL+0x14c>)
 8000e0e:	7a5a      	ldrb	r2, [r3, #9]
 8000e10:	4b3b      	ldr	r3, [pc, #236]	@ (8000f00 <ETH_CMDPOLL+0x164>)
 8000e12:	701a      	strb	r2, [r3, #0]
					Data_reserve = (ETHbodybuf[10] << 8) + ETHbodybuf[11];		//各参数暂存
 8000e14:	4b34      	ldr	r3, [pc, #208]	@ (8000ee8 <ETH_CMDPOLL+0x14c>)
 8000e16:	7ada      	ldrb	r2, [r3, #11]
 8000e18:	4b3a      	ldr	r3, [pc, #232]	@ (8000f04 <ETH_CMDPOLL+0x168>)
 8000e1a:	701a      	strb	r2, [r3, #0]

					Sertableactlen = ETHdatalen;
 8000e1c:	4b3a      	ldr	r3, [pc, #232]	@ (8000f08 <ETH_CMDPOLL+0x16c>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	461a      	mov	r2, r3
 8000e22:	4b3a      	ldr	r3, [pc, #232]	@ (8000f0c <ETH_CMDPOLL+0x170>)
 8000e24:	601a      	str	r2, [r3, #0]

					for(unsigned char i=0;i<Sertableactlen;i++)
 8000e26:	2300      	movs	r3, #0
 8000e28:	71fb      	strb	r3, [r7, #7]
 8000e2a:	e008      	b.n	8000e3e <ETH_CMDPOLL+0xa2>
					{
						Sertableactbuf[i] = ETHbodybuf[i];
 8000e2c:	79fa      	ldrb	r2, [r7, #7]
 8000e2e:	79fb      	ldrb	r3, [r7, #7]
 8000e30:	492d      	ldr	r1, [pc, #180]	@ (8000ee8 <ETH_CMDPOLL+0x14c>)
 8000e32:	5c89      	ldrb	r1, [r1, r2]
 8000e34:	4a36      	ldr	r2, [pc, #216]	@ (8000f10 <ETH_CMDPOLL+0x174>)
 8000e36:	54d1      	strb	r1, [r2, r3]
					for(unsigned char i=0;i<Sertableactlen;i++)
 8000e38:	79fb      	ldrb	r3, [r7, #7]
 8000e3a:	3301      	adds	r3, #1
 8000e3c:	71fb      	strb	r3, [r7, #7]
 8000e3e:	79fa      	ldrb	r2, [r7, #7]
 8000e40:	4b32      	ldr	r3, [pc, #200]	@ (8000f0c <ETH_CMDPOLL+0x170>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	429a      	cmp	r2, r3
 8000e46:	d3f1      	bcc.n	8000e2c <ETH_CMDPOLL+0x90>
					}

					Sertableactflag = 1;
 8000e48:	4b32      	ldr	r3, [pc, #200]	@ (8000f14 <ETH_CMDPOLL+0x178>)
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	701a      	strb	r2, [r3, #0]
					isdowndcmdreport = Sampleperiod;
 8000e4e:	4b2a      	ldr	r3, [pc, #168]	@ (8000ef8 <ETH_CMDPOLL+0x15c>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4a31      	ldr	r2, [pc, #196]	@ (8000f18 <ETH_CMDPOLL+0x17c>)
 8000e54:	6013      	str	r3, [r2, #0]
					Downdatatimeoutnum = 0;
 8000e56:	4b31      	ldr	r3, [pc, #196]	@ (8000f1c <ETH_CMDPOLL+0x180>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	601a      	str	r2, [r3, #0]
			break;
 8000e5c:	e021      	b.n	8000ea2 <ETH_CMDPOLL+0x106>
			case CONTRALCMD:								//控制命令

					Contralcmdlen = ETHdatalen;
 8000e5e:	4b2a      	ldr	r3, [pc, #168]	@ (8000f08 <ETH_CMDPOLL+0x16c>)
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	461a      	mov	r2, r3
 8000e64:	4b2e      	ldr	r3, [pc, #184]	@ (8000f20 <ETH_CMDPOLL+0x184>)
 8000e66:	601a      	str	r2, [r3, #0]

					for(unsigned char i=0;i<Contralcmdlen;i++)
 8000e68:	2300      	movs	r3, #0
 8000e6a:	71bb      	strb	r3, [r7, #6]
 8000e6c:	e008      	b.n	8000e80 <ETH_CMDPOLL+0xe4>
					{
						Contralcmdbuf[i] = ETHbodybuf[i];
 8000e6e:	79ba      	ldrb	r2, [r7, #6]
 8000e70:	79bb      	ldrb	r3, [r7, #6]
 8000e72:	491d      	ldr	r1, [pc, #116]	@ (8000ee8 <ETH_CMDPOLL+0x14c>)
 8000e74:	5c89      	ldrb	r1, [r1, r2]
 8000e76:	4a2b      	ldr	r2, [pc, #172]	@ (8000f24 <ETH_CMDPOLL+0x188>)
 8000e78:	54d1      	strb	r1, [r2, r3]
					for(unsigned char i=0;i<Contralcmdlen;i++)
 8000e7a:	79bb      	ldrb	r3, [r7, #6]
 8000e7c:	3301      	adds	r3, #1
 8000e7e:	71bb      	strb	r3, [r7, #6]
 8000e80:	79ba      	ldrb	r2, [r7, #6]
 8000e82:	4b27      	ldr	r3, [pc, #156]	@ (8000f20 <ETH_CMDPOLL+0x184>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	429a      	cmp	r2, r3
 8000e88:	d3f1      	bcc.n	8000e6e <ETH_CMDPOLL+0xd2>
					}

					CONTRALCMDFLAG = 1;
 8000e8a:	4b27      	ldr	r3, [pc, #156]	@ (8000f28 <ETH_CMDPOLL+0x18c>)
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	701a      	strb	r2, [r3, #0]
			break;
 8000e90:	e007      	b.n	8000ea2 <ETH_CMDPOLL+0x106>
			case DEACTIVE:									//服务表反激活
					Sertableactflag = 0;
 8000e92:	4b20      	ldr	r3, [pc, #128]	@ (8000f14 <ETH_CMDPOLL+0x178>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	701a      	strb	r2, [r3, #0]
					Sampleperiod = 0xFFFF;
 8000e98:	4b17      	ldr	r3, [pc, #92]	@ (8000ef8 <ETH_CMDPOLL+0x15c>)
 8000e9a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e9e:	601a      	str	r2, [r3, #0]
			break;
 8000ea0:	bf00      	nop
		}
	}
	if(Sertableactflag == 1 && isdowndcmdreport == Sampleperiod)		//服务表激活后 按照采样率向井下下发
 8000ea2:	4b1c      	ldr	r3, [pc, #112]	@ (8000f14 <ETH_CMDPOLL+0x178>)
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	2b01      	cmp	r3, #1
 8000ea8:	d116      	bne.n	8000ed8 <ETH_CMDPOLL+0x13c>
 8000eaa:	4b1b      	ldr	r3, [pc, #108]	@ (8000f18 <ETH_CMDPOLL+0x17c>)
 8000eac:	681a      	ldr	r2, [r3, #0]
 8000eae:	4b12      	ldr	r3, [pc, #72]	@ (8000ef8 <ETH_CMDPOLL+0x15c>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	429a      	cmp	r2, r3
 8000eb4:	d110      	bne.n	8000ed8 <ETH_CMDPOLL+0x13c>
	{
		if(CONTRALCMDFLAG == 1)
 8000eb6:	4b1c      	ldr	r3, [pc, #112]	@ (8000f28 <ETH_CMDPOLL+0x18c>)
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	2b01      	cmp	r3, #1
 8000ebc:	d106      	bne.n	8000ecc <ETH_CMDPOLL+0x130>
		{
			Downcmdsend(CONTRALCMD);
 8000ebe:	2002      	movs	r0, #2
 8000ec0:	f000 ff04 	bl	8001ccc <Downcmdsend>
			CONTRALCMDFLAG = 0;
 8000ec4:	4b18      	ldr	r3, [pc, #96]	@ (8000f28 <ETH_CMDPOLL+0x18c>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	701a      	strb	r2, [r3, #0]
 8000eca:	e002      	b.n	8000ed2 <ETH_CMDPOLL+0x136>
		}
		else
		{
			Downcmdsend(SERVICETABLE);
 8000ecc:	2001      	movs	r0, #1
 8000ece:	f000 fefd 	bl	8001ccc <Downcmdsend>
		}
		isdowndcmdreport = 0;
 8000ed2:	4b11      	ldr	r3, [pc, #68]	@ (8000f18 <ETH_CMDPOLL+0x17c>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]
	}
}
 8000ed8:	bf00      	nop
 8000eda:	3708      	adds	r7, #8
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	200005e4 	.word	0x200005e4
 8000ee4:	200005c4 	.word	0x200005c4
 8000ee8:	200003bc 	.word	0x200003bc
 8000eec:	2000005c 	.word	0x2000005c
 8000ef0:	2000005d 	.word	0x2000005d
 8000ef4:	20000060 	.word	0x20000060
 8000ef8:	20000004 	.word	0x20000004
 8000efc:	20000064 	.word	0x20000064
 8000f00:	20000068 	.word	0x20000068
 8000f04:	20000069 	.word	0x20000069
 8000f08:	200005bc 	.word	0x200005bc
 8000f0c:	2000006c 	.word	0x2000006c
 8000f10:	20000608 	.word	0x20000608
 8000f14:	20000008 	.word	0x20000008
 8000f18:	200000c0 	.word	0x200000c0
 8000f1c:	200000cc 	.word	0x200000cc
 8000f20:	20000070 	.word	0x20000070
 8000f24:	2000063c 	.word	0x2000063c
 8000f28:	2000006a 	.word	0x2000006a

08000f2c <DOWN_DATAPOLL>:
extern unsigned char DOWNdatabuf[256];
extern unsigned char DOWNdatastate;
extern unsigned char DOWNheaddatanum;
extern unsigned char DOWNdatabodynum;
void DOWN_DATAPOLL(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
	if(DOWNdataoverflag == 1 && Downdatatimeoutnum <= Delaytime	)	//数据接收完毕且切在上位机允许的时间范围内
 8000f30:	4b0f      	ldr	r3, [pc, #60]	@ (8000f70 <DOWN_DATAPOLL+0x44>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	2b01      	cmp	r3, #1
 8000f36:	d109      	bne.n	8000f4c <DOWN_DATAPOLL+0x20>
 8000f38:	4b0e      	ldr	r3, [pc, #56]	@ (8000f74 <DOWN_DATAPOLL+0x48>)
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	4b0e      	ldr	r3, [pc, #56]	@ (8000f78 <DOWN_DATAPOLL+0x4c>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	429a      	cmp	r2, r3
 8000f42:	d803      	bhi.n	8000f4c <DOWN_DATAPOLL+0x20>
	{
		//Downdatasend(DATABACK);
		Resetstate(TOOLDATA);
 8000f44:	2002      	movs	r0, #2
 8000f46:	f000 ffed 	bl	8001f24 <Resetstate>
	{
		//Downdatasend(TIMEOUT);
		Downdatatimeoutnum = 0;
		Resetstate(TOOLDATA);
	}
}
 8000f4a:	e00f      	b.n	8000f6c <DOWN_DATAPOLL+0x40>
	else if(Sertableactflag == 1 && Downdatatimeoutnum > Delaytime)	//无数据或数据接收完毕但超出上位机允许的时间范围
 8000f4c:	4b0b      	ldr	r3, [pc, #44]	@ (8000f7c <DOWN_DATAPOLL+0x50>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	2b01      	cmp	r3, #1
 8000f52:	d10b      	bne.n	8000f6c <DOWN_DATAPOLL+0x40>
 8000f54:	4b07      	ldr	r3, [pc, #28]	@ (8000f74 <DOWN_DATAPOLL+0x48>)
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	4b07      	ldr	r3, [pc, #28]	@ (8000f78 <DOWN_DATAPOLL+0x4c>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	d905      	bls.n	8000f6c <DOWN_DATAPOLL+0x40>
		Downdatatimeoutnum = 0;
 8000f60:	4b04      	ldr	r3, [pc, #16]	@ (8000f74 <DOWN_DATAPOLL+0x48>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	601a      	str	r2, [r3, #0]
		Resetstate(TOOLDATA);
 8000f66:	2002      	movs	r0, #2
 8000f68:	f000 ffdc 	bl	8001f24 <Resetstate>
}
 8000f6c:	bf00      	nop
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	200005e5 	.word	0x200005e5
 8000f74:	200000cc 	.word	0x200000cc
 8000f78:	20000064 	.word	0x20000064
 8000f7c:	20000008 	.word	0x20000008

08000f80 <Sendtimestamp>:

extern unsigned char istimestampreport;
extern unsigned long Report_Timestamp;
unsigned char Timestampbuf[10]={0x47,0x47};
void Sendtimestamp(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
	if(istimestampreport == 9)
 8000f84:	4b13      	ldr	r3, [pc, #76]	@ (8000fd4 <Sendtimestamp+0x54>)
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	2b09      	cmp	r3, #9
 8000f8a:	d121      	bne.n	8000fd0 <Sendtimestamp+0x50>
	{
		Timestampbuf[2] = Report_Timestamp;
 8000f8c:	4b12      	ldr	r3, [pc, #72]	@ (8000fd8 <Sendtimestamp+0x58>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	b2da      	uxtb	r2, r3
 8000f92:	4b12      	ldr	r3, [pc, #72]	@ (8000fdc <Sendtimestamp+0x5c>)
 8000f94:	709a      	strb	r2, [r3, #2]
		Timestampbuf[3] = Report_Timestamp>>8;
 8000f96:	4b10      	ldr	r3, [pc, #64]	@ (8000fd8 <Sendtimestamp+0x58>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	0a1b      	lsrs	r3, r3, #8
 8000f9c:	b2da      	uxtb	r2, r3
 8000f9e:	4b0f      	ldr	r3, [pc, #60]	@ (8000fdc <Sendtimestamp+0x5c>)
 8000fa0:	70da      	strb	r2, [r3, #3]
		Timestampbuf[4] = Report_Timestamp>>16;
 8000fa2:	4b0d      	ldr	r3, [pc, #52]	@ (8000fd8 <Sendtimestamp+0x58>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	0c1b      	lsrs	r3, r3, #16
 8000fa8:	b2da      	uxtb	r2, r3
 8000faa:	4b0c      	ldr	r3, [pc, #48]	@ (8000fdc <Sendtimestamp+0x5c>)
 8000fac:	711a      	strb	r2, [r3, #4]
		Timestampbuf[5] = Report_Timestamp>>24;
 8000fae:	4b0a      	ldr	r3, [pc, #40]	@ (8000fd8 <Sendtimestamp+0x58>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	0e1b      	lsrs	r3, r3, #24
 8000fb4:	b2da      	uxtb	r2, r3
 8000fb6:	4b09      	ldr	r3, [pc, #36]	@ (8000fdc <Sendtimestamp+0x5c>)
 8000fb8:	715a      	strb	r2, [r3, #5]
		Timestampbuf[6] = 0xab;
 8000fba:	4b08      	ldr	r3, [pc, #32]	@ (8000fdc <Sendtimestamp+0x5c>)
 8000fbc:	22ab      	movs	r2, #171	@ 0xab
 8000fbe:	719a      	strb	r2, [r3, #6]
		ComSendBuf(COM4,Timestampbuf,7);
 8000fc0:	2207      	movs	r2, #7
 8000fc2:	4906      	ldr	r1, [pc, #24]	@ (8000fdc <Sendtimestamp+0x5c>)
 8000fc4:	20cc      	movs	r0, #204	@ 0xcc
 8000fc6:	f000 fa33 	bl	8001430 <ComSendBuf>
		istimestampreport = 0;
 8000fca:	4b02      	ldr	r3, [pc, #8]	@ (8000fd4 <Sendtimestamp+0x54>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	701a      	strb	r2, [r3, #0]
	}
}
 8000fd0:	bf00      	nop
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	200000c4 	.word	0x200000c4
 8000fd8:	200000c8 	.word	0x200000c8
 8000fdc:	2000000c 	.word	0x2000000c

08000fe0 <TIM_init>:
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* USER CODE BEGIN 0 */
void TIM_init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
	MX_TIM6_Init();
 8000fe4:	f000 f808 	bl	8000ff8 <MX_TIM6_Init>
	HAL_TIM_Base_Start_IT(&htim6);
 8000fe8:	4802      	ldr	r0, [pc, #8]	@ (8000ff4 <TIM_init+0x14>)
 8000fea:	f002 f94b 	bl	8003284 <HAL_TIM_Base_Start_IT>
}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	20000074 	.word	0x20000074

08000ff8 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ffe:	463b      	mov	r3, r7
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001006:	4b15      	ldr	r3, [pc, #84]	@ (800105c <MX_TIM6_Init+0x64>)
 8001008:	4a15      	ldr	r2, [pc, #84]	@ (8001060 <MX_TIM6_Init+0x68>)
 800100a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7200-1;
 800100c:	4b13      	ldr	r3, [pc, #76]	@ (800105c <MX_TIM6_Init+0x64>)
 800100e:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8001012:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001014:	4b11      	ldr	r3, [pc, #68]	@ (800105c <MX_TIM6_Init+0x64>)
 8001016:	2200      	movs	r2, #0
 8001018:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10-1;
 800101a:	4b10      	ldr	r3, [pc, #64]	@ (800105c <MX_TIM6_Init+0x64>)
 800101c:	2209      	movs	r2, #9
 800101e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001020:	4b0e      	ldr	r3, [pc, #56]	@ (800105c <MX_TIM6_Init+0x64>)
 8001022:	2200      	movs	r2, #0
 8001024:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001026:	480d      	ldr	r0, [pc, #52]	@ (800105c <MX_TIM6_Init+0x64>)
 8001028:	f002 f8dc 	bl	80031e4 <HAL_TIM_Base_Init>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001032:	f7ff feac 	bl	8000d8e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001036:	2300      	movs	r3, #0
 8001038:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800103a:	2300      	movs	r3, #0
 800103c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800103e:	463b      	mov	r3, r7
 8001040:	4619      	mov	r1, r3
 8001042:	4806      	ldr	r0, [pc, #24]	@ (800105c <MX_TIM6_Init+0x64>)
 8001044:	f002 fb18 	bl	8003678 <HAL_TIMEx_MasterConfigSynchronization>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800104e:	f7ff fe9e 	bl	8000d8e <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001052:	bf00      	nop
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	20000074 	.word	0x20000074
 8001060:	40001000 	.word	0x40001000

08001064 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a0d      	ldr	r2, [pc, #52]	@ (80010a8 <HAL_TIM_Base_MspInit+0x44>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d113      	bne.n	800109e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001076:	4b0d      	ldr	r3, [pc, #52]	@ (80010ac <HAL_TIM_Base_MspInit+0x48>)
 8001078:	69db      	ldr	r3, [r3, #28]
 800107a:	4a0c      	ldr	r2, [pc, #48]	@ (80010ac <HAL_TIM_Base_MspInit+0x48>)
 800107c:	f043 0310 	orr.w	r3, r3, #16
 8001080:	61d3      	str	r3, [r2, #28]
 8001082:	4b0a      	ldr	r3, [pc, #40]	@ (80010ac <HAL_TIM_Base_MspInit+0x48>)
 8001084:	69db      	ldr	r3, [r3, #28]
 8001086:	f003 0310 	and.w	r3, r3, #16
 800108a:	60fb      	str	r3, [r7, #12]
 800108c:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 800108e:	2200      	movs	r2, #0
 8001090:	2100      	movs	r1, #0
 8001092:	2036      	movs	r0, #54	@ 0x36
 8001094:	f001 f8ed 	bl	8002272 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8001098:	2036      	movs	r0, #54	@ 0x36
 800109a:	f001 f906 	bl	80022aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800109e:	bf00      	nop
 80010a0:	3710      	adds	r7, #16
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40001000 	.word	0x40001000
 80010ac:	40021000 	.word	0x40021000

080010b0 <HAL_TIM_PeriodElapsedCallback>:
unsigned char istimestampreport = 0;
unsigned long Report_Timestamp = 0;
unsigned int Downdatatimeoutnum = 0;
unsigned char isDowntoolcmdreport = 0;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a1b      	ldr	r2, [pc, #108]	@ (800112c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d130      	bne.n	8001124 <HAL_TIM_PeriodElapsedCallback+0x74>
	{
		Report_Timestamp++;
 80010c2:	4b1b      	ldr	r3, [pc, #108]	@ (8001130 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	3301      	adds	r3, #1
 80010c8:	4a19      	ldr	r2, [pc, #100]	@ (8001130 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80010ca:	6013      	str	r3, [r2, #0]
		isdowndcmdreport++;
 80010cc:	4b19      	ldr	r3, [pc, #100]	@ (8001134 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	3301      	adds	r3, #1
 80010d2:	4a18      	ldr	r2, [pc, #96]	@ (8001134 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80010d4:	6013      	str	r3, [r2, #0]
		istimestampreport++;
 80010d6:	4b18      	ldr	r3, [pc, #96]	@ (8001138 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	3301      	adds	r3, #1
 80010dc:	b2da      	uxtb	r2, r3
 80010de:	4b16      	ldr	r3, [pc, #88]	@ (8001138 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80010e0:	701a      	strb	r2, [r3, #0]
		Downdatatimeoutnum++;
 80010e2:	4b16      	ldr	r3, [pc, #88]	@ (800113c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	3301      	adds	r3, #1
 80010e8:	4a14      	ldr	r2, [pc, #80]	@ (800113c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80010ea:	6013      	str	r3, [r2, #0]
		i++;
 80010ec:	4b14      	ldr	r3, [pc, #80]	@ (8001140 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	3301      	adds	r3, #1
 80010f2:	4a13      	ldr	r2, [pc, #76]	@ (8001140 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80010f4:	6013      	str	r3, [r2, #0]
		if(i > 500)
 80010f6:	4b12      	ldr	r3, [pc, #72]	@ (8001140 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80010fe:	d911      	bls.n	8001124 <HAL_TIM_PeriodElapsedCallback+0x74>
		{
			ComSendChar(COM1,Sampleperiod>>8);
 8001100:	4b10      	ldr	r3, [pc, #64]	@ (8001144 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	0a1b      	lsrs	r3, r3, #8
 8001106:	b2db      	uxtb	r3, r3
 8001108:	4619      	mov	r1, r3
 800110a:	20dd      	movs	r0, #221	@ 0xdd
 800110c:	f000 f9be 	bl	800148c <ComSendChar>
			ComSendChar(COM1,Sampleperiod);
 8001110:	4b0c      	ldr	r3, [pc, #48]	@ (8001144 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	b2db      	uxtb	r3, r3
 8001116:	4619      	mov	r1, r3
 8001118:	20dd      	movs	r0, #221	@ 0xdd
 800111a:	f000 f9b7 	bl	800148c <ComSendChar>
			i = 0;
 800111e:	4b08      	ldr	r3, [pc, #32]	@ (8001140 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001124:	bf00      	nop
 8001126:	3708      	adds	r7, #8
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	40001000 	.word	0x40001000
 8001130:	200000c8 	.word	0x200000c8
 8001134:	200000c0 	.word	0x200000c0
 8001138:	200000c4 	.word	0x200000c4
 800113c:	200000cc 	.word	0x200000cc
 8001140:	200000bc 	.word	0x200000bc
 8001144:	20000004 	.word	0x20000004

08001148 <usart_init>:
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart2;


void usart_init (void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
	MX_UART4_Init();				//串口4初始化:串口4为时间深度同步信息上传串口
 800114c:	f000 f806 	bl	800115c <MX_UART4_Init>
	MX_UART5_Init();				//串口5初始化:串口5为MCU与FPGA通讯串口
 8001150:	f000 f82e 	bl	80011b0 <MX_UART5_Init>
	MX_USART1_UART_Init();			//串口1初始化:串口1为主控板与ETH通讯串口
 8001154:	f000 f85c 	bl	8001210 <MX_USART1_UART_Init>
}
 8001158:	bf00      	nop
 800115a:	bd80      	pop	{r7, pc}

0800115c <MX_UART4_Init>:
/* UART4 init function */
void MX_UART4_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  huart4.Instance = UART4;
 8001160:	4b11      	ldr	r3, [pc, #68]	@ (80011a8 <MX_UART4_Init+0x4c>)
 8001162:	4a12      	ldr	r2, [pc, #72]	@ (80011ac <MX_UART4_Init+0x50>)
 8001164:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;						//波特率115200
 8001166:	4b10      	ldr	r3, [pc, #64]	@ (80011a8 <MX_UART4_Init+0x4c>)
 8001168:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800116c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800116e:	4b0e      	ldr	r3, [pc, #56]	@ (80011a8 <MX_UART4_Init+0x4c>)
 8001170:	2200      	movs	r2, #0
 8001172:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001174:	4b0c      	ldr	r3, [pc, #48]	@ (80011a8 <MX_UART4_Init+0x4c>)
 8001176:	2200      	movs	r2, #0
 8001178:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800117a:	4b0b      	ldr	r3, [pc, #44]	@ (80011a8 <MX_UART4_Init+0x4c>)
 800117c:	2200      	movs	r2, #0
 800117e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001180:	4b09      	ldr	r3, [pc, #36]	@ (80011a8 <MX_UART4_Init+0x4c>)
 8001182:	220c      	movs	r2, #12
 8001184:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001186:	4b08      	ldr	r3, [pc, #32]	@ (80011a8 <MX_UART4_Init+0x4c>)
 8001188:	2200      	movs	r2, #0
 800118a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800118c:	4b06      	ldr	r3, [pc, #24]	@ (80011a8 <MX_UART4_Init+0x4c>)
 800118e:	2200      	movs	r2, #0
 8001190:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001192:	4805      	ldr	r0, [pc, #20]	@ (80011a8 <MX_UART4_Init+0x4c>)
 8001194:	f002 faee 	bl	8003774 <HAL_UART_Init>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800119e:	f7ff fdf6 	bl	8000d8e <Error_Handler>
  }
}
 80011a2:	bf00      	nop
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	200000d8 	.word	0x200000d8
 80011ac:	40004c00 	.word	0x40004c00

080011b0 <MX_UART5_Init>:
void MX_UART5_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  huart5.Instance = UART5;
 80011b4:	4b13      	ldr	r3, [pc, #76]	@ (8001204 <MX_UART5_Init+0x54>)
 80011b6:	4a14      	ldr	r2, [pc, #80]	@ (8001208 <MX_UART5_Init+0x58>)
 80011b8:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80011ba:	4b12      	ldr	r3, [pc, #72]	@ (8001204 <MX_UART5_Init+0x54>)
 80011bc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011c0:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80011c2:	4b10      	ldr	r3, [pc, #64]	@ (8001204 <MX_UART5_Init+0x54>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80011c8:	4b0e      	ldr	r3, [pc, #56]	@ (8001204 <MX_UART5_Init+0x54>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80011ce:	4b0d      	ldr	r3, [pc, #52]	@ (8001204 <MX_UART5_Init+0x54>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80011d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001204 <MX_UART5_Init+0x54>)
 80011d6:	220c      	movs	r2, #12
 80011d8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011da:	4b0a      	ldr	r3, [pc, #40]	@ (8001204 <MX_UART5_Init+0x54>)
 80011dc:	2200      	movs	r2, #0
 80011de:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80011e0:	4b08      	ldr	r3, [pc, #32]	@ (8001204 <MX_UART5_Init+0x54>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80011e6:	4807      	ldr	r0, [pc, #28]	@ (8001204 <MX_UART5_Init+0x54>)
 80011e8:	f002 fac4 	bl	8003774 <HAL_UART_Init>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 80011f2:	f7ff fdcc 	bl	8000d8e <Error_Handler>
  }
  HAL_UART_Receive_IT(&huart5,(uint8_t*)Uart5_RxBuff, 1);
 80011f6:	2201      	movs	r2, #1
 80011f8:	4904      	ldr	r1, [pc, #16]	@ (800120c <MX_UART5_Init+0x5c>)
 80011fa:	4802      	ldr	r0, [pc, #8]	@ (8001204 <MX_UART5_Init+0x54>)
 80011fc:	f002 fb95 	bl	800392a <HAL_UART_Receive_IT>
}
 8001200:	bf00      	nop
 8001202:	bd80      	pop	{r7, pc}
 8001204:	20000120 	.word	0x20000120
 8001208:	40005000 	.word	0x40005000
 800120c:	200000d4 	.word	0x200000d4

08001210 <MX_USART1_UART_Init>:

void MX_USART1_UART_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 8001214:	4b13      	ldr	r3, [pc, #76]	@ (8001264 <MX_USART1_UART_Init+0x54>)
 8001216:	4a14      	ldr	r2, [pc, #80]	@ (8001268 <MX_USART1_UART_Init+0x58>)
 8001218:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800121a:	4b12      	ldr	r3, [pc, #72]	@ (8001264 <MX_USART1_UART_Init+0x54>)
 800121c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001220:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001222:	4b10      	ldr	r3, [pc, #64]	@ (8001264 <MX_USART1_UART_Init+0x54>)
 8001224:	2200      	movs	r2, #0
 8001226:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001228:	4b0e      	ldr	r3, [pc, #56]	@ (8001264 <MX_USART1_UART_Init+0x54>)
 800122a:	2200      	movs	r2, #0
 800122c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800122e:	4b0d      	ldr	r3, [pc, #52]	@ (8001264 <MX_USART1_UART_Init+0x54>)
 8001230:	2200      	movs	r2, #0
 8001232:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001234:	4b0b      	ldr	r3, [pc, #44]	@ (8001264 <MX_USART1_UART_Init+0x54>)
 8001236:	220c      	movs	r2, #12
 8001238:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800123a:	4b0a      	ldr	r3, [pc, #40]	@ (8001264 <MX_USART1_UART_Init+0x54>)
 800123c:	2200      	movs	r2, #0
 800123e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001240:	4b08      	ldr	r3, [pc, #32]	@ (8001264 <MX_USART1_UART_Init+0x54>)
 8001242:	2200      	movs	r2, #0
 8001244:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001246:	4807      	ldr	r0, [pc, #28]	@ (8001264 <MX_USART1_UART_Init+0x54>)
 8001248:	f002 fa94 	bl	8003774 <HAL_UART_Init>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001252:	f7ff fd9c 	bl	8000d8e <Error_Handler>
  }

  HAL_UART_Receive_IT(&huart1,(uint8_t*)Uart1_RxBuff, 1);
 8001256:	2201      	movs	r2, #1
 8001258:	4904      	ldr	r1, [pc, #16]	@ (800126c <MX_USART1_UART_Init+0x5c>)
 800125a:	4802      	ldr	r0, [pc, #8]	@ (8001264 <MX_USART1_UART_Init+0x54>)
 800125c:	f002 fb65 	bl	800392a <HAL_UART_Receive_IT>
}
 8001260:	bf00      	nop
 8001262:	bd80      	pop	{r7, pc}
 8001264:	20000168 	.word	0x20000168
 8001268:	40013800 	.word	0x40013800
 800126c:	200000d0 	.word	0x200000d0

08001270 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b08e      	sub	sp, #56	@ 0x38
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001278:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]
 8001280:	605a      	str	r2, [r3, #4]
 8001282:	609a      	str	r2, [r3, #8]
 8001284:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==UART4)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a62      	ldr	r2, [pc, #392]	@ (8001414 <HAL_UART_MspInit+0x1a4>)
 800128c:	4293      	cmp	r3, r2
 800128e:	d132      	bne.n	80012f6 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001290:	4b61      	ldr	r3, [pc, #388]	@ (8001418 <HAL_UART_MspInit+0x1a8>)
 8001292:	69db      	ldr	r3, [r3, #28]
 8001294:	4a60      	ldr	r2, [pc, #384]	@ (8001418 <HAL_UART_MspInit+0x1a8>)
 8001296:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800129a:	61d3      	str	r3, [r2, #28]
 800129c:	4b5e      	ldr	r3, [pc, #376]	@ (8001418 <HAL_UART_MspInit+0x1a8>)
 800129e:	69db      	ldr	r3, [r3, #28]
 80012a0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80012a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80012a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012a8:	4b5b      	ldr	r3, [pc, #364]	@ (8001418 <HAL_UART_MspInit+0x1a8>)
 80012aa:	699b      	ldr	r3, [r3, #24]
 80012ac:	4a5a      	ldr	r2, [pc, #360]	@ (8001418 <HAL_UART_MspInit+0x1a8>)
 80012ae:	f043 0310 	orr.w	r3, r3, #16
 80012b2:	6193      	str	r3, [r2, #24]
 80012b4:	4b58      	ldr	r3, [pc, #352]	@ (8001418 <HAL_UART_MspInit+0x1a8>)
 80012b6:	699b      	ldr	r3, [r3, #24]
 80012b8:	f003 0310 	and.w	r3, r3, #16
 80012bc:	623b      	str	r3, [r7, #32]
 80012be:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80012c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80012c4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c6:	2302      	movs	r3, #2
 80012c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012ca:	2303      	movs	r3, #3
 80012cc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012ce:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012d2:	4619      	mov	r1, r3
 80012d4:	4851      	ldr	r0, [pc, #324]	@ (800141c <HAL_UART_MspInit+0x1ac>)
 80012d6:	f001 f945 	bl	8002564 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80012da:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80012de:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012e0:	2300      	movs	r3, #0
 80012e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e4:	2300      	movs	r3, #0
 80012e6:	633b      	str	r3, [r7, #48]	@ 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012e8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012ec:	4619      	mov	r1, r3
 80012ee:	484b      	ldr	r0, [pc, #300]	@ (800141c <HAL_UART_MspInit+0x1ac>)
 80012f0:	f001 f938 	bl	8002564 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  }
}
 80012f4:	e089      	b.n	800140a <HAL_UART_MspInit+0x19a>
  else if(uartHandle->Instance==UART5)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a49      	ldr	r2, [pc, #292]	@ (8001420 <HAL_UART_MspInit+0x1b0>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d145      	bne.n	800138c <HAL_UART_MspInit+0x11c>
    __HAL_RCC_UART5_CLK_ENABLE();
 8001300:	4b45      	ldr	r3, [pc, #276]	@ (8001418 <HAL_UART_MspInit+0x1a8>)
 8001302:	69db      	ldr	r3, [r3, #28]
 8001304:	4a44      	ldr	r2, [pc, #272]	@ (8001418 <HAL_UART_MspInit+0x1a8>)
 8001306:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800130a:	61d3      	str	r3, [r2, #28]
 800130c:	4b42      	ldr	r3, [pc, #264]	@ (8001418 <HAL_UART_MspInit+0x1a8>)
 800130e:	69db      	ldr	r3, [r3, #28]
 8001310:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001314:	61fb      	str	r3, [r7, #28]
 8001316:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001318:	4b3f      	ldr	r3, [pc, #252]	@ (8001418 <HAL_UART_MspInit+0x1a8>)
 800131a:	699b      	ldr	r3, [r3, #24]
 800131c:	4a3e      	ldr	r2, [pc, #248]	@ (8001418 <HAL_UART_MspInit+0x1a8>)
 800131e:	f043 0310 	orr.w	r3, r3, #16
 8001322:	6193      	str	r3, [r2, #24]
 8001324:	4b3c      	ldr	r3, [pc, #240]	@ (8001418 <HAL_UART_MspInit+0x1a8>)
 8001326:	699b      	ldr	r3, [r3, #24]
 8001328:	f003 0310 	and.w	r3, r3, #16
 800132c:	61bb      	str	r3, [r7, #24]
 800132e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001330:	4b39      	ldr	r3, [pc, #228]	@ (8001418 <HAL_UART_MspInit+0x1a8>)
 8001332:	699b      	ldr	r3, [r3, #24]
 8001334:	4a38      	ldr	r2, [pc, #224]	@ (8001418 <HAL_UART_MspInit+0x1a8>)
 8001336:	f043 0320 	orr.w	r3, r3, #32
 800133a:	6193      	str	r3, [r2, #24]
 800133c:	4b36      	ldr	r3, [pc, #216]	@ (8001418 <HAL_UART_MspInit+0x1a8>)
 800133e:	699b      	ldr	r3, [r3, #24]
 8001340:	f003 0320 	and.w	r3, r3, #32
 8001344:	617b      	str	r3, [r7, #20]
 8001346:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001348:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800134c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134e:	2302      	movs	r3, #2
 8001350:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001352:	2303      	movs	r3, #3
 8001354:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001356:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800135a:	4619      	mov	r1, r3
 800135c:	482f      	ldr	r0, [pc, #188]	@ (800141c <HAL_UART_MspInit+0x1ac>)
 800135e:	f001 f901 	bl	8002564 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001362:	2304      	movs	r3, #4
 8001364:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001366:	2300      	movs	r3, #0
 8001368:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136a:	2300      	movs	r3, #0
 800136c:	633b      	str	r3, [r7, #48]	@ 0x30
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800136e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001372:	4619      	mov	r1, r3
 8001374:	482b      	ldr	r0, [pc, #172]	@ (8001424 <HAL_UART_MspInit+0x1b4>)
 8001376:	f001 f8f5 	bl	8002564 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 800137a:	2200      	movs	r2, #0
 800137c:	2100      	movs	r1, #0
 800137e:	2035      	movs	r0, #53	@ 0x35
 8001380:	f000 ff77 	bl	8002272 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001384:	2035      	movs	r0, #53	@ 0x35
 8001386:	f000 ff90 	bl	80022aa <HAL_NVIC_EnableIRQ>
}
 800138a:	e03e      	b.n	800140a <HAL_UART_MspInit+0x19a>
  else if(uartHandle->Instance==USART1)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a25      	ldr	r2, [pc, #148]	@ (8001428 <HAL_UART_MspInit+0x1b8>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d139      	bne.n	800140a <HAL_UART_MspInit+0x19a>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001396:	4b20      	ldr	r3, [pc, #128]	@ (8001418 <HAL_UART_MspInit+0x1a8>)
 8001398:	699b      	ldr	r3, [r3, #24]
 800139a:	4a1f      	ldr	r2, [pc, #124]	@ (8001418 <HAL_UART_MspInit+0x1a8>)
 800139c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013a0:	6193      	str	r3, [r2, #24]
 80013a2:	4b1d      	ldr	r3, [pc, #116]	@ (8001418 <HAL_UART_MspInit+0x1a8>)
 80013a4:	699b      	ldr	r3, [r3, #24]
 80013a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013aa:	613b      	str	r3, [r7, #16]
 80013ac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ae:	4b1a      	ldr	r3, [pc, #104]	@ (8001418 <HAL_UART_MspInit+0x1a8>)
 80013b0:	699b      	ldr	r3, [r3, #24]
 80013b2:	4a19      	ldr	r2, [pc, #100]	@ (8001418 <HAL_UART_MspInit+0x1a8>)
 80013b4:	f043 0304 	orr.w	r3, r3, #4
 80013b8:	6193      	str	r3, [r2, #24]
 80013ba:	4b17      	ldr	r3, [pc, #92]	@ (8001418 <HAL_UART_MspInit+0x1a8>)
 80013bc:	699b      	ldr	r3, [r3, #24]
 80013be:	f003 0304 	and.w	r3, r3, #4
 80013c2:	60fb      	str	r3, [r7, #12]
 80013c4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80013c6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80013ca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013cc:	2302      	movs	r3, #2
 80013ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013d0:	2303      	movs	r3, #3
 80013d2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80013d8:	4619      	mov	r1, r3
 80013da:	4814      	ldr	r0, [pc, #80]	@ (800142c <HAL_UART_MspInit+0x1bc>)
 80013dc:	f001 f8c2 	bl	8002564 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80013e0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80013e4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013e6:	2300      	movs	r3, #0
 80013e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ea:	2300      	movs	r3, #0
 80013ec:	633b      	str	r3, [r7, #48]	@ 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ee:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80013f2:	4619      	mov	r1, r3
 80013f4:	480d      	ldr	r0, [pc, #52]	@ (800142c <HAL_UART_MspInit+0x1bc>)
 80013f6:	f001 f8b5 	bl	8002564 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80013fa:	2200      	movs	r2, #0
 80013fc:	2100      	movs	r1, #0
 80013fe:	2025      	movs	r0, #37	@ 0x25
 8001400:	f000 ff37 	bl	8002272 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001404:	2025      	movs	r0, #37	@ 0x25
 8001406:	f000 ff50 	bl	80022aa <HAL_NVIC_EnableIRQ>
}
 800140a:	bf00      	nop
 800140c:	3738      	adds	r7, #56	@ 0x38
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	40004c00 	.word	0x40004c00
 8001418:	40021000 	.word	0x40021000
 800141c:	40011000 	.word	0x40011000
 8001420:	40005000 	.word	0x40005000
 8001424:	40011400 	.word	0x40011400
 8001428:	40013800 	.word	0x40013800
 800142c:	40010800 	.word	0x40010800

08001430 <ComSendBuf>:
  /* USER CODE END USART1_MspDeInit 1 */
  }
}

void ComSendBuf(uint8_t com,uint8_t *p,uint16_t len)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	4603      	mov	r3, r0
 8001438:	6039      	str	r1, [r7, #0]
 800143a:	71fb      	strb	r3, [r7, #7]
 800143c:	4613      	mov	r3, r2
 800143e:	80bb      	strh	r3, [r7, #4]
	if(com == 0xdd)
 8001440:	79fb      	ldrb	r3, [r7, #7]
 8001442:	2bdd      	cmp	r3, #221	@ 0xdd
 8001444:	d105      	bne.n	8001452 <ComSendBuf+0x22>
	{
		HAL_UART_Transmit(&huart1, p, len, 0xff);
 8001446:	88ba      	ldrh	r2, [r7, #4]
 8001448:	23ff      	movs	r3, #255	@ 0xff
 800144a:	6839      	ldr	r1, [r7, #0]
 800144c:	480c      	ldr	r0, [pc, #48]	@ (8001480 <ComSendBuf+0x50>)
 800144e:	f002 f9e1 	bl	8003814 <HAL_UART_Transmit>
	}
	if(com == 0xee)
 8001452:	79fb      	ldrb	r3, [r7, #7]
 8001454:	2bee      	cmp	r3, #238	@ 0xee
 8001456:	d105      	bne.n	8001464 <ComSendBuf+0x34>
	{
		HAL_UART_Transmit(&huart5, p, len, 0xff);
 8001458:	88ba      	ldrh	r2, [r7, #4]
 800145a:	23ff      	movs	r3, #255	@ 0xff
 800145c:	6839      	ldr	r1, [r7, #0]
 800145e:	4809      	ldr	r0, [pc, #36]	@ (8001484 <ComSendBuf+0x54>)
 8001460:	f002 f9d8 	bl	8003814 <HAL_UART_Transmit>
	}
	if(com == 0xcc)
 8001464:	79fb      	ldrb	r3, [r7, #7]
 8001466:	2bcc      	cmp	r3, #204	@ 0xcc
 8001468:	d105      	bne.n	8001476 <ComSendBuf+0x46>
	{
		HAL_UART_Transmit(&huart4, p, len, 0xff);
 800146a:	88ba      	ldrh	r2, [r7, #4]
 800146c:	23ff      	movs	r3, #255	@ 0xff
 800146e:	6839      	ldr	r1, [r7, #0]
 8001470:	4805      	ldr	r0, [pc, #20]	@ (8001488 <ComSendBuf+0x58>)
 8001472:	f002 f9cf 	bl	8003814 <HAL_UART_Transmit>
	}
}
 8001476:	bf00      	nop
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	20000168 	.word	0x20000168
 8001484:	20000120 	.word	0x20000120
 8001488:	200000d8 	.word	0x200000d8

0800148c <ComSendChar>:

void ComSendChar(unsigned char com,unsigned char p)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0
 8001492:	4603      	mov	r3, r0
 8001494:	460a      	mov	r2, r1
 8001496:	71fb      	strb	r3, [r7, #7]
 8001498:	4613      	mov	r3, r2
 800149a:	71bb      	strb	r3, [r7, #6]
	unsigned char sendbuf[1];
	sendbuf[0] = p;
 800149c:	79bb      	ldrb	r3, [r7, #6]
 800149e:	733b      	strb	r3, [r7, #12]
	if(com == 0xdd)
 80014a0:	79fb      	ldrb	r3, [r7, #7]
 80014a2:	2bdd      	cmp	r3, #221	@ 0xdd
 80014a4:	d106      	bne.n	80014b4 <ComSendChar+0x28>
	{
		HAL_UART_Transmit(&huart1, sendbuf, 1, 0xff);
 80014a6:	f107 010c 	add.w	r1, r7, #12
 80014aa:	23ff      	movs	r3, #255	@ 0xff
 80014ac:	2201      	movs	r2, #1
 80014ae:	480d      	ldr	r0, [pc, #52]	@ (80014e4 <ComSendChar+0x58>)
 80014b0:	f002 f9b0 	bl	8003814 <HAL_UART_Transmit>
	}
	if(com == 0xee)
 80014b4:	79fb      	ldrb	r3, [r7, #7]
 80014b6:	2bee      	cmp	r3, #238	@ 0xee
 80014b8:	d106      	bne.n	80014c8 <ComSendChar+0x3c>
	{
		HAL_UART_Transmit(&huart5, sendbuf, 1, 0xff);
 80014ba:	f107 010c 	add.w	r1, r7, #12
 80014be:	23ff      	movs	r3, #255	@ 0xff
 80014c0:	2201      	movs	r2, #1
 80014c2:	4809      	ldr	r0, [pc, #36]	@ (80014e8 <ComSendChar+0x5c>)
 80014c4:	f002 f9a6 	bl	8003814 <HAL_UART_Transmit>
	}
	if(com == 0xcc)
 80014c8:	79fb      	ldrb	r3, [r7, #7]
 80014ca:	2bcc      	cmp	r3, #204	@ 0xcc
 80014cc:	d106      	bne.n	80014dc <ComSendChar+0x50>
	{
		HAL_UART_Transmit(&huart4, sendbuf, 1, 0xff);
 80014ce:	f107 010c 	add.w	r1, r7, #12
 80014d2:	23ff      	movs	r3, #255	@ 0xff
 80014d4:	2201      	movs	r2, #1
 80014d6:	4805      	ldr	r0, [pc, #20]	@ (80014ec <ComSendChar+0x60>)
 80014d8:	f002 f99c 	bl	8003814 <HAL_UART_Transmit>
	}
}
 80014dc:	bf00      	nop
 80014de:	3710      	adds	r7, #16
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	20000168 	.word	0x20000168
 80014e8:	20000120 	.word	0x20000120
 80014ec:	200000d8 	.word	0x200000d8

080014f0 <HAL_UART_RxCpltCallback>:
unsigned char ETHdataoverflag;				//ETH数据接收完毕标志
unsigned char DOWNdataoverflag;				//井下数据接收完毕标志


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)		//串口中断回调函数
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1) 		//如果产生中断的是串口1
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a9f      	ldr	r2, [pc, #636]	@ (800177c <HAL_UART_RxCpltCallback+0x28c>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	f040 82b4 	bne.w	8001a6c <HAL_UART_RxCpltCallback+0x57c>
	{
		if(Uart1_RxBuff[0] == 0xFF && ETHdatastate<3) {ETHdatastate = 0;}
 8001504:	4b9e      	ldr	r3, [pc, #632]	@ (8001780 <HAL_UART_RxCpltCallback+0x290>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	2bff      	cmp	r3, #255	@ 0xff
 800150a:	d106      	bne.n	800151a <HAL_UART_RxCpltCallback+0x2a>
 800150c:	4b9d      	ldr	r3, [pc, #628]	@ (8001784 <HAL_UART_RxCpltCallback+0x294>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	2b02      	cmp	r3, #2
 8001512:	d802      	bhi.n	800151a <HAL_UART_RxCpltCallback+0x2a>
 8001514:	4b9b      	ldr	r3, [pc, #620]	@ (8001784 <HAL_UART_RxCpltCallback+0x294>)
 8001516:	2200      	movs	r2, #0
 8001518:	701a      	strb	r2, [r3, #0]
		switch(ETHdatastate)
 800151a:	4b9a      	ldr	r3, [pc, #616]	@ (8001784 <HAL_UART_RxCpltCallback+0x294>)
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	2b11      	cmp	r3, #17
 8001520:	f200 829f 	bhi.w	8001a62 <HAL_UART_RxCpltCallback+0x572>
 8001524:	a201      	add	r2, pc, #4	@ (adr r2, 800152c <HAL_UART_RxCpltCallback+0x3c>)
 8001526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800152a:	bf00      	nop
 800152c:	08001575 	.word	0x08001575
 8001530:	080015a9 	.word	0x080015a9
 8001534:	080015dd 	.word	0x080015dd
 8001538:	08001611 	.word	0x08001611
 800153c:	08001645 	.word	0x08001645
 8001540:	08001673 	.word	0x08001673
 8001544:	080016a7 	.word	0x080016a7
 8001548:	080017a5 	.word	0x080017a5
 800154c:	080017d1 	.word	0x080017d1
 8001550:	080017ff 	.word	0x080017ff
 8001554:	08001833 	.word	0x08001833
 8001558:	08001897 	.word	0x08001897
 800155c:	080018c5 	.word	0x080018c5
 8001560:	080018f9 	.word	0x080018f9
 8001564:	08001927 	.word	0x08001927
 8001568:	0800195b 	.word	0x0800195b
 800156c:	080019a3 	.word	0x080019a3
 8001570:	08001a0d 	.word	0x08001a0d
		{
			case 0:
				if(Uart1_RxBuff[0] == 0xFF)					//同步头FF 00 55 AA
 8001574:	4b82      	ldr	r3, [pc, #520]	@ (8001780 <HAL_UART_RxCpltCallback+0x290>)
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	2bff      	cmp	r3, #255	@ 0xff
 800157a:	d111      	bne.n	80015a0 <HAL_UART_RxCpltCallback+0xb0>
				{
					ETHdatabuf[ETHdataheadnum++] = Uart1_RxBuff[0];
 800157c:	4b82      	ldr	r3, [pc, #520]	@ (8001788 <HAL_UART_RxCpltCallback+0x298>)
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	1c5a      	adds	r2, r3, #1
 8001582:	b2d1      	uxtb	r1, r2
 8001584:	4a80      	ldr	r2, [pc, #512]	@ (8001788 <HAL_UART_RxCpltCallback+0x298>)
 8001586:	7011      	strb	r1, [r2, #0]
 8001588:	461a      	mov	r2, r3
 800158a:	4b7d      	ldr	r3, [pc, #500]	@ (8001780 <HAL_UART_RxCpltCallback+0x290>)
 800158c:	7819      	ldrb	r1, [r3, #0]
 800158e:	4b7f      	ldr	r3, [pc, #508]	@ (800178c <HAL_UART_RxCpltCallback+0x29c>)
 8001590:	5499      	strb	r1, [r3, r2]
					ETHdatastate++ ;
 8001592:	4b7c      	ldr	r3, [pc, #496]	@ (8001784 <HAL_UART_RxCpltCallback+0x294>)
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	3301      	adds	r3, #1
 8001598:	b2da      	uxtb	r2, r3
 800159a:	4b7a      	ldr	r3, [pc, #488]	@ (8001784 <HAL_UART_RxCpltCallback+0x294>)
 800159c:	701a      	strb	r2, [r3, #0]
				}
				else
				{
					Resetstate(ETHCMD);
				}
				break;
 800159e:	e260      	b.n	8001a62 <HAL_UART_RxCpltCallback+0x572>
					Resetstate(ETHCMD);
 80015a0:	2001      	movs	r0, #1
 80015a2:	f000 fcbf 	bl	8001f24 <Resetstate>
				break;
 80015a6:	e25c      	b.n	8001a62 <HAL_UART_RxCpltCallback+0x572>
			case 1:
				if(Uart1_RxBuff[0] == 0x00)
 80015a8:	4b75      	ldr	r3, [pc, #468]	@ (8001780 <HAL_UART_RxCpltCallback+0x290>)
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d111      	bne.n	80015d4 <HAL_UART_RxCpltCallback+0xe4>
				{
					ETHdatabuf[ETHdataheadnum++] = Uart1_RxBuff[0];
 80015b0:	4b75      	ldr	r3, [pc, #468]	@ (8001788 <HAL_UART_RxCpltCallback+0x298>)
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	1c5a      	adds	r2, r3, #1
 80015b6:	b2d1      	uxtb	r1, r2
 80015b8:	4a73      	ldr	r2, [pc, #460]	@ (8001788 <HAL_UART_RxCpltCallback+0x298>)
 80015ba:	7011      	strb	r1, [r2, #0]
 80015bc:	461a      	mov	r2, r3
 80015be:	4b70      	ldr	r3, [pc, #448]	@ (8001780 <HAL_UART_RxCpltCallback+0x290>)
 80015c0:	7819      	ldrb	r1, [r3, #0]
 80015c2:	4b72      	ldr	r3, [pc, #456]	@ (800178c <HAL_UART_RxCpltCallback+0x29c>)
 80015c4:	5499      	strb	r1, [r3, r2]
					ETHdatastate++ ;
 80015c6:	4b6f      	ldr	r3, [pc, #444]	@ (8001784 <HAL_UART_RxCpltCallback+0x294>)
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	3301      	adds	r3, #1
 80015cc:	b2da      	uxtb	r2, r3
 80015ce:	4b6d      	ldr	r3, [pc, #436]	@ (8001784 <HAL_UART_RxCpltCallback+0x294>)
 80015d0:	701a      	strb	r2, [r3, #0]
				}
				else
				{
					Resetstate(ETHCMD);
				}
				break;
 80015d2:	e246      	b.n	8001a62 <HAL_UART_RxCpltCallback+0x572>
					Resetstate(ETHCMD);
 80015d4:	2001      	movs	r0, #1
 80015d6:	f000 fca5 	bl	8001f24 <Resetstate>
				break;
 80015da:	e242      	b.n	8001a62 <HAL_UART_RxCpltCallback+0x572>
			case 2:
				if(Uart1_RxBuff[0] == 0x55)
 80015dc:	4b68      	ldr	r3, [pc, #416]	@ (8001780 <HAL_UART_RxCpltCallback+0x290>)
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	2b55      	cmp	r3, #85	@ 0x55
 80015e2:	d111      	bne.n	8001608 <HAL_UART_RxCpltCallback+0x118>
				{
					ETHdatabuf[ETHdataheadnum++] = Uart1_RxBuff[0];
 80015e4:	4b68      	ldr	r3, [pc, #416]	@ (8001788 <HAL_UART_RxCpltCallback+0x298>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	1c5a      	adds	r2, r3, #1
 80015ea:	b2d1      	uxtb	r1, r2
 80015ec:	4a66      	ldr	r2, [pc, #408]	@ (8001788 <HAL_UART_RxCpltCallback+0x298>)
 80015ee:	7011      	strb	r1, [r2, #0]
 80015f0:	461a      	mov	r2, r3
 80015f2:	4b63      	ldr	r3, [pc, #396]	@ (8001780 <HAL_UART_RxCpltCallback+0x290>)
 80015f4:	7819      	ldrb	r1, [r3, #0]
 80015f6:	4b65      	ldr	r3, [pc, #404]	@ (800178c <HAL_UART_RxCpltCallback+0x29c>)
 80015f8:	5499      	strb	r1, [r3, r2]
					ETHdatastate++ ;
 80015fa:	4b62      	ldr	r3, [pc, #392]	@ (8001784 <HAL_UART_RxCpltCallback+0x294>)
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	3301      	adds	r3, #1
 8001600:	b2da      	uxtb	r2, r3
 8001602:	4b60      	ldr	r3, [pc, #384]	@ (8001784 <HAL_UART_RxCpltCallback+0x294>)
 8001604:	701a      	strb	r2, [r3, #0]
				}
				else
				{
					Resetstate(ETHCMD);
				}
				break;
 8001606:	e22c      	b.n	8001a62 <HAL_UART_RxCpltCallback+0x572>
					Resetstate(ETHCMD);
 8001608:	2001      	movs	r0, #1
 800160a:	f000 fc8b 	bl	8001f24 <Resetstate>
				break;
 800160e:	e228      	b.n	8001a62 <HAL_UART_RxCpltCallback+0x572>
			case 3:
				if(Uart1_RxBuff[0] == 0xAA)
 8001610:	4b5b      	ldr	r3, [pc, #364]	@ (8001780 <HAL_UART_RxCpltCallback+0x290>)
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	2baa      	cmp	r3, #170	@ 0xaa
 8001616:	d111      	bne.n	800163c <HAL_UART_RxCpltCallback+0x14c>
				{
					ETHdatabuf[ETHdataheadnum++] = Uart1_RxBuff[0];
 8001618:	4b5b      	ldr	r3, [pc, #364]	@ (8001788 <HAL_UART_RxCpltCallback+0x298>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	1c5a      	adds	r2, r3, #1
 800161e:	b2d1      	uxtb	r1, r2
 8001620:	4a59      	ldr	r2, [pc, #356]	@ (8001788 <HAL_UART_RxCpltCallback+0x298>)
 8001622:	7011      	strb	r1, [r2, #0]
 8001624:	461a      	mov	r2, r3
 8001626:	4b56      	ldr	r3, [pc, #344]	@ (8001780 <HAL_UART_RxCpltCallback+0x290>)
 8001628:	7819      	ldrb	r1, [r3, #0]
 800162a:	4b58      	ldr	r3, [pc, #352]	@ (800178c <HAL_UART_RxCpltCallback+0x29c>)
 800162c:	5499      	strb	r1, [r3, r2]
					ETHdatastate++ ;
 800162e:	4b55      	ldr	r3, [pc, #340]	@ (8001784 <HAL_UART_RxCpltCallback+0x294>)
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	3301      	adds	r3, #1
 8001634:	b2da      	uxtb	r2, r3
 8001636:	4b53      	ldr	r3, [pc, #332]	@ (8001784 <HAL_UART_RxCpltCallback+0x294>)
 8001638:	701a      	strb	r2, [r3, #0]
				}
				else
				{
					Resetstate(ETHCMD);
				}
				break;
 800163a:	e212      	b.n	8001a62 <HAL_UART_RxCpltCallback+0x572>
					Resetstate(ETHCMD);
 800163c:	2001      	movs	r0, #1
 800163e:	f000 fc71 	bl	8001f24 <Resetstate>
				break;
 8001642:	e20e      	b.n	8001a62 <HAL_UART_RxCpltCallback+0x572>
			case 4:
				ETHdatabuf[ETHdataheadnum++] = Uart1_RxBuff[0];
 8001644:	4b50      	ldr	r3, [pc, #320]	@ (8001788 <HAL_UART_RxCpltCallback+0x298>)
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	1c5a      	adds	r2, r3, #1
 800164a:	b2d1      	uxtb	r1, r2
 800164c:	4a4e      	ldr	r2, [pc, #312]	@ (8001788 <HAL_UART_RxCpltCallback+0x298>)
 800164e:	7011      	strb	r1, [r2, #0]
 8001650:	461a      	mov	r2, r3
 8001652:	4b4b      	ldr	r3, [pc, #300]	@ (8001780 <HAL_UART_RxCpltCallback+0x290>)
 8001654:	7819      	ldrb	r1, [r3, #0]
 8001656:	4b4d      	ldr	r3, [pc, #308]	@ (800178c <HAL_UART_RxCpltCallback+0x29c>)
 8001658:	5499      	strb	r1, [r3, r2]
				ETHdatalen = Uart1_RxBuff[0];						//上位机数据长度高字节
 800165a:	4b49      	ldr	r3, [pc, #292]	@ (8001780 <HAL_UART_RxCpltCallback+0x290>)
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	461a      	mov	r2, r3
 8001660:	4b4b      	ldr	r3, [pc, #300]	@ (8001790 <HAL_UART_RxCpltCallback+0x2a0>)
 8001662:	601a      	str	r2, [r3, #0]
				ETHdatastate++ ;
 8001664:	4b47      	ldr	r3, [pc, #284]	@ (8001784 <HAL_UART_RxCpltCallback+0x294>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	3301      	adds	r3, #1
 800166a:	b2da      	uxtb	r2, r3
 800166c:	4b45      	ldr	r3, [pc, #276]	@ (8001784 <HAL_UART_RxCpltCallback+0x294>)
 800166e:	701a      	strb	r2, [r3, #0]
				break;
 8001670:	e1f7      	b.n	8001a62 <HAL_UART_RxCpltCallback+0x572>
			case 5:
				ETHdatabuf[ETHdataheadnum++] = Uart1_RxBuff[0];
 8001672:	4b45      	ldr	r3, [pc, #276]	@ (8001788 <HAL_UART_RxCpltCallback+0x298>)
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	1c5a      	adds	r2, r3, #1
 8001678:	b2d1      	uxtb	r1, r2
 800167a:	4a43      	ldr	r2, [pc, #268]	@ (8001788 <HAL_UART_RxCpltCallback+0x298>)
 800167c:	7011      	strb	r1, [r2, #0]
 800167e:	461a      	mov	r2, r3
 8001680:	4b3f      	ldr	r3, [pc, #252]	@ (8001780 <HAL_UART_RxCpltCallback+0x290>)
 8001682:	7819      	ldrb	r1, [r3, #0]
 8001684:	4b41      	ldr	r3, [pc, #260]	@ (800178c <HAL_UART_RxCpltCallback+0x29c>)
 8001686:	5499      	strb	r1, [r3, r2]
				ETHdatalen = (ETHdatalen<<8) + Uart1_RxBuff[0];				//上位机数据长度低字节
 8001688:	4b41      	ldr	r3, [pc, #260]	@ (8001790 <HAL_UART_RxCpltCallback+0x2a0>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	021b      	lsls	r3, r3, #8
 800168e:	4a3c      	ldr	r2, [pc, #240]	@ (8001780 <HAL_UART_RxCpltCallback+0x290>)
 8001690:	7812      	ldrb	r2, [r2, #0]
 8001692:	4413      	add	r3, r2
 8001694:	4a3e      	ldr	r2, [pc, #248]	@ (8001790 <HAL_UART_RxCpltCallback+0x2a0>)
 8001696:	6013      	str	r3, [r2, #0]
				ETHdatastate++ ;
 8001698:	4b3a      	ldr	r3, [pc, #232]	@ (8001784 <HAL_UART_RxCpltCallback+0x294>)
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	3301      	adds	r3, #1
 800169e:	b2da      	uxtb	r2, r3
 80016a0:	4b38      	ldr	r3, [pc, #224]	@ (8001784 <HAL_UART_RxCpltCallback+0x294>)
 80016a2:	701a      	strb	r2, [r3, #0]
				break;
 80016a4:	e1dd      	b.n	8001a62 <HAL_UART_RxCpltCallback+0x572>
			case 6:
				ETHdatabuf[ETHdataheadnum++] = Uart1_RxBuff[0];
 80016a6:	4b38      	ldr	r3, [pc, #224]	@ (8001788 <HAL_UART_RxCpltCallback+0x298>)
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	1c5a      	adds	r2, r3, #1
 80016ac:	b2d1      	uxtb	r1, r2
 80016ae:	4a36      	ldr	r2, [pc, #216]	@ (8001788 <HAL_UART_RxCpltCallback+0x298>)
 80016b0:	7011      	strb	r1, [r2, #0]
 80016b2:	461a      	mov	r2, r3
 80016b4:	4b32      	ldr	r3, [pc, #200]	@ (8001780 <HAL_UART_RxCpltCallback+0x290>)
 80016b6:	7819      	ldrb	r1, [r3, #0]
 80016b8:	4b34      	ldr	r3, [pc, #208]	@ (800178c <HAL_UART_RxCpltCallback+0x29c>)
 80016ba:	5499      	strb	r1, [r3, r2]
				OveralltypeH = Uart1_RxBuff[0]>>4;						//该字节为数据读写总类型标示字节，解析读写数据类型，高位代表读或写，低位代表数据类型
 80016bc:	4b30      	ldr	r3, [pc, #192]	@ (8001780 <HAL_UART_RxCpltCallback+0x290>)
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	091b      	lsrs	r3, r3, #4
 80016c2:	b2da      	uxtb	r2, r3
 80016c4:	4b33      	ldr	r3, [pc, #204]	@ (8001794 <HAL_UART_RxCpltCallback+0x2a4>)
 80016c6:	701a      	strb	r2, [r3, #0]
				OveralltypeL = Uart1_RxBuff[0] & 0x0F;
 80016c8:	4b2d      	ldr	r3, [pc, #180]	@ (8001780 <HAL_UART_RxCpltCallback+0x290>)
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	f003 030f 	and.w	r3, r3, #15
 80016d0:	b2da      	uxtb	r2, r3
 80016d2:	4b31      	ldr	r3, [pc, #196]	@ (8001798 <HAL_UART_RxCpltCallback+0x2a8>)
 80016d4:	701a      	strb	r2, [r3, #0]
				if(OveralltypeH == 0x01)
 80016d6:	4b2f      	ldr	r3, [pc, #188]	@ (8001794 <HAL_UART_RxCpltCallback+0x2a4>)
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d13b      	bne.n	8001756 <HAL_UART_RxCpltCallback+0x266>
				{
					Totaltype = DATA_WR;							//向井下写数据
 80016de:	4b2f      	ldr	r3, [pc, #188]	@ (800179c <HAL_UART_RxCpltCallback+0x2ac>)
 80016e0:	2201      	movs	r2, #1
 80016e2:	701a      	strb	r2, [r3, #0]
					if(OveralltypeL == 0x00)
 80016e4:	4b2c      	ldr	r3, [pc, #176]	@ (8001798 <HAL_UART_RxCpltCallback+0x2a8>)
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d109      	bne.n	8001700 <HAL_UART_RxCpltCallback+0x210>
					{
						Workmode = SERVICETABLE;					//服务表激活
 80016ec:	4b2c      	ldr	r3, [pc, #176]	@ (80017a0 <HAL_UART_RxCpltCallback+0x2b0>)
 80016ee:	2201      	movs	r2, #1
 80016f0:	701a      	strb	r2, [r3, #0]
						ETHdatastate++ ;
 80016f2:	4b24      	ldr	r3, [pc, #144]	@ (8001784 <HAL_UART_RxCpltCallback+0x294>)
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	3301      	adds	r3, #1
 80016f8:	b2da      	uxtb	r2, r3
 80016fa:	4b22      	ldr	r3, [pc, #136]	@ (8001784 <HAL_UART_RxCpltCallback+0x294>)
 80016fc:	701a      	strb	r2, [r3, #0]
				}
				else
				{
					Resetstate(ETHCMD);
				}
				break;
 80016fe:	e1b0      	b.n	8001a62 <HAL_UART_RxCpltCallback+0x572>
					else if(OveralltypeL == 0x01)
 8001700:	4b25      	ldr	r3, [pc, #148]	@ (8001798 <HAL_UART_RxCpltCallback+0x2a8>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	2b01      	cmp	r3, #1
 8001706:	d109      	bne.n	800171c <HAL_UART_RxCpltCallback+0x22c>
						Workmode = CONTRALCMD;						//下发控制命令
 8001708:	4b25      	ldr	r3, [pc, #148]	@ (80017a0 <HAL_UART_RxCpltCallback+0x2b0>)
 800170a:	2202      	movs	r2, #2
 800170c:	701a      	strb	r2, [r3, #0]
						ETHdatastate++ ;
 800170e:	4b1d      	ldr	r3, [pc, #116]	@ (8001784 <HAL_UART_RxCpltCallback+0x294>)
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	3301      	adds	r3, #1
 8001714:	b2da      	uxtb	r2, r3
 8001716:	4b1b      	ldr	r3, [pc, #108]	@ (8001784 <HAL_UART_RxCpltCallback+0x294>)
 8001718:	701a      	strb	r2, [r3, #0]
				break;
 800171a:	e1a2      	b.n	8001a62 <HAL_UART_RxCpltCallback+0x572>
					else if(OveralltypeL == 0x03)
 800171c:	4b1e      	ldr	r3, [pc, #120]	@ (8001798 <HAL_UART_RxCpltCallback+0x2a8>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	2b03      	cmp	r3, #3
 8001722:	d106      	bne.n	8001732 <HAL_UART_RxCpltCallback+0x242>
						ETHdatastate++ ;
 8001724:	4b17      	ldr	r3, [pc, #92]	@ (8001784 <HAL_UART_RxCpltCallback+0x294>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	3301      	adds	r3, #1
 800172a:	b2da      	uxtb	r2, r3
 800172c:	4b15      	ldr	r3, [pc, #84]	@ (8001784 <HAL_UART_RxCpltCallback+0x294>)
 800172e:	701a      	strb	r2, [r3, #0]
				break;
 8001730:	e197      	b.n	8001a62 <HAL_UART_RxCpltCallback+0x572>
					else if(OveralltypeL == 0x04)
 8001732:	4b19      	ldr	r3, [pc, #100]	@ (8001798 <HAL_UART_RxCpltCallback+0x2a8>)
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	2b04      	cmp	r3, #4
 8001738:	d109      	bne.n	800174e <HAL_UART_RxCpltCallback+0x25e>
						Workmode = DEACTIVE;						//服务表反激活
 800173a:	4b19      	ldr	r3, [pc, #100]	@ (80017a0 <HAL_UART_RxCpltCallback+0x2b0>)
 800173c:	2204      	movs	r2, #4
 800173e:	701a      	strb	r2, [r3, #0]
						ETHdatastate++ ;
 8001740:	4b10      	ldr	r3, [pc, #64]	@ (8001784 <HAL_UART_RxCpltCallback+0x294>)
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	3301      	adds	r3, #1
 8001746:	b2da      	uxtb	r2, r3
 8001748:	4b0e      	ldr	r3, [pc, #56]	@ (8001784 <HAL_UART_RxCpltCallback+0x294>)
 800174a:	701a      	strb	r2, [r3, #0]
				break;
 800174c:	e189      	b.n	8001a62 <HAL_UART_RxCpltCallback+0x572>
						Resetstate(ETHCMD);
 800174e:	2001      	movs	r0, #1
 8001750:	f000 fbe8 	bl	8001f24 <Resetstate>
				break;
 8001754:	e185      	b.n	8001a62 <HAL_UART_RxCpltCallback+0x572>
				else if(OveralltypeH == 0x02)
 8001756:	4b0f      	ldr	r3, [pc, #60]	@ (8001794 <HAL_UART_RxCpltCallback+0x2a4>)
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	2b02      	cmp	r3, #2
 800175c:	d109      	bne.n	8001772 <HAL_UART_RxCpltCallback+0x282>
					Totaltype = DATA_RD;							//从井下读数据
 800175e:	4b0f      	ldr	r3, [pc, #60]	@ (800179c <HAL_UART_RxCpltCallback+0x2ac>)
 8001760:	2202      	movs	r2, #2
 8001762:	701a      	strb	r2, [r3, #0]
					ETHdatastate++ ;
 8001764:	4b07      	ldr	r3, [pc, #28]	@ (8001784 <HAL_UART_RxCpltCallback+0x294>)
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	3301      	adds	r3, #1
 800176a:	b2da      	uxtb	r2, r3
 800176c:	4b05      	ldr	r3, [pc, #20]	@ (8001784 <HAL_UART_RxCpltCallback+0x294>)
 800176e:	701a      	strb	r2, [r3, #0]
				break;
 8001770:	e177      	b.n	8001a62 <HAL_UART_RxCpltCallback+0x572>
					Resetstate(ETHCMD);
 8001772:	2001      	movs	r0, #1
 8001774:	f000 fbd6 	bl	8001f24 <Resetstate>
				break;
 8001778:	e173      	b.n	8001a62 <HAL_UART_RxCpltCallback+0x572>
 800177a:	bf00      	nop
 800177c:	40013800 	.word	0x40013800
 8001780:	200000d0 	.word	0x200000d0
 8001784:	200001b0 	.word	0x200001b0
 8001788:	200001b2 	.word	0x200001b2
 800178c:	200001bc 	.word	0x200001bc
 8001790:	200005bc 	.word	0x200005bc
 8001794:	200001b6 	.word	0x200001b6
 8001798:	200001b7 	.word	0x200001b7
 800179c:	200001b8 	.word	0x200001b8
 80017a0:	200005c4 	.word	0x200005c4
			case 7:
				ETHdatabuf[ETHdataheadnum++] = Uart1_RxBuff[0];		//仪器地址
 80017a4:	4b8a      	ldr	r3, [pc, #552]	@ (80019d0 <HAL_UART_RxCpltCallback+0x4e0>)
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	1c5a      	adds	r2, r3, #1
 80017aa:	b2d1      	uxtb	r1, r2
 80017ac:	4a88      	ldr	r2, [pc, #544]	@ (80019d0 <HAL_UART_RxCpltCallback+0x4e0>)
 80017ae:	7011      	strb	r1, [r2, #0]
 80017b0:	461a      	mov	r2, r3
 80017b2:	4b88      	ldr	r3, [pc, #544]	@ (80019d4 <HAL_UART_RxCpltCallback+0x4e4>)
 80017b4:	7819      	ldrb	r1, [r3, #0]
 80017b6:	4b88      	ldr	r3, [pc, #544]	@ (80019d8 <HAL_UART_RxCpltCallback+0x4e8>)
 80017b8:	5499      	strb	r1, [r3, r2]
				Tooladdress = Uart1_RxBuff[0];
 80017ba:	4b86      	ldr	r3, [pc, #536]	@ (80019d4 <HAL_UART_RxCpltCallback+0x4e4>)
 80017bc:	781a      	ldrb	r2, [r3, #0]
 80017be:	4b87      	ldr	r3, [pc, #540]	@ (80019dc <HAL_UART_RxCpltCallback+0x4ec>)
 80017c0:	701a      	strb	r2, [r3, #0]
				ETHdatastate++ ;
 80017c2:	4b87      	ldr	r3, [pc, #540]	@ (80019e0 <HAL_UART_RxCpltCallback+0x4f0>)
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	3301      	adds	r3, #1
 80017c8:	b2da      	uxtb	r2, r3
 80017ca:	4b85      	ldr	r3, [pc, #532]	@ (80019e0 <HAL_UART_RxCpltCallback+0x4f0>)
 80017cc:	701a      	strb	r2, [r3, #0]
				break;
 80017ce:	e148      	b.n	8001a62 <HAL_UART_RxCpltCallback+0x572>
			case 8:
				ETHdatabuf[ETHdataheadnum++] = Uart1_RxBuff[0];
 80017d0:	4b7f      	ldr	r3, [pc, #508]	@ (80019d0 <HAL_UART_RxCpltCallback+0x4e0>)
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	1c5a      	adds	r2, r3, #1
 80017d6:	b2d1      	uxtb	r1, r2
 80017d8:	4a7d      	ldr	r2, [pc, #500]	@ (80019d0 <HAL_UART_RxCpltCallback+0x4e0>)
 80017da:	7011      	strb	r1, [r2, #0]
 80017dc:	461a      	mov	r2, r3
 80017de:	4b7d      	ldr	r3, [pc, #500]	@ (80019d4 <HAL_UART_RxCpltCallback+0x4e4>)
 80017e0:	7819      	ldrb	r1, [r3, #0]
 80017e2:	4b7d      	ldr	r3, [pc, #500]	@ (80019d8 <HAL_UART_RxCpltCallback+0x4e8>)
 80017e4:	5499      	strb	r1, [r3, r2]
				Cmdword = Uart1_RxBuff[0];
 80017e6:	4b7b      	ldr	r3, [pc, #492]	@ (80019d4 <HAL_UART_RxCpltCallback+0x4e4>)
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	461a      	mov	r2, r3
 80017ec:	4b7d      	ldr	r3, [pc, #500]	@ (80019e4 <HAL_UART_RxCpltCallback+0x4f4>)
 80017ee:	601a      	str	r2, [r3, #0]
				ETHdatastate++ ;
 80017f0:	4b7b      	ldr	r3, [pc, #492]	@ (80019e0 <HAL_UART_RxCpltCallback+0x4f0>)
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	3301      	adds	r3, #1
 80017f6:	b2da      	uxtb	r2, r3
 80017f8:	4b79      	ldr	r3, [pc, #484]	@ (80019e0 <HAL_UART_RxCpltCallback+0x4f0>)
 80017fa:	701a      	strb	r2, [r3, #0]
				break;
 80017fc:	e131      	b.n	8001a62 <HAL_UART_RxCpltCallback+0x572>
			case 9:
				ETHdatabuf[ETHdataheadnum++] = Uart1_RxBuff[0];		//命令字/subset number
 80017fe:	4b74      	ldr	r3, [pc, #464]	@ (80019d0 <HAL_UART_RxCpltCallback+0x4e0>)
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	1c5a      	adds	r2, r3, #1
 8001804:	b2d1      	uxtb	r1, r2
 8001806:	4a72      	ldr	r2, [pc, #456]	@ (80019d0 <HAL_UART_RxCpltCallback+0x4e0>)
 8001808:	7011      	strb	r1, [r2, #0]
 800180a:	461a      	mov	r2, r3
 800180c:	4b71      	ldr	r3, [pc, #452]	@ (80019d4 <HAL_UART_RxCpltCallback+0x4e4>)
 800180e:	7819      	ldrb	r1, [r3, #0]
 8001810:	4b71      	ldr	r3, [pc, #452]	@ (80019d8 <HAL_UART_RxCpltCallback+0x4e8>)
 8001812:	5499      	strb	r1, [r3, r2]
				Cmdword = (Cmdword << 8) + Uart1_RxBuff[0];
 8001814:	4b73      	ldr	r3, [pc, #460]	@ (80019e4 <HAL_UART_RxCpltCallback+0x4f4>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	021b      	lsls	r3, r3, #8
 800181a:	4a6e      	ldr	r2, [pc, #440]	@ (80019d4 <HAL_UART_RxCpltCallback+0x4e4>)
 800181c:	7812      	ldrb	r2, [r2, #0]
 800181e:	4413      	add	r3, r2
 8001820:	4a70      	ldr	r2, [pc, #448]	@ (80019e4 <HAL_UART_RxCpltCallback+0x4f4>)
 8001822:	6013      	str	r3, [r2, #0]
				ETHdatastate++ ;
 8001824:	4b6e      	ldr	r3, [pc, #440]	@ (80019e0 <HAL_UART_RxCpltCallback+0x4f0>)
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	3301      	adds	r3, #1
 800182a:	b2da      	uxtb	r2, r3
 800182c:	4b6c      	ldr	r3, [pc, #432]	@ (80019e0 <HAL_UART_RxCpltCallback+0x4f0>)
 800182e:	701a      	strb	r2, [r3, #0]
				break;
 8001830:	e117      	b.n	8001a62 <HAL_UART_RxCpltCallback+0x572>
			case 10:
				if(Timestampnum <= 4)									//四字节时间戳
 8001832:	4b6d      	ldr	r3, [pc, #436]	@ (80019e8 <HAL_UART_RxCpltCallback+0x4f8>)
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	2b04      	cmp	r3, #4
 8001838:	f200 8110 	bhi.w	8001a5c <HAL_UART_RxCpltCallback+0x56c>
				{
					Timestampnum++;
 800183c:	4b6a      	ldr	r3, [pc, #424]	@ (80019e8 <HAL_UART_RxCpltCallback+0x4f8>)
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	3301      	adds	r3, #1
 8001842:	b2da      	uxtb	r2, r3
 8001844:	4b68      	ldr	r3, [pc, #416]	@ (80019e8 <HAL_UART_RxCpltCallback+0x4f8>)
 8001846:	701a      	strb	r2, [r3, #0]
					ETHdatabuf[ETHdataheadnum++] = Uart1_RxBuff[0];
 8001848:	4b61      	ldr	r3, [pc, #388]	@ (80019d0 <HAL_UART_RxCpltCallback+0x4e0>)
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	1c5a      	adds	r2, r3, #1
 800184e:	b2d1      	uxtb	r1, r2
 8001850:	4a5f      	ldr	r2, [pc, #380]	@ (80019d0 <HAL_UART_RxCpltCallback+0x4e0>)
 8001852:	7011      	strb	r1, [r2, #0]
 8001854:	461a      	mov	r2, r3
 8001856:	4b5f      	ldr	r3, [pc, #380]	@ (80019d4 <HAL_UART_RxCpltCallback+0x4e4>)
 8001858:	7819      	ldrb	r1, [r3, #0]
 800185a:	4b5f      	ldr	r3, [pc, #380]	@ (80019d8 <HAL_UART_RxCpltCallback+0x4e8>)
 800185c:	5499      	strb	r1, [r3, r2]
					ETH_Timestamp = (ETH_Timestamp << 8) + Uart1_RxBuff[0];
 800185e:	4b63      	ldr	r3, [pc, #396]	@ (80019ec <HAL_UART_RxCpltCallback+0x4fc>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	021b      	lsls	r3, r3, #8
 8001864:	4a5b      	ldr	r2, [pc, #364]	@ (80019d4 <HAL_UART_RxCpltCallback+0x4e4>)
 8001866:	7812      	ldrb	r2, [r2, #0]
 8001868:	4413      	add	r3, r2
 800186a:	4a60      	ldr	r2, [pc, #384]	@ (80019ec <HAL_UART_RxCpltCallback+0x4fc>)
 800186c:	6013      	str	r3, [r2, #0]
					HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_12);
 800186e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001872:	485f      	ldr	r0, [pc, #380]	@ (80019f0 <HAL_UART_RxCpltCallback+0x500>)
 8001874:	f001 f839 	bl	80028ea <HAL_GPIO_TogglePin>
					if(Timestampnum >=4)
 8001878:	4b5b      	ldr	r3, [pc, #364]	@ (80019e8 <HAL_UART_RxCpltCallback+0x4f8>)
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	2b03      	cmp	r3, #3
 800187e:	f240 80ed 	bls.w	8001a5c <HAL_UART_RxCpltCallback+0x56c>
					{
						ETHdatastate++;
 8001882:	4b57      	ldr	r3, [pc, #348]	@ (80019e0 <HAL_UART_RxCpltCallback+0x4f0>)
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	3301      	adds	r3, #1
 8001888:	b2da      	uxtb	r2, r3
 800188a:	4b55      	ldr	r3, [pc, #340]	@ (80019e0 <HAL_UART_RxCpltCallback+0x4f0>)
 800188c:	701a      	strb	r2, [r3, #0]
						Timestampnum = 0;
 800188e:	4b56      	ldr	r3, [pc, #344]	@ (80019e8 <HAL_UART_RxCpltCallback+0x4f8>)
 8001890:	2200      	movs	r2, #0
 8001892:	701a      	strb	r2, [r3, #0]
					}
				}
				break;
 8001894:	e0e2      	b.n	8001a5c <HAL_UART_RxCpltCallback+0x56c>
			case 11:
				ETHdatabuf[ETHdataheadnum++] = Uart1_RxBuff[0];
 8001896:	4b4e      	ldr	r3, [pc, #312]	@ (80019d0 <HAL_UART_RxCpltCallback+0x4e0>)
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	1c5a      	adds	r2, r3, #1
 800189c:	b2d1      	uxtb	r1, r2
 800189e:	4a4c      	ldr	r2, [pc, #304]	@ (80019d0 <HAL_UART_RxCpltCallback+0x4e0>)
 80018a0:	7011      	strb	r1, [r2, #0]
 80018a2:	461a      	mov	r2, r3
 80018a4:	4b4b      	ldr	r3, [pc, #300]	@ (80019d4 <HAL_UART_RxCpltCallback+0x4e4>)
 80018a6:	7819      	ldrb	r1, [r3, #0]
 80018a8:	4b4b      	ldr	r3, [pc, #300]	@ (80019d8 <HAL_UART_RxCpltCallback+0x4e8>)
 80018aa:	5499      	strb	r1, [r3, r2]
				Overtime = Uart1_RxBuff[0];
 80018ac:	4b49      	ldr	r3, [pc, #292]	@ (80019d4 <HAL_UART_RxCpltCallback+0x4e4>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	461a      	mov	r2, r3
 80018b2:	4b50      	ldr	r3, [pc, #320]	@ (80019f4 <HAL_UART_RxCpltCallback+0x504>)
 80018b4:	601a      	str	r2, [r3, #0]
				ETHdatastate++;
 80018b6:	4b4a      	ldr	r3, [pc, #296]	@ (80019e0 <HAL_UART_RxCpltCallback+0x4f0>)
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	3301      	adds	r3, #1
 80018bc:	b2da      	uxtb	r2, r3
 80018be:	4b48      	ldr	r3, [pc, #288]	@ (80019e0 <HAL_UART_RxCpltCallback+0x4f0>)
 80018c0:	701a      	strb	r2, [r3, #0]
				break;
 80018c2:	e0ce      	b.n	8001a62 <HAL_UART_RxCpltCallback+0x572>
			case 12:
				ETHdatabuf[ETHdataheadnum++] = Uart1_RxBuff[0];
 80018c4:	4b42      	ldr	r3, [pc, #264]	@ (80019d0 <HAL_UART_RxCpltCallback+0x4e0>)
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	1c5a      	adds	r2, r3, #1
 80018ca:	b2d1      	uxtb	r1, r2
 80018cc:	4a40      	ldr	r2, [pc, #256]	@ (80019d0 <HAL_UART_RxCpltCallback+0x4e0>)
 80018ce:	7011      	strb	r1, [r2, #0]
 80018d0:	461a      	mov	r2, r3
 80018d2:	4b40      	ldr	r3, [pc, #256]	@ (80019d4 <HAL_UART_RxCpltCallback+0x4e4>)
 80018d4:	7819      	ldrb	r1, [r3, #0]
 80018d6:	4b40      	ldr	r3, [pc, #256]	@ (80019d8 <HAL_UART_RxCpltCallback+0x4e8>)
 80018d8:	5499      	strb	r1, [r3, r2]
				Overtime = (Overtime << 8) + Uart1_RxBuff[0];						//超时时间
 80018da:	4b46      	ldr	r3, [pc, #280]	@ (80019f4 <HAL_UART_RxCpltCallback+0x504>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	021b      	lsls	r3, r3, #8
 80018e0:	4a3c      	ldr	r2, [pc, #240]	@ (80019d4 <HAL_UART_RxCpltCallback+0x4e4>)
 80018e2:	7812      	ldrb	r2, [r2, #0]
 80018e4:	4413      	add	r3, r2
 80018e6:	4a43      	ldr	r2, [pc, #268]	@ (80019f4 <HAL_UART_RxCpltCallback+0x504>)
 80018e8:	6013      	str	r3, [r2, #0]
				ETHdatastate++;
 80018ea:	4b3d      	ldr	r3, [pc, #244]	@ (80019e0 <HAL_UART_RxCpltCallback+0x4f0>)
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	3301      	adds	r3, #1
 80018f0:	b2da      	uxtb	r2, r3
 80018f2:	4b3b      	ldr	r3, [pc, #236]	@ (80019e0 <HAL_UART_RxCpltCallback+0x4f0>)
 80018f4:	701a      	strb	r2, [r3, #0]
				break;
 80018f6:	e0b4      	b.n	8001a62 <HAL_UART_RxCpltCallback+0x572>
			case 13:
				ETHdatabuf[ETHdataheadnum++] = Uart1_RxBuff[0];
 80018f8:	4b35      	ldr	r3, [pc, #212]	@ (80019d0 <HAL_UART_RxCpltCallback+0x4e0>)
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	1c5a      	adds	r2, r3, #1
 80018fe:	b2d1      	uxtb	r1, r2
 8001900:	4a33      	ldr	r2, [pc, #204]	@ (80019d0 <HAL_UART_RxCpltCallback+0x4e0>)
 8001902:	7011      	strb	r1, [r2, #0]
 8001904:	461a      	mov	r2, r3
 8001906:	4b33      	ldr	r3, [pc, #204]	@ (80019d4 <HAL_UART_RxCpltCallback+0x4e4>)
 8001908:	7819      	ldrb	r1, [r3, #0]
 800190a:	4b33      	ldr	r3, [pc, #204]	@ (80019d8 <HAL_UART_RxCpltCallback+0x4e8>)
 800190c:	5499      	strb	r1, [r3, r2]
				Reserve = Uart1_RxBuff[0];
 800190e:	4b31      	ldr	r3, [pc, #196]	@ (80019d4 <HAL_UART_RxCpltCallback+0x4e4>)
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	461a      	mov	r2, r3
 8001914:	4b38      	ldr	r3, [pc, #224]	@ (80019f8 <HAL_UART_RxCpltCallback+0x508>)
 8001916:	601a      	str	r2, [r3, #0]
				ETHdatastate++;
 8001918:	4b31      	ldr	r3, [pc, #196]	@ (80019e0 <HAL_UART_RxCpltCallback+0x4f0>)
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	3301      	adds	r3, #1
 800191e:	b2da      	uxtb	r2, r3
 8001920:	4b2f      	ldr	r3, [pc, #188]	@ (80019e0 <HAL_UART_RxCpltCallback+0x4f0>)
 8001922:	701a      	strb	r2, [r3, #0]
				break;
 8001924:	e09d      	b.n	8001a62 <HAL_UART_RxCpltCallback+0x572>
			case 14:
				ETHdatabuf[ETHdataheadnum++] = Uart1_RxBuff[0];
 8001926:	4b2a      	ldr	r3, [pc, #168]	@ (80019d0 <HAL_UART_RxCpltCallback+0x4e0>)
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	1c5a      	adds	r2, r3, #1
 800192c:	b2d1      	uxtb	r1, r2
 800192e:	4a28      	ldr	r2, [pc, #160]	@ (80019d0 <HAL_UART_RxCpltCallback+0x4e0>)
 8001930:	7011      	strb	r1, [r2, #0]
 8001932:	461a      	mov	r2, r3
 8001934:	4b27      	ldr	r3, [pc, #156]	@ (80019d4 <HAL_UART_RxCpltCallback+0x4e4>)
 8001936:	7819      	ldrb	r1, [r3, #0]
 8001938:	4b27      	ldr	r3, [pc, #156]	@ (80019d8 <HAL_UART_RxCpltCallback+0x4e8>)
 800193a:	5499      	strb	r1, [r3, r2]
				Reserve = (Reserve << 8) + Uart1_RxBuff[0];
 800193c:	4b2e      	ldr	r3, [pc, #184]	@ (80019f8 <HAL_UART_RxCpltCallback+0x508>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	021b      	lsls	r3, r3, #8
 8001942:	4a24      	ldr	r2, [pc, #144]	@ (80019d4 <HAL_UART_RxCpltCallback+0x4e4>)
 8001944:	7812      	ldrb	r2, [r2, #0]
 8001946:	4413      	add	r3, r2
 8001948:	4a2b      	ldr	r2, [pc, #172]	@ (80019f8 <HAL_UART_RxCpltCallback+0x508>)
 800194a:	6013      	str	r3, [r2, #0]
				ETHdatastate++;
 800194c:	4b24      	ldr	r3, [pc, #144]	@ (80019e0 <HAL_UART_RxCpltCallback+0x4f0>)
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	3301      	adds	r3, #1
 8001952:	b2da      	uxtb	r2, r3
 8001954:	4b22      	ldr	r3, [pc, #136]	@ (80019e0 <HAL_UART_RxCpltCallback+0x4f0>)
 8001956:	701a      	strb	r2, [r3, #0]
				break;
 8001958:	e083      	b.n	8001a62 <HAL_UART_RxCpltCallback+0x572>
			case 15:
				ETHdatabuf[ETHdataheadnum++] = Uart1_RxBuff[0];
 800195a:	4b1d      	ldr	r3, [pc, #116]	@ (80019d0 <HAL_UART_RxCpltCallback+0x4e0>)
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	1c5a      	adds	r2, r3, #1
 8001960:	b2d1      	uxtb	r1, r2
 8001962:	4a1b      	ldr	r2, [pc, #108]	@ (80019d0 <HAL_UART_RxCpltCallback+0x4e0>)
 8001964:	7011      	strb	r1, [r2, #0]
 8001966:	461a      	mov	r2, r3
 8001968:	4b1a      	ldr	r3, [pc, #104]	@ (80019d4 <HAL_UART_RxCpltCallback+0x4e4>)
 800196a:	7819      	ldrb	r1, [r3, #0]
 800196c:	4b1a      	ldr	r3, [pc, #104]	@ (80019d8 <HAL_UART_RxCpltCallback+0x4e8>)
 800196e:	5499      	strb	r1, [r3, r2]
				ETHbodybuf[ETHdatabodynum++] = Uart1_RxBuff[0];
 8001970:	4b22      	ldr	r3, [pc, #136]	@ (80019fc <HAL_UART_RxCpltCallback+0x50c>)
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	1c5a      	adds	r2, r3, #1
 8001976:	b2d1      	uxtb	r1, r2
 8001978:	4a20      	ldr	r2, [pc, #128]	@ (80019fc <HAL_UART_RxCpltCallback+0x50c>)
 800197a:	7011      	strb	r1, [r2, #0]
 800197c:	461a      	mov	r2, r3
 800197e:	4b15      	ldr	r3, [pc, #84]	@ (80019d4 <HAL_UART_RxCpltCallback+0x4e4>)
 8001980:	7819      	ldrb	r1, [r3, #0]
 8001982:	4b1f      	ldr	r3, [pc, #124]	@ (8001a00 <HAL_UART_RxCpltCallback+0x510>)
 8001984:	5499      	strb	r1, [r3, r2]
				if(ETHdatabodynum >= ETHdatalen)
 8001986:	4b1d      	ldr	r3, [pc, #116]	@ (80019fc <HAL_UART_RxCpltCallback+0x50c>)
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	461a      	mov	r2, r3
 800198c:	4b1d      	ldr	r3, [pc, #116]	@ (8001a04 <HAL_UART_RxCpltCallback+0x514>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	429a      	cmp	r2, r3
 8001992:	d365      	bcc.n	8001a60 <HAL_UART_RxCpltCallback+0x570>
				{
					ETHdatastate++;
 8001994:	4b12      	ldr	r3, [pc, #72]	@ (80019e0 <HAL_UART_RxCpltCallback+0x4f0>)
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	3301      	adds	r3, #1
 800199a:	b2da      	uxtb	r2, r3
 800199c:	4b10      	ldr	r3, [pc, #64]	@ (80019e0 <HAL_UART_RxCpltCallback+0x4f0>)
 800199e:	701a      	strb	r2, [r3, #0]
				}
				break;
 80019a0:	e05e      	b.n	8001a60 <HAL_UART_RxCpltCallback+0x570>
			case 16:
				ETHdatabuf[ETHdataheadnum++] = Uart1_RxBuff[0];
 80019a2:	4b0b      	ldr	r3, [pc, #44]	@ (80019d0 <HAL_UART_RxCpltCallback+0x4e0>)
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	1c5a      	adds	r2, r3, #1
 80019a8:	b2d1      	uxtb	r1, r2
 80019aa:	4a09      	ldr	r2, [pc, #36]	@ (80019d0 <HAL_UART_RxCpltCallback+0x4e0>)
 80019ac:	7011      	strb	r1, [r2, #0]
 80019ae:	461a      	mov	r2, r3
 80019b0:	4b08      	ldr	r3, [pc, #32]	@ (80019d4 <HAL_UART_RxCpltCallback+0x4e4>)
 80019b2:	7819      	ldrb	r1, [r3, #0]
 80019b4:	4b08      	ldr	r3, [pc, #32]	@ (80019d8 <HAL_UART_RxCpltCallback+0x4e8>)
 80019b6:	5499      	strb	r1, [r3, r2]
				ETH_Checksum = Uart1_RxBuff[0];
 80019b8:	4b06      	ldr	r3, [pc, #24]	@ (80019d4 <HAL_UART_RxCpltCallback+0x4e4>)
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	461a      	mov	r2, r3
 80019be:	4b12      	ldr	r3, [pc, #72]	@ (8001a08 <HAL_UART_RxCpltCallback+0x518>)
 80019c0:	601a      	str	r2, [r3, #0]
				ETHdatastate++;
 80019c2:	4b07      	ldr	r3, [pc, #28]	@ (80019e0 <HAL_UART_RxCpltCallback+0x4f0>)
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	3301      	adds	r3, #1
 80019c8:	b2da      	uxtb	r2, r3
 80019ca:	4b05      	ldr	r3, [pc, #20]	@ (80019e0 <HAL_UART_RxCpltCallback+0x4f0>)
 80019cc:	701a      	strb	r2, [r3, #0]
				break;
 80019ce:	e048      	b.n	8001a62 <HAL_UART_RxCpltCallback+0x572>
 80019d0:	200001b2 	.word	0x200001b2
 80019d4:	200000d0 	.word	0x200000d0
 80019d8:	200001bc 	.word	0x200001bc
 80019dc:	200005c5 	.word	0x200005c5
 80019e0:	200001b0 	.word	0x200001b0
 80019e4:	200005c8 	.word	0x200005c8
 80019e8:	200005cc 	.word	0x200005cc
 80019ec:	200005d0 	.word	0x200005d0
 80019f0:	40010c00 	.word	0x40010c00
 80019f4:	200005d4 	.word	0x200005d4
 80019f8:	200005d8 	.word	0x200005d8
 80019fc:	200001b4 	.word	0x200001b4
 8001a00:	200003bc 	.word	0x200003bc
 8001a04:	200005bc 	.word	0x200005bc
 8001a08:	200005dc 	.word	0x200005dc
			case 17:
				ETHdatabuf[ETHdataheadnum++] = Uart1_RxBuff[0];
 8001a0c:	4b9b      	ldr	r3, [pc, #620]	@ (8001c7c <HAL_UART_RxCpltCallback+0x78c>)
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	1c5a      	adds	r2, r3, #1
 8001a12:	b2d1      	uxtb	r1, r2
 8001a14:	4a99      	ldr	r2, [pc, #612]	@ (8001c7c <HAL_UART_RxCpltCallback+0x78c>)
 8001a16:	7011      	strb	r1, [r2, #0]
 8001a18:	461a      	mov	r2, r3
 8001a1a:	4b99      	ldr	r3, [pc, #612]	@ (8001c80 <HAL_UART_RxCpltCallback+0x790>)
 8001a1c:	7819      	ldrb	r1, [r3, #0]
 8001a1e:	4b99      	ldr	r3, [pc, #612]	@ (8001c84 <HAL_UART_RxCpltCallback+0x794>)
 8001a20:	5499      	strb	r1, [r3, r2]
				ETH_Checksum = (ETH_Checksum << 8) + Uart1_RxBuff[0];
 8001a22:	4b99      	ldr	r3, [pc, #612]	@ (8001c88 <HAL_UART_RxCpltCallback+0x798>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	021b      	lsls	r3, r3, #8
 8001a28:	4a95      	ldr	r2, [pc, #596]	@ (8001c80 <HAL_UART_RxCpltCallback+0x790>)
 8001a2a:	7812      	ldrb	r2, [r2, #0]
 8001a2c:	4413      	add	r3, r2
 8001a2e:	4a96      	ldr	r2, [pc, #600]	@ (8001c88 <HAL_UART_RxCpltCallback+0x798>)
 8001a30:	6013      	str	r3, [r2, #0]

				if(ETH_Checksum == Checksum_Reverse(ETHbodybuf,ETHdatalen))
 8001a32:	4b96      	ldr	r3, [pc, #600]	@ (8001c8c <HAL_UART_RxCpltCallback+0x79c>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	b29b      	uxth	r3, r3
 8001a38:	4619      	mov	r1, r3
 8001a3a:	4895      	ldr	r0, [pc, #596]	@ (8001c90 <HAL_UART_RxCpltCallback+0x7a0>)
 8001a3c:	f7ff f92a 	bl	8000c94 <Checksum_Reverse>
 8001a40:	4603      	mov	r3, r0
 8001a42:	461a      	mov	r2, r3
 8001a44:	4b90      	ldr	r3, [pc, #576]	@ (8001c88 <HAL_UART_RxCpltCallback+0x798>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d103      	bne.n	8001a54 <HAL_UART_RxCpltCallback+0x564>
				{
					ETHdataoverflag = 1;
 8001a4c:	4b91      	ldr	r3, [pc, #580]	@ (8001c94 <HAL_UART_RxCpltCallback+0x7a4>)
 8001a4e:	2201      	movs	r2, #1
 8001a50:	701a      	strb	r2, [r3, #0]
				}
				else
				{
					Resetstate(ETHCMD);
				}
				break;
 8001a52:	e006      	b.n	8001a62 <HAL_UART_RxCpltCallback+0x572>
					Resetstate(ETHCMD);
 8001a54:	2001      	movs	r0, #1
 8001a56:	f000 fa65 	bl	8001f24 <Resetstate>
				break;
 8001a5a:	e002      	b.n	8001a62 <HAL_UART_RxCpltCallback+0x572>
				break;
 8001a5c:	bf00      	nop
 8001a5e:	e000      	b.n	8001a62 <HAL_UART_RxCpltCallback+0x572>
				break;
 8001a60:	bf00      	nop
		}
		HAL_UART_Receive_IT(&huart1,Uart1_RxBuff, 1);
 8001a62:	2201      	movs	r2, #1
 8001a64:	4986      	ldr	r1, [pc, #536]	@ (8001c80 <HAL_UART_RxCpltCallback+0x790>)
 8001a66:	488c      	ldr	r0, [pc, #560]	@ (8001c98 <HAL_UART_RxCpltCallback+0x7a8>)
 8001a68:	f001 ff5f 	bl	800392a <HAL_UART_Receive_IT>
	}
	if(huart->Instance == UART5)				//如果产生中断的是串口5
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a8a      	ldr	r2, [pc, #552]	@ (8001c9c <HAL_UART_RxCpltCallback+0x7ac>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	f040 80fe 	bne.w	8001c74 <HAL_UART_RxCpltCallback+0x784>
	{
		//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
		Downdatatimeoutnum = 0;
 8001a78:	4b89      	ldr	r3, [pc, #548]	@ (8001ca0 <HAL_UART_RxCpltCallback+0x7b0>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	601a      	str	r2, [r3, #0]
		switch(DOWNdatastate)
 8001a7e:	4b89      	ldr	r3, [pc, #548]	@ (8001ca4 <HAL_UART_RxCpltCallback+0x7b4>)
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	2b07      	cmp	r3, #7
 8001a84:	f200 80f1 	bhi.w	8001c6a <HAL_UART_RxCpltCallback+0x77a>
 8001a88:	a201      	add	r2, pc, #4	@ (adr r2, 8001a90 <HAL_UART_RxCpltCallback+0x5a0>)
 8001a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a8e:	bf00      	nop
 8001a90:	08001ab1 	.word	0x08001ab1
 8001a94:	08001ae5 	.word	0x08001ae5
 8001a98:	08001b19 	.word	0x08001b19
 8001a9c:	08001b47 	.word	0x08001b47
 8001aa0:	08001b7b 	.word	0x08001b7b
 8001aa4:	08001b9f 	.word	0x08001b9f
 8001aa8:	08001be9 	.word	0x08001be9
 8001aac:	08001c17 	.word	0x08001c17
		{
			case 0:
				if(Uart5_RxBuff[0] == 0x66)
 8001ab0:	4b7d      	ldr	r3, [pc, #500]	@ (8001ca8 <HAL_UART_RxCpltCallback+0x7b8>)
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	2b66      	cmp	r3, #102	@ 0x66
 8001ab6:	d111      	bne.n	8001adc <HAL_UART_RxCpltCallback+0x5ec>
				{
					DOWNdatabuf[DOWNheaddatanum++] = Uart5_RxBuff[0];
 8001ab8:	4b7c      	ldr	r3, [pc, #496]	@ (8001cac <HAL_UART_RxCpltCallback+0x7bc>)
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	1c5a      	adds	r2, r3, #1
 8001abe:	b2d1      	uxtb	r1, r2
 8001ac0:	4a7a      	ldr	r2, [pc, #488]	@ (8001cac <HAL_UART_RxCpltCallback+0x7bc>)
 8001ac2:	7011      	strb	r1, [r2, #0]
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	4b78      	ldr	r3, [pc, #480]	@ (8001ca8 <HAL_UART_RxCpltCallback+0x7b8>)
 8001ac8:	7819      	ldrb	r1, [r3, #0]
 8001aca:	4b79      	ldr	r3, [pc, #484]	@ (8001cb0 <HAL_UART_RxCpltCallback+0x7c0>)
 8001acc:	5499      	strb	r1, [r3, r2]
					DOWNdatastate++;
 8001ace:	4b75      	ldr	r3, [pc, #468]	@ (8001ca4 <HAL_UART_RxCpltCallback+0x7b4>)
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	b2da      	uxtb	r2, r3
 8001ad6:	4b73      	ldr	r3, [pc, #460]	@ (8001ca4 <HAL_UART_RxCpltCallback+0x7b4>)
 8001ad8:	701a      	strb	r2, [r3, #0]
				}
				else
				{
					Resetstate(TOOLDATA);
				}
				break;
 8001ada:	e0c6      	b.n	8001c6a <HAL_UART_RxCpltCallback+0x77a>
					Resetstate(TOOLDATA);
 8001adc:	2002      	movs	r0, #2
 8001ade:	f000 fa21 	bl	8001f24 <Resetstate>
				break;
 8001ae2:	e0c2      	b.n	8001c6a <HAL_UART_RxCpltCallback+0x77a>
			case 1:
				if(Uart5_RxBuff[0] == 0xCC)
 8001ae4:	4b70      	ldr	r3, [pc, #448]	@ (8001ca8 <HAL_UART_RxCpltCallback+0x7b8>)
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	2bcc      	cmp	r3, #204	@ 0xcc
 8001aea:	d111      	bne.n	8001b10 <HAL_UART_RxCpltCallback+0x620>
				{
					DOWNdatabuf[DOWNheaddatanum++] = Uart5_RxBuff[0];
 8001aec:	4b6f      	ldr	r3, [pc, #444]	@ (8001cac <HAL_UART_RxCpltCallback+0x7bc>)
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	1c5a      	adds	r2, r3, #1
 8001af2:	b2d1      	uxtb	r1, r2
 8001af4:	4a6d      	ldr	r2, [pc, #436]	@ (8001cac <HAL_UART_RxCpltCallback+0x7bc>)
 8001af6:	7011      	strb	r1, [r2, #0]
 8001af8:	461a      	mov	r2, r3
 8001afa:	4b6b      	ldr	r3, [pc, #428]	@ (8001ca8 <HAL_UART_RxCpltCallback+0x7b8>)
 8001afc:	7819      	ldrb	r1, [r3, #0]
 8001afe:	4b6c      	ldr	r3, [pc, #432]	@ (8001cb0 <HAL_UART_RxCpltCallback+0x7c0>)
 8001b00:	5499      	strb	r1, [r3, r2]
					DOWNdatastate++;
 8001b02:	4b68      	ldr	r3, [pc, #416]	@ (8001ca4 <HAL_UART_RxCpltCallback+0x7b4>)
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	3301      	adds	r3, #1
 8001b08:	b2da      	uxtb	r2, r3
 8001b0a:	4b66      	ldr	r3, [pc, #408]	@ (8001ca4 <HAL_UART_RxCpltCallback+0x7b4>)
 8001b0c:	701a      	strb	r2, [r3, #0]
				}
				else
				{
					Resetstate(TOOLDATA);
				}
				break;
 8001b0e:	e0ac      	b.n	8001c6a <HAL_UART_RxCpltCallback+0x77a>
					Resetstate(TOOLDATA);
 8001b10:	2002      	movs	r0, #2
 8001b12:	f000 fa07 	bl	8001f24 <Resetstate>
				break;
 8001b16:	e0a8      	b.n	8001c6a <HAL_UART_RxCpltCallback+0x77a>
			case 2:
				DOWNdatabuf[DOWNheaddatanum++] = Uart5_RxBuff[0];
 8001b18:	4b64      	ldr	r3, [pc, #400]	@ (8001cac <HAL_UART_RxCpltCallback+0x7bc>)
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	1c5a      	adds	r2, r3, #1
 8001b1e:	b2d1      	uxtb	r1, r2
 8001b20:	4a62      	ldr	r2, [pc, #392]	@ (8001cac <HAL_UART_RxCpltCallback+0x7bc>)
 8001b22:	7011      	strb	r1, [r2, #0]
 8001b24:	461a      	mov	r2, r3
 8001b26:	4b60      	ldr	r3, [pc, #384]	@ (8001ca8 <HAL_UART_RxCpltCallback+0x7b8>)
 8001b28:	7819      	ldrb	r1, [r3, #0]
 8001b2a:	4b61      	ldr	r3, [pc, #388]	@ (8001cb0 <HAL_UART_RxCpltCallback+0x7c0>)
 8001b2c:	5499      	strb	r1, [r3, r2]
				DOWNdatalen = Uart5_RxBuff[0]<<8;
 8001b2e:	4b5e      	ldr	r3, [pc, #376]	@ (8001ca8 <HAL_UART_RxCpltCallback+0x7b8>)
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	021b      	lsls	r3, r3, #8
 8001b34:	4a5f      	ldr	r2, [pc, #380]	@ (8001cb4 <HAL_UART_RxCpltCallback+0x7c4>)
 8001b36:	6013      	str	r3, [r2, #0]
				DOWNdatastate++;
 8001b38:	4b5a      	ldr	r3, [pc, #360]	@ (8001ca4 <HAL_UART_RxCpltCallback+0x7b4>)
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	3301      	adds	r3, #1
 8001b3e:	b2da      	uxtb	r2, r3
 8001b40:	4b58      	ldr	r3, [pc, #352]	@ (8001ca4 <HAL_UART_RxCpltCallback+0x7b4>)
 8001b42:	701a      	strb	r2, [r3, #0]
				break;
 8001b44:	e091      	b.n	8001c6a <HAL_UART_RxCpltCallback+0x77a>
			case 3:
				DOWNdatabuf[DOWNheaddatanum++] = Uart5_RxBuff[0];
 8001b46:	4b59      	ldr	r3, [pc, #356]	@ (8001cac <HAL_UART_RxCpltCallback+0x7bc>)
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	1c5a      	adds	r2, r3, #1
 8001b4c:	b2d1      	uxtb	r1, r2
 8001b4e:	4a57      	ldr	r2, [pc, #348]	@ (8001cac <HAL_UART_RxCpltCallback+0x7bc>)
 8001b50:	7011      	strb	r1, [r2, #0]
 8001b52:	461a      	mov	r2, r3
 8001b54:	4b54      	ldr	r3, [pc, #336]	@ (8001ca8 <HAL_UART_RxCpltCallback+0x7b8>)
 8001b56:	7819      	ldrb	r1, [r3, #0]
 8001b58:	4b55      	ldr	r3, [pc, #340]	@ (8001cb0 <HAL_UART_RxCpltCallback+0x7c0>)
 8001b5a:	5499      	strb	r1, [r3, r2]
				DOWNdatalen = DOWNdatalen + Uart5_RxBuff[0];
 8001b5c:	4b52      	ldr	r3, [pc, #328]	@ (8001ca8 <HAL_UART_RxCpltCallback+0x7b8>)
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	461a      	mov	r2, r3
 8001b62:	4b54      	ldr	r3, [pc, #336]	@ (8001cb4 <HAL_UART_RxCpltCallback+0x7c4>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4413      	add	r3, r2
 8001b68:	4a52      	ldr	r2, [pc, #328]	@ (8001cb4 <HAL_UART_RxCpltCallback+0x7c4>)
 8001b6a:	6013      	str	r3, [r2, #0]
				DOWNdatastate++;
 8001b6c:	4b4d      	ldr	r3, [pc, #308]	@ (8001ca4 <HAL_UART_RxCpltCallback+0x7b4>)
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	3301      	adds	r3, #1
 8001b72:	b2da      	uxtb	r2, r3
 8001b74:	4b4b      	ldr	r3, [pc, #300]	@ (8001ca4 <HAL_UART_RxCpltCallback+0x7b4>)
 8001b76:	701a      	strb	r2, [r3, #0]
				break;
 8001b78:	e077      	b.n	8001c6a <HAL_UART_RxCpltCallback+0x77a>
			case 4:
				DOWNdatabuf[DOWNheaddatanum++] = Uart5_RxBuff[0];		//数据类型，井下上传只有服务表数据，应为0x01
 8001b7a:	4b4c      	ldr	r3, [pc, #304]	@ (8001cac <HAL_UART_RxCpltCallback+0x7bc>)
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	1c5a      	adds	r2, r3, #1
 8001b80:	b2d1      	uxtb	r1, r2
 8001b82:	4a4a      	ldr	r2, [pc, #296]	@ (8001cac <HAL_UART_RxCpltCallback+0x7bc>)
 8001b84:	7011      	strb	r1, [r2, #0]
 8001b86:	461a      	mov	r2, r3
 8001b88:	4b47      	ldr	r3, [pc, #284]	@ (8001ca8 <HAL_UART_RxCpltCallback+0x7b8>)
 8001b8a:	7819      	ldrb	r1, [r3, #0]
 8001b8c:	4b48      	ldr	r3, [pc, #288]	@ (8001cb0 <HAL_UART_RxCpltCallback+0x7c0>)
 8001b8e:	5499      	strb	r1, [r3, r2]
				DOWNdatastate++;
 8001b90:	4b44      	ldr	r3, [pc, #272]	@ (8001ca4 <HAL_UART_RxCpltCallback+0x7b4>)
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	3301      	adds	r3, #1
 8001b96:	b2da      	uxtb	r2, r3
 8001b98:	4b42      	ldr	r3, [pc, #264]	@ (8001ca4 <HAL_UART_RxCpltCallback+0x7b4>)
 8001b9a:	701a      	strb	r2, [r3, #0]
				break;
 8001b9c:	e065      	b.n	8001c6a <HAL_UART_RxCpltCallback+0x77a>
			case 5:
				DOWNdatabuf[DOWNheaddatanum++] = Uart5_RxBuff[0];
 8001b9e:	4b43      	ldr	r3, [pc, #268]	@ (8001cac <HAL_UART_RxCpltCallback+0x7bc>)
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	1c5a      	adds	r2, r3, #1
 8001ba4:	b2d1      	uxtb	r1, r2
 8001ba6:	4a41      	ldr	r2, [pc, #260]	@ (8001cac <HAL_UART_RxCpltCallback+0x7bc>)
 8001ba8:	7011      	strb	r1, [r2, #0]
 8001baa:	461a      	mov	r2, r3
 8001bac:	4b3e      	ldr	r3, [pc, #248]	@ (8001ca8 <HAL_UART_RxCpltCallback+0x7b8>)
 8001bae:	7819      	ldrb	r1, [r3, #0]
 8001bb0:	4b3f      	ldr	r3, [pc, #252]	@ (8001cb0 <HAL_UART_RxCpltCallback+0x7c0>)
 8001bb2:	5499      	strb	r1, [r3, r2]
				DOWNbodybuf[DOWNdatabodynum++] = Uart5_RxBuff[0];
 8001bb4:	4b40      	ldr	r3, [pc, #256]	@ (8001cb8 <HAL_UART_RxCpltCallback+0x7c8>)
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	1c5a      	adds	r2, r3, #1
 8001bba:	b2d1      	uxtb	r1, r2
 8001bbc:	4a3e      	ldr	r2, [pc, #248]	@ (8001cb8 <HAL_UART_RxCpltCallback+0x7c8>)
 8001bbe:	7011      	strb	r1, [r2, #0]
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	4b39      	ldr	r3, [pc, #228]	@ (8001ca8 <HAL_UART_RxCpltCallback+0x7b8>)
 8001bc4:	7819      	ldrb	r1, [r3, #0]
 8001bc6:	4b3d      	ldr	r3, [pc, #244]	@ (8001cbc <HAL_UART_RxCpltCallback+0x7cc>)
 8001bc8:	5499      	strb	r1, [r3, r2]
				if(DOWNdatabodynum >= DOWNdatalen-1)
 8001bca:	4b3b      	ldr	r3, [pc, #236]	@ (8001cb8 <HAL_UART_RxCpltCallback+0x7c8>)
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	461a      	mov	r2, r3
 8001bd0:	4b38      	ldr	r3, [pc, #224]	@ (8001cb4 <HAL_UART_RxCpltCallback+0x7c4>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	3b01      	subs	r3, #1
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	d346      	bcc.n	8001c68 <HAL_UART_RxCpltCallback+0x778>
				{
					DOWNdatastate++;
 8001bda:	4b32      	ldr	r3, [pc, #200]	@ (8001ca4 <HAL_UART_RxCpltCallback+0x7b4>)
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	3301      	adds	r3, #1
 8001be0:	b2da      	uxtb	r2, r3
 8001be2:	4b30      	ldr	r3, [pc, #192]	@ (8001ca4 <HAL_UART_RxCpltCallback+0x7b4>)
 8001be4:	701a      	strb	r2, [r3, #0]
				}
				break;
 8001be6:	e03f      	b.n	8001c68 <HAL_UART_RxCpltCallback+0x778>
			case 6:
				DOWNdatabuf[DOWNheaddatanum++] = Uart5_RxBuff[0];
 8001be8:	4b30      	ldr	r3, [pc, #192]	@ (8001cac <HAL_UART_RxCpltCallback+0x7bc>)
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	1c5a      	adds	r2, r3, #1
 8001bee:	b2d1      	uxtb	r1, r2
 8001bf0:	4a2e      	ldr	r2, [pc, #184]	@ (8001cac <HAL_UART_RxCpltCallback+0x7bc>)
 8001bf2:	7011      	strb	r1, [r2, #0]
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	4b2c      	ldr	r3, [pc, #176]	@ (8001ca8 <HAL_UART_RxCpltCallback+0x7b8>)
 8001bf8:	7819      	ldrb	r1, [r3, #0]
 8001bfa:	4b2d      	ldr	r3, [pc, #180]	@ (8001cb0 <HAL_UART_RxCpltCallback+0x7c0>)
 8001bfc:	5499      	strb	r1, [r3, r2]
				DOWN_Checksum = Uart5_RxBuff[0]<<8;
 8001bfe:	4b2a      	ldr	r3, [pc, #168]	@ (8001ca8 <HAL_UART_RxCpltCallback+0x7b8>)
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	021b      	lsls	r3, r3, #8
 8001c04:	4a2e      	ldr	r2, [pc, #184]	@ (8001cc0 <HAL_UART_RxCpltCallback+0x7d0>)
 8001c06:	6013      	str	r3, [r2, #0]
				DOWNdatastate++;
 8001c08:	4b26      	ldr	r3, [pc, #152]	@ (8001ca4 <HAL_UART_RxCpltCallback+0x7b4>)
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	3301      	adds	r3, #1
 8001c0e:	b2da      	uxtb	r2, r3
 8001c10:	4b24      	ldr	r3, [pc, #144]	@ (8001ca4 <HAL_UART_RxCpltCallback+0x7b4>)
 8001c12:	701a      	strb	r2, [r3, #0]
				break;
 8001c14:	e029      	b.n	8001c6a <HAL_UART_RxCpltCallback+0x77a>
			case 7:
				DOWNdatabuf[DOWNheaddatanum++] = Uart5_RxBuff[0];
 8001c16:	4b25      	ldr	r3, [pc, #148]	@ (8001cac <HAL_UART_RxCpltCallback+0x7bc>)
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	1c5a      	adds	r2, r3, #1
 8001c1c:	b2d1      	uxtb	r1, r2
 8001c1e:	4a23      	ldr	r2, [pc, #140]	@ (8001cac <HAL_UART_RxCpltCallback+0x7bc>)
 8001c20:	7011      	strb	r1, [r2, #0]
 8001c22:	461a      	mov	r2, r3
 8001c24:	4b20      	ldr	r3, [pc, #128]	@ (8001ca8 <HAL_UART_RxCpltCallback+0x7b8>)
 8001c26:	7819      	ldrb	r1, [r3, #0]
 8001c28:	4b21      	ldr	r3, [pc, #132]	@ (8001cb0 <HAL_UART_RxCpltCallback+0x7c0>)
 8001c2a:	5499      	strb	r1, [r3, r2]
				DOWN_Checksum = DOWN_Checksum + Uart5_RxBuff[0];
 8001c2c:	4b1e      	ldr	r3, [pc, #120]	@ (8001ca8 <HAL_UART_RxCpltCallback+0x7b8>)
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	461a      	mov	r2, r3
 8001c32:	4b23      	ldr	r3, [pc, #140]	@ (8001cc0 <HAL_UART_RxCpltCallback+0x7d0>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4413      	add	r3, r2
 8001c38:	4a21      	ldr	r2, [pc, #132]	@ (8001cc0 <HAL_UART_RxCpltCallback+0x7d0>)
 8001c3a:	6013      	str	r3, [r2, #0]
				if(DOWN_Checksum == Checksum_sum(DOWNdatabuf,DOWNheaddatanum-2))
 8001c3c:	4b1b      	ldr	r3, [pc, #108]	@ (8001cac <HAL_UART_RxCpltCallback+0x7bc>)
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	3b02      	subs	r3, #2
 8001c42:	b29b      	uxth	r3, r3
 8001c44:	4619      	mov	r1, r3
 8001c46:	481a      	ldr	r0, [pc, #104]	@ (8001cb0 <HAL_UART_RxCpltCallback+0x7c0>)
 8001c48:	f7ff f880 	bl	8000d4c <Checksum_sum>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	461a      	mov	r2, r3
 8001c50:	4b1b      	ldr	r3, [pc, #108]	@ (8001cc0 <HAL_UART_RxCpltCallback+0x7d0>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d103      	bne.n	8001c60 <HAL_UART_RxCpltCallback+0x770>
				{
					DOWNdataoverflag = 1;
 8001c58:	4b1a      	ldr	r3, [pc, #104]	@ (8001cc4 <HAL_UART_RxCpltCallback+0x7d4>)
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	701a      	strb	r2, [r3, #0]
				else
				{
					Resetstate(TOOLDATA);
				}

				break;
 8001c5e:	e004      	b.n	8001c6a <HAL_UART_RxCpltCallback+0x77a>
					Resetstate(TOOLDATA);
 8001c60:	2002      	movs	r0, #2
 8001c62:	f000 f95f 	bl	8001f24 <Resetstate>
				break;
 8001c66:	e000      	b.n	8001c6a <HAL_UART_RxCpltCallback+0x77a>
				break;
 8001c68:	bf00      	nop
		}
		HAL_UART_Receive_IT(&huart5,Uart5_RxBuff,1);
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	490e      	ldr	r1, [pc, #56]	@ (8001ca8 <HAL_UART_RxCpltCallback+0x7b8>)
 8001c6e:	4816      	ldr	r0, [pc, #88]	@ (8001cc8 <HAL_UART_RxCpltCallback+0x7d8>)
 8001c70:	f001 fe5b 	bl	800392a <HAL_UART_Receive_IT>
	}
}
 8001c74:	bf00      	nop
 8001c76:	3708      	adds	r7, #8
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	200001b2 	.word	0x200001b2
 8001c80:	200000d0 	.word	0x200000d0
 8001c84:	200001bc 	.word	0x200001bc
 8001c88:	200005dc 	.word	0x200005dc
 8001c8c:	200005bc 	.word	0x200005bc
 8001c90:	200003bc 	.word	0x200003bc
 8001c94:	200005e4 	.word	0x200005e4
 8001c98:	20000168 	.word	0x20000168
 8001c9c:	40005000 	.word	0x40005000
 8001ca0:	200000cc 	.word	0x200000cc
 8001ca4:	200001b1 	.word	0x200001b1
 8001ca8:	200000d4 	.word	0x200000d4
 8001cac:	200001b3 	.word	0x200001b3
 8001cb0:	200002bc 	.word	0x200002bc
 8001cb4:	200005c0 	.word	0x200005c0
 8001cb8:	200001b5 	.word	0x200001b5
 8001cbc:	200004bc 	.word	0x200004bc
 8001cc0:	200005e0 	.word	0x200005e0
 8001cc4:	200005e5 	.word	0x200005e5
 8001cc8:	20000120 	.word	0x20000120

08001ccc <Downcmdsend>:

unsigned char Sertableactbuf[50];
unsigned char Contralcmdbuf[50];

void Downcmdsend (uint8_t type)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b084      	sub	sp, #16
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	71fb      	strb	r3, [r7, #7]
	if(type == SERVICETABLE)
 8001cd6:	79fb      	ldrb	r3, [r7, #7]
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d159      	bne.n	8001d90 <Downcmdsend+0xc4>
	{
		Downcmdbuf[0] = 0x55;  								//发送包头
 8001cdc:	4b87      	ldr	r3, [pc, #540]	@ (8001efc <Downcmdsend+0x230>)
 8001cde:	2255      	movs	r2, #85	@ 0x55
 8001ce0:	701a      	strb	r2, [r3, #0]
		Downcmdbuf[1] = 0xAA;
 8001ce2:	4b86      	ldr	r3, [pc, #536]	@ (8001efc <Downcmdsend+0x230>)
 8001ce4:	22aa      	movs	r2, #170	@ 0xaa
 8001ce6:	705a      	strb	r2, [r3, #1]
		Downcmdbuf[2] = (Sertableactlen+1)>>8;						//Sertableactlen+1:上位机数据体长度+Downcmdbuf[3]
 8001ce8:	4b85      	ldr	r3, [pc, #532]	@ (8001f00 <Downcmdsend+0x234>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	3301      	adds	r3, #1
 8001cee:	0a1b      	lsrs	r3, r3, #8
 8001cf0:	b2da      	uxtb	r2, r3
 8001cf2:	4b82      	ldr	r3, [pc, #520]	@ (8001efc <Downcmdsend+0x230>)
 8001cf4:	709a      	strb	r2, [r3, #2]
		Downcmdbuf[3] = Sertableactlen+1;
 8001cf6:	4b82      	ldr	r3, [pc, #520]	@ (8001f00 <Downcmdsend+0x234>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	b2da      	uxtb	r2, r3
 8001d00:	4b7e      	ldr	r3, [pc, #504]	@ (8001efc <Downcmdsend+0x230>)
 8001d02:	70da      	strb	r2, [r3, #3]
		Downcmdbuf[4] = SERVICETABLE;						//数据类型，不属于上位机数据体
 8001d04:	4b7d      	ldr	r3, [pc, #500]	@ (8001efc <Downcmdsend+0x230>)
 8001d06:	2201      	movs	r2, #1
 8001d08:	711a      	strb	r2, [r3, #4]

		for(unsigned char i=0;i<Sertableactlen;i++)
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	73fb      	strb	r3, [r7, #15]
 8001d0e:	e009      	b.n	8001d24 <Downcmdsend+0x58>
		{
			Downcmdbuf[i+5] = Sertableactbuf[i];				//上位机数据体
 8001d10:	7bfa      	ldrb	r2, [r7, #15]
 8001d12:	7bfb      	ldrb	r3, [r7, #15]
 8001d14:	3305      	adds	r3, #5
 8001d16:	497b      	ldr	r1, [pc, #492]	@ (8001f04 <Downcmdsend+0x238>)
 8001d18:	5c89      	ldrb	r1, [r1, r2]
 8001d1a:	4a78      	ldr	r2, [pc, #480]	@ (8001efc <Downcmdsend+0x230>)
 8001d1c:	54d1      	strb	r1, [r2, r3]
		for(unsigned char i=0;i<Sertableactlen;i++)
 8001d1e:	7bfb      	ldrb	r3, [r7, #15]
 8001d20:	3301      	adds	r3, #1
 8001d22:	73fb      	strb	r3, [r7, #15]
 8001d24:	7bfa      	ldrb	r2, [r7, #15]
 8001d26:	4b76      	ldr	r3, [pc, #472]	@ (8001f00 <Downcmdsend+0x234>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d3f0      	bcc.n	8001d10 <Downcmdsend+0x44>
		}
		Downcmdbuf[Sertableactlen+5] = Checksum_sum(Downcmdbuf,Sertableactlen+5)>>8;
 8001d2e:	4b74      	ldr	r3, [pc, #464]	@ (8001f00 <Downcmdsend+0x234>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	b29b      	uxth	r3, r3
 8001d34:	3305      	adds	r3, #5
 8001d36:	b29b      	uxth	r3, r3
 8001d38:	4619      	mov	r1, r3
 8001d3a:	4870      	ldr	r0, [pc, #448]	@ (8001efc <Downcmdsend+0x230>)
 8001d3c:	f7ff f806 	bl	8000d4c <Checksum_sum>
 8001d40:	4603      	mov	r3, r0
 8001d42:	0a1b      	lsrs	r3, r3, #8
 8001d44:	b29a      	uxth	r2, r3
 8001d46:	4b6e      	ldr	r3, [pc, #440]	@ (8001f00 <Downcmdsend+0x234>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	3305      	adds	r3, #5
 8001d4c:	b2d1      	uxtb	r1, r2
 8001d4e:	4a6b      	ldr	r2, [pc, #428]	@ (8001efc <Downcmdsend+0x230>)
 8001d50:	54d1      	strb	r1, [r2, r3]
		Downcmdbuf[Sertableactlen+6] = Checksum_sum(Downcmdbuf,Sertableactlen+5);
 8001d52:	4b6b      	ldr	r3, [pc, #428]	@ (8001f00 <Downcmdsend+0x234>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	3305      	adds	r3, #5
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	4867      	ldr	r0, [pc, #412]	@ (8001efc <Downcmdsend+0x230>)
 8001d60:	f7fe fff4 	bl	8000d4c <Checksum_sum>
 8001d64:	4603      	mov	r3, r0
 8001d66:	461a      	mov	r2, r3
 8001d68:	4b65      	ldr	r3, [pc, #404]	@ (8001f00 <Downcmdsend+0x234>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	3306      	adds	r3, #6
 8001d6e:	b2d1      	uxtb	r1, r2
 8001d70:	4a62      	ldr	r2, [pc, #392]	@ (8001efc <Downcmdsend+0x230>)
 8001d72:	54d1      	strb	r1, [r2, r3]
		ComSendBuf(COM5,Downcmdbuf,Sertableactlen+7);			//ETH_Datalen+6:上位机数据体+2byte帧头+2byte长度和数据类型+2byte校验和/0-ETH_Datalen+5
 8001d74:	4b62      	ldr	r3, [pc, #392]	@ (8001f00 <Downcmdsend+0x234>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	3307      	adds	r3, #7
 8001d7c:	b29b      	uxth	r3, r3
 8001d7e:	461a      	mov	r2, r3
 8001d80:	495e      	ldr	r1, [pc, #376]	@ (8001efc <Downcmdsend+0x230>)
 8001d82:	20ee      	movs	r0, #238	@ 0xee
 8001d84:	f7ff fb54 	bl	8001430 <ComSendBuf>
		Workmode = 0;
 8001d88:	4b5f      	ldr	r3, [pc, #380]	@ (8001f08 <Downcmdsend+0x23c>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	701a      	strb	r2, [r3, #0]

		//ComSendBuf(COM5,Downcmdbuf,ETH_Datalen+6);			//ETH_Datalen+6:上位机数据体+2byte帧头+2byte长度和数据类型+2byte校验和/0-ETH_Datalen+5
		Workmode = 0;
	}
	/***************************************************************************/
}
 8001d8e:	e0b1      	b.n	8001ef4 <Downcmdsend+0x228>
	else if(type == CONTRALCMD)
 8001d90:	79fb      	ldrb	r3, [r7, #7]
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d163      	bne.n	8001e5e <Downcmdsend+0x192>
		Downcmdbuf[0] = 0x55;  								//发送包头
 8001d96:	4b59      	ldr	r3, [pc, #356]	@ (8001efc <Downcmdsend+0x230>)
 8001d98:	2255      	movs	r2, #85	@ 0x55
 8001d9a:	701a      	strb	r2, [r3, #0]
		Downcmdbuf[1] = 0xAA;
 8001d9c:	4b57      	ldr	r3, [pc, #348]	@ (8001efc <Downcmdsend+0x230>)
 8001d9e:	22aa      	movs	r2, #170	@ 0xaa
 8001da0:	705a      	strb	r2, [r3, #1]
		Downcmdbuf[2] = (Contralcmdlen+3)>>8;
 8001da2:	4b5a      	ldr	r3, [pc, #360]	@ (8001f0c <Downcmdsend+0x240>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	3303      	adds	r3, #3
 8001da8:	0a1b      	lsrs	r3, r3, #8
 8001daa:	b2da      	uxtb	r2, r3
 8001dac:	4b53      	ldr	r3, [pc, #332]	@ (8001efc <Downcmdsend+0x230>)
 8001dae:	709a      	strb	r2, [r3, #2]
		Downcmdbuf[3] = Contralcmdlen+3;
 8001db0:	4b56      	ldr	r3, [pc, #344]	@ (8001f0c <Downcmdsend+0x240>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	3303      	adds	r3, #3
 8001db8:	b2da      	uxtb	r2, r3
 8001dba:	4b50      	ldr	r3, [pc, #320]	@ (8001efc <Downcmdsend+0x230>)
 8001dbc:	70da      	strb	r2, [r3, #3]
		Downcmdbuf[4] = CONTRALCMD;							//数据类型，不属于上位机数据体
 8001dbe:	4b4f      	ldr	r3, [pc, #316]	@ (8001efc <Downcmdsend+0x230>)
 8001dc0:	2202      	movs	r2, #2
 8001dc2:	711a      	strb	r2, [r3, #4]
		Downcmdbuf[5] = Tooladdress;						//命令字，切割仪器为5004
 8001dc4:	4b52      	ldr	r3, [pc, #328]	@ (8001f10 <Downcmdsend+0x244>)
 8001dc6:	781a      	ldrb	r2, [r3, #0]
 8001dc8:	4b4c      	ldr	r3, [pc, #304]	@ (8001efc <Downcmdsend+0x230>)
 8001dca:	715a      	strb	r2, [r3, #5]
		Downcmdbuf[6] = Cmdword>>8;
 8001dcc:	4b51      	ldr	r3, [pc, #324]	@ (8001f14 <Downcmdsend+0x248>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	0a1b      	lsrs	r3, r3, #8
 8001dd2:	b2da      	uxtb	r2, r3
 8001dd4:	4b49      	ldr	r3, [pc, #292]	@ (8001efc <Downcmdsend+0x230>)
 8001dd6:	719a      	strb	r2, [r3, #6]
		for(uint8_t i=0;i<Contralcmdlen;i++)
 8001dd8:	2300      	movs	r3, #0
 8001dda:	73bb      	strb	r3, [r7, #14]
 8001ddc:	e009      	b.n	8001df2 <Downcmdsend+0x126>
			Downcmdbuf[i+7] = Contralcmdbuf[i];				//上位机数据体，切割仪器控制命令为8字节
 8001dde:	7bba      	ldrb	r2, [r7, #14]
 8001de0:	7bbb      	ldrb	r3, [r7, #14]
 8001de2:	3307      	adds	r3, #7
 8001de4:	494c      	ldr	r1, [pc, #304]	@ (8001f18 <Downcmdsend+0x24c>)
 8001de6:	5c89      	ldrb	r1, [r1, r2]
 8001de8:	4a44      	ldr	r2, [pc, #272]	@ (8001efc <Downcmdsend+0x230>)
 8001dea:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i=0;i<Contralcmdlen;i++)
 8001dec:	7bbb      	ldrb	r3, [r7, #14]
 8001dee:	3301      	adds	r3, #1
 8001df0:	73bb      	strb	r3, [r7, #14]
 8001df2:	7bba      	ldrb	r2, [r7, #14]
 8001df4:	4b45      	ldr	r3, [pc, #276]	@ (8001f0c <Downcmdsend+0x240>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d3f0      	bcc.n	8001dde <Downcmdsend+0x112>
		Downcmdbuf[Contralcmdlen+7] = Checksum_sum(Downcmdbuf,Contralcmdlen+7)>>8;
 8001dfc:	4b43      	ldr	r3, [pc, #268]	@ (8001f0c <Downcmdsend+0x240>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	b29b      	uxth	r3, r3
 8001e02:	3307      	adds	r3, #7
 8001e04:	b29b      	uxth	r3, r3
 8001e06:	4619      	mov	r1, r3
 8001e08:	483c      	ldr	r0, [pc, #240]	@ (8001efc <Downcmdsend+0x230>)
 8001e0a:	f7fe ff9f 	bl	8000d4c <Checksum_sum>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	0a1b      	lsrs	r3, r3, #8
 8001e12:	b29a      	uxth	r2, r3
 8001e14:	4b3d      	ldr	r3, [pc, #244]	@ (8001f0c <Downcmdsend+0x240>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	3307      	adds	r3, #7
 8001e1a:	b2d1      	uxtb	r1, r2
 8001e1c:	4a37      	ldr	r2, [pc, #220]	@ (8001efc <Downcmdsend+0x230>)
 8001e1e:	54d1      	strb	r1, [r2, r3]
		Downcmdbuf[Contralcmdlen+8] = Checksum_sum(Downcmdbuf,Contralcmdlen+7);
 8001e20:	4b3a      	ldr	r3, [pc, #232]	@ (8001f0c <Downcmdsend+0x240>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	b29b      	uxth	r3, r3
 8001e26:	3307      	adds	r3, #7
 8001e28:	b29b      	uxth	r3, r3
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	4833      	ldr	r0, [pc, #204]	@ (8001efc <Downcmdsend+0x230>)
 8001e2e:	f7fe ff8d 	bl	8000d4c <Checksum_sum>
 8001e32:	4603      	mov	r3, r0
 8001e34:	461a      	mov	r2, r3
 8001e36:	4b35      	ldr	r3, [pc, #212]	@ (8001f0c <Downcmdsend+0x240>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	3308      	adds	r3, #8
 8001e3c:	b2d1      	uxtb	r1, r2
 8001e3e:	4a2f      	ldr	r2, [pc, #188]	@ (8001efc <Downcmdsend+0x230>)
 8001e40:	54d1      	strb	r1, [r2, r3]
		ComSendBuf(COM5,Downcmdbuf,Contralcmdlen+9);			//ETH_Datalen+8:上位机数据体+2byte帧头+2byte长度和数据类型+2byte校验和+2byte命令字/0-ETH_Datalen+7
 8001e42:	4b32      	ldr	r3, [pc, #200]	@ (8001f0c <Downcmdsend+0x240>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	b29b      	uxth	r3, r3
 8001e48:	3309      	adds	r3, #9
 8001e4a:	b29b      	uxth	r3, r3
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	492b      	ldr	r1, [pc, #172]	@ (8001efc <Downcmdsend+0x230>)
 8001e50:	20ee      	movs	r0, #238	@ 0xee
 8001e52:	f7ff faed 	bl	8001430 <ComSendBuf>
		Workmode = 0;
 8001e56:	4b2c      	ldr	r3, [pc, #176]	@ (8001f08 <Downcmdsend+0x23c>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	701a      	strb	r2, [r3, #0]
}
 8001e5c:	e04a      	b.n	8001ef4 <Downcmdsend+0x228>
	else if(type == DEACTIVE)
 8001e5e:	79fb      	ldrb	r3, [r7, #7]
 8001e60:	2b04      	cmp	r3, #4
 8001e62:	d147      	bne.n	8001ef4 <Downcmdsend+0x228>
		Downcmdbuf[0] = 0x55;  								//发送包头
 8001e64:	4b25      	ldr	r3, [pc, #148]	@ (8001efc <Downcmdsend+0x230>)
 8001e66:	2255      	movs	r2, #85	@ 0x55
 8001e68:	701a      	strb	r2, [r3, #0]
		Downcmdbuf[1] = 0xAA;
 8001e6a:	4b24      	ldr	r3, [pc, #144]	@ (8001efc <Downcmdsend+0x230>)
 8001e6c:	22aa      	movs	r2, #170	@ 0xaa
 8001e6e:	705a      	strb	r2, [r3, #1]
		Downcmdbuf[2] = ETHdatalen+1;						//ETHdatalen+1:上位机数据体长度+Downcmdbuf[3]
 8001e70:	4b2a      	ldr	r3, [pc, #168]	@ (8001f1c <Downcmdsend+0x250>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	3301      	adds	r3, #1
 8001e78:	b2da      	uxtb	r2, r3
 8001e7a:	4b20      	ldr	r3, [pc, #128]	@ (8001efc <Downcmdsend+0x230>)
 8001e7c:	709a      	strb	r2, [r3, #2]
		Downcmdbuf[3] = DEACTIVE;							//数据类型，不属于上位机数据体
 8001e7e:	4b1f      	ldr	r3, [pc, #124]	@ (8001efc <Downcmdsend+0x230>)
 8001e80:	2204      	movs	r2, #4
 8001e82:	70da      	strb	r2, [r3, #3]
		for(unsigned char i=0;i<ETHdatalen;i++)
 8001e84:	2300      	movs	r3, #0
 8001e86:	737b      	strb	r3, [r7, #13]
 8001e88:	e009      	b.n	8001e9e <Downcmdsend+0x1d2>
			Downcmdbuf[i+4] = ETHbodybuf[i];				//上位机数据体
 8001e8a:	7b7a      	ldrb	r2, [r7, #13]
 8001e8c:	7b7b      	ldrb	r3, [r7, #13]
 8001e8e:	3304      	adds	r3, #4
 8001e90:	4923      	ldr	r1, [pc, #140]	@ (8001f20 <Downcmdsend+0x254>)
 8001e92:	5c89      	ldrb	r1, [r1, r2]
 8001e94:	4a19      	ldr	r2, [pc, #100]	@ (8001efc <Downcmdsend+0x230>)
 8001e96:	54d1      	strb	r1, [r2, r3]
		for(unsigned char i=0;i<ETHdatalen;i++)
 8001e98:	7b7b      	ldrb	r3, [r7, #13]
 8001e9a:	3301      	adds	r3, #1
 8001e9c:	737b      	strb	r3, [r7, #13]
 8001e9e:	7b7a      	ldrb	r2, [r7, #13]
 8001ea0:	4b1e      	ldr	r3, [pc, #120]	@ (8001f1c <Downcmdsend+0x250>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d3f0      	bcc.n	8001e8a <Downcmdsend+0x1be>
		Downcmdbuf[ETHdatalen+4] = Checksum_sum(Downcmdbuf,ETHdatalen+4)>>8;
 8001ea8:	4b1c      	ldr	r3, [pc, #112]	@ (8001f1c <Downcmdsend+0x250>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	b29b      	uxth	r3, r3
 8001eae:	3304      	adds	r3, #4
 8001eb0:	b29b      	uxth	r3, r3
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	4811      	ldr	r0, [pc, #68]	@ (8001efc <Downcmdsend+0x230>)
 8001eb6:	f7fe ff49 	bl	8000d4c <Checksum_sum>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	0a1b      	lsrs	r3, r3, #8
 8001ebe:	b29a      	uxth	r2, r3
 8001ec0:	4b16      	ldr	r3, [pc, #88]	@ (8001f1c <Downcmdsend+0x250>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	3304      	adds	r3, #4
 8001ec6:	b2d1      	uxtb	r1, r2
 8001ec8:	4a0c      	ldr	r2, [pc, #48]	@ (8001efc <Downcmdsend+0x230>)
 8001eca:	54d1      	strb	r1, [r2, r3]
		Downcmdbuf[ETHdatalen+5] = Checksum_sum(Downcmdbuf,ETHdatalen+4);
 8001ecc:	4b13      	ldr	r3, [pc, #76]	@ (8001f1c <Downcmdsend+0x250>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	b29b      	uxth	r3, r3
 8001ed2:	3304      	adds	r3, #4
 8001ed4:	b29b      	uxth	r3, r3
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	4808      	ldr	r0, [pc, #32]	@ (8001efc <Downcmdsend+0x230>)
 8001eda:	f7fe ff37 	bl	8000d4c <Checksum_sum>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	4b0e      	ldr	r3, [pc, #56]	@ (8001f1c <Downcmdsend+0x250>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	3305      	adds	r3, #5
 8001ee8:	b2d1      	uxtb	r1, r2
 8001eea:	4a04      	ldr	r2, [pc, #16]	@ (8001efc <Downcmdsend+0x230>)
 8001eec:	54d1      	strb	r1, [r2, r3]
		Workmode = 0;
 8001eee:	4b06      	ldr	r3, [pc, #24]	@ (8001f08 <Downcmdsend+0x23c>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	701a      	strb	r2, [r3, #0]
}
 8001ef4:	bf00      	nop
 8001ef6:	3710      	adds	r7, #16
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	200005e8 	.word	0x200005e8
 8001f00:	2000006c 	.word	0x2000006c
 8001f04:	20000608 	.word	0x20000608
 8001f08:	200005c4 	.word	0x200005c4
 8001f0c:	20000070 	.word	0x20000070
 8001f10:	200005c5 	.word	0x200005c5
 8001f14:	200005c8 	.word	0x200005c8
 8001f18:	2000063c 	.word	0x2000063c
 8001f1c:	200005bc 	.word	0x200005bc
 8001f20:	200003bc 	.word	0x200003bc

08001f24 <Resetstate>:
	ComSendBuf(COM1,Downdataloadbuf,DOWNdatabodynum+20);
}
/* USER CODE END 1 */

void Resetstate(unsigned char tep)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	71fb      	strb	r3, [r7, #7]
	if(tep == ETHCMD)
 8001f2e:	79fb      	ldrb	r3, [r7, #7]
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d10c      	bne.n	8001f4e <Resetstate+0x2a>
	{
		ETHdatabodynum = 0;
 8001f34:	4b10      	ldr	r3, [pc, #64]	@ (8001f78 <Resetstate+0x54>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	701a      	strb	r2, [r3, #0]
		ETHdatastate = 0;
 8001f3a:	4b10      	ldr	r3, [pc, #64]	@ (8001f7c <Resetstate+0x58>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	701a      	strb	r2, [r3, #0]
		ETHdataheadnum = 0;
 8001f40:	4b0f      	ldr	r3, [pc, #60]	@ (8001f80 <Resetstate+0x5c>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	701a      	strb	r2, [r3, #0]
		ETHdataoverflag = 0;
 8001f46:	4b0f      	ldr	r3, [pc, #60]	@ (8001f84 <Resetstate+0x60>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	701a      	strb	r2, [r3, #0]
		DOWNdataoverflag = 0;
		DOWNdatastate = 0;
		DOWNheaddatanum = 0;
		DOWNdatabodynum = 0;
	}
}
 8001f4c:	e00e      	b.n	8001f6c <Resetstate+0x48>
	else if(tep == TOOLDATA)
 8001f4e:	79fb      	ldrb	r3, [r7, #7]
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	d10b      	bne.n	8001f6c <Resetstate+0x48>
		DOWNdataoverflag = 0;
 8001f54:	4b0c      	ldr	r3, [pc, #48]	@ (8001f88 <Resetstate+0x64>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	701a      	strb	r2, [r3, #0]
		DOWNdatastate = 0;
 8001f5a:	4b0c      	ldr	r3, [pc, #48]	@ (8001f8c <Resetstate+0x68>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	701a      	strb	r2, [r3, #0]
		DOWNheaddatanum = 0;
 8001f60:	4b0b      	ldr	r3, [pc, #44]	@ (8001f90 <Resetstate+0x6c>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	701a      	strb	r2, [r3, #0]
		DOWNdatabodynum = 0;
 8001f66:	4b0b      	ldr	r3, [pc, #44]	@ (8001f94 <Resetstate+0x70>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	701a      	strb	r2, [r3, #0]
}
 8001f6c:	bf00      	nop
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bc80      	pop	{r7}
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop
 8001f78:	200001b4 	.word	0x200001b4
 8001f7c:	200001b0 	.word	0x200001b0
 8001f80:	200001b2 	.word	0x200001b2
 8001f84:	200005e4 	.word	0x200005e4
 8001f88:	200005e5 	.word	0x200005e5
 8001f8c:	200001b1 	.word	0x200001b1
 8001f90:	200001b3 	.word	0x200001b3
 8001f94:	200001b5 	.word	0x200001b5

08001f98 <main>:
  */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

int main(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	af00      	add	r7, sp, #0
  init();												//硬件初始化
 8001f9c:	f7fe fdfe 	bl	8000b9c <init>

  while (1)
  {
	  ETH_CMDPOLL();									//ETH指令轮询
 8001fa0:	f7fe fefc 	bl	8000d9c <ETH_CMDPOLL>
	  DOWN_DATAPOLL();									//DOWN数据轮询
 8001fa4:	f7fe ffc2 	bl	8000f2c <DOWN_DATAPOLL>
	  Sendtimestamp();									//时间深度同步
 8001fa8:	f7fe ffea 	bl	8000f80 <Sendtimestamp>

	  IWDG_FEED_DOG();									//喂狗，超过410ms未清看门狗，系统复位
 8001fac:	f7fe fe68 	bl	8000c80 <IWDG_FEED_DOG>
	  ETH_CMDPOLL();									//ETH指令轮询
 8001fb0:	bf00      	nop
 8001fb2:	e7f5      	b.n	8001fa0 <main+0x8>

08001fb4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001fb4:	f7fe f9ae 	bl	8000314 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fb8:	480b      	ldr	r0, [pc, #44]	@ (8001fe8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001fba:	490c      	ldr	r1, [pc, #48]	@ (8001fec <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001fbc:	4a0c      	ldr	r2, [pc, #48]	@ (8001ff0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001fbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fc0:	e002      	b.n	8001fc8 <LoopCopyDataInit>

08001fc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fc6:	3304      	adds	r3, #4

08001fc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fcc:	d3f9      	bcc.n	8001fc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fce:	4a09      	ldr	r2, [pc, #36]	@ (8001ff4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001fd0:	4c09      	ldr	r4, [pc, #36]	@ (8001ff8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001fd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fd4:	e001      	b.n	8001fda <LoopFillZerobss>

08001fd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fd8:	3204      	adds	r2, #4

08001fda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fdc:	d3fb      	bcc.n	8001fd6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001fde:	f002 fa3b 	bl	8004458 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001fe2:	f7ff ffd9 	bl	8001f98 <main>
  bx lr
 8001fe6:	4770      	bx	lr
  ldr r0, =_sdata
 8001fe8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fec:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8001ff0:	080048e8 	.word	0x080048e8
  ldr r2, =_sbss
 8001ff4:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8001ff8:	20000674 	.word	0x20000674

08001ffc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ffc:	e7fe      	b.n	8001ffc <ADC1_2_IRQHandler>
	...

08002000 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002004:	4b08      	ldr	r3, [pc, #32]	@ (8002028 <HAL_Init+0x28>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a07      	ldr	r2, [pc, #28]	@ (8002028 <HAL_Init+0x28>)
 800200a:	f043 0310 	orr.w	r3, r3, #16
 800200e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002010:	2003      	movs	r0, #3
 8002012:	f000 f923 	bl	800225c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002016:	200f      	movs	r0, #15
 8002018:	f000 f808 	bl	800202c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800201c:	f7fe f902 	bl	8000224 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002020:	2300      	movs	r3, #0
}
 8002022:	4618      	mov	r0, r3
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	40022000 	.word	0x40022000

0800202c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002034:	4b12      	ldr	r3, [pc, #72]	@ (8002080 <HAL_InitTick+0x54>)
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	4b12      	ldr	r3, [pc, #72]	@ (8002084 <HAL_InitTick+0x58>)
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	4619      	mov	r1, r3
 800203e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002042:	fbb3 f3f1 	udiv	r3, r3, r1
 8002046:	fbb2 f3f3 	udiv	r3, r2, r3
 800204a:	4618      	mov	r0, r3
 800204c:	f000 f93b 	bl	80022c6 <HAL_SYSTICK_Config>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d001      	beq.n	800205a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e00e      	b.n	8002078 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2b0f      	cmp	r3, #15
 800205e:	d80a      	bhi.n	8002076 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002060:	2200      	movs	r2, #0
 8002062:	6879      	ldr	r1, [r7, #4]
 8002064:	f04f 30ff 	mov.w	r0, #4294967295
 8002068:	f000 f903 	bl	8002272 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800206c:	4a06      	ldr	r2, [pc, #24]	@ (8002088 <HAL_InitTick+0x5c>)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002072:	2300      	movs	r3, #0
 8002074:	e000      	b.n	8002078 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
}
 8002078:	4618      	mov	r0, r3
 800207a:	3708      	adds	r7, #8
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}
 8002080:	20000000 	.word	0x20000000
 8002084:	2000001c 	.word	0x2000001c
 8002088:	20000018 	.word	0x20000018

0800208c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002090:	4b05      	ldr	r3, [pc, #20]	@ (80020a8 <HAL_IncTick+0x1c>)
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	461a      	mov	r2, r3
 8002096:	4b05      	ldr	r3, [pc, #20]	@ (80020ac <HAL_IncTick+0x20>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4413      	add	r3, r2
 800209c:	4a03      	ldr	r2, [pc, #12]	@ (80020ac <HAL_IncTick+0x20>)
 800209e:	6013      	str	r3, [r2, #0]
}
 80020a0:	bf00      	nop
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bc80      	pop	{r7}
 80020a6:	4770      	bx	lr
 80020a8:	2000001c 	.word	0x2000001c
 80020ac:	20000670 	.word	0x20000670

080020b0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
  return uwTick;
 80020b4:	4b02      	ldr	r3, [pc, #8]	@ (80020c0 <HAL_GetTick+0x10>)
 80020b6:	681b      	ldr	r3, [r3, #0]
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bc80      	pop	{r7}
 80020be:	4770      	bx	lr
 80020c0:	20000670 	.word	0x20000670

080020c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b085      	sub	sp, #20
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	f003 0307 	and.w	r3, r3, #7
 80020d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020d4:	4b0c      	ldr	r3, [pc, #48]	@ (8002108 <__NVIC_SetPriorityGrouping+0x44>)
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020da:	68ba      	ldr	r2, [r7, #8]
 80020dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80020e0:	4013      	ands	r3, r2
 80020e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80020f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020f6:	4a04      	ldr	r2, [pc, #16]	@ (8002108 <__NVIC_SetPriorityGrouping+0x44>)
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	60d3      	str	r3, [r2, #12]
}
 80020fc:	bf00      	nop
 80020fe:	3714      	adds	r7, #20
 8002100:	46bd      	mov	sp, r7
 8002102:	bc80      	pop	{r7}
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	e000ed00 	.word	0xe000ed00

0800210c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002110:	4b04      	ldr	r3, [pc, #16]	@ (8002124 <__NVIC_GetPriorityGrouping+0x18>)
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	0a1b      	lsrs	r3, r3, #8
 8002116:	f003 0307 	and.w	r3, r3, #7
}
 800211a:	4618      	mov	r0, r3
 800211c:	46bd      	mov	sp, r7
 800211e:	bc80      	pop	{r7}
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	e000ed00 	.word	0xe000ed00

08002128 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	4603      	mov	r3, r0
 8002130:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002136:	2b00      	cmp	r3, #0
 8002138:	db0b      	blt.n	8002152 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800213a:	79fb      	ldrb	r3, [r7, #7]
 800213c:	f003 021f 	and.w	r2, r3, #31
 8002140:	4906      	ldr	r1, [pc, #24]	@ (800215c <__NVIC_EnableIRQ+0x34>)
 8002142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002146:	095b      	lsrs	r3, r3, #5
 8002148:	2001      	movs	r0, #1
 800214a:	fa00 f202 	lsl.w	r2, r0, r2
 800214e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002152:	bf00      	nop
 8002154:	370c      	adds	r7, #12
 8002156:	46bd      	mov	sp, r7
 8002158:	bc80      	pop	{r7}
 800215a:	4770      	bx	lr
 800215c:	e000e100 	.word	0xe000e100

08002160 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	4603      	mov	r3, r0
 8002168:	6039      	str	r1, [r7, #0]
 800216a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800216c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002170:	2b00      	cmp	r3, #0
 8002172:	db0a      	blt.n	800218a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	b2da      	uxtb	r2, r3
 8002178:	490c      	ldr	r1, [pc, #48]	@ (80021ac <__NVIC_SetPriority+0x4c>)
 800217a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800217e:	0112      	lsls	r2, r2, #4
 8002180:	b2d2      	uxtb	r2, r2
 8002182:	440b      	add	r3, r1
 8002184:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002188:	e00a      	b.n	80021a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	b2da      	uxtb	r2, r3
 800218e:	4908      	ldr	r1, [pc, #32]	@ (80021b0 <__NVIC_SetPriority+0x50>)
 8002190:	79fb      	ldrb	r3, [r7, #7]
 8002192:	f003 030f 	and.w	r3, r3, #15
 8002196:	3b04      	subs	r3, #4
 8002198:	0112      	lsls	r2, r2, #4
 800219a:	b2d2      	uxtb	r2, r2
 800219c:	440b      	add	r3, r1
 800219e:	761a      	strb	r2, [r3, #24]
}
 80021a0:	bf00      	nop
 80021a2:	370c      	adds	r7, #12
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bc80      	pop	{r7}
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	e000e100 	.word	0xe000e100
 80021b0:	e000ed00 	.word	0xe000ed00

080021b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b089      	sub	sp, #36	@ 0x24
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	60f8      	str	r0, [r7, #12]
 80021bc:	60b9      	str	r1, [r7, #8]
 80021be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	f003 0307 	and.w	r3, r3, #7
 80021c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	f1c3 0307 	rsb	r3, r3, #7
 80021ce:	2b04      	cmp	r3, #4
 80021d0:	bf28      	it	cs
 80021d2:	2304      	movcs	r3, #4
 80021d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	3304      	adds	r3, #4
 80021da:	2b06      	cmp	r3, #6
 80021dc:	d902      	bls.n	80021e4 <NVIC_EncodePriority+0x30>
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	3b03      	subs	r3, #3
 80021e2:	e000      	b.n	80021e6 <NVIC_EncodePriority+0x32>
 80021e4:	2300      	movs	r3, #0
 80021e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021e8:	f04f 32ff 	mov.w	r2, #4294967295
 80021ec:	69bb      	ldr	r3, [r7, #24]
 80021ee:	fa02 f303 	lsl.w	r3, r2, r3
 80021f2:	43da      	mvns	r2, r3
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	401a      	ands	r2, r3
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	fa01 f303 	lsl.w	r3, r1, r3
 8002206:	43d9      	mvns	r1, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800220c:	4313      	orrs	r3, r2
         );
}
 800220e:	4618      	mov	r0, r3
 8002210:	3724      	adds	r7, #36	@ 0x24
 8002212:	46bd      	mov	sp, r7
 8002214:	bc80      	pop	{r7}
 8002216:	4770      	bx	lr

08002218 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	3b01      	subs	r3, #1
 8002224:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002228:	d301      	bcc.n	800222e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800222a:	2301      	movs	r3, #1
 800222c:	e00f      	b.n	800224e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800222e:	4a0a      	ldr	r2, [pc, #40]	@ (8002258 <SysTick_Config+0x40>)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	3b01      	subs	r3, #1
 8002234:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002236:	210f      	movs	r1, #15
 8002238:	f04f 30ff 	mov.w	r0, #4294967295
 800223c:	f7ff ff90 	bl	8002160 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002240:	4b05      	ldr	r3, [pc, #20]	@ (8002258 <SysTick_Config+0x40>)
 8002242:	2200      	movs	r2, #0
 8002244:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002246:	4b04      	ldr	r3, [pc, #16]	@ (8002258 <SysTick_Config+0x40>)
 8002248:	2207      	movs	r2, #7
 800224a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800224c:	2300      	movs	r3, #0
}
 800224e:	4618      	mov	r0, r3
 8002250:	3708      	adds	r7, #8
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	e000e010 	.word	0xe000e010

0800225c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	f7ff ff2d 	bl	80020c4 <__NVIC_SetPriorityGrouping>
}
 800226a:	bf00      	nop
 800226c:	3708      	adds	r7, #8
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}

08002272 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002272:	b580      	push	{r7, lr}
 8002274:	b086      	sub	sp, #24
 8002276:	af00      	add	r7, sp, #0
 8002278:	4603      	mov	r3, r0
 800227a:	60b9      	str	r1, [r7, #8]
 800227c:	607a      	str	r2, [r7, #4]
 800227e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002280:	2300      	movs	r3, #0
 8002282:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002284:	f7ff ff42 	bl	800210c <__NVIC_GetPriorityGrouping>
 8002288:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	68b9      	ldr	r1, [r7, #8]
 800228e:	6978      	ldr	r0, [r7, #20]
 8002290:	f7ff ff90 	bl	80021b4 <NVIC_EncodePriority>
 8002294:	4602      	mov	r2, r0
 8002296:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800229a:	4611      	mov	r1, r2
 800229c:	4618      	mov	r0, r3
 800229e:	f7ff ff5f 	bl	8002160 <__NVIC_SetPriority>
}
 80022a2:	bf00      	nop
 80022a4:	3718      	adds	r7, #24
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}

080022aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022aa:	b580      	push	{r7, lr}
 80022ac:	b082      	sub	sp, #8
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	4603      	mov	r3, r0
 80022b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b8:	4618      	mov	r0, r3
 80022ba:	f7ff ff35 	bl	8002128 <__NVIC_EnableIRQ>
}
 80022be:	bf00      	nop
 80022c0:	3708      	adds	r7, #8
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}

080022c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022c6:	b580      	push	{r7, lr}
 80022c8:	b082      	sub	sp, #8
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f7ff ffa2 	bl	8002218 <SysTick_Config>
 80022d4:	4603      	mov	r3, r0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3708      	adds	r7, #8
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}

080022de <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80022de:	b480      	push	{r7}
 80022e0:	b085      	sub	sp, #20
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022e6:	2300      	movs	r3, #0
 80022e8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	2b02      	cmp	r3, #2
 80022f4:	d008      	beq.n	8002308 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2204      	movs	r2, #4
 80022fa:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2200      	movs	r2, #0
 8002300:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e020      	b.n	800234a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f022 020e 	bic.w	r2, r2, #14
 8002316:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f022 0201 	bic.w	r2, r2, #1
 8002326:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002330:	2101      	movs	r1, #1
 8002332:	fa01 f202 	lsl.w	r2, r1, r2
 8002336:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2201      	movs	r2, #1
 800233c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2200      	movs	r2, #0
 8002344:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002348:	7bfb      	ldrb	r3, [r7, #15]
}
 800234a:	4618      	mov	r0, r3
 800234c:	3714      	adds	r7, #20
 800234e:	46bd      	mov	sp, r7
 8002350:	bc80      	pop	{r7}
 8002352:	4770      	bx	lr

08002354 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002354:	b580      	push	{r7, lr}
 8002356:	b084      	sub	sp, #16
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800235c:	2300      	movs	r3, #0
 800235e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002366:	b2db      	uxtb	r3, r3
 8002368:	2b02      	cmp	r3, #2
 800236a:	d005      	beq.n	8002378 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2204      	movs	r2, #4
 8002370:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	73fb      	strb	r3, [r7, #15]
 8002376:	e0d6      	b.n	8002526 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f022 020e 	bic.w	r2, r2, #14
 8002386:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f022 0201 	bic.w	r2, r2, #1
 8002396:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	461a      	mov	r2, r3
 800239e:	4b64      	ldr	r3, [pc, #400]	@ (8002530 <HAL_DMA_Abort_IT+0x1dc>)
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d958      	bls.n	8002456 <HAL_DMA_Abort_IT+0x102>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a62      	ldr	r2, [pc, #392]	@ (8002534 <HAL_DMA_Abort_IT+0x1e0>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d04f      	beq.n	800244e <HAL_DMA_Abort_IT+0xfa>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a61      	ldr	r2, [pc, #388]	@ (8002538 <HAL_DMA_Abort_IT+0x1e4>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d048      	beq.n	800244a <HAL_DMA_Abort_IT+0xf6>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a5f      	ldr	r2, [pc, #380]	@ (800253c <HAL_DMA_Abort_IT+0x1e8>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d040      	beq.n	8002444 <HAL_DMA_Abort_IT+0xf0>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a5e      	ldr	r2, [pc, #376]	@ (8002540 <HAL_DMA_Abort_IT+0x1ec>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d038      	beq.n	800243e <HAL_DMA_Abort_IT+0xea>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a5c      	ldr	r2, [pc, #368]	@ (8002544 <HAL_DMA_Abort_IT+0x1f0>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d030      	beq.n	8002438 <HAL_DMA_Abort_IT+0xe4>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a5b      	ldr	r2, [pc, #364]	@ (8002548 <HAL_DMA_Abort_IT+0x1f4>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d028      	beq.n	8002432 <HAL_DMA_Abort_IT+0xde>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a52      	ldr	r2, [pc, #328]	@ (8002530 <HAL_DMA_Abort_IT+0x1dc>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d020      	beq.n	800242c <HAL_DMA_Abort_IT+0xd8>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a57      	ldr	r2, [pc, #348]	@ (800254c <HAL_DMA_Abort_IT+0x1f8>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d019      	beq.n	8002428 <HAL_DMA_Abort_IT+0xd4>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a55      	ldr	r2, [pc, #340]	@ (8002550 <HAL_DMA_Abort_IT+0x1fc>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d012      	beq.n	8002424 <HAL_DMA_Abort_IT+0xd0>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a54      	ldr	r2, [pc, #336]	@ (8002554 <HAL_DMA_Abort_IT+0x200>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d00a      	beq.n	800241e <HAL_DMA_Abort_IT+0xca>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a52      	ldr	r2, [pc, #328]	@ (8002558 <HAL_DMA_Abort_IT+0x204>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d102      	bne.n	8002418 <HAL_DMA_Abort_IT+0xc4>
 8002412:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002416:	e01b      	b.n	8002450 <HAL_DMA_Abort_IT+0xfc>
 8002418:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800241c:	e018      	b.n	8002450 <HAL_DMA_Abort_IT+0xfc>
 800241e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002422:	e015      	b.n	8002450 <HAL_DMA_Abort_IT+0xfc>
 8002424:	2310      	movs	r3, #16
 8002426:	e013      	b.n	8002450 <HAL_DMA_Abort_IT+0xfc>
 8002428:	2301      	movs	r3, #1
 800242a:	e011      	b.n	8002450 <HAL_DMA_Abort_IT+0xfc>
 800242c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002430:	e00e      	b.n	8002450 <HAL_DMA_Abort_IT+0xfc>
 8002432:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002436:	e00b      	b.n	8002450 <HAL_DMA_Abort_IT+0xfc>
 8002438:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800243c:	e008      	b.n	8002450 <HAL_DMA_Abort_IT+0xfc>
 800243e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002442:	e005      	b.n	8002450 <HAL_DMA_Abort_IT+0xfc>
 8002444:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002448:	e002      	b.n	8002450 <HAL_DMA_Abort_IT+0xfc>
 800244a:	2310      	movs	r3, #16
 800244c:	e000      	b.n	8002450 <HAL_DMA_Abort_IT+0xfc>
 800244e:	2301      	movs	r3, #1
 8002450:	4a42      	ldr	r2, [pc, #264]	@ (800255c <HAL_DMA_Abort_IT+0x208>)
 8002452:	6053      	str	r3, [r2, #4]
 8002454:	e057      	b.n	8002506 <HAL_DMA_Abort_IT+0x1b2>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a36      	ldr	r2, [pc, #216]	@ (8002534 <HAL_DMA_Abort_IT+0x1e0>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d04f      	beq.n	8002500 <HAL_DMA_Abort_IT+0x1ac>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a34      	ldr	r2, [pc, #208]	@ (8002538 <HAL_DMA_Abort_IT+0x1e4>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d048      	beq.n	80024fc <HAL_DMA_Abort_IT+0x1a8>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a33      	ldr	r2, [pc, #204]	@ (800253c <HAL_DMA_Abort_IT+0x1e8>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d040      	beq.n	80024f6 <HAL_DMA_Abort_IT+0x1a2>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a31      	ldr	r2, [pc, #196]	@ (8002540 <HAL_DMA_Abort_IT+0x1ec>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d038      	beq.n	80024f0 <HAL_DMA_Abort_IT+0x19c>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a30      	ldr	r2, [pc, #192]	@ (8002544 <HAL_DMA_Abort_IT+0x1f0>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d030      	beq.n	80024ea <HAL_DMA_Abort_IT+0x196>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a2e      	ldr	r2, [pc, #184]	@ (8002548 <HAL_DMA_Abort_IT+0x1f4>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d028      	beq.n	80024e4 <HAL_DMA_Abort_IT+0x190>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a26      	ldr	r2, [pc, #152]	@ (8002530 <HAL_DMA_Abort_IT+0x1dc>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d020      	beq.n	80024de <HAL_DMA_Abort_IT+0x18a>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a2a      	ldr	r2, [pc, #168]	@ (800254c <HAL_DMA_Abort_IT+0x1f8>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d019      	beq.n	80024da <HAL_DMA_Abort_IT+0x186>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a29      	ldr	r2, [pc, #164]	@ (8002550 <HAL_DMA_Abort_IT+0x1fc>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d012      	beq.n	80024d6 <HAL_DMA_Abort_IT+0x182>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a27      	ldr	r2, [pc, #156]	@ (8002554 <HAL_DMA_Abort_IT+0x200>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d00a      	beq.n	80024d0 <HAL_DMA_Abort_IT+0x17c>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a26      	ldr	r2, [pc, #152]	@ (8002558 <HAL_DMA_Abort_IT+0x204>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d102      	bne.n	80024ca <HAL_DMA_Abort_IT+0x176>
 80024c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80024c8:	e01b      	b.n	8002502 <HAL_DMA_Abort_IT+0x1ae>
 80024ca:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80024ce:	e018      	b.n	8002502 <HAL_DMA_Abort_IT+0x1ae>
 80024d0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80024d4:	e015      	b.n	8002502 <HAL_DMA_Abort_IT+0x1ae>
 80024d6:	2310      	movs	r3, #16
 80024d8:	e013      	b.n	8002502 <HAL_DMA_Abort_IT+0x1ae>
 80024da:	2301      	movs	r3, #1
 80024dc:	e011      	b.n	8002502 <HAL_DMA_Abort_IT+0x1ae>
 80024de:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80024e2:	e00e      	b.n	8002502 <HAL_DMA_Abort_IT+0x1ae>
 80024e4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80024e8:	e00b      	b.n	8002502 <HAL_DMA_Abort_IT+0x1ae>
 80024ea:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80024ee:	e008      	b.n	8002502 <HAL_DMA_Abort_IT+0x1ae>
 80024f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80024f4:	e005      	b.n	8002502 <HAL_DMA_Abort_IT+0x1ae>
 80024f6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80024fa:	e002      	b.n	8002502 <HAL_DMA_Abort_IT+0x1ae>
 80024fc:	2310      	movs	r3, #16
 80024fe:	e000      	b.n	8002502 <HAL_DMA_Abort_IT+0x1ae>
 8002500:	2301      	movs	r3, #1
 8002502:	4a17      	ldr	r2, [pc, #92]	@ (8002560 <HAL_DMA_Abort_IT+0x20c>)
 8002504:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2201      	movs	r2, #1
 800250a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2200      	movs	r2, #0
 8002512:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800251a:	2b00      	cmp	r3, #0
 800251c:	d003      	beq.n	8002526 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	4798      	blx	r3
    } 
  }
  return status;
 8002526:	7bfb      	ldrb	r3, [r7, #15]
}
 8002528:	4618      	mov	r0, r3
 800252a:	3710      	adds	r7, #16
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}
 8002530:	40020080 	.word	0x40020080
 8002534:	40020008 	.word	0x40020008
 8002538:	4002001c 	.word	0x4002001c
 800253c:	40020030 	.word	0x40020030
 8002540:	40020044 	.word	0x40020044
 8002544:	40020058 	.word	0x40020058
 8002548:	4002006c 	.word	0x4002006c
 800254c:	40020408 	.word	0x40020408
 8002550:	4002041c 	.word	0x4002041c
 8002554:	40020430 	.word	0x40020430
 8002558:	40020444 	.word	0x40020444
 800255c:	40020400 	.word	0x40020400
 8002560:	40020000 	.word	0x40020000

08002564 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002564:	b480      	push	{r7}
 8002566:	b08b      	sub	sp, #44	@ 0x2c
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800256e:	2300      	movs	r3, #0
 8002570:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002572:	2300      	movs	r3, #0
 8002574:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002576:	e179      	b.n	800286c <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002578:	2201      	movs	r2, #1
 800257a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800257c:	fa02 f303 	lsl.w	r3, r2, r3
 8002580:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	69fa      	ldr	r2, [r7, #28]
 8002588:	4013      	ands	r3, r2
 800258a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800258c:	69ba      	ldr	r2, [r7, #24]
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	429a      	cmp	r2, r3
 8002592:	f040 8168 	bne.w	8002866 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	4a96      	ldr	r2, [pc, #600]	@ (80027f4 <HAL_GPIO_Init+0x290>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d05e      	beq.n	800265e <HAL_GPIO_Init+0xfa>
 80025a0:	4a94      	ldr	r2, [pc, #592]	@ (80027f4 <HAL_GPIO_Init+0x290>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d875      	bhi.n	8002692 <HAL_GPIO_Init+0x12e>
 80025a6:	4a94      	ldr	r2, [pc, #592]	@ (80027f8 <HAL_GPIO_Init+0x294>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d058      	beq.n	800265e <HAL_GPIO_Init+0xfa>
 80025ac:	4a92      	ldr	r2, [pc, #584]	@ (80027f8 <HAL_GPIO_Init+0x294>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d86f      	bhi.n	8002692 <HAL_GPIO_Init+0x12e>
 80025b2:	4a92      	ldr	r2, [pc, #584]	@ (80027fc <HAL_GPIO_Init+0x298>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d052      	beq.n	800265e <HAL_GPIO_Init+0xfa>
 80025b8:	4a90      	ldr	r2, [pc, #576]	@ (80027fc <HAL_GPIO_Init+0x298>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d869      	bhi.n	8002692 <HAL_GPIO_Init+0x12e>
 80025be:	4a90      	ldr	r2, [pc, #576]	@ (8002800 <HAL_GPIO_Init+0x29c>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d04c      	beq.n	800265e <HAL_GPIO_Init+0xfa>
 80025c4:	4a8e      	ldr	r2, [pc, #568]	@ (8002800 <HAL_GPIO_Init+0x29c>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d863      	bhi.n	8002692 <HAL_GPIO_Init+0x12e>
 80025ca:	4a8e      	ldr	r2, [pc, #568]	@ (8002804 <HAL_GPIO_Init+0x2a0>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d046      	beq.n	800265e <HAL_GPIO_Init+0xfa>
 80025d0:	4a8c      	ldr	r2, [pc, #560]	@ (8002804 <HAL_GPIO_Init+0x2a0>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d85d      	bhi.n	8002692 <HAL_GPIO_Init+0x12e>
 80025d6:	2b12      	cmp	r3, #18
 80025d8:	d82a      	bhi.n	8002630 <HAL_GPIO_Init+0xcc>
 80025da:	2b12      	cmp	r3, #18
 80025dc:	d859      	bhi.n	8002692 <HAL_GPIO_Init+0x12e>
 80025de:	a201      	add	r2, pc, #4	@ (adr r2, 80025e4 <HAL_GPIO_Init+0x80>)
 80025e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025e4:	0800265f 	.word	0x0800265f
 80025e8:	08002639 	.word	0x08002639
 80025ec:	0800264b 	.word	0x0800264b
 80025f0:	0800268d 	.word	0x0800268d
 80025f4:	08002693 	.word	0x08002693
 80025f8:	08002693 	.word	0x08002693
 80025fc:	08002693 	.word	0x08002693
 8002600:	08002693 	.word	0x08002693
 8002604:	08002693 	.word	0x08002693
 8002608:	08002693 	.word	0x08002693
 800260c:	08002693 	.word	0x08002693
 8002610:	08002693 	.word	0x08002693
 8002614:	08002693 	.word	0x08002693
 8002618:	08002693 	.word	0x08002693
 800261c:	08002693 	.word	0x08002693
 8002620:	08002693 	.word	0x08002693
 8002624:	08002693 	.word	0x08002693
 8002628:	08002641 	.word	0x08002641
 800262c:	08002655 	.word	0x08002655
 8002630:	4a75      	ldr	r2, [pc, #468]	@ (8002808 <HAL_GPIO_Init+0x2a4>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d013      	beq.n	800265e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002636:	e02c      	b.n	8002692 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	623b      	str	r3, [r7, #32]
          break;
 800263e:	e029      	b.n	8002694 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	3304      	adds	r3, #4
 8002646:	623b      	str	r3, [r7, #32]
          break;
 8002648:	e024      	b.n	8002694 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	68db      	ldr	r3, [r3, #12]
 800264e:	3308      	adds	r3, #8
 8002650:	623b      	str	r3, [r7, #32]
          break;
 8002652:	e01f      	b.n	8002694 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	330c      	adds	r3, #12
 800265a:	623b      	str	r3, [r7, #32]
          break;
 800265c:	e01a      	b.n	8002694 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d102      	bne.n	800266c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002666:	2304      	movs	r3, #4
 8002668:	623b      	str	r3, [r7, #32]
          break;
 800266a:	e013      	b.n	8002694 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	2b01      	cmp	r3, #1
 8002672:	d105      	bne.n	8002680 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002674:	2308      	movs	r3, #8
 8002676:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	69fa      	ldr	r2, [r7, #28]
 800267c:	611a      	str	r2, [r3, #16]
          break;
 800267e:	e009      	b.n	8002694 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002680:	2308      	movs	r3, #8
 8002682:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	69fa      	ldr	r2, [r7, #28]
 8002688:	615a      	str	r2, [r3, #20]
          break;
 800268a:	e003      	b.n	8002694 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800268c:	2300      	movs	r3, #0
 800268e:	623b      	str	r3, [r7, #32]
          break;
 8002690:	e000      	b.n	8002694 <HAL_GPIO_Init+0x130>
          break;
 8002692:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002694:	69bb      	ldr	r3, [r7, #24]
 8002696:	2bff      	cmp	r3, #255	@ 0xff
 8002698:	d801      	bhi.n	800269e <HAL_GPIO_Init+0x13a>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	e001      	b.n	80026a2 <HAL_GPIO_Init+0x13e>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	3304      	adds	r3, #4
 80026a2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80026a4:	69bb      	ldr	r3, [r7, #24]
 80026a6:	2bff      	cmp	r3, #255	@ 0xff
 80026a8:	d802      	bhi.n	80026b0 <HAL_GPIO_Init+0x14c>
 80026aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	e002      	b.n	80026b6 <HAL_GPIO_Init+0x152>
 80026b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026b2:	3b08      	subs	r3, #8
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	210f      	movs	r1, #15
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	fa01 f303 	lsl.w	r3, r1, r3
 80026c4:	43db      	mvns	r3, r3
 80026c6:	401a      	ands	r2, r3
 80026c8:	6a39      	ldr	r1, [r7, #32]
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	fa01 f303 	lsl.w	r3, r1, r3
 80026d0:	431a      	orrs	r2, r3
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	f000 80c1 	beq.w	8002866 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80026e4:	4b49      	ldr	r3, [pc, #292]	@ (800280c <HAL_GPIO_Init+0x2a8>)
 80026e6:	699b      	ldr	r3, [r3, #24]
 80026e8:	4a48      	ldr	r2, [pc, #288]	@ (800280c <HAL_GPIO_Init+0x2a8>)
 80026ea:	f043 0301 	orr.w	r3, r3, #1
 80026ee:	6193      	str	r3, [r2, #24]
 80026f0:	4b46      	ldr	r3, [pc, #280]	@ (800280c <HAL_GPIO_Init+0x2a8>)
 80026f2:	699b      	ldr	r3, [r3, #24]
 80026f4:	f003 0301 	and.w	r3, r3, #1
 80026f8:	60bb      	str	r3, [r7, #8]
 80026fa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80026fc:	4a44      	ldr	r2, [pc, #272]	@ (8002810 <HAL_GPIO_Init+0x2ac>)
 80026fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002700:	089b      	lsrs	r3, r3, #2
 8002702:	3302      	adds	r3, #2
 8002704:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002708:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800270a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800270c:	f003 0303 	and.w	r3, r3, #3
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	220f      	movs	r2, #15
 8002714:	fa02 f303 	lsl.w	r3, r2, r3
 8002718:	43db      	mvns	r3, r3
 800271a:	68fa      	ldr	r2, [r7, #12]
 800271c:	4013      	ands	r3, r2
 800271e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	4a3c      	ldr	r2, [pc, #240]	@ (8002814 <HAL_GPIO_Init+0x2b0>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d01f      	beq.n	8002768 <HAL_GPIO_Init+0x204>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	4a3b      	ldr	r2, [pc, #236]	@ (8002818 <HAL_GPIO_Init+0x2b4>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d019      	beq.n	8002764 <HAL_GPIO_Init+0x200>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	4a3a      	ldr	r2, [pc, #232]	@ (800281c <HAL_GPIO_Init+0x2b8>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d013      	beq.n	8002760 <HAL_GPIO_Init+0x1fc>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	4a39      	ldr	r2, [pc, #228]	@ (8002820 <HAL_GPIO_Init+0x2bc>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d00d      	beq.n	800275c <HAL_GPIO_Init+0x1f8>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	4a38      	ldr	r2, [pc, #224]	@ (8002824 <HAL_GPIO_Init+0x2c0>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d007      	beq.n	8002758 <HAL_GPIO_Init+0x1f4>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	4a37      	ldr	r2, [pc, #220]	@ (8002828 <HAL_GPIO_Init+0x2c4>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d101      	bne.n	8002754 <HAL_GPIO_Init+0x1f0>
 8002750:	2305      	movs	r3, #5
 8002752:	e00a      	b.n	800276a <HAL_GPIO_Init+0x206>
 8002754:	2306      	movs	r3, #6
 8002756:	e008      	b.n	800276a <HAL_GPIO_Init+0x206>
 8002758:	2304      	movs	r3, #4
 800275a:	e006      	b.n	800276a <HAL_GPIO_Init+0x206>
 800275c:	2303      	movs	r3, #3
 800275e:	e004      	b.n	800276a <HAL_GPIO_Init+0x206>
 8002760:	2302      	movs	r3, #2
 8002762:	e002      	b.n	800276a <HAL_GPIO_Init+0x206>
 8002764:	2301      	movs	r3, #1
 8002766:	e000      	b.n	800276a <HAL_GPIO_Init+0x206>
 8002768:	2300      	movs	r3, #0
 800276a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800276c:	f002 0203 	and.w	r2, r2, #3
 8002770:	0092      	lsls	r2, r2, #2
 8002772:	4093      	lsls	r3, r2
 8002774:	68fa      	ldr	r2, [r7, #12]
 8002776:	4313      	orrs	r3, r2
 8002778:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800277a:	4925      	ldr	r1, [pc, #148]	@ (8002810 <HAL_GPIO_Init+0x2ac>)
 800277c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800277e:	089b      	lsrs	r3, r3, #2
 8002780:	3302      	adds	r3, #2
 8002782:	68fa      	ldr	r2, [r7, #12]
 8002784:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002790:	2b00      	cmp	r3, #0
 8002792:	d006      	beq.n	80027a2 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002794:	4b25      	ldr	r3, [pc, #148]	@ (800282c <HAL_GPIO_Init+0x2c8>)
 8002796:	689a      	ldr	r2, [r3, #8]
 8002798:	4924      	ldr	r1, [pc, #144]	@ (800282c <HAL_GPIO_Init+0x2c8>)
 800279a:	69bb      	ldr	r3, [r7, #24]
 800279c:	4313      	orrs	r3, r2
 800279e:	608b      	str	r3, [r1, #8]
 80027a0:	e006      	b.n	80027b0 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80027a2:	4b22      	ldr	r3, [pc, #136]	@ (800282c <HAL_GPIO_Init+0x2c8>)
 80027a4:	689a      	ldr	r2, [r3, #8]
 80027a6:	69bb      	ldr	r3, [r7, #24]
 80027a8:	43db      	mvns	r3, r3
 80027aa:	4920      	ldr	r1, [pc, #128]	@ (800282c <HAL_GPIO_Init+0x2c8>)
 80027ac:	4013      	ands	r3, r2
 80027ae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d006      	beq.n	80027ca <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80027bc:	4b1b      	ldr	r3, [pc, #108]	@ (800282c <HAL_GPIO_Init+0x2c8>)
 80027be:	68da      	ldr	r2, [r3, #12]
 80027c0:	491a      	ldr	r1, [pc, #104]	@ (800282c <HAL_GPIO_Init+0x2c8>)
 80027c2:	69bb      	ldr	r3, [r7, #24]
 80027c4:	4313      	orrs	r3, r2
 80027c6:	60cb      	str	r3, [r1, #12]
 80027c8:	e006      	b.n	80027d8 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80027ca:	4b18      	ldr	r3, [pc, #96]	@ (800282c <HAL_GPIO_Init+0x2c8>)
 80027cc:	68da      	ldr	r2, [r3, #12]
 80027ce:	69bb      	ldr	r3, [r7, #24]
 80027d0:	43db      	mvns	r3, r3
 80027d2:	4916      	ldr	r1, [pc, #88]	@ (800282c <HAL_GPIO_Init+0x2c8>)
 80027d4:	4013      	ands	r3, r2
 80027d6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d025      	beq.n	8002830 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80027e4:	4b11      	ldr	r3, [pc, #68]	@ (800282c <HAL_GPIO_Init+0x2c8>)
 80027e6:	685a      	ldr	r2, [r3, #4]
 80027e8:	4910      	ldr	r1, [pc, #64]	@ (800282c <HAL_GPIO_Init+0x2c8>)
 80027ea:	69bb      	ldr	r3, [r7, #24]
 80027ec:	4313      	orrs	r3, r2
 80027ee:	604b      	str	r3, [r1, #4]
 80027f0:	e025      	b.n	800283e <HAL_GPIO_Init+0x2da>
 80027f2:	bf00      	nop
 80027f4:	10320000 	.word	0x10320000
 80027f8:	10310000 	.word	0x10310000
 80027fc:	10220000 	.word	0x10220000
 8002800:	10210000 	.word	0x10210000
 8002804:	10120000 	.word	0x10120000
 8002808:	10110000 	.word	0x10110000
 800280c:	40021000 	.word	0x40021000
 8002810:	40010000 	.word	0x40010000
 8002814:	40010800 	.word	0x40010800
 8002818:	40010c00 	.word	0x40010c00
 800281c:	40011000 	.word	0x40011000
 8002820:	40011400 	.word	0x40011400
 8002824:	40011800 	.word	0x40011800
 8002828:	40011c00 	.word	0x40011c00
 800282c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002830:	4b15      	ldr	r3, [pc, #84]	@ (8002888 <HAL_GPIO_Init+0x324>)
 8002832:	685a      	ldr	r2, [r3, #4]
 8002834:	69bb      	ldr	r3, [r7, #24]
 8002836:	43db      	mvns	r3, r3
 8002838:	4913      	ldr	r1, [pc, #76]	@ (8002888 <HAL_GPIO_Init+0x324>)
 800283a:	4013      	ands	r3, r2
 800283c:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d006      	beq.n	8002858 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800284a:	4b0f      	ldr	r3, [pc, #60]	@ (8002888 <HAL_GPIO_Init+0x324>)
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	490e      	ldr	r1, [pc, #56]	@ (8002888 <HAL_GPIO_Init+0x324>)
 8002850:	69bb      	ldr	r3, [r7, #24]
 8002852:	4313      	orrs	r3, r2
 8002854:	600b      	str	r3, [r1, #0]
 8002856:	e006      	b.n	8002866 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002858:	4b0b      	ldr	r3, [pc, #44]	@ (8002888 <HAL_GPIO_Init+0x324>)
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	69bb      	ldr	r3, [r7, #24]
 800285e:	43db      	mvns	r3, r3
 8002860:	4909      	ldr	r1, [pc, #36]	@ (8002888 <HAL_GPIO_Init+0x324>)
 8002862:	4013      	ands	r3, r2
 8002864:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002868:	3301      	adds	r3, #1
 800286a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002872:	fa22 f303 	lsr.w	r3, r2, r3
 8002876:	2b00      	cmp	r3, #0
 8002878:	f47f ae7e 	bne.w	8002578 <HAL_GPIO_Init+0x14>
  }
}
 800287c:	bf00      	nop
 800287e:	bf00      	nop
 8002880:	372c      	adds	r7, #44	@ 0x2c
 8002882:	46bd      	mov	sp, r7
 8002884:	bc80      	pop	{r7}
 8002886:	4770      	bx	lr
 8002888:	40010400 	.word	0x40010400

0800288c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800288c:	b480      	push	{r7}
 800288e:	b085      	sub	sp, #20
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	460b      	mov	r3, r1
 8002896:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	689a      	ldr	r2, [r3, #8]
 800289c:	887b      	ldrh	r3, [r7, #2]
 800289e:	4013      	ands	r3, r2
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d002      	beq.n	80028aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80028a4:	2301      	movs	r3, #1
 80028a6:	73fb      	strb	r3, [r7, #15]
 80028a8:	e001      	b.n	80028ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80028aa:	2300      	movs	r3, #0
 80028ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80028ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3714      	adds	r7, #20
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bc80      	pop	{r7}
 80028b8:	4770      	bx	lr

080028ba <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028ba:	b480      	push	{r7}
 80028bc:	b083      	sub	sp, #12
 80028be:	af00      	add	r7, sp, #0
 80028c0:	6078      	str	r0, [r7, #4]
 80028c2:	460b      	mov	r3, r1
 80028c4:	807b      	strh	r3, [r7, #2]
 80028c6:	4613      	mov	r3, r2
 80028c8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80028ca:	787b      	ldrb	r3, [r7, #1]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d003      	beq.n	80028d8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028d0:	887a      	ldrh	r2, [r7, #2]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80028d6:	e003      	b.n	80028e0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80028d8:	887b      	ldrh	r3, [r7, #2]
 80028da:	041a      	lsls	r2, r3, #16
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	611a      	str	r2, [r3, #16]
}
 80028e0:	bf00      	nop
 80028e2:	370c      	adds	r7, #12
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bc80      	pop	{r7}
 80028e8:	4770      	bx	lr

080028ea <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80028ea:	b480      	push	{r7}
 80028ec:	b085      	sub	sp, #20
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	6078      	str	r0, [r7, #4]
 80028f2:	460b      	mov	r3, r1
 80028f4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80028fc:	887a      	ldrh	r2, [r7, #2]
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	4013      	ands	r3, r2
 8002902:	041a      	lsls	r2, r3, #16
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	43d9      	mvns	r1, r3
 8002908:	887b      	ldrh	r3, [r7, #2]
 800290a:	400b      	ands	r3, r1
 800290c:	431a      	orrs	r2, r3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	611a      	str	r2, [r3, #16]
}
 8002912:	bf00      	nop
 8002914:	3714      	adds	r7, #20
 8002916:	46bd      	mov	sp, r7
 8002918:	bc80      	pop	{r7}
 800291a:	4770      	bx	lr

0800291c <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b084      	sub	sp, #16
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d101      	bne.n	800292e <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e036      	b.n	800299c <HAL_IWDG_Init+0x80>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 8002936:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f245 5255 	movw	r2, #21845	@ 0x5555
 8002940:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	6852      	ldr	r2, [r2, #4]
 800294a:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	687a      	ldr	r2, [r7, #4]
 8002952:	6892      	ldr	r2, [r2, #8]
 8002954:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8002956:	f7ff fbab 	bl	80020b0 <HAL_GetTick>
 800295a:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800295c:	e011      	b.n	8002982 <HAL_IWDG_Init+0x66>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800295e:	f7ff fba7 	bl	80020b0 <HAL_GetTick>
 8002962:	4602      	mov	r2, r0
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	f241 323c 	movw	r2, #4924	@ 0x133c
 800296c:	4293      	cmp	r3, r2
 800296e:	d908      	bls.n	8002982 <HAL_IWDG_Init+0x66>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	f003 0303 	and.w	r3, r3, #3
 800297a:	2b00      	cmp	r3, #0
 800297c:	d001      	beq.n	8002982 <HAL_IWDG_Init+0x66>
      {
        return HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	e00c      	b.n	800299c <HAL_IWDG_Init+0x80>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	f003 0303 	and.w	r3, r3, #3
 800298c:	2b00      	cmp	r3, #0
 800298e:	d1e6      	bne.n	800295e <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8002998:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800299a:	2300      	movs	r3, #0
}
 800299c:	4618      	mov	r0, r3
 800299e:	3710      	adds	r7, #16
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}

080029a4 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 80029b4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80029b6:	2300      	movs	r3, #0
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	370c      	adds	r7, #12
 80029bc:	46bd      	mov	sp, r7
 80029be:	bc80      	pop	{r7}
 80029c0:	4770      	bx	lr
	...

080029c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b086      	sub	sp, #24
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d101      	bne.n	80029d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e272      	b.n	8002ebc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 0301 	and.w	r3, r3, #1
 80029de:	2b00      	cmp	r3, #0
 80029e0:	f000 8087 	beq.w	8002af2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80029e4:	4b92      	ldr	r3, [pc, #584]	@ (8002c30 <HAL_RCC_OscConfig+0x26c>)
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f003 030c 	and.w	r3, r3, #12
 80029ec:	2b04      	cmp	r3, #4
 80029ee:	d00c      	beq.n	8002a0a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80029f0:	4b8f      	ldr	r3, [pc, #572]	@ (8002c30 <HAL_RCC_OscConfig+0x26c>)
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f003 030c 	and.w	r3, r3, #12
 80029f8:	2b08      	cmp	r3, #8
 80029fa:	d112      	bne.n	8002a22 <HAL_RCC_OscConfig+0x5e>
 80029fc:	4b8c      	ldr	r3, [pc, #560]	@ (8002c30 <HAL_RCC_OscConfig+0x26c>)
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a08:	d10b      	bne.n	8002a22 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a0a:	4b89      	ldr	r3, [pc, #548]	@ (8002c30 <HAL_RCC_OscConfig+0x26c>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d06c      	beq.n	8002af0 <HAL_RCC_OscConfig+0x12c>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d168      	bne.n	8002af0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e24c      	b.n	8002ebc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a2a:	d106      	bne.n	8002a3a <HAL_RCC_OscConfig+0x76>
 8002a2c:	4b80      	ldr	r3, [pc, #512]	@ (8002c30 <HAL_RCC_OscConfig+0x26c>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a7f      	ldr	r2, [pc, #508]	@ (8002c30 <HAL_RCC_OscConfig+0x26c>)
 8002a32:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a36:	6013      	str	r3, [r2, #0]
 8002a38:	e02e      	b.n	8002a98 <HAL_RCC_OscConfig+0xd4>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d10c      	bne.n	8002a5c <HAL_RCC_OscConfig+0x98>
 8002a42:	4b7b      	ldr	r3, [pc, #492]	@ (8002c30 <HAL_RCC_OscConfig+0x26c>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a7a      	ldr	r2, [pc, #488]	@ (8002c30 <HAL_RCC_OscConfig+0x26c>)
 8002a48:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a4c:	6013      	str	r3, [r2, #0]
 8002a4e:	4b78      	ldr	r3, [pc, #480]	@ (8002c30 <HAL_RCC_OscConfig+0x26c>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a77      	ldr	r2, [pc, #476]	@ (8002c30 <HAL_RCC_OscConfig+0x26c>)
 8002a54:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a58:	6013      	str	r3, [r2, #0]
 8002a5a:	e01d      	b.n	8002a98 <HAL_RCC_OscConfig+0xd4>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a64:	d10c      	bne.n	8002a80 <HAL_RCC_OscConfig+0xbc>
 8002a66:	4b72      	ldr	r3, [pc, #456]	@ (8002c30 <HAL_RCC_OscConfig+0x26c>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a71      	ldr	r2, [pc, #452]	@ (8002c30 <HAL_RCC_OscConfig+0x26c>)
 8002a6c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a70:	6013      	str	r3, [r2, #0]
 8002a72:	4b6f      	ldr	r3, [pc, #444]	@ (8002c30 <HAL_RCC_OscConfig+0x26c>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a6e      	ldr	r2, [pc, #440]	@ (8002c30 <HAL_RCC_OscConfig+0x26c>)
 8002a78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a7c:	6013      	str	r3, [r2, #0]
 8002a7e:	e00b      	b.n	8002a98 <HAL_RCC_OscConfig+0xd4>
 8002a80:	4b6b      	ldr	r3, [pc, #428]	@ (8002c30 <HAL_RCC_OscConfig+0x26c>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a6a      	ldr	r2, [pc, #424]	@ (8002c30 <HAL_RCC_OscConfig+0x26c>)
 8002a86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a8a:	6013      	str	r3, [r2, #0]
 8002a8c:	4b68      	ldr	r3, [pc, #416]	@ (8002c30 <HAL_RCC_OscConfig+0x26c>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a67      	ldr	r2, [pc, #412]	@ (8002c30 <HAL_RCC_OscConfig+0x26c>)
 8002a92:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a96:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d013      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aa0:	f7ff fb06 	bl	80020b0 <HAL_GetTick>
 8002aa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aa6:	e008      	b.n	8002aba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002aa8:	f7ff fb02 	bl	80020b0 <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	2b64      	cmp	r3, #100	@ 0x64
 8002ab4:	d901      	bls.n	8002aba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e200      	b.n	8002ebc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aba:	4b5d      	ldr	r3, [pc, #372]	@ (8002c30 <HAL_RCC_OscConfig+0x26c>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d0f0      	beq.n	8002aa8 <HAL_RCC_OscConfig+0xe4>
 8002ac6:	e014      	b.n	8002af2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ac8:	f7ff faf2 	bl	80020b0 <HAL_GetTick>
 8002acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ace:	e008      	b.n	8002ae2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ad0:	f7ff faee 	bl	80020b0 <HAL_GetTick>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	2b64      	cmp	r3, #100	@ 0x64
 8002adc:	d901      	bls.n	8002ae2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	e1ec      	b.n	8002ebc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ae2:	4b53      	ldr	r3, [pc, #332]	@ (8002c30 <HAL_RCC_OscConfig+0x26c>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d1f0      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x10c>
 8002aee:	e000      	b.n	8002af2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002af0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0302 	and.w	r3, r3, #2
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d063      	beq.n	8002bc6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002afe:	4b4c      	ldr	r3, [pc, #304]	@ (8002c30 <HAL_RCC_OscConfig+0x26c>)
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	f003 030c 	and.w	r3, r3, #12
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d00b      	beq.n	8002b22 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002b0a:	4b49      	ldr	r3, [pc, #292]	@ (8002c30 <HAL_RCC_OscConfig+0x26c>)
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	f003 030c 	and.w	r3, r3, #12
 8002b12:	2b08      	cmp	r3, #8
 8002b14:	d11c      	bne.n	8002b50 <HAL_RCC_OscConfig+0x18c>
 8002b16:	4b46      	ldr	r3, [pc, #280]	@ (8002c30 <HAL_RCC_OscConfig+0x26c>)
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d116      	bne.n	8002b50 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b22:	4b43      	ldr	r3, [pc, #268]	@ (8002c30 <HAL_RCC_OscConfig+0x26c>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 0302 	and.w	r3, r3, #2
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d005      	beq.n	8002b3a <HAL_RCC_OscConfig+0x176>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	691b      	ldr	r3, [r3, #16]
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d001      	beq.n	8002b3a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e1c0      	b.n	8002ebc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b3a:	4b3d      	ldr	r3, [pc, #244]	@ (8002c30 <HAL_RCC_OscConfig+0x26c>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	695b      	ldr	r3, [r3, #20]
 8002b46:	00db      	lsls	r3, r3, #3
 8002b48:	4939      	ldr	r1, [pc, #228]	@ (8002c30 <HAL_RCC_OscConfig+0x26c>)
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b4e:	e03a      	b.n	8002bc6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	691b      	ldr	r3, [r3, #16]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d020      	beq.n	8002b9a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b58:	4b36      	ldr	r3, [pc, #216]	@ (8002c34 <HAL_RCC_OscConfig+0x270>)
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b5e:	f7ff faa7 	bl	80020b0 <HAL_GetTick>
 8002b62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b64:	e008      	b.n	8002b78 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b66:	f7ff faa3 	bl	80020b0 <HAL_GetTick>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	1ad3      	subs	r3, r2, r3
 8002b70:	2b02      	cmp	r3, #2
 8002b72:	d901      	bls.n	8002b78 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002b74:	2303      	movs	r3, #3
 8002b76:	e1a1      	b.n	8002ebc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b78:	4b2d      	ldr	r3, [pc, #180]	@ (8002c30 <HAL_RCC_OscConfig+0x26c>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0302 	and.w	r3, r3, #2
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d0f0      	beq.n	8002b66 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b84:	4b2a      	ldr	r3, [pc, #168]	@ (8002c30 <HAL_RCC_OscConfig+0x26c>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	695b      	ldr	r3, [r3, #20]
 8002b90:	00db      	lsls	r3, r3, #3
 8002b92:	4927      	ldr	r1, [pc, #156]	@ (8002c30 <HAL_RCC_OscConfig+0x26c>)
 8002b94:	4313      	orrs	r3, r2
 8002b96:	600b      	str	r3, [r1, #0]
 8002b98:	e015      	b.n	8002bc6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b9a:	4b26      	ldr	r3, [pc, #152]	@ (8002c34 <HAL_RCC_OscConfig+0x270>)
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ba0:	f7ff fa86 	bl	80020b0 <HAL_GetTick>
 8002ba4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ba6:	e008      	b.n	8002bba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ba8:	f7ff fa82 	bl	80020b0 <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d901      	bls.n	8002bba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e180      	b.n	8002ebc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bba:	4b1d      	ldr	r3, [pc, #116]	@ (8002c30 <HAL_RCC_OscConfig+0x26c>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0302 	and.w	r3, r3, #2
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d1f0      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0308 	and.w	r3, r3, #8
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d03a      	beq.n	8002c48 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	699b      	ldr	r3, [r3, #24]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d019      	beq.n	8002c0e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bda:	4b17      	ldr	r3, [pc, #92]	@ (8002c38 <HAL_RCC_OscConfig+0x274>)
 8002bdc:	2201      	movs	r2, #1
 8002bde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002be0:	f7ff fa66 	bl	80020b0 <HAL_GetTick>
 8002be4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002be6:	e008      	b.n	8002bfa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002be8:	f7ff fa62 	bl	80020b0 <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d901      	bls.n	8002bfa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e160      	b.n	8002ebc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bfa:	4b0d      	ldr	r3, [pc, #52]	@ (8002c30 <HAL_RCC_OscConfig+0x26c>)
 8002bfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bfe:	f003 0302 	and.w	r3, r3, #2
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d0f0      	beq.n	8002be8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002c06:	2001      	movs	r0, #1
 8002c08:	f000 face 	bl	80031a8 <RCC_Delay>
 8002c0c:	e01c      	b.n	8002c48 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c0e:	4b0a      	ldr	r3, [pc, #40]	@ (8002c38 <HAL_RCC_OscConfig+0x274>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c14:	f7ff fa4c 	bl	80020b0 <HAL_GetTick>
 8002c18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c1a:	e00f      	b.n	8002c3c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c1c:	f7ff fa48 	bl	80020b0 <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d908      	bls.n	8002c3c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e146      	b.n	8002ebc <HAL_RCC_OscConfig+0x4f8>
 8002c2e:	bf00      	nop
 8002c30:	40021000 	.word	0x40021000
 8002c34:	42420000 	.word	0x42420000
 8002c38:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c3c:	4b92      	ldr	r3, [pc, #584]	@ (8002e88 <HAL_RCC_OscConfig+0x4c4>)
 8002c3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c40:	f003 0302 	and.w	r3, r3, #2
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d1e9      	bne.n	8002c1c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 0304 	and.w	r3, r3, #4
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	f000 80a6 	beq.w	8002da2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c56:	2300      	movs	r3, #0
 8002c58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c5a:	4b8b      	ldr	r3, [pc, #556]	@ (8002e88 <HAL_RCC_OscConfig+0x4c4>)
 8002c5c:	69db      	ldr	r3, [r3, #28]
 8002c5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d10d      	bne.n	8002c82 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c66:	4b88      	ldr	r3, [pc, #544]	@ (8002e88 <HAL_RCC_OscConfig+0x4c4>)
 8002c68:	69db      	ldr	r3, [r3, #28]
 8002c6a:	4a87      	ldr	r2, [pc, #540]	@ (8002e88 <HAL_RCC_OscConfig+0x4c4>)
 8002c6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c70:	61d3      	str	r3, [r2, #28]
 8002c72:	4b85      	ldr	r3, [pc, #532]	@ (8002e88 <HAL_RCC_OscConfig+0x4c4>)
 8002c74:	69db      	ldr	r3, [r3, #28]
 8002c76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c7a:	60bb      	str	r3, [r7, #8]
 8002c7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c82:	4b82      	ldr	r3, [pc, #520]	@ (8002e8c <HAL_RCC_OscConfig+0x4c8>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d118      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c8e:	4b7f      	ldr	r3, [pc, #508]	@ (8002e8c <HAL_RCC_OscConfig+0x4c8>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a7e      	ldr	r2, [pc, #504]	@ (8002e8c <HAL_RCC_OscConfig+0x4c8>)
 8002c94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c9a:	f7ff fa09 	bl	80020b0 <HAL_GetTick>
 8002c9e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ca0:	e008      	b.n	8002cb4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ca2:	f7ff fa05 	bl	80020b0 <HAL_GetTick>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	1ad3      	subs	r3, r2, r3
 8002cac:	2b64      	cmp	r3, #100	@ 0x64
 8002cae:	d901      	bls.n	8002cb4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002cb0:	2303      	movs	r3, #3
 8002cb2:	e103      	b.n	8002ebc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cb4:	4b75      	ldr	r3, [pc, #468]	@ (8002e8c <HAL_RCC_OscConfig+0x4c8>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d0f0      	beq.n	8002ca2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d106      	bne.n	8002cd6 <HAL_RCC_OscConfig+0x312>
 8002cc8:	4b6f      	ldr	r3, [pc, #444]	@ (8002e88 <HAL_RCC_OscConfig+0x4c4>)
 8002cca:	6a1b      	ldr	r3, [r3, #32]
 8002ccc:	4a6e      	ldr	r2, [pc, #440]	@ (8002e88 <HAL_RCC_OscConfig+0x4c4>)
 8002cce:	f043 0301 	orr.w	r3, r3, #1
 8002cd2:	6213      	str	r3, [r2, #32]
 8002cd4:	e02d      	b.n	8002d32 <HAL_RCC_OscConfig+0x36e>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	68db      	ldr	r3, [r3, #12]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d10c      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x334>
 8002cde:	4b6a      	ldr	r3, [pc, #424]	@ (8002e88 <HAL_RCC_OscConfig+0x4c4>)
 8002ce0:	6a1b      	ldr	r3, [r3, #32]
 8002ce2:	4a69      	ldr	r2, [pc, #420]	@ (8002e88 <HAL_RCC_OscConfig+0x4c4>)
 8002ce4:	f023 0301 	bic.w	r3, r3, #1
 8002ce8:	6213      	str	r3, [r2, #32]
 8002cea:	4b67      	ldr	r3, [pc, #412]	@ (8002e88 <HAL_RCC_OscConfig+0x4c4>)
 8002cec:	6a1b      	ldr	r3, [r3, #32]
 8002cee:	4a66      	ldr	r2, [pc, #408]	@ (8002e88 <HAL_RCC_OscConfig+0x4c4>)
 8002cf0:	f023 0304 	bic.w	r3, r3, #4
 8002cf4:	6213      	str	r3, [r2, #32]
 8002cf6:	e01c      	b.n	8002d32 <HAL_RCC_OscConfig+0x36e>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	2b05      	cmp	r3, #5
 8002cfe:	d10c      	bne.n	8002d1a <HAL_RCC_OscConfig+0x356>
 8002d00:	4b61      	ldr	r3, [pc, #388]	@ (8002e88 <HAL_RCC_OscConfig+0x4c4>)
 8002d02:	6a1b      	ldr	r3, [r3, #32]
 8002d04:	4a60      	ldr	r2, [pc, #384]	@ (8002e88 <HAL_RCC_OscConfig+0x4c4>)
 8002d06:	f043 0304 	orr.w	r3, r3, #4
 8002d0a:	6213      	str	r3, [r2, #32]
 8002d0c:	4b5e      	ldr	r3, [pc, #376]	@ (8002e88 <HAL_RCC_OscConfig+0x4c4>)
 8002d0e:	6a1b      	ldr	r3, [r3, #32]
 8002d10:	4a5d      	ldr	r2, [pc, #372]	@ (8002e88 <HAL_RCC_OscConfig+0x4c4>)
 8002d12:	f043 0301 	orr.w	r3, r3, #1
 8002d16:	6213      	str	r3, [r2, #32]
 8002d18:	e00b      	b.n	8002d32 <HAL_RCC_OscConfig+0x36e>
 8002d1a:	4b5b      	ldr	r3, [pc, #364]	@ (8002e88 <HAL_RCC_OscConfig+0x4c4>)
 8002d1c:	6a1b      	ldr	r3, [r3, #32]
 8002d1e:	4a5a      	ldr	r2, [pc, #360]	@ (8002e88 <HAL_RCC_OscConfig+0x4c4>)
 8002d20:	f023 0301 	bic.w	r3, r3, #1
 8002d24:	6213      	str	r3, [r2, #32]
 8002d26:	4b58      	ldr	r3, [pc, #352]	@ (8002e88 <HAL_RCC_OscConfig+0x4c4>)
 8002d28:	6a1b      	ldr	r3, [r3, #32]
 8002d2a:	4a57      	ldr	r2, [pc, #348]	@ (8002e88 <HAL_RCC_OscConfig+0x4c4>)
 8002d2c:	f023 0304 	bic.w	r3, r3, #4
 8002d30:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	68db      	ldr	r3, [r3, #12]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d015      	beq.n	8002d66 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d3a:	f7ff f9b9 	bl	80020b0 <HAL_GetTick>
 8002d3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d40:	e00a      	b.n	8002d58 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d42:	f7ff f9b5 	bl	80020b0 <HAL_GetTick>
 8002d46:	4602      	mov	r2, r0
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	1ad3      	subs	r3, r2, r3
 8002d4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d901      	bls.n	8002d58 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002d54:	2303      	movs	r3, #3
 8002d56:	e0b1      	b.n	8002ebc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d58:	4b4b      	ldr	r3, [pc, #300]	@ (8002e88 <HAL_RCC_OscConfig+0x4c4>)
 8002d5a:	6a1b      	ldr	r3, [r3, #32]
 8002d5c:	f003 0302 	and.w	r3, r3, #2
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d0ee      	beq.n	8002d42 <HAL_RCC_OscConfig+0x37e>
 8002d64:	e014      	b.n	8002d90 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d66:	f7ff f9a3 	bl	80020b0 <HAL_GetTick>
 8002d6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d6c:	e00a      	b.n	8002d84 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d6e:	f7ff f99f 	bl	80020b0 <HAL_GetTick>
 8002d72:	4602      	mov	r2, r0
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	1ad3      	subs	r3, r2, r3
 8002d78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d901      	bls.n	8002d84 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002d80:	2303      	movs	r3, #3
 8002d82:	e09b      	b.n	8002ebc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d84:	4b40      	ldr	r3, [pc, #256]	@ (8002e88 <HAL_RCC_OscConfig+0x4c4>)
 8002d86:	6a1b      	ldr	r3, [r3, #32]
 8002d88:	f003 0302 	and.w	r3, r3, #2
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d1ee      	bne.n	8002d6e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002d90:	7dfb      	ldrb	r3, [r7, #23]
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d105      	bne.n	8002da2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d96:	4b3c      	ldr	r3, [pc, #240]	@ (8002e88 <HAL_RCC_OscConfig+0x4c4>)
 8002d98:	69db      	ldr	r3, [r3, #28]
 8002d9a:	4a3b      	ldr	r2, [pc, #236]	@ (8002e88 <HAL_RCC_OscConfig+0x4c4>)
 8002d9c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002da0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	69db      	ldr	r3, [r3, #28]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	f000 8087 	beq.w	8002eba <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002dac:	4b36      	ldr	r3, [pc, #216]	@ (8002e88 <HAL_RCC_OscConfig+0x4c4>)
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	f003 030c 	and.w	r3, r3, #12
 8002db4:	2b08      	cmp	r3, #8
 8002db6:	d061      	beq.n	8002e7c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	69db      	ldr	r3, [r3, #28]
 8002dbc:	2b02      	cmp	r3, #2
 8002dbe:	d146      	bne.n	8002e4e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dc0:	4b33      	ldr	r3, [pc, #204]	@ (8002e90 <HAL_RCC_OscConfig+0x4cc>)
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dc6:	f7ff f973 	bl	80020b0 <HAL_GetTick>
 8002dca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dcc:	e008      	b.n	8002de0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dce:	f7ff f96f 	bl	80020b0 <HAL_GetTick>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	d901      	bls.n	8002de0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002ddc:	2303      	movs	r3, #3
 8002dde:	e06d      	b.n	8002ebc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002de0:	4b29      	ldr	r3, [pc, #164]	@ (8002e88 <HAL_RCC_OscConfig+0x4c4>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d1f0      	bne.n	8002dce <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6a1b      	ldr	r3, [r3, #32]
 8002df0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002df4:	d108      	bne.n	8002e08 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002df6:	4b24      	ldr	r3, [pc, #144]	@ (8002e88 <HAL_RCC_OscConfig+0x4c4>)
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	4921      	ldr	r1, [pc, #132]	@ (8002e88 <HAL_RCC_OscConfig+0x4c4>)
 8002e04:	4313      	orrs	r3, r2
 8002e06:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e08:	4b1f      	ldr	r3, [pc, #124]	@ (8002e88 <HAL_RCC_OscConfig+0x4c4>)
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6a19      	ldr	r1, [r3, #32]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e18:	430b      	orrs	r3, r1
 8002e1a:	491b      	ldr	r1, [pc, #108]	@ (8002e88 <HAL_RCC_OscConfig+0x4c4>)
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e20:	4b1b      	ldr	r3, [pc, #108]	@ (8002e90 <HAL_RCC_OscConfig+0x4cc>)
 8002e22:	2201      	movs	r2, #1
 8002e24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e26:	f7ff f943 	bl	80020b0 <HAL_GetTick>
 8002e2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e2c:	e008      	b.n	8002e40 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e2e:	f7ff f93f 	bl	80020b0 <HAL_GetTick>
 8002e32:	4602      	mov	r2, r0
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	1ad3      	subs	r3, r2, r3
 8002e38:	2b02      	cmp	r3, #2
 8002e3a:	d901      	bls.n	8002e40 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002e3c:	2303      	movs	r3, #3
 8002e3e:	e03d      	b.n	8002ebc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e40:	4b11      	ldr	r3, [pc, #68]	@ (8002e88 <HAL_RCC_OscConfig+0x4c4>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d0f0      	beq.n	8002e2e <HAL_RCC_OscConfig+0x46a>
 8002e4c:	e035      	b.n	8002eba <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e4e:	4b10      	ldr	r3, [pc, #64]	@ (8002e90 <HAL_RCC_OscConfig+0x4cc>)
 8002e50:	2200      	movs	r2, #0
 8002e52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e54:	f7ff f92c 	bl	80020b0 <HAL_GetTick>
 8002e58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e5a:	e008      	b.n	8002e6e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e5c:	f7ff f928 	bl	80020b0 <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d901      	bls.n	8002e6e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	e026      	b.n	8002ebc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e6e:	4b06      	ldr	r3, [pc, #24]	@ (8002e88 <HAL_RCC_OscConfig+0x4c4>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d1f0      	bne.n	8002e5c <HAL_RCC_OscConfig+0x498>
 8002e7a:	e01e      	b.n	8002eba <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	69db      	ldr	r3, [r3, #28]
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d107      	bne.n	8002e94 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e019      	b.n	8002ebc <HAL_RCC_OscConfig+0x4f8>
 8002e88:	40021000 	.word	0x40021000
 8002e8c:	40007000 	.word	0x40007000
 8002e90:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e94:	4b0b      	ldr	r3, [pc, #44]	@ (8002ec4 <HAL_RCC_OscConfig+0x500>)
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6a1b      	ldr	r3, [r3, #32]
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d106      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d001      	beq.n	8002eba <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e000      	b.n	8002ebc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002eba:	2300      	movs	r3, #0
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3718      	adds	r7, #24
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	40021000 	.word	0x40021000

08002ec8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b084      	sub	sp, #16
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d101      	bne.n	8002edc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e0d0      	b.n	800307e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002edc:	4b6a      	ldr	r3, [pc, #424]	@ (8003088 <HAL_RCC_ClockConfig+0x1c0>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 0307 	and.w	r3, r3, #7
 8002ee4:	683a      	ldr	r2, [r7, #0]
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d910      	bls.n	8002f0c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eea:	4b67      	ldr	r3, [pc, #412]	@ (8003088 <HAL_RCC_ClockConfig+0x1c0>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f023 0207 	bic.w	r2, r3, #7
 8002ef2:	4965      	ldr	r1, [pc, #404]	@ (8003088 <HAL_RCC_ClockConfig+0x1c0>)
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002efa:	4b63      	ldr	r3, [pc, #396]	@ (8003088 <HAL_RCC_ClockConfig+0x1c0>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 0307 	and.w	r3, r3, #7
 8002f02:	683a      	ldr	r2, [r7, #0]
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d001      	beq.n	8002f0c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e0b8      	b.n	800307e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 0302 	and.w	r3, r3, #2
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d020      	beq.n	8002f5a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0304 	and.w	r3, r3, #4
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d005      	beq.n	8002f30 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f24:	4b59      	ldr	r3, [pc, #356]	@ (800308c <HAL_RCC_ClockConfig+0x1c4>)
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	4a58      	ldr	r2, [pc, #352]	@ (800308c <HAL_RCC_ClockConfig+0x1c4>)
 8002f2a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002f2e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0308 	and.w	r3, r3, #8
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d005      	beq.n	8002f48 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f3c:	4b53      	ldr	r3, [pc, #332]	@ (800308c <HAL_RCC_ClockConfig+0x1c4>)
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	4a52      	ldr	r2, [pc, #328]	@ (800308c <HAL_RCC_ClockConfig+0x1c4>)
 8002f42:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002f46:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f48:	4b50      	ldr	r3, [pc, #320]	@ (800308c <HAL_RCC_ClockConfig+0x1c4>)
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	494d      	ldr	r1, [pc, #308]	@ (800308c <HAL_RCC_ClockConfig+0x1c4>)
 8002f56:	4313      	orrs	r3, r2
 8002f58:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0301 	and.w	r3, r3, #1
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d040      	beq.n	8002fe8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d107      	bne.n	8002f7e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f6e:	4b47      	ldr	r3, [pc, #284]	@ (800308c <HAL_RCC_ClockConfig+0x1c4>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d115      	bne.n	8002fa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e07f      	b.n	800307e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d107      	bne.n	8002f96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f86:	4b41      	ldr	r3, [pc, #260]	@ (800308c <HAL_RCC_ClockConfig+0x1c4>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d109      	bne.n	8002fa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e073      	b.n	800307e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f96:	4b3d      	ldr	r3, [pc, #244]	@ (800308c <HAL_RCC_ClockConfig+0x1c4>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0302 	and.w	r3, r3, #2
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d101      	bne.n	8002fa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e06b      	b.n	800307e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fa6:	4b39      	ldr	r3, [pc, #228]	@ (800308c <HAL_RCC_ClockConfig+0x1c4>)
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	f023 0203 	bic.w	r2, r3, #3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	4936      	ldr	r1, [pc, #216]	@ (800308c <HAL_RCC_ClockConfig+0x1c4>)
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fb8:	f7ff f87a 	bl	80020b0 <HAL_GetTick>
 8002fbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fbe:	e00a      	b.n	8002fd6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fc0:	f7ff f876 	bl	80020b0 <HAL_GetTick>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d901      	bls.n	8002fd6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	e053      	b.n	800307e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fd6:	4b2d      	ldr	r3, [pc, #180]	@ (800308c <HAL_RCC_ClockConfig+0x1c4>)
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	f003 020c 	and.w	r2, r3, #12
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d1eb      	bne.n	8002fc0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002fe8:	4b27      	ldr	r3, [pc, #156]	@ (8003088 <HAL_RCC_ClockConfig+0x1c0>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 0307 	and.w	r3, r3, #7
 8002ff0:	683a      	ldr	r2, [r7, #0]
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d210      	bcs.n	8003018 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ff6:	4b24      	ldr	r3, [pc, #144]	@ (8003088 <HAL_RCC_ClockConfig+0x1c0>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f023 0207 	bic.w	r2, r3, #7
 8002ffe:	4922      	ldr	r1, [pc, #136]	@ (8003088 <HAL_RCC_ClockConfig+0x1c0>)
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	4313      	orrs	r3, r2
 8003004:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003006:	4b20      	ldr	r3, [pc, #128]	@ (8003088 <HAL_RCC_ClockConfig+0x1c0>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0307 	and.w	r3, r3, #7
 800300e:	683a      	ldr	r2, [r7, #0]
 8003010:	429a      	cmp	r2, r3
 8003012:	d001      	beq.n	8003018 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	e032      	b.n	800307e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 0304 	and.w	r3, r3, #4
 8003020:	2b00      	cmp	r3, #0
 8003022:	d008      	beq.n	8003036 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003024:	4b19      	ldr	r3, [pc, #100]	@ (800308c <HAL_RCC_ClockConfig+0x1c4>)
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	4916      	ldr	r1, [pc, #88]	@ (800308c <HAL_RCC_ClockConfig+0x1c4>)
 8003032:	4313      	orrs	r3, r2
 8003034:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 0308 	and.w	r3, r3, #8
 800303e:	2b00      	cmp	r3, #0
 8003040:	d009      	beq.n	8003056 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003042:	4b12      	ldr	r3, [pc, #72]	@ (800308c <HAL_RCC_ClockConfig+0x1c4>)
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	691b      	ldr	r3, [r3, #16]
 800304e:	00db      	lsls	r3, r3, #3
 8003050:	490e      	ldr	r1, [pc, #56]	@ (800308c <HAL_RCC_ClockConfig+0x1c4>)
 8003052:	4313      	orrs	r3, r2
 8003054:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003056:	f000 f821 	bl	800309c <HAL_RCC_GetSysClockFreq>
 800305a:	4602      	mov	r2, r0
 800305c:	4b0b      	ldr	r3, [pc, #44]	@ (800308c <HAL_RCC_ClockConfig+0x1c4>)
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	091b      	lsrs	r3, r3, #4
 8003062:	f003 030f 	and.w	r3, r3, #15
 8003066:	490a      	ldr	r1, [pc, #40]	@ (8003090 <HAL_RCC_ClockConfig+0x1c8>)
 8003068:	5ccb      	ldrb	r3, [r1, r3]
 800306a:	fa22 f303 	lsr.w	r3, r2, r3
 800306e:	4a09      	ldr	r2, [pc, #36]	@ (8003094 <HAL_RCC_ClockConfig+0x1cc>)
 8003070:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003072:	4b09      	ldr	r3, [pc, #36]	@ (8003098 <HAL_RCC_ClockConfig+0x1d0>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4618      	mov	r0, r3
 8003078:	f7fe ffd8 	bl	800202c <HAL_InitTick>

  return HAL_OK;
 800307c:	2300      	movs	r3, #0
}
 800307e:	4618      	mov	r0, r3
 8003080:	3710      	adds	r7, #16
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	40022000 	.word	0x40022000
 800308c:	40021000 	.word	0x40021000
 8003090:	080044b8 	.word	0x080044b8
 8003094:	20000000 	.word	0x20000000
 8003098:	20000018 	.word	0x20000018

0800309c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800309c:	b480      	push	{r7}
 800309e:	b087      	sub	sp, #28
 80030a0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80030a2:	2300      	movs	r3, #0
 80030a4:	60fb      	str	r3, [r7, #12]
 80030a6:	2300      	movs	r3, #0
 80030a8:	60bb      	str	r3, [r7, #8]
 80030aa:	2300      	movs	r3, #0
 80030ac:	617b      	str	r3, [r7, #20]
 80030ae:	2300      	movs	r3, #0
 80030b0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80030b2:	2300      	movs	r3, #0
 80030b4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80030b6:	4b1e      	ldr	r3, [pc, #120]	@ (8003130 <HAL_RCC_GetSysClockFreq+0x94>)
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f003 030c 	and.w	r3, r3, #12
 80030c2:	2b04      	cmp	r3, #4
 80030c4:	d002      	beq.n	80030cc <HAL_RCC_GetSysClockFreq+0x30>
 80030c6:	2b08      	cmp	r3, #8
 80030c8:	d003      	beq.n	80030d2 <HAL_RCC_GetSysClockFreq+0x36>
 80030ca:	e027      	b.n	800311c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80030cc:	4b19      	ldr	r3, [pc, #100]	@ (8003134 <HAL_RCC_GetSysClockFreq+0x98>)
 80030ce:	613b      	str	r3, [r7, #16]
      break;
 80030d0:	e027      	b.n	8003122 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	0c9b      	lsrs	r3, r3, #18
 80030d6:	f003 030f 	and.w	r3, r3, #15
 80030da:	4a17      	ldr	r2, [pc, #92]	@ (8003138 <HAL_RCC_GetSysClockFreq+0x9c>)
 80030dc:	5cd3      	ldrb	r3, [r2, r3]
 80030de:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d010      	beq.n	800310c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80030ea:	4b11      	ldr	r3, [pc, #68]	@ (8003130 <HAL_RCC_GetSysClockFreq+0x94>)
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	0c5b      	lsrs	r3, r3, #17
 80030f0:	f003 0301 	and.w	r3, r3, #1
 80030f4:	4a11      	ldr	r2, [pc, #68]	@ (800313c <HAL_RCC_GetSysClockFreq+0xa0>)
 80030f6:	5cd3      	ldrb	r3, [r2, r3]
 80030f8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4a0d      	ldr	r2, [pc, #52]	@ (8003134 <HAL_RCC_GetSysClockFreq+0x98>)
 80030fe:	fb03 f202 	mul.w	r2, r3, r2
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	fbb2 f3f3 	udiv	r3, r2, r3
 8003108:	617b      	str	r3, [r7, #20]
 800310a:	e004      	b.n	8003116 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	4a0c      	ldr	r2, [pc, #48]	@ (8003140 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003110:	fb02 f303 	mul.w	r3, r2, r3
 8003114:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	613b      	str	r3, [r7, #16]
      break;
 800311a:	e002      	b.n	8003122 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800311c:	4b05      	ldr	r3, [pc, #20]	@ (8003134 <HAL_RCC_GetSysClockFreq+0x98>)
 800311e:	613b      	str	r3, [r7, #16]
      break;
 8003120:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003122:	693b      	ldr	r3, [r7, #16]
}
 8003124:	4618      	mov	r0, r3
 8003126:	371c      	adds	r7, #28
 8003128:	46bd      	mov	sp, r7
 800312a:	bc80      	pop	{r7}
 800312c:	4770      	bx	lr
 800312e:	bf00      	nop
 8003130:	40021000 	.word	0x40021000
 8003134:	007a1200 	.word	0x007a1200
 8003138:	080048cc 	.word	0x080048cc
 800313c:	080048dc 	.word	0x080048dc
 8003140:	003d0900 	.word	0x003d0900

08003144 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003144:	b480      	push	{r7}
 8003146:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003148:	4b02      	ldr	r3, [pc, #8]	@ (8003154 <HAL_RCC_GetHCLKFreq+0x10>)
 800314a:	681b      	ldr	r3, [r3, #0]
}
 800314c:	4618      	mov	r0, r3
 800314e:	46bd      	mov	sp, r7
 8003150:	bc80      	pop	{r7}
 8003152:	4770      	bx	lr
 8003154:	20000000 	.word	0x20000000

08003158 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800315c:	f7ff fff2 	bl	8003144 <HAL_RCC_GetHCLKFreq>
 8003160:	4602      	mov	r2, r0
 8003162:	4b05      	ldr	r3, [pc, #20]	@ (8003178 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	0a1b      	lsrs	r3, r3, #8
 8003168:	f003 0307 	and.w	r3, r3, #7
 800316c:	4903      	ldr	r1, [pc, #12]	@ (800317c <HAL_RCC_GetPCLK1Freq+0x24>)
 800316e:	5ccb      	ldrb	r3, [r1, r3]
 8003170:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003174:	4618      	mov	r0, r3
 8003176:	bd80      	pop	{r7, pc}
 8003178:	40021000 	.word	0x40021000
 800317c:	080044c8 	.word	0x080044c8

08003180 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003184:	f7ff ffde 	bl	8003144 <HAL_RCC_GetHCLKFreq>
 8003188:	4602      	mov	r2, r0
 800318a:	4b05      	ldr	r3, [pc, #20]	@ (80031a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	0adb      	lsrs	r3, r3, #11
 8003190:	f003 0307 	and.w	r3, r3, #7
 8003194:	4903      	ldr	r1, [pc, #12]	@ (80031a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003196:	5ccb      	ldrb	r3, [r1, r3]
 8003198:	fa22 f303 	lsr.w	r3, r2, r3
}
 800319c:	4618      	mov	r0, r3
 800319e:	bd80      	pop	{r7, pc}
 80031a0:	40021000 	.word	0x40021000
 80031a4:	080044c8 	.word	0x080044c8

080031a8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b085      	sub	sp, #20
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80031b0:	4b0a      	ldr	r3, [pc, #40]	@ (80031dc <RCC_Delay+0x34>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a0a      	ldr	r2, [pc, #40]	@ (80031e0 <RCC_Delay+0x38>)
 80031b6:	fba2 2303 	umull	r2, r3, r2, r3
 80031ba:	0a5b      	lsrs	r3, r3, #9
 80031bc:	687a      	ldr	r2, [r7, #4]
 80031be:	fb02 f303 	mul.w	r3, r2, r3
 80031c2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80031c4:	bf00      	nop
  }
  while (Delay --);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	1e5a      	subs	r2, r3, #1
 80031ca:	60fa      	str	r2, [r7, #12]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d1f9      	bne.n	80031c4 <RCC_Delay+0x1c>
}
 80031d0:	bf00      	nop
 80031d2:	bf00      	nop
 80031d4:	3714      	adds	r7, #20
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bc80      	pop	{r7}
 80031da:	4770      	bx	lr
 80031dc:	20000000 	.word	0x20000000
 80031e0:	10624dd3 	.word	0x10624dd3

080031e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b082      	sub	sp, #8
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d101      	bne.n	80031f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e041      	b.n	800327a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d106      	bne.n	8003210 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2200      	movs	r2, #0
 8003206:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f7fd ff2a 	bl	8001064 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2202      	movs	r2, #2
 8003214:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	3304      	adds	r3, #4
 8003220:	4619      	mov	r1, r3
 8003222:	4610      	mov	r0, r2
 8003224:	f000 f9a2 	bl	800356c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2201      	movs	r2, #1
 800322c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2201      	movs	r2, #1
 8003234:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2201      	movs	r2, #1
 800323c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2201      	movs	r2, #1
 8003244:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2201      	movs	r2, #1
 800324c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2201      	movs	r2, #1
 8003254:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2201      	movs	r2, #1
 8003264:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2201      	movs	r2, #1
 800326c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2201      	movs	r2, #1
 8003274:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003278:	2300      	movs	r3, #0
}
 800327a:	4618      	mov	r0, r3
 800327c:	3708      	adds	r7, #8
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}
	...

08003284 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003284:	b480      	push	{r7}
 8003286:	b085      	sub	sp, #20
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003292:	b2db      	uxtb	r3, r3
 8003294:	2b01      	cmp	r3, #1
 8003296:	d001      	beq.n	800329c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	e044      	b.n	8003326 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2202      	movs	r2, #2
 80032a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	68da      	ldr	r2, [r3, #12]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f042 0201 	orr.w	r2, r2, #1
 80032b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a1d      	ldr	r2, [pc, #116]	@ (8003330 <HAL_TIM_Base_Start_IT+0xac>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d018      	beq.n	80032f0 <HAL_TIM_Base_Start_IT+0x6c>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a1c      	ldr	r2, [pc, #112]	@ (8003334 <HAL_TIM_Base_Start_IT+0xb0>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d013      	beq.n	80032f0 <HAL_TIM_Base_Start_IT+0x6c>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032d0:	d00e      	beq.n	80032f0 <HAL_TIM_Base_Start_IT+0x6c>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a18      	ldr	r2, [pc, #96]	@ (8003338 <HAL_TIM_Base_Start_IT+0xb4>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d009      	beq.n	80032f0 <HAL_TIM_Base_Start_IT+0x6c>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a16      	ldr	r2, [pc, #88]	@ (800333c <HAL_TIM_Base_Start_IT+0xb8>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d004      	beq.n	80032f0 <HAL_TIM_Base_Start_IT+0x6c>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a15      	ldr	r2, [pc, #84]	@ (8003340 <HAL_TIM_Base_Start_IT+0xbc>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d111      	bne.n	8003314 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	f003 0307 	and.w	r3, r3, #7
 80032fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2b06      	cmp	r3, #6
 8003300:	d010      	beq.n	8003324 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f042 0201 	orr.w	r2, r2, #1
 8003310:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003312:	e007      	b.n	8003324 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f042 0201 	orr.w	r2, r2, #1
 8003322:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003324:	2300      	movs	r3, #0
}
 8003326:	4618      	mov	r0, r3
 8003328:	3714      	adds	r7, #20
 800332a:	46bd      	mov	sp, r7
 800332c:	bc80      	pop	{r7}
 800332e:	4770      	bx	lr
 8003330:	40012c00 	.word	0x40012c00
 8003334:	40013400 	.word	0x40013400
 8003338:	40000400 	.word	0x40000400
 800333c:	40000800 	.word	0x40000800
 8003340:	40000c00 	.word	0x40000c00

08003344 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	68db      	ldr	r3, [r3, #12]
 8003352:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	691b      	ldr	r3, [r3, #16]
 800335a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	f003 0302 	and.w	r3, r3, #2
 8003362:	2b00      	cmp	r3, #0
 8003364:	d020      	beq.n	80033a8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	f003 0302 	and.w	r3, r3, #2
 800336c:	2b00      	cmp	r3, #0
 800336e:	d01b      	beq.n	80033a8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f06f 0202 	mvn.w	r2, #2
 8003378:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2201      	movs	r2, #1
 800337e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	699b      	ldr	r3, [r3, #24]
 8003386:	f003 0303 	and.w	r3, r3, #3
 800338a:	2b00      	cmp	r3, #0
 800338c:	d003      	beq.n	8003396 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f000 f8d1 	bl	8003536 <HAL_TIM_IC_CaptureCallback>
 8003394:	e005      	b.n	80033a2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f000 f8c4 	bl	8003524 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	f000 f8d3 	bl	8003548 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2200      	movs	r2, #0
 80033a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	f003 0304 	and.w	r3, r3, #4
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d020      	beq.n	80033f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	f003 0304 	and.w	r3, r3, #4
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d01b      	beq.n	80033f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f06f 0204 	mvn.w	r2, #4
 80033c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2202      	movs	r2, #2
 80033ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	699b      	ldr	r3, [r3, #24]
 80033d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d003      	beq.n	80033e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f000 f8ab 	bl	8003536 <HAL_TIM_IC_CaptureCallback>
 80033e0:	e005      	b.n	80033ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f000 f89e 	bl	8003524 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	f000 f8ad 	bl	8003548 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2200      	movs	r2, #0
 80033f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	f003 0308 	and.w	r3, r3, #8
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d020      	beq.n	8003440 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	f003 0308 	and.w	r3, r3, #8
 8003404:	2b00      	cmp	r3, #0
 8003406:	d01b      	beq.n	8003440 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f06f 0208 	mvn.w	r2, #8
 8003410:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2204      	movs	r2, #4
 8003416:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	69db      	ldr	r3, [r3, #28]
 800341e:	f003 0303 	and.w	r3, r3, #3
 8003422:	2b00      	cmp	r3, #0
 8003424:	d003      	beq.n	800342e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f000 f885 	bl	8003536 <HAL_TIM_IC_CaptureCallback>
 800342c:	e005      	b.n	800343a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f000 f878 	bl	8003524 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f000 f887 	bl	8003548 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	f003 0310 	and.w	r3, r3, #16
 8003446:	2b00      	cmp	r3, #0
 8003448:	d020      	beq.n	800348c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	f003 0310 	and.w	r3, r3, #16
 8003450:	2b00      	cmp	r3, #0
 8003452:	d01b      	beq.n	800348c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f06f 0210 	mvn.w	r2, #16
 800345c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2208      	movs	r2, #8
 8003462:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	69db      	ldr	r3, [r3, #28]
 800346a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800346e:	2b00      	cmp	r3, #0
 8003470:	d003      	beq.n	800347a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f000 f85f 	bl	8003536 <HAL_TIM_IC_CaptureCallback>
 8003478:	e005      	b.n	8003486 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f000 f852 	bl	8003524 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f000 f861 	bl	8003548 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	f003 0301 	and.w	r3, r3, #1
 8003492:	2b00      	cmp	r3, #0
 8003494:	d00c      	beq.n	80034b0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	f003 0301 	and.w	r3, r3, #1
 800349c:	2b00      	cmp	r3, #0
 800349e:	d007      	beq.n	80034b0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f06f 0201 	mvn.w	r2, #1
 80034a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f7fd fe00 	bl	80010b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d00c      	beq.n	80034d4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d007      	beq.n	80034d4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80034cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f000 f947 	bl	8003762 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d00c      	beq.n	80034f8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d007      	beq.n	80034f8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80034f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f000 f831 	bl	800355a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	f003 0320 	and.w	r3, r3, #32
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d00c      	beq.n	800351c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	f003 0320 	and.w	r3, r3, #32
 8003508:	2b00      	cmp	r3, #0
 800350a:	d007      	beq.n	800351c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f06f 0220 	mvn.w	r2, #32
 8003514:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f000 f91a 	bl	8003750 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800351c:	bf00      	nop
 800351e:	3710      	adds	r7, #16
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}

08003524 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003524:	b480      	push	{r7}
 8003526:	b083      	sub	sp, #12
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800352c:	bf00      	nop
 800352e:	370c      	adds	r7, #12
 8003530:	46bd      	mov	sp, r7
 8003532:	bc80      	pop	{r7}
 8003534:	4770      	bx	lr

08003536 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003536:	b480      	push	{r7}
 8003538:	b083      	sub	sp, #12
 800353a:	af00      	add	r7, sp, #0
 800353c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800353e:	bf00      	nop
 8003540:	370c      	adds	r7, #12
 8003542:	46bd      	mov	sp, r7
 8003544:	bc80      	pop	{r7}
 8003546:	4770      	bx	lr

08003548 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003550:	bf00      	nop
 8003552:	370c      	adds	r7, #12
 8003554:	46bd      	mov	sp, r7
 8003556:	bc80      	pop	{r7}
 8003558:	4770      	bx	lr

0800355a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800355a:	b480      	push	{r7}
 800355c:	b083      	sub	sp, #12
 800355e:	af00      	add	r7, sp, #0
 8003560:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003562:	bf00      	nop
 8003564:	370c      	adds	r7, #12
 8003566:	46bd      	mov	sp, r7
 8003568:	bc80      	pop	{r7}
 800356a:	4770      	bx	lr

0800356c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800356c:	b480      	push	{r7}
 800356e:	b085      	sub	sp, #20
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
 8003574:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	4a39      	ldr	r2, [pc, #228]	@ (8003664 <TIM_Base_SetConfig+0xf8>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d013      	beq.n	80035ac <TIM_Base_SetConfig+0x40>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	4a38      	ldr	r2, [pc, #224]	@ (8003668 <TIM_Base_SetConfig+0xfc>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d00f      	beq.n	80035ac <TIM_Base_SetConfig+0x40>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003592:	d00b      	beq.n	80035ac <TIM_Base_SetConfig+0x40>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	4a35      	ldr	r2, [pc, #212]	@ (800366c <TIM_Base_SetConfig+0x100>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d007      	beq.n	80035ac <TIM_Base_SetConfig+0x40>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	4a34      	ldr	r2, [pc, #208]	@ (8003670 <TIM_Base_SetConfig+0x104>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d003      	beq.n	80035ac <TIM_Base_SetConfig+0x40>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	4a33      	ldr	r2, [pc, #204]	@ (8003674 <TIM_Base_SetConfig+0x108>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d108      	bne.n	80035be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	68fa      	ldr	r2, [r7, #12]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4a28      	ldr	r2, [pc, #160]	@ (8003664 <TIM_Base_SetConfig+0xf8>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d013      	beq.n	80035ee <TIM_Base_SetConfig+0x82>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4a27      	ldr	r2, [pc, #156]	@ (8003668 <TIM_Base_SetConfig+0xfc>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d00f      	beq.n	80035ee <TIM_Base_SetConfig+0x82>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035d4:	d00b      	beq.n	80035ee <TIM_Base_SetConfig+0x82>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4a24      	ldr	r2, [pc, #144]	@ (800366c <TIM_Base_SetConfig+0x100>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d007      	beq.n	80035ee <TIM_Base_SetConfig+0x82>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a23      	ldr	r2, [pc, #140]	@ (8003670 <TIM_Base_SetConfig+0x104>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d003      	beq.n	80035ee <TIM_Base_SetConfig+0x82>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4a22      	ldr	r2, [pc, #136]	@ (8003674 <TIM_Base_SetConfig+0x108>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d108      	bne.n	8003600 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80035f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	68db      	ldr	r3, [r3, #12]
 80035fa:	68fa      	ldr	r2, [r7, #12]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	695b      	ldr	r3, [r3, #20]
 800360a:	4313      	orrs	r3, r2
 800360c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	68fa      	ldr	r2, [r7, #12]
 8003612:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	689a      	ldr	r2, [r3, #8]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	4a0f      	ldr	r2, [pc, #60]	@ (8003664 <TIM_Base_SetConfig+0xf8>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d003      	beq.n	8003634 <TIM_Base_SetConfig+0xc8>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	4a0e      	ldr	r2, [pc, #56]	@ (8003668 <TIM_Base_SetConfig+0xfc>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d103      	bne.n	800363c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	691a      	ldr	r2, [r3, #16]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2201      	movs	r2, #1
 8003640:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	691b      	ldr	r3, [r3, #16]
 8003646:	f003 0301 	and.w	r3, r3, #1
 800364a:	2b00      	cmp	r3, #0
 800364c:	d005      	beq.n	800365a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	691b      	ldr	r3, [r3, #16]
 8003652:	f023 0201 	bic.w	r2, r3, #1
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	611a      	str	r2, [r3, #16]
  }
}
 800365a:	bf00      	nop
 800365c:	3714      	adds	r7, #20
 800365e:	46bd      	mov	sp, r7
 8003660:	bc80      	pop	{r7}
 8003662:	4770      	bx	lr
 8003664:	40012c00 	.word	0x40012c00
 8003668:	40013400 	.word	0x40013400
 800366c:	40000400 	.word	0x40000400
 8003670:	40000800 	.word	0x40000800
 8003674:	40000c00 	.word	0x40000c00

08003678 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003678:	b480      	push	{r7}
 800367a:	b085      	sub	sp, #20
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
 8003680:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003688:	2b01      	cmp	r3, #1
 800368a:	d101      	bne.n	8003690 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800368c:	2302      	movs	r3, #2
 800368e:	e050      	b.n	8003732 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2202      	movs	r2, #2
 800369c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	68fa      	ldr	r2, [r7, #12]
 80036be:	4313      	orrs	r3, r2
 80036c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	68fa      	ldr	r2, [r7, #12]
 80036c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a1b      	ldr	r2, [pc, #108]	@ (800373c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d018      	beq.n	8003706 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a19      	ldr	r2, [pc, #100]	@ (8003740 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d013      	beq.n	8003706 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036e6:	d00e      	beq.n	8003706 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a15      	ldr	r2, [pc, #84]	@ (8003744 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d009      	beq.n	8003706 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a14      	ldr	r2, [pc, #80]	@ (8003748 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d004      	beq.n	8003706 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a12      	ldr	r2, [pc, #72]	@ (800374c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d10c      	bne.n	8003720 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800370c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	68ba      	ldr	r2, [r7, #8]
 8003714:	4313      	orrs	r3, r2
 8003716:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	68ba      	ldr	r2, [r7, #8]
 800371e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2201      	movs	r2, #1
 8003724:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2200      	movs	r2, #0
 800372c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003730:	2300      	movs	r3, #0
}
 8003732:	4618      	mov	r0, r3
 8003734:	3714      	adds	r7, #20
 8003736:	46bd      	mov	sp, r7
 8003738:	bc80      	pop	{r7}
 800373a:	4770      	bx	lr
 800373c:	40012c00 	.word	0x40012c00
 8003740:	40013400 	.word	0x40013400
 8003744:	40000400 	.word	0x40000400
 8003748:	40000800 	.word	0x40000800
 800374c:	40000c00 	.word	0x40000c00

08003750 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003750:	b480      	push	{r7}
 8003752:	b083      	sub	sp, #12
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003758:	bf00      	nop
 800375a:	370c      	adds	r7, #12
 800375c:	46bd      	mov	sp, r7
 800375e:	bc80      	pop	{r7}
 8003760:	4770      	bx	lr

08003762 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003762:	b480      	push	{r7}
 8003764:	b083      	sub	sp, #12
 8003766:	af00      	add	r7, sp, #0
 8003768:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800376a:	bf00      	nop
 800376c:	370c      	adds	r7, #12
 800376e:	46bd      	mov	sp, r7
 8003770:	bc80      	pop	{r7}
 8003772:	4770      	bx	lr

08003774 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b082      	sub	sp, #8
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d101      	bne.n	8003786 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e042      	b.n	800380c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800378c:	b2db      	uxtb	r3, r3
 800378e:	2b00      	cmp	r3, #0
 8003790:	d106      	bne.n	80037a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f7fd fd68 	bl	8001270 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2224      	movs	r2, #36	@ 0x24
 80037a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	68da      	ldr	r2, [r3, #12]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80037b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	f000 fdb7 	bl	800432c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	691a      	ldr	r2, [r3, #16]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80037cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	695a      	ldr	r2, [r3, #20]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80037dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	68da      	ldr	r2, [r3, #12]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80037ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2200      	movs	r2, #0
 80037f2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2220      	movs	r2, #32
 80037f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2220      	movs	r2, #32
 8003800:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2200      	movs	r2, #0
 8003808:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800380a:	2300      	movs	r3, #0
}
 800380c:	4618      	mov	r0, r3
 800380e:	3708      	adds	r7, #8
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}

08003814 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b08a      	sub	sp, #40	@ 0x28
 8003818:	af02      	add	r7, sp, #8
 800381a:	60f8      	str	r0, [r7, #12]
 800381c:	60b9      	str	r1, [r7, #8]
 800381e:	603b      	str	r3, [r7, #0]
 8003820:	4613      	mov	r3, r2
 8003822:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003824:	2300      	movs	r3, #0
 8003826:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800382e:	b2db      	uxtb	r3, r3
 8003830:	2b20      	cmp	r3, #32
 8003832:	d175      	bne.n	8003920 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d002      	beq.n	8003840 <HAL_UART_Transmit+0x2c>
 800383a:	88fb      	ldrh	r3, [r7, #6]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d101      	bne.n	8003844 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	e06e      	b.n	8003922 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2200      	movs	r2, #0
 8003848:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2221      	movs	r2, #33	@ 0x21
 800384e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003852:	f7fe fc2d 	bl	80020b0 <HAL_GetTick>
 8003856:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	88fa      	ldrh	r2, [r7, #6]
 800385c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	88fa      	ldrh	r2, [r7, #6]
 8003862:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800386c:	d108      	bne.n	8003880 <HAL_UART_Transmit+0x6c>
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	691b      	ldr	r3, [r3, #16]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d104      	bne.n	8003880 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003876:	2300      	movs	r3, #0
 8003878:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	61bb      	str	r3, [r7, #24]
 800387e:	e003      	b.n	8003888 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003884:	2300      	movs	r3, #0
 8003886:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003888:	e02e      	b.n	80038e8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	9300      	str	r3, [sp, #0]
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	2200      	movs	r2, #0
 8003892:	2180      	movs	r1, #128	@ 0x80
 8003894:	68f8      	ldr	r0, [r7, #12]
 8003896:	f000 fb1c 	bl	8003ed2 <UART_WaitOnFlagUntilTimeout>
 800389a:	4603      	mov	r3, r0
 800389c:	2b00      	cmp	r3, #0
 800389e:	d005      	beq.n	80038ac <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2220      	movs	r2, #32
 80038a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80038a8:	2303      	movs	r3, #3
 80038aa:	e03a      	b.n	8003922 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80038ac:	69fb      	ldr	r3, [r7, #28]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d10b      	bne.n	80038ca <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80038b2:	69bb      	ldr	r3, [r7, #24]
 80038b4:	881b      	ldrh	r3, [r3, #0]
 80038b6:	461a      	mov	r2, r3
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038c0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80038c2:	69bb      	ldr	r3, [r7, #24]
 80038c4:	3302      	adds	r3, #2
 80038c6:	61bb      	str	r3, [r7, #24]
 80038c8:	e007      	b.n	80038da <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80038ca:	69fb      	ldr	r3, [r7, #28]
 80038cc:	781a      	ldrb	r2, [r3, #0]
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	3301      	adds	r3, #1
 80038d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80038de:	b29b      	uxth	r3, r3
 80038e0:	3b01      	subs	r3, #1
 80038e2:	b29a      	uxth	r2, r3
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d1cb      	bne.n	800388a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	9300      	str	r3, [sp, #0]
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	2200      	movs	r2, #0
 80038fa:	2140      	movs	r1, #64	@ 0x40
 80038fc:	68f8      	ldr	r0, [r7, #12]
 80038fe:	f000 fae8 	bl	8003ed2 <UART_WaitOnFlagUntilTimeout>
 8003902:	4603      	mov	r3, r0
 8003904:	2b00      	cmp	r3, #0
 8003906:	d005      	beq.n	8003914 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2220      	movs	r2, #32
 800390c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003910:	2303      	movs	r3, #3
 8003912:	e006      	b.n	8003922 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2220      	movs	r2, #32
 8003918:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800391c:	2300      	movs	r3, #0
 800391e:	e000      	b.n	8003922 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003920:	2302      	movs	r3, #2
  }
}
 8003922:	4618      	mov	r0, r3
 8003924:	3720      	adds	r7, #32
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}

0800392a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800392a:	b580      	push	{r7, lr}
 800392c:	b084      	sub	sp, #16
 800392e:	af00      	add	r7, sp, #0
 8003930:	60f8      	str	r0, [r7, #12]
 8003932:	60b9      	str	r1, [r7, #8]
 8003934:	4613      	mov	r3, r2
 8003936:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800393e:	b2db      	uxtb	r3, r3
 8003940:	2b20      	cmp	r3, #32
 8003942:	d112      	bne.n	800396a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d002      	beq.n	8003950 <HAL_UART_Receive_IT+0x26>
 800394a:	88fb      	ldrh	r3, [r7, #6]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d101      	bne.n	8003954 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	e00b      	b.n	800396c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2200      	movs	r2, #0
 8003958:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800395a:	88fb      	ldrh	r3, [r7, #6]
 800395c:	461a      	mov	r2, r3
 800395e:	68b9      	ldr	r1, [r7, #8]
 8003960:	68f8      	ldr	r0, [r7, #12]
 8003962:	f000 fb0f 	bl	8003f84 <UART_Start_Receive_IT>
 8003966:	4603      	mov	r3, r0
 8003968:	e000      	b.n	800396c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800396a:	2302      	movs	r3, #2
  }
}
 800396c:	4618      	mov	r0, r3
 800396e:	3710      	adds	r7, #16
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}

08003974 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b0ba      	sub	sp, #232	@ 0xe8
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	695b      	ldr	r3, [r3, #20]
 8003996:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800399a:	2300      	movs	r3, #0
 800399c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80039a0:	2300      	movs	r3, #0
 80039a2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80039a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039aa:	f003 030f 	and.w	r3, r3, #15
 80039ae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80039b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d10f      	bne.n	80039da <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80039ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039be:	f003 0320 	and.w	r3, r3, #32
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d009      	beq.n	80039da <HAL_UART_IRQHandler+0x66>
 80039c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039ca:	f003 0320 	and.w	r3, r3, #32
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d003      	beq.n	80039da <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f000 fbec 	bl	80041b0 <UART_Receive_IT>
      return;
 80039d8:	e25b      	b.n	8003e92 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80039da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80039de:	2b00      	cmp	r3, #0
 80039e0:	f000 80de 	beq.w	8003ba0 <HAL_UART_IRQHandler+0x22c>
 80039e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80039e8:	f003 0301 	and.w	r3, r3, #1
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d106      	bne.n	80039fe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80039f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039f4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	f000 80d1 	beq.w	8003ba0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80039fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a02:	f003 0301 	and.w	r3, r3, #1
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d00b      	beq.n	8003a22 <HAL_UART_IRQHandler+0xae>
 8003a0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d005      	beq.n	8003a22 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a1a:	f043 0201 	orr.w	r2, r3, #1
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a26:	f003 0304 	and.w	r3, r3, #4
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d00b      	beq.n	8003a46 <HAL_UART_IRQHandler+0xd2>
 8003a2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a32:	f003 0301 	and.w	r3, r3, #1
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d005      	beq.n	8003a46 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a3e:	f043 0202 	orr.w	r2, r3, #2
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a4a:	f003 0302 	and.w	r3, r3, #2
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d00b      	beq.n	8003a6a <HAL_UART_IRQHandler+0xf6>
 8003a52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a56:	f003 0301 	and.w	r3, r3, #1
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d005      	beq.n	8003a6a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a62:	f043 0204 	orr.w	r2, r3, #4
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003a6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a6e:	f003 0308 	and.w	r3, r3, #8
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d011      	beq.n	8003a9a <HAL_UART_IRQHandler+0x126>
 8003a76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a7a:	f003 0320 	and.w	r3, r3, #32
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d105      	bne.n	8003a8e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003a82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a86:	f003 0301 	and.w	r3, r3, #1
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d005      	beq.n	8003a9a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a92:	f043 0208 	orr.w	r2, r3, #8
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	f000 81f2 	beq.w	8003e88 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003aa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003aa8:	f003 0320 	and.w	r3, r3, #32
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d008      	beq.n	8003ac2 <HAL_UART_IRQHandler+0x14e>
 8003ab0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ab4:	f003 0320 	and.w	r3, r3, #32
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d002      	beq.n	8003ac2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	f000 fb77 	bl	80041b0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	695b      	ldr	r3, [r3, #20]
 8003ac8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	bf14      	ite	ne
 8003ad0:	2301      	movne	r3, #1
 8003ad2:	2300      	moveq	r3, #0
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ade:	f003 0308 	and.w	r3, r3, #8
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d103      	bne.n	8003aee <HAL_UART_IRQHandler+0x17a>
 8003ae6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d04f      	beq.n	8003b8e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f000 fa81 	bl	8003ff6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	695b      	ldr	r3, [r3, #20]
 8003afa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d041      	beq.n	8003b86 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	3314      	adds	r3, #20
 8003b08:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b0c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003b10:	e853 3f00 	ldrex	r3, [r3]
 8003b14:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003b18:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003b1c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003b20:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	3314      	adds	r3, #20
 8003b2a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003b2e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003b32:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b36:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003b3a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003b3e:	e841 2300 	strex	r3, r2, [r1]
 8003b42:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003b46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d1d9      	bne.n	8003b02 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d013      	beq.n	8003b7e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b5a:	4a7e      	ldr	r2, [pc, #504]	@ (8003d54 <HAL_UART_IRQHandler+0x3e0>)
 8003b5c:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b62:	4618      	mov	r0, r3
 8003b64:	f7fe fbf6 	bl	8002354 <HAL_DMA_Abort_IT>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d016      	beq.n	8003b9c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003b78:	4610      	mov	r0, r2
 8003b7a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b7c:	e00e      	b.n	8003b9c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f000 f993 	bl	8003eaa <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b84:	e00a      	b.n	8003b9c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f000 f98f 	bl	8003eaa <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b8c:	e006      	b.n	8003b9c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f000 f98b 	bl	8003eaa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2200      	movs	r2, #0
 8003b98:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003b9a:	e175      	b.n	8003e88 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b9c:	bf00      	nop
    return;
 8003b9e:	e173      	b.n	8003e88 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	f040 814f 	bne.w	8003e48 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003baa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bae:	f003 0310 	and.w	r3, r3, #16
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	f000 8148 	beq.w	8003e48 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003bb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003bbc:	f003 0310 	and.w	r3, r3, #16
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	f000 8141 	beq.w	8003e48 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	60bb      	str	r3, [r7, #8]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	60bb      	str	r3, [r7, #8]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	60bb      	str	r3, [r7, #8]
 8003bda:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	695b      	ldr	r3, [r3, #20]
 8003be2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	f000 80b6 	beq.w	8003d58 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003bf8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	f000 8145 	beq.w	8003e8c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003c06:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	f080 813e 	bcs.w	8003e8c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003c16:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c1c:	699b      	ldr	r3, [r3, #24]
 8003c1e:	2b20      	cmp	r3, #32
 8003c20:	f000 8088 	beq.w	8003d34 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	330c      	adds	r3, #12
 8003c2a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c2e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003c32:	e853 3f00 	ldrex	r3, [r3]
 8003c36:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003c3a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003c3e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003c42:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	330c      	adds	r3, #12
 8003c4c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003c50:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003c54:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c58:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003c5c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003c60:	e841 2300 	strex	r3, r2, [r1]
 8003c64:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003c68:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d1d9      	bne.n	8003c24 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	3314      	adds	r3, #20
 8003c76:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c78:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003c7a:	e853 3f00 	ldrex	r3, [r3]
 8003c7e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003c80:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003c82:	f023 0301 	bic.w	r3, r3, #1
 8003c86:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	3314      	adds	r3, #20
 8003c90:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003c94:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003c98:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c9a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003c9c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003ca0:	e841 2300 	strex	r3, r2, [r1]
 8003ca4:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003ca6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d1e1      	bne.n	8003c70 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	3314      	adds	r3, #20
 8003cb2:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cb4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003cb6:	e853 3f00 	ldrex	r3, [r3]
 8003cba:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003cbc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003cbe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003cc2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	3314      	adds	r3, #20
 8003ccc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003cd0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003cd2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cd4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003cd6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003cd8:	e841 2300 	strex	r3, r2, [r1]
 8003cdc:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003cde:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d1e3      	bne.n	8003cac <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2220      	movs	r2, #32
 8003ce8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	330c      	adds	r3, #12
 8003cf8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cfa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003cfc:	e853 3f00 	ldrex	r3, [r3]
 8003d00:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003d02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d04:	f023 0310 	bic.w	r3, r3, #16
 8003d08:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	330c      	adds	r3, #12
 8003d12:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003d16:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003d18:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d1a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003d1c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003d1e:	e841 2300 	strex	r3, r2, [r1]
 8003d22:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003d24:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d1e3      	bne.n	8003cf2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f7fe fad5 	bl	80022de <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2202      	movs	r2, #2
 8003d38:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003d42:	b29b      	uxth	r3, r3
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	4619      	mov	r1, r3
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f000 f8b6 	bl	8003ebc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003d50:	e09c      	b.n	8003e8c <HAL_UART_IRQHandler+0x518>
 8003d52:	bf00      	nop
 8003d54:	080040bb 	.word	0x080040bb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003d60:	b29b      	uxth	r3, r3
 8003d62:	1ad3      	subs	r3, r2, r3
 8003d64:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003d6c:	b29b      	uxth	r3, r3
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	f000 808e 	beq.w	8003e90 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003d74:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	f000 8089 	beq.w	8003e90 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	330c      	adds	r3, #12
 8003d84:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d88:	e853 3f00 	ldrex	r3, [r3]
 8003d8c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003d8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d90:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d94:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	330c      	adds	r3, #12
 8003d9e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003da2:	647a      	str	r2, [r7, #68]	@ 0x44
 8003da4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003da6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003da8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003daa:	e841 2300 	strex	r3, r2, [r1]
 8003dae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003db0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d1e3      	bne.n	8003d7e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	3314      	adds	r3, #20
 8003dbc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dc0:	e853 3f00 	ldrex	r3, [r3]
 8003dc4:	623b      	str	r3, [r7, #32]
   return(result);
 8003dc6:	6a3b      	ldr	r3, [r7, #32]
 8003dc8:	f023 0301 	bic.w	r3, r3, #1
 8003dcc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	3314      	adds	r3, #20
 8003dd6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003dda:	633a      	str	r2, [r7, #48]	@ 0x30
 8003ddc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dde:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003de0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003de2:	e841 2300 	strex	r3, r2, [r1]
 8003de6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003de8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d1e3      	bne.n	8003db6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2220      	movs	r2, #32
 8003df2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	330c      	adds	r3, #12
 8003e02:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	e853 3f00 	ldrex	r3, [r3]
 8003e0a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	f023 0310 	bic.w	r3, r3, #16
 8003e12:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	330c      	adds	r3, #12
 8003e1c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003e20:	61fa      	str	r2, [r7, #28]
 8003e22:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e24:	69b9      	ldr	r1, [r7, #24]
 8003e26:	69fa      	ldr	r2, [r7, #28]
 8003e28:	e841 2300 	strex	r3, r2, [r1]
 8003e2c:	617b      	str	r3, [r7, #20]
   return(result);
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d1e3      	bne.n	8003dfc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2202      	movs	r2, #2
 8003e38:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003e3a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003e3e:	4619      	mov	r1, r3
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	f000 f83b 	bl	8003ebc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003e46:	e023      	b.n	8003e90 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003e48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d009      	beq.n	8003e68 <HAL_UART_IRQHandler+0x4f4>
 8003e54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d003      	beq.n	8003e68 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f000 f93e 	bl	80040e2 <UART_Transmit_IT>
    return;
 8003e66:	e014      	b.n	8003e92 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003e68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d00e      	beq.n	8003e92 <HAL_UART_IRQHandler+0x51e>
 8003e74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d008      	beq.n	8003e92 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f000 f97d 	bl	8004180 <UART_EndTransmit_IT>
    return;
 8003e86:	e004      	b.n	8003e92 <HAL_UART_IRQHandler+0x51e>
    return;
 8003e88:	bf00      	nop
 8003e8a:	e002      	b.n	8003e92 <HAL_UART_IRQHandler+0x51e>
      return;
 8003e8c:	bf00      	nop
 8003e8e:	e000      	b.n	8003e92 <HAL_UART_IRQHandler+0x51e>
      return;
 8003e90:	bf00      	nop
  }
}
 8003e92:	37e8      	adds	r7, #232	@ 0xe8
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}

08003e98 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b083      	sub	sp, #12
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003ea0:	bf00      	nop
 8003ea2:	370c      	adds	r7, #12
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bc80      	pop	{r7}
 8003ea8:	4770      	bx	lr

08003eaa <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003eaa:	b480      	push	{r7}
 8003eac:	b083      	sub	sp, #12
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003eb2:	bf00      	nop
 8003eb4:	370c      	adds	r7, #12
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bc80      	pop	{r7}
 8003eba:	4770      	bx	lr

08003ebc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b083      	sub	sp, #12
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	460b      	mov	r3, r1
 8003ec6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003ec8:	bf00      	nop
 8003eca:	370c      	adds	r7, #12
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bc80      	pop	{r7}
 8003ed0:	4770      	bx	lr

08003ed2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003ed2:	b580      	push	{r7, lr}
 8003ed4:	b086      	sub	sp, #24
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	60f8      	str	r0, [r7, #12]
 8003eda:	60b9      	str	r1, [r7, #8]
 8003edc:	603b      	str	r3, [r7, #0]
 8003ede:	4613      	mov	r3, r2
 8003ee0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ee2:	e03b      	b.n	8003f5c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ee4:	6a3b      	ldr	r3, [r7, #32]
 8003ee6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eea:	d037      	beq.n	8003f5c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eec:	f7fe f8e0 	bl	80020b0 <HAL_GetTick>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	1ad3      	subs	r3, r2, r3
 8003ef6:	6a3a      	ldr	r2, [r7, #32]
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d302      	bcc.n	8003f02 <UART_WaitOnFlagUntilTimeout+0x30>
 8003efc:	6a3b      	ldr	r3, [r7, #32]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d101      	bne.n	8003f06 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003f02:	2303      	movs	r3, #3
 8003f04:	e03a      	b.n	8003f7c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	f003 0304 	and.w	r3, r3, #4
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d023      	beq.n	8003f5c <UART_WaitOnFlagUntilTimeout+0x8a>
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	2b80      	cmp	r3, #128	@ 0x80
 8003f18:	d020      	beq.n	8003f5c <UART_WaitOnFlagUntilTimeout+0x8a>
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	2b40      	cmp	r3, #64	@ 0x40
 8003f1e:	d01d      	beq.n	8003f5c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 0308 	and.w	r3, r3, #8
 8003f2a:	2b08      	cmp	r3, #8
 8003f2c:	d116      	bne.n	8003f5c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003f2e:	2300      	movs	r3, #0
 8003f30:	617b      	str	r3, [r7, #20]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	617b      	str	r3, [r7, #20]
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	617b      	str	r3, [r7, #20]
 8003f42:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003f44:	68f8      	ldr	r0, [r7, #12]
 8003f46:	f000 f856 	bl	8003ff6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2208      	movs	r2, #8
 8003f4e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2200      	movs	r2, #0
 8003f54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e00f      	b.n	8003f7c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	4013      	ands	r3, r2
 8003f66:	68ba      	ldr	r2, [r7, #8]
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	bf0c      	ite	eq
 8003f6c:	2301      	moveq	r3, #1
 8003f6e:	2300      	movne	r3, #0
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	461a      	mov	r2, r3
 8003f74:	79fb      	ldrb	r3, [r7, #7]
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d0b4      	beq.n	8003ee4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f7a:	2300      	movs	r3, #0
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3718      	adds	r7, #24
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}

08003f84 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b085      	sub	sp, #20
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	60f8      	str	r0, [r7, #12]
 8003f8c:	60b9      	str	r1, [r7, #8]
 8003f8e:	4613      	mov	r3, r2
 8003f90:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	68ba      	ldr	r2, [r7, #8]
 8003f96:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	88fa      	ldrh	r2, [r7, #6]
 8003f9c:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	88fa      	ldrh	r2, [r7, #6]
 8003fa2:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2222      	movs	r2, #34	@ 0x22
 8003fae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	691b      	ldr	r3, [r3, #16]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d007      	beq.n	8003fca <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	68da      	ldr	r2, [r3, #12]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003fc8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	695a      	ldr	r2, [r3, #20]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f042 0201 	orr.w	r2, r2, #1
 8003fd8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	68da      	ldr	r2, [r3, #12]
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f042 0220 	orr.w	r2, r2, #32
 8003fe8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003fea:	2300      	movs	r3, #0
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3714      	adds	r7, #20
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bc80      	pop	{r7}
 8003ff4:	4770      	bx	lr

08003ff6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ff6:	b480      	push	{r7}
 8003ff8:	b095      	sub	sp, #84	@ 0x54
 8003ffa:	af00      	add	r7, sp, #0
 8003ffc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	330c      	adds	r3, #12
 8004004:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004006:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004008:	e853 3f00 	ldrex	r3, [r3]
 800400c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800400e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004010:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004014:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	330c      	adds	r3, #12
 800401c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800401e:	643a      	str	r2, [r7, #64]	@ 0x40
 8004020:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004022:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004024:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004026:	e841 2300 	strex	r3, r2, [r1]
 800402a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800402c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800402e:	2b00      	cmp	r3, #0
 8004030:	d1e5      	bne.n	8003ffe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	3314      	adds	r3, #20
 8004038:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800403a:	6a3b      	ldr	r3, [r7, #32]
 800403c:	e853 3f00 	ldrex	r3, [r3]
 8004040:	61fb      	str	r3, [r7, #28]
   return(result);
 8004042:	69fb      	ldr	r3, [r7, #28]
 8004044:	f023 0301 	bic.w	r3, r3, #1
 8004048:	64bb      	str	r3, [r7, #72]	@ 0x48
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	3314      	adds	r3, #20
 8004050:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004052:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004054:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004056:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004058:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800405a:	e841 2300 	strex	r3, r2, [r1]
 800405e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004062:	2b00      	cmp	r3, #0
 8004064:	d1e5      	bne.n	8004032 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800406a:	2b01      	cmp	r3, #1
 800406c:	d119      	bne.n	80040a2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	330c      	adds	r3, #12
 8004074:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	e853 3f00 	ldrex	r3, [r3]
 800407c:	60bb      	str	r3, [r7, #8]
   return(result);
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	f023 0310 	bic.w	r3, r3, #16
 8004084:	647b      	str	r3, [r7, #68]	@ 0x44
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	330c      	adds	r3, #12
 800408c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800408e:	61ba      	str	r2, [r7, #24]
 8004090:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004092:	6979      	ldr	r1, [r7, #20]
 8004094:	69ba      	ldr	r2, [r7, #24]
 8004096:	e841 2300 	strex	r3, r2, [r1]
 800409a:	613b      	str	r3, [r7, #16]
   return(result);
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d1e5      	bne.n	800406e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2220      	movs	r2, #32
 80040a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2200      	movs	r2, #0
 80040ae:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80040b0:	bf00      	nop
 80040b2:	3754      	adds	r7, #84	@ 0x54
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bc80      	pop	{r7}
 80040b8:	4770      	bx	lr

080040ba <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80040ba:	b580      	push	{r7, lr}
 80040bc:	b084      	sub	sp, #16
 80040be:	af00      	add	r7, sp, #0
 80040c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040c6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2200      	movs	r2, #0
 80040cc:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2200      	movs	r2, #0
 80040d2:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80040d4:	68f8      	ldr	r0, [r7, #12]
 80040d6:	f7ff fee8 	bl	8003eaa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040da:	bf00      	nop
 80040dc:	3710      	adds	r7, #16
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}

080040e2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80040e2:	b480      	push	{r7}
 80040e4:	b085      	sub	sp, #20
 80040e6:	af00      	add	r7, sp, #0
 80040e8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	2b21      	cmp	r3, #33	@ 0x21
 80040f4:	d13e      	bne.n	8004174 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040fe:	d114      	bne.n	800412a <UART_Transmit_IT+0x48>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	691b      	ldr	r3, [r3, #16]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d110      	bne.n	800412a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6a1b      	ldr	r3, [r3, #32]
 800410c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	881b      	ldrh	r3, [r3, #0]
 8004112:	461a      	mov	r2, r3
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800411c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6a1b      	ldr	r3, [r3, #32]
 8004122:	1c9a      	adds	r2, r3, #2
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	621a      	str	r2, [r3, #32]
 8004128:	e008      	b.n	800413c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6a1b      	ldr	r3, [r3, #32]
 800412e:	1c59      	adds	r1, r3, #1
 8004130:	687a      	ldr	r2, [r7, #4]
 8004132:	6211      	str	r1, [r2, #32]
 8004134:	781a      	ldrb	r2, [r3, #0]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004140:	b29b      	uxth	r3, r3
 8004142:	3b01      	subs	r3, #1
 8004144:	b29b      	uxth	r3, r3
 8004146:	687a      	ldr	r2, [r7, #4]
 8004148:	4619      	mov	r1, r3
 800414a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800414c:	2b00      	cmp	r3, #0
 800414e:	d10f      	bne.n	8004170 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	68da      	ldr	r2, [r3, #12]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800415e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	68da      	ldr	r2, [r3, #12]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800416e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004170:	2300      	movs	r3, #0
 8004172:	e000      	b.n	8004176 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004174:	2302      	movs	r3, #2
  }
}
 8004176:	4618      	mov	r0, r3
 8004178:	3714      	adds	r7, #20
 800417a:	46bd      	mov	sp, r7
 800417c:	bc80      	pop	{r7}
 800417e:	4770      	bx	lr

08004180 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b082      	sub	sp, #8
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	68da      	ldr	r2, [r3, #12]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004196:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2220      	movs	r2, #32
 800419c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f7ff fe79 	bl	8003e98 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80041a6:	2300      	movs	r3, #0
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	3708      	adds	r7, #8
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}

080041b0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b08c      	sub	sp, #48	@ 0x30
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	2b22      	cmp	r3, #34	@ 0x22
 80041c2:	f040 80ae 	bne.w	8004322 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041ce:	d117      	bne.n	8004200 <UART_Receive_IT+0x50>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	691b      	ldr	r3, [r3, #16]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d113      	bne.n	8004200 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80041d8:	2300      	movs	r3, #0
 80041da:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041e0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041ee:	b29a      	uxth	r2, r3
 80041f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041f2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041f8:	1c9a      	adds	r2, r3, #2
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	629a      	str	r2, [r3, #40]	@ 0x28
 80041fe:	e026      	b.n	800424e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004204:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004206:	2300      	movs	r3, #0
 8004208:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004212:	d007      	beq.n	8004224 <UART_Receive_IT+0x74>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d10a      	bne.n	8004232 <UART_Receive_IT+0x82>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	691b      	ldr	r3, [r3, #16]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d106      	bne.n	8004232 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	b2da      	uxtb	r2, r3
 800422c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800422e:	701a      	strb	r2, [r3, #0]
 8004230:	e008      	b.n	8004244 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	b2db      	uxtb	r3, r3
 800423a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800423e:	b2da      	uxtb	r2, r3
 8004240:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004242:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004248:	1c5a      	adds	r2, r3, #1
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004252:	b29b      	uxth	r3, r3
 8004254:	3b01      	subs	r3, #1
 8004256:	b29b      	uxth	r3, r3
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	4619      	mov	r1, r3
 800425c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800425e:	2b00      	cmp	r3, #0
 8004260:	d15d      	bne.n	800431e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	68da      	ldr	r2, [r3, #12]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f022 0220 	bic.w	r2, r2, #32
 8004270:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	68da      	ldr	r2, [r3, #12]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004280:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	695a      	ldr	r2, [r3, #20]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f022 0201 	bic.w	r2, r2, #1
 8004290:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2220      	movs	r2, #32
 8004296:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2200      	movs	r2, #0
 800429e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d135      	bne.n	8004314 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2200      	movs	r2, #0
 80042ac:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	330c      	adds	r3, #12
 80042b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	e853 3f00 	ldrex	r3, [r3]
 80042bc:	613b      	str	r3, [r7, #16]
   return(result);
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	f023 0310 	bic.w	r3, r3, #16
 80042c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	330c      	adds	r3, #12
 80042cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042ce:	623a      	str	r2, [r7, #32]
 80042d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042d2:	69f9      	ldr	r1, [r7, #28]
 80042d4:	6a3a      	ldr	r2, [r7, #32]
 80042d6:	e841 2300 	strex	r3, r2, [r1]
 80042da:	61bb      	str	r3, [r7, #24]
   return(result);
 80042dc:	69bb      	ldr	r3, [r7, #24]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d1e5      	bne.n	80042ae <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 0310 	and.w	r3, r3, #16
 80042ec:	2b10      	cmp	r3, #16
 80042ee:	d10a      	bne.n	8004306 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80042f0:	2300      	movs	r3, #0
 80042f2:	60fb      	str	r3, [r7, #12]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	60fb      	str	r3, [r7, #12]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	60fb      	str	r3, [r7, #12]
 8004304:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800430a:	4619      	mov	r1, r3
 800430c:	6878      	ldr	r0, [r7, #4]
 800430e:	f7ff fdd5 	bl	8003ebc <HAL_UARTEx_RxEventCallback>
 8004312:	e002      	b.n	800431a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	f7fd f8eb 	bl	80014f0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800431a:	2300      	movs	r3, #0
 800431c:	e002      	b.n	8004324 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800431e:	2300      	movs	r3, #0
 8004320:	e000      	b.n	8004324 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004322:	2302      	movs	r3, #2
  }
}
 8004324:	4618      	mov	r0, r3
 8004326:	3730      	adds	r7, #48	@ 0x30
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}

0800432c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b084      	sub	sp, #16
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	691b      	ldr	r3, [r3, #16]
 800433a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	68da      	ldr	r2, [r3, #12]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	430a      	orrs	r2, r1
 8004348:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	689a      	ldr	r2, [r3, #8]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	691b      	ldr	r3, [r3, #16]
 8004352:	431a      	orrs	r2, r3
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	695b      	ldr	r3, [r3, #20]
 8004358:	4313      	orrs	r3, r2
 800435a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004366:	f023 030c 	bic.w	r3, r3, #12
 800436a:	687a      	ldr	r2, [r7, #4]
 800436c:	6812      	ldr	r2, [r2, #0]
 800436e:	68b9      	ldr	r1, [r7, #8]
 8004370:	430b      	orrs	r3, r1
 8004372:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	695b      	ldr	r3, [r3, #20]
 800437a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	699a      	ldr	r2, [r3, #24]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	430a      	orrs	r2, r1
 8004388:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a2c      	ldr	r2, [pc, #176]	@ (8004440 <UART_SetConfig+0x114>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d103      	bne.n	800439c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004394:	f7fe fef4 	bl	8003180 <HAL_RCC_GetPCLK2Freq>
 8004398:	60f8      	str	r0, [r7, #12]
 800439a:	e002      	b.n	80043a2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800439c:	f7fe fedc 	bl	8003158 <HAL_RCC_GetPCLK1Freq>
 80043a0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80043a2:	68fa      	ldr	r2, [r7, #12]
 80043a4:	4613      	mov	r3, r2
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	4413      	add	r3, r2
 80043aa:	009a      	lsls	r2, r3, #2
 80043ac:	441a      	add	r2, r3
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	009b      	lsls	r3, r3, #2
 80043b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043b8:	4a22      	ldr	r2, [pc, #136]	@ (8004444 <UART_SetConfig+0x118>)
 80043ba:	fba2 2303 	umull	r2, r3, r2, r3
 80043be:	095b      	lsrs	r3, r3, #5
 80043c0:	0119      	lsls	r1, r3, #4
 80043c2:	68fa      	ldr	r2, [r7, #12]
 80043c4:	4613      	mov	r3, r2
 80043c6:	009b      	lsls	r3, r3, #2
 80043c8:	4413      	add	r3, r2
 80043ca:	009a      	lsls	r2, r3, #2
 80043cc:	441a      	add	r2, r3
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80043d8:	4b1a      	ldr	r3, [pc, #104]	@ (8004444 <UART_SetConfig+0x118>)
 80043da:	fba3 0302 	umull	r0, r3, r3, r2
 80043de:	095b      	lsrs	r3, r3, #5
 80043e0:	2064      	movs	r0, #100	@ 0x64
 80043e2:	fb00 f303 	mul.w	r3, r0, r3
 80043e6:	1ad3      	subs	r3, r2, r3
 80043e8:	011b      	lsls	r3, r3, #4
 80043ea:	3332      	adds	r3, #50	@ 0x32
 80043ec:	4a15      	ldr	r2, [pc, #84]	@ (8004444 <UART_SetConfig+0x118>)
 80043ee:	fba2 2303 	umull	r2, r3, r2, r3
 80043f2:	095b      	lsrs	r3, r3, #5
 80043f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80043f8:	4419      	add	r1, r3
 80043fa:	68fa      	ldr	r2, [r7, #12]
 80043fc:	4613      	mov	r3, r2
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	4413      	add	r3, r2
 8004402:	009a      	lsls	r2, r3, #2
 8004404:	441a      	add	r2, r3
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	009b      	lsls	r3, r3, #2
 800440c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004410:	4b0c      	ldr	r3, [pc, #48]	@ (8004444 <UART_SetConfig+0x118>)
 8004412:	fba3 0302 	umull	r0, r3, r3, r2
 8004416:	095b      	lsrs	r3, r3, #5
 8004418:	2064      	movs	r0, #100	@ 0x64
 800441a:	fb00 f303 	mul.w	r3, r0, r3
 800441e:	1ad3      	subs	r3, r2, r3
 8004420:	011b      	lsls	r3, r3, #4
 8004422:	3332      	adds	r3, #50	@ 0x32
 8004424:	4a07      	ldr	r2, [pc, #28]	@ (8004444 <UART_SetConfig+0x118>)
 8004426:	fba2 2303 	umull	r2, r3, r2, r3
 800442a:	095b      	lsrs	r3, r3, #5
 800442c:	f003 020f 	and.w	r2, r3, #15
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	440a      	add	r2, r1
 8004436:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004438:	bf00      	nop
 800443a:	3710      	adds	r7, #16
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}
 8004440:	40013800 	.word	0x40013800
 8004444:	51eb851f 	.word	0x51eb851f

08004448 <memset>:
 8004448:	4603      	mov	r3, r0
 800444a:	4402      	add	r2, r0
 800444c:	4293      	cmp	r3, r2
 800444e:	d100      	bne.n	8004452 <memset+0xa>
 8004450:	4770      	bx	lr
 8004452:	f803 1b01 	strb.w	r1, [r3], #1
 8004456:	e7f9      	b.n	800444c <memset+0x4>

08004458 <__libc_init_array>:
 8004458:	b570      	push	{r4, r5, r6, lr}
 800445a:	2600      	movs	r6, #0
 800445c:	4d0c      	ldr	r5, [pc, #48]	@ (8004490 <__libc_init_array+0x38>)
 800445e:	4c0d      	ldr	r4, [pc, #52]	@ (8004494 <__libc_init_array+0x3c>)
 8004460:	1b64      	subs	r4, r4, r5
 8004462:	10a4      	asrs	r4, r4, #2
 8004464:	42a6      	cmp	r6, r4
 8004466:	d109      	bne.n	800447c <__libc_init_array+0x24>
 8004468:	f000 f81a 	bl	80044a0 <_init>
 800446c:	2600      	movs	r6, #0
 800446e:	4d0a      	ldr	r5, [pc, #40]	@ (8004498 <__libc_init_array+0x40>)
 8004470:	4c0a      	ldr	r4, [pc, #40]	@ (800449c <__libc_init_array+0x44>)
 8004472:	1b64      	subs	r4, r4, r5
 8004474:	10a4      	asrs	r4, r4, #2
 8004476:	42a6      	cmp	r6, r4
 8004478:	d105      	bne.n	8004486 <__libc_init_array+0x2e>
 800447a:	bd70      	pop	{r4, r5, r6, pc}
 800447c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004480:	4798      	blx	r3
 8004482:	3601      	adds	r6, #1
 8004484:	e7ee      	b.n	8004464 <__libc_init_array+0xc>
 8004486:	f855 3b04 	ldr.w	r3, [r5], #4
 800448a:	4798      	blx	r3
 800448c:	3601      	adds	r6, #1
 800448e:	e7f2      	b.n	8004476 <__libc_init_array+0x1e>
 8004490:	080048e0 	.word	0x080048e0
 8004494:	080048e0 	.word	0x080048e0
 8004498:	080048e0 	.word	0x080048e0
 800449c:	080048e4 	.word	0x080048e4

080044a0 <_init>:
 80044a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044a2:	bf00      	nop
 80044a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044a6:	bc08      	pop	{r3}
 80044a8:	469e      	mov	lr, r3
 80044aa:	4770      	bx	lr

080044ac <_fini>:
 80044ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044ae:	bf00      	nop
 80044b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044b2:	bc08      	pop	{r3}
 80044b4:	469e      	mov	lr, r3
 80044b6:	4770      	bx	lr
