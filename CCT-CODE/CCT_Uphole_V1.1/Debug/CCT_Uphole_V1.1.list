
CCT_Uphole_V1.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a74  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c4  08005c58  08005c58  00006c58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800611c  0800611c  0000816c  2**0
                  CONTENTS
  4 .ARM          00000000  0800611c  0800611c  0000816c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800611c  0800611c  0000816c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800611c  0800611c  0000711c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006120  08006120  00007120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000016c  20000000  08006124  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000cc0  2000016c  08006290  0000816c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000e2c  08006290  00008e2c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000816c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e1bc  00000000  00000000  00008195  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002978  00000000  00000000  00016351  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ea8  00000000  00000000  00018cd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b52  00000000  00000000  00019b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b833  00000000  00000000  0001a6ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015098  00000000  00000000  00035efd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a4d3  00000000  00000000  0004af95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e5468  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003fc8  00000000  00000000  000e54ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000e9474  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000016c 	.word	0x2000016c
 8000200:	00000000 	.word	0x00000000
 8000204:	08005c40 	.word	0x08005c40

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000170 	.word	0x20000170
 8000220:	08005c40 	.word	0x08005c40

08000224 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000224:	b480      	push	{r7}
 8000226:	b085      	sub	sp, #20
 8000228:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800022a:	4b13      	ldr	r3, [pc, #76]	@ (8000278 <HAL_MspInit+0x54>)
 800022c:	699b      	ldr	r3, [r3, #24]
 800022e:	4a12      	ldr	r2, [pc, #72]	@ (8000278 <HAL_MspInit+0x54>)
 8000230:	f043 0301 	orr.w	r3, r3, #1
 8000234:	6193      	str	r3, [r2, #24]
 8000236:	4b10      	ldr	r3, [pc, #64]	@ (8000278 <HAL_MspInit+0x54>)
 8000238:	699b      	ldr	r3, [r3, #24]
 800023a:	f003 0301 	and.w	r3, r3, #1
 800023e:	60bb      	str	r3, [r7, #8]
 8000240:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000242:	4b0d      	ldr	r3, [pc, #52]	@ (8000278 <HAL_MspInit+0x54>)
 8000244:	69db      	ldr	r3, [r3, #28]
 8000246:	4a0c      	ldr	r2, [pc, #48]	@ (8000278 <HAL_MspInit+0x54>)
 8000248:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800024c:	61d3      	str	r3, [r2, #28]
 800024e:	4b0a      	ldr	r3, [pc, #40]	@ (8000278 <HAL_MspInit+0x54>)
 8000250:	69db      	ldr	r3, [r3, #28]
 8000252:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000256:	607b      	str	r3, [r7, #4]
 8000258:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** ENABLE: Full SWJ (JTAG-DP + SW-DP): Reset State
  */
  __HAL_AFIO_REMAP_SWJ_ENABLE();
 800025a:	4b08      	ldr	r3, [pc, #32]	@ (800027c <HAL_MspInit+0x58>)
 800025c:	685b      	ldr	r3, [r3, #4]
 800025e:	60fb      	str	r3, [r7, #12]
 8000260:	68fb      	ldr	r3, [r7, #12]
 8000262:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000266:	60fb      	str	r3, [r7, #12]
 8000268:	4a04      	ldr	r2, [pc, #16]	@ (800027c <HAL_MspInit+0x58>)
 800026a:	68fb      	ldr	r3, [r7, #12]
 800026c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800026e:	bf00      	nop
 8000270:	3714      	adds	r7, #20
 8000272:	46bd      	mov	sp, r7
 8000274:	bc80      	pop	{r7}
 8000276:	4770      	bx	lr
 8000278:	40021000 	.word	0x40021000
 800027c:	40010000 	.word	0x40010000

08000280 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000280:	b480      	push	{r7}
 8000282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000284:	bf00      	nop
 8000286:	e7fd      	b.n	8000284 <NMI_Handler+0x4>

08000288 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000288:	b480      	push	{r7}
 800028a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800028c:	bf00      	nop
 800028e:	e7fd      	b.n	800028c <HardFault_Handler+0x4>

08000290 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000290:	b480      	push	{r7}
 8000292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000294:	bf00      	nop
 8000296:	e7fd      	b.n	8000294 <MemManage_Handler+0x4>

08000298 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000298:	b480      	push	{r7}
 800029a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800029c:	bf00      	nop
 800029e:	e7fd      	b.n	800029c <BusFault_Handler+0x4>

080002a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80002a0:	b480      	push	{r7}
 80002a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80002a4:	bf00      	nop
 80002a6:	e7fd      	b.n	80002a4 <UsageFault_Handler+0x4>

080002a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80002a8:	b480      	push	{r7}
 80002aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80002ac:	bf00      	nop
 80002ae:	46bd      	mov	sp, r7
 80002b0:	bc80      	pop	{r7}
 80002b2:	4770      	bx	lr

080002b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80002b4:	b480      	push	{r7}
 80002b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80002b8:	bf00      	nop
 80002ba:	46bd      	mov	sp, r7
 80002bc:	bc80      	pop	{r7}
 80002be:	4770      	bx	lr

080002c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80002c0:	b480      	push	{r7}
 80002c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80002c4:	bf00      	nop
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bc80      	pop	{r7}
 80002ca:	4770      	bx	lr

080002cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80002d0:	f002 f986 	bl	80025e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80002d4:	bf00      	nop
 80002d6:	bd80      	pop	{r7, pc}

080002d8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80002dc:	4802      	ldr	r0, [pc, #8]	@ (80002e8 <USART1_IRQHandler+0x10>)
 80002de:	f004 f9a5 	bl	800462c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80002e2:	bf00      	nop
 80002e4:	bd80      	pop	{r7, pc}
 80002e6:	bf00      	nop
 80002e8:	200002a8 	.word	0x200002a8

080002ec <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80002f0:	4802      	ldr	r0, [pc, #8]	@ (80002fc <UART5_IRQHandler+0x10>)
 80002f2:	f004 f99b 	bl	800462c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80002f6:	bf00      	nop
 80002f8:	bd80      	pop	{r7, pc}
 80002fa:	bf00      	nop
 80002fc:	20000260 	.word	0x20000260

08000300 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000304:	4802      	ldr	r0, [pc, #8]	@ (8000310 <TIM6_IRQHandler+0x10>)
 8000306:	f003 fe09 	bl	8003f1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 800030a:	bf00      	nop
 800030c:	bd80      	pop	{r7, pc}
 800030e:	bf00      	nop
 8000310:	200001bc 	.word	0x200001bc

08000314 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b086      	sub	sp, #24
 8000318:	af00      	add	r7, sp, #0
 800031a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800031c:	4a14      	ldr	r2, [pc, #80]	@ (8000370 <_sbrk+0x5c>)
 800031e:	4b15      	ldr	r3, [pc, #84]	@ (8000374 <_sbrk+0x60>)
 8000320:	1ad3      	subs	r3, r2, r3
 8000322:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000324:	697b      	ldr	r3, [r7, #20]
 8000326:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000328:	4b13      	ldr	r3, [pc, #76]	@ (8000378 <_sbrk+0x64>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	2b00      	cmp	r3, #0
 800032e:	d102      	bne.n	8000336 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000330:	4b11      	ldr	r3, [pc, #68]	@ (8000378 <_sbrk+0x64>)
 8000332:	4a12      	ldr	r2, [pc, #72]	@ (800037c <_sbrk+0x68>)
 8000334:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000336:	4b10      	ldr	r3, [pc, #64]	@ (8000378 <_sbrk+0x64>)
 8000338:	681a      	ldr	r2, [r3, #0]
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	4413      	add	r3, r2
 800033e:	693a      	ldr	r2, [r7, #16]
 8000340:	429a      	cmp	r2, r3
 8000342:	d207      	bcs.n	8000354 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000344:	f004 fff4 	bl	8005330 <__errno>
 8000348:	4603      	mov	r3, r0
 800034a:	220c      	movs	r2, #12
 800034c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800034e:	f04f 33ff 	mov.w	r3, #4294967295
 8000352:	e009      	b.n	8000368 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000354:	4b08      	ldr	r3, [pc, #32]	@ (8000378 <_sbrk+0x64>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800035a:	4b07      	ldr	r3, [pc, #28]	@ (8000378 <_sbrk+0x64>)
 800035c:	681a      	ldr	r2, [r3, #0]
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	4413      	add	r3, r2
 8000362:	4a05      	ldr	r2, [pc, #20]	@ (8000378 <_sbrk+0x64>)
 8000364:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000366:	68fb      	ldr	r3, [r7, #12]
}
 8000368:	4618      	mov	r0, r3
 800036a:	3718      	adds	r7, #24
 800036c:	46bd      	mov	sp, r7
 800036e:	bd80      	pop	{r7, pc}
 8000370:	20010000 	.word	0x20010000
 8000374:	00000400 	.word	0x00000400
 8000378:	20000188 	.word	0x20000188
 800037c:	20000e30 	.word	0x20000e30

08000380 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000380:	b480      	push	{r7}
 8000382:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000384:	bf00      	nop
 8000386:	46bd      	mov	sp, r7
 8000388:	bc80      	pop	{r7}
 800038a:	4770      	bx	lr

0800038c <MX_DMA_Init>:
 *      Author: CMY
 */
#include "main.h"

void MX_DMA_Init(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b082      	sub	sp, #8
 8000390:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000392:	4b0c      	ldr	r3, [pc, #48]	@ (80003c4 <MX_DMA_Init+0x38>)
 8000394:	695b      	ldr	r3, [r3, #20]
 8000396:	4a0b      	ldr	r2, [pc, #44]	@ (80003c4 <MX_DMA_Init+0x38>)
 8000398:	f043 0301 	orr.w	r3, r3, #1
 800039c:	6153      	str	r3, [r2, #20]
 800039e:	4b09      	ldr	r3, [pc, #36]	@ (80003c4 <MX_DMA_Init+0x38>)
 80003a0:	695b      	ldr	r3, [r3, #20]
 80003a2:	f003 0301 	and.w	r3, r3, #1
 80003a6:	607b      	str	r3, [r7, #4]
 80003a8:	687b      	ldr	r3, [r7, #4]

 // __HAL_RCC_DMA2_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80003aa:	2200      	movs	r2, #0
 80003ac:	2100      	movs	r1, #0
 80003ae:	200e      	movs	r0, #14
 80003b0:	f002 fa09 	bl	80027c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80003b4:	200e      	movs	r0, #14
 80003b6:	f002 fa22 	bl	80027fe <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel4_5_IRQn interrupt configuration */

  /*HAL_NVIC_SetPriority(DMA2_Channel4_5_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(DMA2_Channel4_5_IRQn);*/

}
 80003ba:	bf00      	nop
 80003bc:	3708      	adds	r7, #8
 80003be:	46bd      	mov	sp, r7
 80003c0:	bd80      	pop	{r7, pc}
 80003c2:	bf00      	nop
 80003c4:	40021000 	.word	0x40021000

080003c8 <FPGA_init>:


unsigned char fp_online;

void FPGA_init(void)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b082      	sub	sp, #8
 80003cc:	af00      	add	r7, sp, #0
	while(fp_online != 0x11)
 80003ce:	e01b      	b.n	8000408 <FPGA_init+0x40>
	{
		fp_online = Fpga_Read(0x00);
 80003d0:	2000      	movs	r0, #0
 80003d2:	f000 f825 	bl	8000420 <Fpga_Read>
 80003d6:	4603      	mov	r3, r0
 80003d8:	461a      	mov	r2, r3
 80003da:	4b10      	ldr	r3, [pc, #64]	@ (800041c <FPGA_init+0x54>)
 80003dc:	701a      	strb	r2, [r3, #0]

		for(unsigned short i=0;i<1000;i++)
 80003de:	2300      	movs	r3, #0
 80003e0:	80fb      	strh	r3, [r7, #6]
 80003e2:	e00d      	b.n	8000400 <FPGA_init+0x38>
		{
			for(unsigned short j=0;j<10000;j++);
 80003e4:	2300      	movs	r3, #0
 80003e6:	80bb      	strh	r3, [r7, #4]
 80003e8:	e002      	b.n	80003f0 <FPGA_init+0x28>
 80003ea:	88bb      	ldrh	r3, [r7, #4]
 80003ec:	3301      	adds	r3, #1
 80003ee:	80bb      	strh	r3, [r7, #4]
 80003f0:	88bb      	ldrh	r3, [r7, #4]
 80003f2:	f242 720f 	movw	r2, #9999	@ 0x270f
 80003f6:	4293      	cmp	r3, r2
 80003f8:	d9f7      	bls.n	80003ea <FPGA_init+0x22>
		for(unsigned short i=0;i<1000;i++)
 80003fa:	88fb      	ldrh	r3, [r7, #6]
 80003fc:	3301      	adds	r3, #1
 80003fe:	80fb      	strh	r3, [r7, #6]
 8000400:	88fb      	ldrh	r3, [r7, #6]
 8000402:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000406:	d3ed      	bcc.n	80003e4 <FPGA_init+0x1c>
	while(fp_online != 0x11)
 8000408:	4b04      	ldr	r3, [pc, #16]	@ (800041c <FPGA_init+0x54>)
 800040a:	781b      	ldrb	r3, [r3, #0]
 800040c:	2b11      	cmp	r3, #17
 800040e:	d1df      	bne.n	80003d0 <FPGA_init+0x8>
		}
	}
	Write_Fir_Parameter();
 8000410:	f000 fa7c 	bl	800090c <Write_Fir_Parameter>
}
 8000414:	bf00      	nop
 8000416:	3708      	adds	r7, #8
 8000418:	46bd      	mov	sp, r7
 800041a:	bd80      	pop	{r7, pc}
 800041c:	2000019c 	.word	0x2000019c

08000420 <Fpga_Read>:

unsigned char Fpga_Read(unsigned char addRead)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b086      	sub	sp, #24
 8000424:	af00      	add	r7, sp, #0
 8000426:	4603      	mov	r3, r0
 8000428:	71fb      	strb	r3, [r7, #7]
	unsigned char data,A,B,C,D,E,F,G,H;

	/*-----------------------地址&片选初始化，读时为输出----------------------------*/

	GPIO_InitStruct.Pin = ADDR0_Pin|ADDR1_Pin|ADDR2_Pin|ADDR3_Pin|MCU_CS_Pin;
 800042a:	4b8b      	ldr	r3, [pc, #556]	@ (8000658 <Fpga_Read+0x238>)
 800042c:	223d      	movs	r2, #61	@ 0x3d
 800042e:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000430:	4b89      	ldr	r3, [pc, #548]	@ (8000658 <Fpga_Read+0x238>)
 8000432:	2201      	movs	r2, #1
 8000434:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000436:	4b88      	ldr	r3, [pc, #544]	@ (8000658 <Fpga_Read+0x238>)
 8000438:	2200      	movs	r2, #0
 800043a:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800043c:	4b86      	ldr	r3, [pc, #536]	@ (8000658 <Fpga_Read+0x238>)
 800043e:	2203      	movs	r2, #3
 8000440:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000442:	4985      	ldr	r1, [pc, #532]	@ (8000658 <Fpga_Read+0x238>)
 8000444:	4885      	ldr	r0, [pc, #532]	@ (800065c <Fpga_Read+0x23c>)
 8000446:	f002 fe79 	bl	800313c <HAL_GPIO_Init>

	/*-----------------------读写初始化，读时为输出---------------------------------*/

	GPIO_InitStruct.Pin = MCU_WR_Pin;
 800044a:	4b83      	ldr	r3, [pc, #524]	@ (8000658 <Fpga_Read+0x238>)
 800044c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000450:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000452:	4b81      	ldr	r3, [pc, #516]	@ (8000658 <Fpga_Read+0x238>)
 8000454:	2201      	movs	r2, #1
 8000456:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000458:	4b7f      	ldr	r3, [pc, #508]	@ (8000658 <Fpga_Read+0x238>)
 800045a:	2200      	movs	r2, #0
 800045c:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800045e:	4b7e      	ldr	r3, [pc, #504]	@ (8000658 <Fpga_Read+0x238>)
 8000460:	2203      	movs	r2, #3
 8000462:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000464:	497c      	ldr	r1, [pc, #496]	@ (8000658 <Fpga_Read+0x238>)
 8000466:	487e      	ldr	r0, [pc, #504]	@ (8000660 <Fpga_Read+0x240>)
 8000468:	f002 fe68 	bl	800313c <HAL_GPIO_Init>

	/*-----------------------数据初始化，读时为输入---------------------------------*/

	GPIO_InitStruct.Pin = DATA1_Pin|DATA0_Pin;
 800046c:	4b7a      	ldr	r3, [pc, #488]	@ (8000658 <Fpga_Read+0x238>)
 800046e:	f241 0204 	movw	r2, #4100	@ 0x1004
 8000472:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000474:	4b78      	ldr	r3, [pc, #480]	@ (8000658 <Fpga_Read+0x238>)
 8000476:	2200      	movs	r2, #0
 8000478:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800047a:	4b77      	ldr	r3, [pc, #476]	@ (8000658 <Fpga_Read+0x238>)
 800047c:	2200      	movs	r2, #0
 800047e:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000480:	4b75      	ldr	r3, [pc, #468]	@ (8000658 <Fpga_Read+0x238>)
 8000482:	2203      	movs	r2, #3
 8000484:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000486:	4974      	ldr	r1, [pc, #464]	@ (8000658 <Fpga_Read+0x238>)
 8000488:	4875      	ldr	r0, [pc, #468]	@ (8000660 <Fpga_Read+0x240>)
 800048a:	f002 fe57 	bl	800313c <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = DATA2_Pin;
 800048e:	4b72      	ldr	r3, [pc, #456]	@ (8000658 <Fpga_Read+0x238>)
 8000490:	2208      	movs	r2, #8
 8000492:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000494:	4b70      	ldr	r3, [pc, #448]	@ (8000658 <Fpga_Read+0x238>)
 8000496:	2200      	movs	r2, #0
 8000498:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800049a:	4b6f      	ldr	r3, [pc, #444]	@ (8000658 <Fpga_Read+0x238>)
 800049c:	2200      	movs	r2, #0
 800049e:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004a0:	4b6d      	ldr	r3, [pc, #436]	@ (8000658 <Fpga_Read+0x238>)
 80004a2:	2202      	movs	r2, #2
 80004a4:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(DATA2_GPIO_Port, &GPIO_InitStruct);
 80004a6:	496c      	ldr	r1, [pc, #432]	@ (8000658 <Fpga_Read+0x238>)
 80004a8:	486d      	ldr	r0, [pc, #436]	@ (8000660 <Fpga_Read+0x240>)
 80004aa:	f002 fe47 	bl	800313c <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = DATA3_Pin|DATA4_Pin;
 80004ae:	4b6a      	ldr	r3, [pc, #424]	@ (8000658 <Fpga_Read+0x238>)
 80004b0:	2248      	movs	r2, #72	@ 0x48
 80004b2:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004b4:	4b68      	ldr	r3, [pc, #416]	@ (8000658 <Fpga_Read+0x238>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ba:	4b67      	ldr	r3, [pc, #412]	@ (8000658 <Fpga_Read+0x238>)
 80004bc:	2200      	movs	r2, #0
 80004be:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004c0:	4b65      	ldr	r3, [pc, #404]	@ (8000658 <Fpga_Read+0x238>)
 80004c2:	2203      	movs	r2, #3
 80004c4:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80004c6:	4964      	ldr	r1, [pc, #400]	@ (8000658 <Fpga_Read+0x238>)
 80004c8:	4866      	ldr	r0, [pc, #408]	@ (8000664 <Fpga_Read+0x244>)
 80004ca:	f002 fe37 	bl	800313c <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = DATA5_Pin|DATA6_Pin|DATA7_Pin;
 80004ce:	4b62      	ldr	r3, [pc, #392]	@ (8000658 <Fpga_Read+0x238>)
 80004d0:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80004d4:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004d6:	4b60      	ldr	r3, [pc, #384]	@ (8000658 <Fpga_Read+0x238>)
 80004d8:	2200      	movs	r2, #0
 80004da:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004dc:	4b5e      	ldr	r3, [pc, #376]	@ (8000658 <Fpga_Read+0x238>)
 80004de:	2200      	movs	r2, #0
 80004e0:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004e2:	4b5d      	ldr	r3, [pc, #372]	@ (8000658 <Fpga_Read+0x238>)
 80004e4:	2203      	movs	r2, #3
 80004e6:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004e8:	495b      	ldr	r1, [pc, #364]	@ (8000658 <Fpga_Read+0x238>)
 80004ea:	485f      	ldr	r0, [pc, #380]	@ (8000668 <Fpga_Read+0x248>)
 80004ec:	f002 fe26 	bl	800313c <HAL_GPIO_Init>


	HAL_GPIO_WritePin(MCU_WR_GPIO_Port,MCU_WR_Pin,GPIO_PIN_RESET);			//读:WR拉低
 80004f0:	2200      	movs	r2, #0
 80004f2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80004f6:	485a      	ldr	r0, [pc, #360]	@ (8000660 <Fpga_Read+0x240>)
 80004f8:	f002 ffcb 	bl	8003492 <HAL_GPIO_WritePin>

	if(addRead & 0x08)
 80004fc:	79fb      	ldrb	r3, [r7, #7]
 80004fe:	f003 0308 	and.w	r3, r3, #8
 8000502:	2b00      	cmp	r3, #0
 8000504:	d005      	beq.n	8000512 <Fpga_Read+0xf2>
		HAL_GPIO_WritePin(ADDR3_GPIO_Port,ADDR3_Pin,GPIO_PIN_SET);
 8000506:	2201      	movs	r2, #1
 8000508:	2120      	movs	r1, #32
 800050a:	4854      	ldr	r0, [pc, #336]	@ (800065c <Fpga_Read+0x23c>)
 800050c:	f002 ffc1 	bl	8003492 <HAL_GPIO_WritePin>
 8000510:	e004      	b.n	800051c <Fpga_Read+0xfc>
	else
		HAL_GPIO_WritePin(ADDR3_GPIO_Port,ADDR3_Pin,GPIO_PIN_RESET);
 8000512:	2200      	movs	r2, #0
 8000514:	2120      	movs	r1, #32
 8000516:	4851      	ldr	r0, [pc, #324]	@ (800065c <Fpga_Read+0x23c>)
 8000518:	f002 ffbb 	bl	8003492 <HAL_GPIO_WritePin>

	if(addRead & 0x04)
 800051c:	79fb      	ldrb	r3, [r7, #7]
 800051e:	f003 0304 	and.w	r3, r3, #4
 8000522:	2b00      	cmp	r3, #0
 8000524:	d005      	beq.n	8000532 <Fpga_Read+0x112>
		HAL_GPIO_WritePin(ADDR2_GPIO_Port,ADDR2_Pin,GPIO_PIN_SET);
 8000526:	2201      	movs	r2, #1
 8000528:	2110      	movs	r1, #16
 800052a:	484c      	ldr	r0, [pc, #304]	@ (800065c <Fpga_Read+0x23c>)
 800052c:	f002 ffb1 	bl	8003492 <HAL_GPIO_WritePin>
 8000530:	e004      	b.n	800053c <Fpga_Read+0x11c>
	else
		HAL_GPIO_WritePin(ADDR2_GPIO_Port,ADDR2_Pin,GPIO_PIN_RESET);		//例:addRead = d'6/b'0110,  ADDR3=0,ADDR2=1,ADDR1=1;ADDR0=0
 8000532:	2200      	movs	r2, #0
 8000534:	2110      	movs	r1, #16
 8000536:	4849      	ldr	r0, [pc, #292]	@ (800065c <Fpga_Read+0x23c>)
 8000538:	f002 ffab 	bl	8003492 <HAL_GPIO_WritePin>

	if(addRead & 0x02)
 800053c:	79fb      	ldrb	r3, [r7, #7]
 800053e:	f003 0302 	and.w	r3, r3, #2
 8000542:	2b00      	cmp	r3, #0
 8000544:	d005      	beq.n	8000552 <Fpga_Read+0x132>
		HAL_GPIO_WritePin(ADDR1_GPIO_Port,ADDR1_Pin,GPIO_PIN_SET);
 8000546:	2201      	movs	r2, #1
 8000548:	2108      	movs	r1, #8
 800054a:	4844      	ldr	r0, [pc, #272]	@ (800065c <Fpga_Read+0x23c>)
 800054c:	f002 ffa1 	bl	8003492 <HAL_GPIO_WritePin>
 8000550:	e004      	b.n	800055c <Fpga_Read+0x13c>
	else
		HAL_GPIO_WritePin(ADDR1_GPIO_Port,ADDR1_Pin,GPIO_PIN_RESET);
 8000552:	2200      	movs	r2, #0
 8000554:	2108      	movs	r1, #8
 8000556:	4841      	ldr	r0, [pc, #260]	@ (800065c <Fpga_Read+0x23c>)
 8000558:	f002 ff9b 	bl	8003492 <HAL_GPIO_WritePin>

	if(addRead & 0x01)
 800055c:	79fb      	ldrb	r3, [r7, #7]
 800055e:	f003 0301 	and.w	r3, r3, #1
 8000562:	2b00      	cmp	r3, #0
 8000564:	d005      	beq.n	8000572 <Fpga_Read+0x152>
		HAL_GPIO_WritePin(ADDR0_GPIO_Port,ADDR0_Pin,GPIO_PIN_SET);
 8000566:	2201      	movs	r2, #1
 8000568:	2104      	movs	r1, #4
 800056a:	483c      	ldr	r0, [pc, #240]	@ (800065c <Fpga_Read+0x23c>)
 800056c:	f002 ff91 	bl	8003492 <HAL_GPIO_WritePin>
 8000570:	e004      	b.n	800057c <Fpga_Read+0x15c>
	else
		HAL_GPIO_WritePin(ADDR0_GPIO_Port,ADDR0_Pin,GPIO_PIN_RESET);
 8000572:	2200      	movs	r2, #0
 8000574:	2104      	movs	r1, #4
 8000576:	4839      	ldr	r0, [pc, #228]	@ (800065c <Fpga_Read+0x23c>)
 8000578:	f002 ff8b 	bl	8003492 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(MCU_CS_GPIO_Port,MCU_CS_Pin,GPIO_PIN_RESET);			//片选拉低
 800057c:	2200      	movs	r2, #0
 800057e:	2101      	movs	r1, #1
 8000580:	4836      	ldr	r0, [pc, #216]	@ (800065c <Fpga_Read+0x23c>)
 8000582:	f002 ff86 	bl	8003492 <HAL_GPIO_WritePin>

	A = HAL_GPIO_ReadPin(DATA0_GPIO_Port,DATA0_Pin);
 8000586:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800058a:	4835      	ldr	r0, [pc, #212]	@ (8000660 <Fpga_Read+0x240>)
 800058c:	f002 ff6a 	bl	8003464 <HAL_GPIO_ReadPin>
 8000590:	4603      	mov	r3, r0
 8000592:	75fb      	strb	r3, [r7, #23]
	B = HAL_GPIO_ReadPin(DATA1_GPIO_Port,DATA1_Pin);
 8000594:	2104      	movs	r1, #4
 8000596:	4832      	ldr	r0, [pc, #200]	@ (8000660 <Fpga_Read+0x240>)
 8000598:	f002 ff64 	bl	8003464 <HAL_GPIO_ReadPin>
 800059c:	4603      	mov	r3, r0
 800059e:	75bb      	strb	r3, [r7, #22]
	C = HAL_GPIO_ReadPin(DATA2_GPIO_Port,DATA2_Pin);
 80005a0:	2108      	movs	r1, #8
 80005a2:	482f      	ldr	r0, [pc, #188]	@ (8000660 <Fpga_Read+0x240>)
 80005a4:	f002 ff5e 	bl	8003464 <HAL_GPIO_ReadPin>
 80005a8:	4603      	mov	r3, r0
 80005aa:	757b      	strb	r3, [r7, #21]
	D = HAL_GPIO_ReadPin(DATA3_GPIO_Port,DATA3_Pin);
 80005ac:	2108      	movs	r1, #8
 80005ae:	482d      	ldr	r0, [pc, #180]	@ (8000664 <Fpga_Read+0x244>)
 80005b0:	f002 ff58 	bl	8003464 <HAL_GPIO_ReadPin>
 80005b4:	4603      	mov	r3, r0
 80005b6:	753b      	strb	r3, [r7, #20]
	E = HAL_GPIO_ReadPin(DATA4_GPIO_Port,DATA4_Pin);
 80005b8:	2140      	movs	r1, #64	@ 0x40
 80005ba:	482a      	ldr	r0, [pc, #168]	@ (8000664 <Fpga_Read+0x244>)
 80005bc:	f002 ff52 	bl	8003464 <HAL_GPIO_ReadPin>
 80005c0:	4603      	mov	r3, r0
 80005c2:	74fb      	strb	r3, [r7, #19]
	F = HAL_GPIO_ReadPin(DATA5_GPIO_Port,DATA5_Pin);
 80005c4:	2120      	movs	r1, #32
 80005c6:	4828      	ldr	r0, [pc, #160]	@ (8000668 <Fpga_Read+0x248>)
 80005c8:	f002 ff4c 	bl	8003464 <HAL_GPIO_ReadPin>
 80005cc:	4603      	mov	r3, r0
 80005ce:	74bb      	strb	r3, [r7, #18]
	G = HAL_GPIO_ReadPin(DATA6_GPIO_Port,DATA6_Pin);
 80005d0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005d4:	4824      	ldr	r0, [pc, #144]	@ (8000668 <Fpga_Read+0x248>)
 80005d6:	f002 ff45 	bl	8003464 <HAL_GPIO_ReadPin>
 80005da:	4603      	mov	r3, r0
 80005dc:	747b      	strb	r3, [r7, #17]
	H = HAL_GPIO_ReadPin(DATA7_GPIO_Port,DATA7_Pin);
 80005de:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80005e2:	4821      	ldr	r0, [pc, #132]	@ (8000668 <Fpga_Read+0x248>)
 80005e4:	f002 ff3e 	bl	8003464 <HAL_GPIO_ReadPin>
 80005e8:	4603      	mov	r3, r0
 80005ea:	743b      	strb	r3, [r7, #16]

	HAL_GPIO_WritePin(MCU_CS_GPIO_Port,MCU_CS_Pin,GPIO_PIN_SET);			//片选拉高
 80005ec:	2201      	movs	r2, #1
 80005ee:	2101      	movs	r1, #1
 80005f0:	481a      	ldr	r0, [pc, #104]	@ (800065c <Fpga_Read+0x23c>)
 80005f2:	f002 ff4e 	bl	8003492 <HAL_GPIO_WritePin>

	data =  H<<7;
 80005f6:	7c3b      	ldrb	r3, [r7, #16]
 80005f8:	01db      	lsls	r3, r3, #7
 80005fa:	73fb      	strb	r3, [r7, #15]
	data += G<<6;
 80005fc:	7c7b      	ldrb	r3, [r7, #17]
 80005fe:	019b      	lsls	r3, r3, #6
 8000600:	b2da      	uxtb	r2, r3
 8000602:	7bfb      	ldrb	r3, [r7, #15]
 8000604:	4413      	add	r3, r2
 8000606:	73fb      	strb	r3, [r7, #15]
	data += F<<5;
 8000608:	7cbb      	ldrb	r3, [r7, #18]
 800060a:	015b      	lsls	r3, r3, #5
 800060c:	b2da      	uxtb	r2, r3
 800060e:	7bfb      	ldrb	r3, [r7, #15]
 8000610:	4413      	add	r3, r2
 8000612:	73fb      	strb	r3, [r7, #15]
	data += E<<4;
 8000614:	7cfb      	ldrb	r3, [r7, #19]
 8000616:	011b      	lsls	r3, r3, #4
 8000618:	b2da      	uxtb	r2, r3
 800061a:	7bfb      	ldrb	r3, [r7, #15]
 800061c:	4413      	add	r3, r2
 800061e:	73fb      	strb	r3, [r7, #15]
	data += D<<3;
 8000620:	7d3b      	ldrb	r3, [r7, #20]
 8000622:	00db      	lsls	r3, r3, #3
 8000624:	b2da      	uxtb	r2, r3
 8000626:	7bfb      	ldrb	r3, [r7, #15]
 8000628:	4413      	add	r3, r2
 800062a:	73fb      	strb	r3, [r7, #15]
	data += C<<2;
 800062c:	7d7b      	ldrb	r3, [r7, #21]
 800062e:	009b      	lsls	r3, r3, #2
 8000630:	b2da      	uxtb	r2, r3
 8000632:	7bfb      	ldrb	r3, [r7, #15]
 8000634:	4413      	add	r3, r2
 8000636:	73fb      	strb	r3, [r7, #15]
	data += B<<1;
 8000638:	7dbb      	ldrb	r3, [r7, #22]
 800063a:	005b      	lsls	r3, r3, #1
 800063c:	b2da      	uxtb	r2, r3
 800063e:	7bfb      	ldrb	r3, [r7, #15]
 8000640:	4413      	add	r3, r2
 8000642:	73fb      	strb	r3, [r7, #15]
	data += A;
 8000644:	7bfa      	ldrb	r2, [r7, #15]
 8000646:	7dfb      	ldrb	r3, [r7, #23]
 8000648:	4413      	add	r3, r2
 800064a:	73fb      	strb	r3, [r7, #15]

	return data;
 800064c:	7bfb      	ldrb	r3, [r7, #15]
}
 800064e:	4618      	mov	r0, r3
 8000650:	3718      	adds	r7, #24
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	2000018c 	.word	0x2000018c
 800065c:	40011800 	.word	0x40011800
 8000660:	40010800 	.word	0x40010800
 8000664:	40011400 	.word	0x40011400
 8000668:	40010c00 	.word	0x40010c00

0800066c <Fpga_Write>:

void Fpga_Write(unsigned char addWrite,unsigned char Data)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
 8000672:	4603      	mov	r3, r0
 8000674:	460a      	mov	r2, r1
 8000676:	71fb      	strb	r3, [r7, #7]
 8000678:	4613      	mov	r3, r2
 800067a:	71bb      	strb	r3, [r7, #6]

	/*------------------------------数据，写时为输出---------------------------------*/

	GPIO_InitStruct.Pin = DATA1_Pin|DATA0_Pin|DATA2_Pin;
 800067c:	4b9e      	ldr	r3, [pc, #632]	@ (80008f8 <Fpga_Write+0x28c>)
 800067e:	f241 020c 	movw	r2, #4108	@ 0x100c
 8000682:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000684:	4b9c      	ldr	r3, [pc, #624]	@ (80008f8 <Fpga_Write+0x28c>)
 8000686:	2201      	movs	r2, #1
 8000688:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068a:	4b9b      	ldr	r3, [pc, #620]	@ (80008f8 <Fpga_Write+0x28c>)
 800068c:	2200      	movs	r2, #0
 800068e:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000690:	4b99      	ldr	r3, [pc, #612]	@ (80008f8 <Fpga_Write+0x28c>)
 8000692:	2203      	movs	r2, #3
 8000694:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000696:	4998      	ldr	r1, [pc, #608]	@ (80008f8 <Fpga_Write+0x28c>)
 8000698:	4898      	ldr	r0, [pc, #608]	@ (80008fc <Fpga_Write+0x290>)
 800069a:	f002 fd4f 	bl	800313c <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = DATA3_Pin|DATA4_Pin;
 800069e:	4b96      	ldr	r3, [pc, #600]	@ (80008f8 <Fpga_Write+0x28c>)
 80006a0:	2248      	movs	r2, #72	@ 0x48
 80006a2:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a4:	4b94      	ldr	r3, [pc, #592]	@ (80008f8 <Fpga_Write+0x28c>)
 80006a6:	2201      	movs	r2, #1
 80006a8:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006aa:	4b93      	ldr	r3, [pc, #588]	@ (80008f8 <Fpga_Write+0x28c>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006b0:	4b91      	ldr	r3, [pc, #580]	@ (80008f8 <Fpga_Write+0x28c>)
 80006b2:	2203      	movs	r2, #3
 80006b4:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006b6:	4990      	ldr	r1, [pc, #576]	@ (80008f8 <Fpga_Write+0x28c>)
 80006b8:	4891      	ldr	r0, [pc, #580]	@ (8000900 <Fpga_Write+0x294>)
 80006ba:	f002 fd3f 	bl	800313c <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = DATA5_Pin|DATA6_Pin|DATA7_Pin;
 80006be:	4b8e      	ldr	r3, [pc, #568]	@ (80008f8 <Fpga_Write+0x28c>)
 80006c0:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80006c4:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c6:	4b8c      	ldr	r3, [pc, #560]	@ (80008f8 <Fpga_Write+0x28c>)
 80006c8:	2201      	movs	r2, #1
 80006ca:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006cc:	4b8a      	ldr	r3, [pc, #552]	@ (80008f8 <Fpga_Write+0x28c>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006d2:	4b89      	ldr	r3, [pc, #548]	@ (80008f8 <Fpga_Write+0x28c>)
 80006d4:	2203      	movs	r2, #3
 80006d6:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006d8:	4987      	ldr	r1, [pc, #540]	@ (80008f8 <Fpga_Write+0x28c>)
 80006da:	488a      	ldr	r0, [pc, #552]	@ (8000904 <Fpga_Write+0x298>)
 80006dc:	f002 fd2e 	bl	800313c <HAL_GPIO_Init>

	HAL_GPIO_WritePin(MCU_WR_GPIO_Port,MCU_WR_Pin,GPIO_PIN_SET);			//写:WR拉高
 80006e0:	2201      	movs	r2, #1
 80006e2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80006e6:	4885      	ldr	r0, [pc, #532]	@ (80008fc <Fpga_Write+0x290>)
 80006e8:	f002 fed3 	bl	8003492 <HAL_GPIO_WritePin>

	/*----------------------4位地址--------------------------------*/
	if(addWrite & 0x08)
 80006ec:	79fb      	ldrb	r3, [r7, #7]
 80006ee:	f003 0308 	and.w	r3, r3, #8
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d005      	beq.n	8000702 <Fpga_Write+0x96>
		HAL_GPIO_WritePin(ADDR3_GPIO_Port,ADDR3_Pin,GPIO_PIN_SET);
 80006f6:	2201      	movs	r2, #1
 80006f8:	2120      	movs	r1, #32
 80006fa:	4883      	ldr	r0, [pc, #524]	@ (8000908 <Fpga_Write+0x29c>)
 80006fc:	f002 fec9 	bl	8003492 <HAL_GPIO_WritePin>
 8000700:	e004      	b.n	800070c <Fpga_Write+0xa0>
	else
		HAL_GPIO_WritePin(ADDR3_GPIO_Port,ADDR3_Pin,GPIO_PIN_RESET);
 8000702:	2200      	movs	r2, #0
 8000704:	2120      	movs	r1, #32
 8000706:	4880      	ldr	r0, [pc, #512]	@ (8000908 <Fpga_Write+0x29c>)
 8000708:	f002 fec3 	bl	8003492 <HAL_GPIO_WritePin>

	if(addWrite & 0x04)
 800070c:	79fb      	ldrb	r3, [r7, #7]
 800070e:	f003 0304 	and.w	r3, r3, #4
 8000712:	2b00      	cmp	r3, #0
 8000714:	d005      	beq.n	8000722 <Fpga_Write+0xb6>
		HAL_GPIO_WritePin(ADDR2_GPIO_Port,ADDR2_Pin,GPIO_PIN_SET);
 8000716:	2201      	movs	r2, #1
 8000718:	2110      	movs	r1, #16
 800071a:	487b      	ldr	r0, [pc, #492]	@ (8000908 <Fpga_Write+0x29c>)
 800071c:	f002 feb9 	bl	8003492 <HAL_GPIO_WritePin>
 8000720:	e004      	b.n	800072c <Fpga_Write+0xc0>
	else
		HAL_GPIO_WritePin(ADDR2_GPIO_Port,ADDR2_Pin,GPIO_PIN_RESET);		//例:addRead = d'6/b'0110,  ADDR3=0,ADDR2=1,ADDR1=1;ADDR0=0
 8000722:	2200      	movs	r2, #0
 8000724:	2110      	movs	r1, #16
 8000726:	4878      	ldr	r0, [pc, #480]	@ (8000908 <Fpga_Write+0x29c>)
 8000728:	f002 feb3 	bl	8003492 <HAL_GPIO_WritePin>

	if(addWrite & 0x02)
 800072c:	79fb      	ldrb	r3, [r7, #7]
 800072e:	f003 0302 	and.w	r3, r3, #2
 8000732:	2b00      	cmp	r3, #0
 8000734:	d005      	beq.n	8000742 <Fpga_Write+0xd6>
		HAL_GPIO_WritePin(ADDR1_GPIO_Port,ADDR1_Pin,GPIO_PIN_SET);
 8000736:	2201      	movs	r2, #1
 8000738:	2108      	movs	r1, #8
 800073a:	4873      	ldr	r0, [pc, #460]	@ (8000908 <Fpga_Write+0x29c>)
 800073c:	f002 fea9 	bl	8003492 <HAL_GPIO_WritePin>
 8000740:	e004      	b.n	800074c <Fpga_Write+0xe0>
	else
		HAL_GPIO_WritePin(ADDR1_GPIO_Port,ADDR1_Pin,GPIO_PIN_RESET);
 8000742:	2200      	movs	r2, #0
 8000744:	2108      	movs	r1, #8
 8000746:	4870      	ldr	r0, [pc, #448]	@ (8000908 <Fpga_Write+0x29c>)
 8000748:	f002 fea3 	bl	8003492 <HAL_GPIO_WritePin>

	if(addWrite & 0x01)
 800074c:	79fb      	ldrb	r3, [r7, #7]
 800074e:	f003 0301 	and.w	r3, r3, #1
 8000752:	2b00      	cmp	r3, #0
 8000754:	d005      	beq.n	8000762 <Fpga_Write+0xf6>
		HAL_GPIO_WritePin(ADDR0_GPIO_Port,ADDR0_Pin,GPIO_PIN_SET);
 8000756:	2201      	movs	r2, #1
 8000758:	2104      	movs	r1, #4
 800075a:	486b      	ldr	r0, [pc, #428]	@ (8000908 <Fpga_Write+0x29c>)
 800075c:	f002 fe99 	bl	8003492 <HAL_GPIO_WritePin>
 8000760:	e004      	b.n	800076c <Fpga_Write+0x100>
	else
		HAL_GPIO_WritePin(ADDR0_GPIO_Port,ADDR0_Pin,GPIO_PIN_RESET);
 8000762:	2200      	movs	r2, #0
 8000764:	2104      	movs	r1, #4
 8000766:	4868      	ldr	r0, [pc, #416]	@ (8000908 <Fpga_Write+0x29c>)
 8000768:	f002 fe93 	bl	8003492 <HAL_GPIO_WritePin>

	/*----------------------8位数据--------------------------------*/
	if(Data & 0x80)
 800076c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000770:	2b00      	cmp	r3, #0
 8000772:	da06      	bge.n	8000782 <Fpga_Write+0x116>
		HAL_GPIO_WritePin(DATA7_GPIO_Port,DATA7_Pin,GPIO_PIN_SET);
 8000774:	2201      	movs	r2, #1
 8000776:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800077a:	4862      	ldr	r0, [pc, #392]	@ (8000904 <Fpga_Write+0x298>)
 800077c:	f002 fe89 	bl	8003492 <HAL_GPIO_WritePin>
 8000780:	e005      	b.n	800078e <Fpga_Write+0x122>
	else
		HAL_GPIO_WritePin(DATA7_GPIO_Port,DATA7_Pin,GPIO_PIN_RESET);
 8000782:	2200      	movs	r2, #0
 8000784:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000788:	485e      	ldr	r0, [pc, #376]	@ (8000904 <Fpga_Write+0x298>)
 800078a:	f002 fe82 	bl	8003492 <HAL_GPIO_WritePin>

	if(Data & 0x40)
 800078e:	79bb      	ldrb	r3, [r7, #6]
 8000790:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000794:	2b00      	cmp	r3, #0
 8000796:	d006      	beq.n	80007a6 <Fpga_Write+0x13a>
		HAL_GPIO_WritePin(DATA6_GPIO_Port,DATA6_Pin,GPIO_PIN_SET);
 8000798:	2201      	movs	r2, #1
 800079a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800079e:	4859      	ldr	r0, [pc, #356]	@ (8000904 <Fpga_Write+0x298>)
 80007a0:	f002 fe77 	bl	8003492 <HAL_GPIO_WritePin>
 80007a4:	e005      	b.n	80007b2 <Fpga_Write+0x146>
	else
		HAL_GPIO_WritePin(DATA6_GPIO_Port,DATA6_Pin,GPIO_PIN_RESET);
 80007a6:	2200      	movs	r2, #0
 80007a8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80007ac:	4855      	ldr	r0, [pc, #340]	@ (8000904 <Fpga_Write+0x298>)
 80007ae:	f002 fe70 	bl	8003492 <HAL_GPIO_WritePin>

	if(Data & 0x20)
 80007b2:	79bb      	ldrb	r3, [r7, #6]
 80007b4:	f003 0320 	and.w	r3, r3, #32
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d005      	beq.n	80007c8 <Fpga_Write+0x15c>
		HAL_GPIO_WritePin(DATA5_GPIO_Port,DATA5_Pin,GPIO_PIN_SET);
 80007bc:	2201      	movs	r2, #1
 80007be:	2120      	movs	r1, #32
 80007c0:	4850      	ldr	r0, [pc, #320]	@ (8000904 <Fpga_Write+0x298>)
 80007c2:	f002 fe66 	bl	8003492 <HAL_GPIO_WritePin>
 80007c6:	e004      	b.n	80007d2 <Fpga_Write+0x166>
	else
		HAL_GPIO_WritePin(DATA5_GPIO_Port,DATA5_Pin,GPIO_PIN_RESET);
 80007c8:	2200      	movs	r2, #0
 80007ca:	2120      	movs	r1, #32
 80007cc:	484d      	ldr	r0, [pc, #308]	@ (8000904 <Fpga_Write+0x298>)
 80007ce:	f002 fe60 	bl	8003492 <HAL_GPIO_WritePin>

	if(Data & 0x10)
 80007d2:	79bb      	ldrb	r3, [r7, #6]
 80007d4:	f003 0310 	and.w	r3, r3, #16
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d005      	beq.n	80007e8 <Fpga_Write+0x17c>
		HAL_GPIO_WritePin(DATA4_GPIO_Port,DATA4_Pin,GPIO_PIN_SET);
 80007dc:	2201      	movs	r2, #1
 80007de:	2140      	movs	r1, #64	@ 0x40
 80007e0:	4847      	ldr	r0, [pc, #284]	@ (8000900 <Fpga_Write+0x294>)
 80007e2:	f002 fe56 	bl	8003492 <HAL_GPIO_WritePin>
 80007e6:	e004      	b.n	80007f2 <Fpga_Write+0x186>
	else
		HAL_GPIO_WritePin(DATA4_GPIO_Port,DATA4_Pin,GPIO_PIN_RESET);
 80007e8:	2200      	movs	r2, #0
 80007ea:	2140      	movs	r1, #64	@ 0x40
 80007ec:	4844      	ldr	r0, [pc, #272]	@ (8000900 <Fpga_Write+0x294>)
 80007ee:	f002 fe50 	bl	8003492 <HAL_GPIO_WritePin>



	if(Data & 0x08)
 80007f2:	79bb      	ldrb	r3, [r7, #6]
 80007f4:	f003 0308 	and.w	r3, r3, #8
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d005      	beq.n	8000808 <Fpga_Write+0x19c>
		HAL_GPIO_WritePin(DATA3_GPIO_Port,DATA3_Pin,GPIO_PIN_SET);
 80007fc:	2201      	movs	r2, #1
 80007fe:	2108      	movs	r1, #8
 8000800:	483f      	ldr	r0, [pc, #252]	@ (8000900 <Fpga_Write+0x294>)
 8000802:	f002 fe46 	bl	8003492 <HAL_GPIO_WritePin>
 8000806:	e004      	b.n	8000812 <Fpga_Write+0x1a6>
	else
		HAL_GPIO_WritePin(DATA3_GPIO_Port,DATA3_Pin,GPIO_PIN_RESET);
 8000808:	2200      	movs	r2, #0
 800080a:	2108      	movs	r1, #8
 800080c:	483c      	ldr	r0, [pc, #240]	@ (8000900 <Fpga_Write+0x294>)
 800080e:	f002 fe40 	bl	8003492 <HAL_GPIO_WritePin>

	if(Data & 0x04)
 8000812:	79bb      	ldrb	r3, [r7, #6]
 8000814:	f003 0304 	and.w	r3, r3, #4
 8000818:	2b00      	cmp	r3, #0
 800081a:	d005      	beq.n	8000828 <Fpga_Write+0x1bc>
		HAL_GPIO_WritePin(DATA2_GPIO_Port,DATA2_Pin,GPIO_PIN_SET);
 800081c:	2201      	movs	r2, #1
 800081e:	2108      	movs	r1, #8
 8000820:	4836      	ldr	r0, [pc, #216]	@ (80008fc <Fpga_Write+0x290>)
 8000822:	f002 fe36 	bl	8003492 <HAL_GPIO_WritePin>
 8000826:	e004      	b.n	8000832 <Fpga_Write+0x1c6>
	else
		HAL_GPIO_WritePin(DATA2_GPIO_Port,DATA2_Pin,GPIO_PIN_RESET);
 8000828:	2200      	movs	r2, #0
 800082a:	2108      	movs	r1, #8
 800082c:	4833      	ldr	r0, [pc, #204]	@ (80008fc <Fpga_Write+0x290>)
 800082e:	f002 fe30 	bl	8003492 <HAL_GPIO_WritePin>

	if(Data & 0x02)
 8000832:	79bb      	ldrb	r3, [r7, #6]
 8000834:	f003 0302 	and.w	r3, r3, #2
 8000838:	2b00      	cmp	r3, #0
 800083a:	d005      	beq.n	8000848 <Fpga_Write+0x1dc>
		HAL_GPIO_WritePin(DATA1_GPIO_Port,DATA1_Pin,GPIO_PIN_SET);
 800083c:	2201      	movs	r2, #1
 800083e:	2104      	movs	r1, #4
 8000840:	482e      	ldr	r0, [pc, #184]	@ (80008fc <Fpga_Write+0x290>)
 8000842:	f002 fe26 	bl	8003492 <HAL_GPIO_WritePin>
 8000846:	e004      	b.n	8000852 <Fpga_Write+0x1e6>
	else
		HAL_GPIO_WritePin(DATA1_GPIO_Port,DATA1_Pin,GPIO_PIN_RESET);
 8000848:	2200      	movs	r2, #0
 800084a:	2104      	movs	r1, #4
 800084c:	482b      	ldr	r0, [pc, #172]	@ (80008fc <Fpga_Write+0x290>)
 800084e:	f002 fe20 	bl	8003492 <HAL_GPIO_WritePin>

	if(Data & 0x01)
 8000852:	79bb      	ldrb	r3, [r7, #6]
 8000854:	f003 0301 	and.w	r3, r3, #1
 8000858:	2b00      	cmp	r3, #0
 800085a:	d006      	beq.n	800086a <Fpga_Write+0x1fe>
		HAL_GPIO_WritePin(DATA0_GPIO_Port,DATA0_Pin,GPIO_PIN_SET);
 800085c:	2201      	movs	r2, #1
 800085e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000862:	4826      	ldr	r0, [pc, #152]	@ (80008fc <Fpga_Write+0x290>)
 8000864:	f002 fe15 	bl	8003492 <HAL_GPIO_WritePin>
 8000868:	e005      	b.n	8000876 <Fpga_Write+0x20a>
	else
		HAL_GPIO_WritePin(DATA0_GPIO_Port,DATA0_Pin,GPIO_PIN_RESET);
 800086a:	2200      	movs	r2, #0
 800086c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000870:	4822      	ldr	r0, [pc, #136]	@ (80008fc <Fpga_Write+0x290>)
 8000872:	f002 fe0e 	bl	8003492 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(MCU_CS_GPIO_Port,MCU_CS_Pin,GPIO_PIN_RESET);			//片选拉低
 8000876:	2200      	movs	r2, #0
 8000878:	2101      	movs	r1, #1
 800087a:	4823      	ldr	r0, [pc, #140]	@ (8000908 <Fpga_Write+0x29c>)
 800087c:	f002 fe09 	bl	8003492 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(MCU_CS_GPIO_Port,MCU_CS_Pin,GPIO_PIN_SET);			//片选拉高
 8000880:	2201      	movs	r2, #1
 8000882:	2101      	movs	r1, #1
 8000884:	4820      	ldr	r0, [pc, #128]	@ (8000908 <Fpga_Write+0x29c>)
 8000886:	f002 fe04 	bl	8003492 <HAL_GPIO_WritePin>


	GPIO_InitStruct.Pin = DATA1_Pin|DATA0_Pin|DATA2_Pin;
 800088a:	4b1b      	ldr	r3, [pc, #108]	@ (80008f8 <Fpga_Write+0x28c>)
 800088c:	f241 020c 	movw	r2, #4108	@ 0x100c
 8000890:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000892:	4b19      	ldr	r3, [pc, #100]	@ (80008f8 <Fpga_Write+0x28c>)
 8000894:	2200      	movs	r2, #0
 8000896:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000898:	4b17      	ldr	r3, [pc, #92]	@ (80008f8 <Fpga_Write+0x28c>)
 800089a:	2200      	movs	r2, #0
 800089c:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800089e:	4b16      	ldr	r3, [pc, #88]	@ (80008f8 <Fpga_Write+0x28c>)
 80008a0:	2203      	movs	r2, #3
 80008a2:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a4:	4914      	ldr	r1, [pc, #80]	@ (80008f8 <Fpga_Write+0x28c>)
 80008a6:	4815      	ldr	r0, [pc, #84]	@ (80008fc <Fpga_Write+0x290>)
 80008a8:	f002 fc48 	bl	800313c <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = DATA3_Pin|DATA4_Pin;
 80008ac:	4b12      	ldr	r3, [pc, #72]	@ (80008f8 <Fpga_Write+0x28c>)
 80008ae:	2248      	movs	r2, #72	@ 0x48
 80008b0:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008b2:	4b11      	ldr	r3, [pc, #68]	@ (80008f8 <Fpga_Write+0x28c>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b8:	4b0f      	ldr	r3, [pc, #60]	@ (80008f8 <Fpga_Write+0x28c>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008be:	4b0e      	ldr	r3, [pc, #56]	@ (80008f8 <Fpga_Write+0x28c>)
 80008c0:	2203      	movs	r2, #3
 80008c2:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008c4:	490c      	ldr	r1, [pc, #48]	@ (80008f8 <Fpga_Write+0x28c>)
 80008c6:	480e      	ldr	r0, [pc, #56]	@ (8000900 <Fpga_Write+0x294>)
 80008c8:	f002 fc38 	bl	800313c <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = DATA5_Pin|DATA6_Pin|DATA7_Pin;
 80008cc:	4b0a      	ldr	r3, [pc, #40]	@ (80008f8 <Fpga_Write+0x28c>)
 80008ce:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80008d2:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008d4:	4b08      	ldr	r3, [pc, #32]	@ (80008f8 <Fpga_Write+0x28c>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008da:	4b07      	ldr	r3, [pc, #28]	@ (80008f8 <Fpga_Write+0x28c>)
 80008dc:	2200      	movs	r2, #0
 80008de:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008e0:	4b05      	ldr	r3, [pc, #20]	@ (80008f8 <Fpga_Write+0x28c>)
 80008e2:	2203      	movs	r2, #3
 80008e4:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008e6:	4904      	ldr	r1, [pc, #16]	@ (80008f8 <Fpga_Write+0x28c>)
 80008e8:	4806      	ldr	r0, [pc, #24]	@ (8000904 <Fpga_Write+0x298>)
 80008ea:	f002 fc27 	bl	800313c <HAL_GPIO_Init>
}
 80008ee:	bf00      	nop
 80008f0:	3708      	adds	r7, #8
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	2000018c 	.word	0x2000018c
 80008fc:	40010800 	.word	0x40010800
 8000900:	40011400 	.word	0x40011400
 8000904:	40010c00 	.word	0x40010c00
 8000908:	40011800 	.word	0x40011800

0800090c <Write_Fir_Parameter>:

#define Filter_Order 		255

void Write_Fir_Parameter(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b084      	sub	sp, #16
 8000910:	af00      	add	r7, sp, #0
    unsigned short i,j,t,d;
	unsigned char init_cn;
	unsigned char sum1,sum2;

    Fpga_Write(7,Filter_Order >> 8);
 8000912:	2100      	movs	r1, #0
 8000914:	2007      	movs	r0, #7
 8000916:	f7ff fea9 	bl	800066c <Fpga_Write>
    Fpga_Write(8,(Filter_Order & 0x00FF));
 800091a:	21ff      	movs	r1, #255	@ 0xff
 800091c:	2008      	movs	r0, #8
 800091e:	f7ff fea5 	bl	800066c <Fpga_Write>

	init_cn = 0;
 8000922:	2300      	movs	r3, #0
 8000924:	727b      	strb	r3, [r7, #9]
	while(init_cn < 10)
 8000926:	e0a1      	b.n	8000a6c <Write_Fir_Parameter+0x160>
	{
		sum1 = 0;
 8000928:	2300      	movs	r3, #0
 800092a:	723b      	strb	r3, [r7, #8]
		sum2 = 0;
 800092c:	2300      	movs	r3, #0
 800092e:	71fb      	strb	r3, [r7, #7]

		t = 0x80;
 8000930:	2380      	movs	r3, #128	@ 0x80
 8000932:	817b      	strh	r3, [r7, #10]
		for(i=0; i<Filter_Order;)
 8000934:	2300      	movs	r3, #0
 8000936:	81fb      	strh	r3, [r7, #14]
 8000938:	e04d      	b.n	80009d6 <Write_Fir_Parameter+0xca>
		{
			for(j=0; j<32; j++,i++)
 800093a:	2300      	movs	r3, #0
 800093c:	81bb      	strh	r3, [r7, #12]
 800093e:	e044      	b.n	80009ca <Write_Fir_Parameter+0xbe>
			{
				if(i < Filter_Order)
 8000940:	89fb      	ldrh	r3, [r7, #14]
 8000942:	2bfe      	cmp	r3, #254	@ 0xfe
 8000944:	d827      	bhi.n	8000996 <Write_Fir_Parameter+0x8a>
				{
					Fpga_Write(0x09,j);
 8000946:	89bb      	ldrh	r3, [r7, #12]
 8000948:	b2db      	uxtb	r3, r3
 800094a:	4619      	mov	r1, r3
 800094c:	2009      	movs	r0, #9
 800094e:	f7ff fe8d 	bl	800066c <Fpga_Write>
					Fpga_Write(0x0A,FIR_Parameter[i] >> 8);
 8000952:	89fb      	ldrh	r3, [r7, #14]
 8000954:	4a4a      	ldr	r2, [pc, #296]	@ (8000a80 <Write_Fir_Parameter+0x174>)
 8000956:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800095a:	121b      	asrs	r3, r3, #8
 800095c:	b2db      	uxtb	r3, r3
 800095e:	4619      	mov	r1, r3
 8000960:	200a      	movs	r0, #10
 8000962:	f7ff fe83 	bl	800066c <Fpga_Write>
					Fpga_Write(0x0B,FIR_Parameter[i]);
 8000966:	89fb      	ldrh	r3, [r7, #14]
 8000968:	4a45      	ldr	r2, [pc, #276]	@ (8000a80 <Write_Fir_Parameter+0x174>)
 800096a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800096e:	b2db      	uxtb	r3, r3
 8000970:	4619      	mov	r1, r3
 8000972:	200b      	movs	r0, #11
 8000974:	f7ff fe7a 	bl	800066c <Fpga_Write>
					Fpga_Write(0x0C,t);		//Fir_Parameter_Ram_WR(MSB),Fir_Parameter_Ram_sel
 8000978:	897b      	ldrh	r3, [r7, #10]
 800097a:	b2db      	uxtb	r3, r3
 800097c:	4619      	mov	r1, r3
 800097e:	200c      	movs	r0, #12
 8000980:	f7ff fe74 	bl	800066c <Fpga_Write>
					sum1 += FIR_Parameter[i];
 8000984:	89fb      	ldrh	r3, [r7, #14]
 8000986:	4a3e      	ldr	r2, [pc, #248]	@ (8000a80 <Write_Fir_Parameter+0x174>)
 8000988:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800098c:	b2da      	uxtb	r2, r3
 800098e:	7a3b      	ldrb	r3, [r7, #8]
 8000990:	4413      	add	r3, r2
 8000992:	723b      	strb	r3, [r7, #8]
 8000994:	e013      	b.n	80009be <Write_Fir_Parameter+0xb2>
				}
				else
				{
					Fpga_Write(0x09,j);
 8000996:	89bb      	ldrh	r3, [r7, #12]
 8000998:	b2db      	uxtb	r3, r3
 800099a:	4619      	mov	r1, r3
 800099c:	2009      	movs	r0, #9
 800099e:	f7ff fe65 	bl	800066c <Fpga_Write>
					Fpga_Write(0x0A,0);
 80009a2:	2100      	movs	r1, #0
 80009a4:	200a      	movs	r0, #10
 80009a6:	f7ff fe61 	bl	800066c <Fpga_Write>
					Fpga_Write(0x0B,0);
 80009aa:	2100      	movs	r1, #0
 80009ac:	200b      	movs	r0, #11
 80009ae:	f7ff fe5d 	bl	800066c <Fpga_Write>
					Fpga_Write(0x0C,t);		//Fir_Parameter_Ram_WR(MSB),Fir_Parameter_Ram_sel
 80009b2:	897b      	ldrh	r3, [r7, #10]
 80009b4:	b2db      	uxtb	r3, r3
 80009b6:	4619      	mov	r1, r3
 80009b8:	200c      	movs	r0, #12
 80009ba:	f7ff fe57 	bl	800066c <Fpga_Write>
			for(j=0; j<32; j++,i++)
 80009be:	89bb      	ldrh	r3, [r7, #12]
 80009c0:	3301      	adds	r3, #1
 80009c2:	81bb      	strh	r3, [r7, #12]
 80009c4:	89fb      	ldrh	r3, [r7, #14]
 80009c6:	3301      	adds	r3, #1
 80009c8:	81fb      	strh	r3, [r7, #14]
 80009ca:	89bb      	ldrh	r3, [r7, #12]
 80009cc:	2b1f      	cmp	r3, #31
 80009ce:	d9b7      	bls.n	8000940 <Write_Fir_Parameter+0x34>
				}
			}
			t++;
 80009d0:	897b      	ldrh	r3, [r7, #10]
 80009d2:	3301      	adds	r3, #1
 80009d4:	817b      	strh	r3, [r7, #10]
		for(i=0; i<Filter_Order;)
 80009d6:	89fb      	ldrh	r3, [r7, #14]
 80009d8:	2bfe      	cmp	r3, #254	@ 0xfe
 80009da:	d9ae      	bls.n	800093a <Write_Fir_Parameter+0x2e>
		}

		t = 0x00;
 80009dc:	2300      	movs	r3, #0
 80009de:	817b      	strh	r3, [r7, #10]
		for(i=0; i<Filter_Order;)
 80009e0:	2300      	movs	r3, #0
 80009e2:	81fb      	strh	r3, [r7, #14]
 80009e4:	e035      	b.n	8000a52 <Write_Fir_Parameter+0x146>
		{
			for(j=0; j<32; j++,i++)
 80009e6:	2300      	movs	r3, #0
 80009e8:	81bb      	strh	r3, [r7, #12]
 80009ea:	e02c      	b.n	8000a46 <Write_Fir_Parameter+0x13a>
			{
				if(i < Filter_Order)
 80009ec:	89fb      	ldrh	r3, [r7, #14]
 80009ee:	2bfe      	cmp	r3, #254	@ 0xfe
 80009f0:	d821      	bhi.n	8000a36 <Write_Fir_Parameter+0x12a>
				{
					Fpga_Write(0x09,j);
 80009f2:	89bb      	ldrh	r3, [r7, #12]
 80009f4:	b2db      	uxtb	r3, r3
 80009f6:	4619      	mov	r1, r3
 80009f8:	2009      	movs	r0, #9
 80009fa:	f7ff fe37 	bl	800066c <Fpga_Write>
					Fpga_Write(0x0C,t);		//Fir_Parameter_Ram_WR(MSB),Fir_Parameter_Ram_sel
 80009fe:	897b      	ldrh	r3, [r7, #10]
 8000a00:	b2db      	uxtb	r3, r3
 8000a02:	4619      	mov	r1, r3
 8000a04:	200c      	movs	r0, #12
 8000a06:	f7ff fe31 	bl	800066c <Fpga_Write>
					d = Fpga_Read(0x0A);
 8000a0a:	200a      	movs	r0, #10
 8000a0c:	f7ff fd08 	bl	8000420 <Fpga_Read>
 8000a10:	4603      	mov	r3, r0
 8000a12:	80bb      	strh	r3, [r7, #4]
					d = d << 8;
 8000a14:	88bb      	ldrh	r3, [r7, #4]
 8000a16:	021b      	lsls	r3, r3, #8
 8000a18:	80bb      	strh	r3, [r7, #4]
					d |= Fpga_Read(0x0B);
 8000a1a:	200b      	movs	r0, #11
 8000a1c:	f7ff fd00 	bl	8000420 <Fpga_Read>
 8000a20:	4603      	mov	r3, r0
 8000a22:	461a      	mov	r2, r3
 8000a24:	88bb      	ldrh	r3, [r7, #4]
 8000a26:	4313      	orrs	r3, r2
 8000a28:	80bb      	strh	r3, [r7, #4]
					sum2 += d;
 8000a2a:	88bb      	ldrh	r3, [r7, #4]
 8000a2c:	b2da      	uxtb	r2, r3
 8000a2e:	79fb      	ldrb	r3, [r7, #7]
 8000a30:	4413      	add	r3, r2
 8000a32:	71fb      	strb	r3, [r7, #7]
 8000a34:	e001      	b.n	8000a3a <Write_Fir_Parameter+0x12e>
				}
				else
				{
					d = 0;
 8000a36:	2300      	movs	r3, #0
 8000a38:	80bb      	strh	r3, [r7, #4]
			for(j=0; j<32; j++,i++)
 8000a3a:	89bb      	ldrh	r3, [r7, #12]
 8000a3c:	3301      	adds	r3, #1
 8000a3e:	81bb      	strh	r3, [r7, #12]
 8000a40:	89fb      	ldrh	r3, [r7, #14]
 8000a42:	3301      	adds	r3, #1
 8000a44:	81fb      	strh	r3, [r7, #14]
 8000a46:	89bb      	ldrh	r3, [r7, #12]
 8000a48:	2b1f      	cmp	r3, #31
 8000a4a:	d9cf      	bls.n	80009ec <Write_Fir_Parameter+0xe0>
				}
			}
			t++;
 8000a4c:	897b      	ldrh	r3, [r7, #10]
 8000a4e:	3301      	adds	r3, #1
 8000a50:	817b      	strh	r3, [r7, #10]
		for(i=0; i<Filter_Order;)
 8000a52:	89fb      	ldrh	r3, [r7, #14]
 8000a54:	2bfe      	cmp	r3, #254	@ 0xfe
 8000a56:	d9c6      	bls.n	80009e6 <Write_Fir_Parameter+0xda>
		}

		if(sum1 != sum2)
 8000a58:	7a3a      	ldrb	r2, [r7, #8]
 8000a5a:	79fb      	ldrb	r3, [r7, #7]
 8000a5c:	429a      	cmp	r2, r3
 8000a5e:	d003      	beq.n	8000a68 <Write_Fir_Parameter+0x15c>
			init_cn++;
 8000a60:	7a7b      	ldrb	r3, [r7, #9]
 8000a62:	3301      	adds	r3, #1
 8000a64:	727b      	strb	r3, [r7, #9]
 8000a66:	e001      	b.n	8000a6c <Write_Fir_Parameter+0x160>
		else
			init_cn = 10;
 8000a68:	230a      	movs	r3, #10
 8000a6a:	727b      	strb	r3, [r7, #9]
	while(init_cn < 10)
 8000a6c:	7a7b      	ldrb	r3, [r7, #9]
 8000a6e:	2b09      	cmp	r3, #9
 8000a70:	f67f af5a 	bls.w	8000928 <Write_Fir_Parameter+0x1c>
//	ComSendChar(COM1,(sum2 >> 8));
//	ComSendChar(COM1,sum2);
//
//	ComSendChar(COM1,init_cn);

}
 8000a74:	bf00      	nop
 8000a76:	bf00      	nop
 8000a78:	3710      	adds	r7, #16
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	08005cd8 	.word	0x08005cd8

08000a84 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b08a      	sub	sp, #40	@ 0x28
 8000a88:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a8a:	f107 0318 	add.w	r3, r7, #24
 8000a8e:	2200      	movs	r2, #0
 8000a90:	601a      	str	r2, [r3, #0]
 8000a92:	605a      	str	r2, [r3, #4]
 8000a94:	609a      	str	r2, [r3, #8]
 8000a96:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a98:	4b54      	ldr	r3, [pc, #336]	@ (8000bec <MX_GPIO_Init+0x168>)
 8000a9a:	699b      	ldr	r3, [r3, #24]
 8000a9c:	4a53      	ldr	r2, [pc, #332]	@ (8000bec <MX_GPIO_Init+0x168>)
 8000a9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000aa2:	6193      	str	r3, [r2, #24]
 8000aa4:	4b51      	ldr	r3, [pc, #324]	@ (8000bec <MX_GPIO_Init+0x168>)
 8000aa6:	699b      	ldr	r3, [r3, #24]
 8000aa8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000aac:	617b      	str	r3, [r7, #20]
 8000aae:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab0:	4b4e      	ldr	r3, [pc, #312]	@ (8000bec <MX_GPIO_Init+0x168>)
 8000ab2:	699b      	ldr	r3, [r3, #24]
 8000ab4:	4a4d      	ldr	r2, [pc, #308]	@ (8000bec <MX_GPIO_Init+0x168>)
 8000ab6:	f043 0304 	orr.w	r3, r3, #4
 8000aba:	6193      	str	r3, [r2, #24]
 8000abc:	4b4b      	ldr	r3, [pc, #300]	@ (8000bec <MX_GPIO_Init+0x168>)
 8000abe:	699b      	ldr	r3, [r3, #24]
 8000ac0:	f003 0304 	and.w	r3, r3, #4
 8000ac4:	613b      	str	r3, [r7, #16]
 8000ac6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ac8:	4b48      	ldr	r3, [pc, #288]	@ (8000bec <MX_GPIO_Init+0x168>)
 8000aca:	699b      	ldr	r3, [r3, #24]
 8000acc:	4a47      	ldr	r2, [pc, #284]	@ (8000bec <MX_GPIO_Init+0x168>)
 8000ace:	f043 0310 	orr.w	r3, r3, #16
 8000ad2:	6193      	str	r3, [r2, #24]
 8000ad4:	4b45      	ldr	r3, [pc, #276]	@ (8000bec <MX_GPIO_Init+0x168>)
 8000ad6:	699b      	ldr	r3, [r3, #24]
 8000ad8:	f003 0310 	and.w	r3, r3, #16
 8000adc:	60fb      	str	r3, [r7, #12]
 8000ade:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ae0:	4b42      	ldr	r3, [pc, #264]	@ (8000bec <MX_GPIO_Init+0x168>)
 8000ae2:	699b      	ldr	r3, [r3, #24]
 8000ae4:	4a41      	ldr	r2, [pc, #260]	@ (8000bec <MX_GPIO_Init+0x168>)
 8000ae6:	f043 0320 	orr.w	r3, r3, #32
 8000aea:	6193      	str	r3, [r2, #24]
 8000aec:	4b3f      	ldr	r3, [pc, #252]	@ (8000bec <MX_GPIO_Init+0x168>)
 8000aee:	699b      	ldr	r3, [r3, #24]
 8000af0:	f003 0320 	and.w	r3, r3, #32
 8000af4:	60bb      	str	r3, [r7, #8]
 8000af6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000af8:	4b3c      	ldr	r3, [pc, #240]	@ (8000bec <MX_GPIO_Init+0x168>)
 8000afa:	699b      	ldr	r3, [r3, #24]
 8000afc:	4a3b      	ldr	r2, [pc, #236]	@ (8000bec <MX_GPIO_Init+0x168>)
 8000afe:	f043 0308 	orr.w	r3, r3, #8
 8000b02:	6193      	str	r3, [r2, #24]
 8000b04:	4b39      	ldr	r3, [pc, #228]	@ (8000bec <MX_GPIO_Init+0x168>)
 8000b06:	699b      	ldr	r3, [r3, #24]
 8000b08:	f003 0308 	and.w	r3, r3, #8
 8000b0c:	607b      	str	r3, [r7, #4]
 8000b0e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ADDR0_Pin|ADDR1_Pin|ADDR2_Pin|ADDR3_Pin
 8000b10:	2200      	movs	r2, #0
 8000b12:	213d      	movs	r1, #61	@ 0x3d
 8000b14:	4836      	ldr	r0, [pc, #216]	@ (8000bf0 <MX_GPIO_Init+0x16c>)
 8000b16:	f002 fcbc 	bl	8003492 <HAL_GPIO_WritePin>
                          |MCU_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DATA1_Pin|MCU_WR_Pin|DATA0_Pin, GPIO_PIN_RESET);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	f641 0104 	movw	r1, #6148	@ 0x1804
 8000b20:	4834      	ldr	r0, [pc, #208]	@ (8000bf4 <MX_GPIO_Init+0x170>)
 8000b22:	f002 fcb6 	bl	8003492 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DATA2_GPIO_Port, DATA2_Pin, GPIO_PIN_RESET);
 8000b26:	2200      	movs	r2, #0
 8000b28:	2108      	movs	r1, #8
 8000b2a:	4832      	ldr	r0, [pc, #200]	@ (8000bf4 <MX_GPIO_Init+0x170>)
 8000b2c:	f002 fcb1 	bl	8003492 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, DATA3_Pin|DATA4_Pin, GPIO_PIN_RESET);
 8000b30:	2200      	movs	r2, #0
 8000b32:	2148      	movs	r1, #72	@ 0x48
 8000b34:	4830      	ldr	r0, [pc, #192]	@ (8000bf8 <MX_GPIO_Init+0x174>)
 8000b36:	f002 fcac 	bl	8003492 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DATA5_Pin|DATA6_Pin|DATA7_Pin, GPIO_PIN_RESET);
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	f44f 7148 	mov.w	r1, #800	@ 0x320
 8000b40:	482e      	ldr	r0, [pc, #184]	@ (8000bfc <MX_GPIO_Init+0x178>)
 8000b42:	f002 fca6 	bl	8003492 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
	GPIO_InitStruct.Pin = ADDR0_Pin|ADDR1_Pin|ADDR2_Pin|ADDR3_Pin
 8000b46:	233d      	movs	r3, #61	@ 0x3d
 8000b48:	61bb      	str	r3, [r7, #24]
						  |MCU_CS_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b52:	2303      	movs	r3, #3
 8000b54:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b56:	f107 0318 	add.w	r3, r7, #24
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	4824      	ldr	r0, [pc, #144]	@ (8000bf0 <MX_GPIO_Init+0x16c>)
 8000b5e:	f002 faed 	bl	800313c <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = MCU_WR_Pin;
 8000b62:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000b66:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b68:	2301      	movs	r3, #1
 8000b6a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b70:	2303      	movs	r3, #3
 8000b72:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b74:	f107 0318 	add.w	r3, r7, #24
 8000b78:	4619      	mov	r1, r3
 8000b7a:	481e      	ldr	r0, [pc, #120]	@ (8000bf4 <MX_GPIO_Init+0x170>)
 8000b7c:	f002 fade 	bl	800313c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = DATA1_Pin|MCU_WR_Pin|DATA0_Pin|DATA2_Pin;
 8000b80:	f641 030c 	movw	r3, #6156	@ 0x180c
 8000b84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b86:	2301      	movs	r3, #1
 8000b88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b8e:	2303      	movs	r3, #3
 8000b90:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b92:	f107 0318 	add.w	r3, r7, #24
 8000b96:	4619      	mov	r1, r3
 8000b98:	4816      	ldr	r0, [pc, #88]	@ (8000bf4 <MX_GPIO_Init+0x170>)
 8000b9a:	f002 facf 	bl	800313c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = DATA3_Pin|DATA4_Pin;
 8000b9e:	2348      	movs	r3, #72	@ 0x48
 8000ba0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000baa:	2303      	movs	r3, #3
 8000bac:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bae:	f107 0318 	add.w	r3, r7, #24
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	4810      	ldr	r0, [pc, #64]	@ (8000bf8 <MX_GPIO_Init+0x174>)
 8000bb6:	f002 fac1 	bl	800313c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DATA5_Pin|DATA6_Pin|DATA7_Pin|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8000bba:	f247 3320 	movw	r3, #29472	@ 0x7320
 8000bbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bc8:	2303      	movs	r3, #3
 8000bca:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bcc:	f107 0318 	add.w	r3, r7, #24
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	480a      	ldr	r0, [pc, #40]	@ (8000bfc <MX_GPIO_Init+0x178>)
 8000bd4:	f002 fab2 	bl	800313c <HAL_GPIO_Init>


  HAL_GPIO_WritePin(GPIOE,MCU_CS_Pin,GPIO_PIN_SET);//fpga片选拉高
 8000bd8:	2201      	movs	r2, #1
 8000bda:	2101      	movs	r1, #1
 8000bdc:	4804      	ldr	r0, [pc, #16]	@ (8000bf0 <MX_GPIO_Init+0x16c>)
 8000bde:	f002 fc58 	bl	8003492 <HAL_GPIO_WritePin>

}
 8000be2:	bf00      	nop
 8000be4:	3728      	adds	r7, #40	@ 0x28
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	40021000 	.word	0x40021000
 8000bf0:	40011800 	.word	0x40011800
 8000bf4:	40010800 	.word	0x40010800
 8000bf8:	40011400 	.word	0x40011400
 8000bfc:	40010c00 	.word	0x40010c00

08000c00 <init>:
 *      Author: 16194
 */
#include "main.h"

void init (void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
	SystemClock_Config();			//时钟配置
 8000c04:	f000 f816 	bl	8000c34 <SystemClock_Config>

	HAL_Init();						//HAL库初始化
 8000c08:	f001 fca4 	bl	8002554 <HAL_Init>
	MX_GPIO_Init();					//GPIO初始化
 8000c0c:	f7ff ff3a 	bl	8000a84 <MX_GPIO_Init>
	TIM_init();						//定时器初始化
 8000c10:	f000 fa96 	bl	8001140 <TIM_init>
	usart_init();					//串口初始化
 8000c14:	f000 fb2c 	bl	8001270 <usart_init>
	FPGA_init();					//FPGA初始化
 8000c18:	f7ff fbd6 	bl	80003c8 <FPGA_init>
	MX_IWDG_Init();					//独立看门狗初始化
 8000c1c:	f000 f850 	bl	8000cc0 <MX_IWDG_Init>

	SEGGER_RTT_Init();				//SEGGERRTT初始化
 8000c20:	f001 fc92 	bl	8002548 <SEGGER_RTT_Init>

	PRINT_LOG("initover\n\r");
 8000c24:	4802      	ldr	r0, [pc, #8]	@ (8000c30 <init+0x30>)
 8000c26:	f000 f8ec 	bl	8000e02 <PRINT_LOG>
}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	08005c58 	.word	0x08005c58

08000c34 <SystemClock_Config>:

void SystemClock_Config(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b090      	sub	sp, #64	@ 0x40
 8000c38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c3a:	f107 0318 	add.w	r3, r7, #24
 8000c3e:	2228      	movs	r2, #40	@ 0x28
 8000c40:	2100      	movs	r1, #0
 8000c42:	4618      	mov	r0, r3
 8000c44:	f004 fb6c 	bl	8005320 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c48:	1d3b      	adds	r3, r7, #4
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	601a      	str	r2, [r3, #0]
 8000c4e:	605a      	str	r2, [r3, #4]
 8000c50:	609a      	str	r2, [r3, #8]
 8000c52:	60da      	str	r2, [r3, #12]
 8000c54:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c56:	2301      	movs	r3, #1
 8000c58:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c5a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c5e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000c60:	2300      	movs	r3, #0
 8000c62:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c64:	2301      	movs	r3, #1
 8000c66:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c68:	2302      	movs	r3, #2
 8000c6a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c6c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c70:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000c72:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000c76:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c78:	f107 0318 	add.w	r3, r7, #24
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f002 fc8d 	bl	800359c <HAL_RCC_OscConfig>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000c88:	f000 f8f6 	bl	8000e78 <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c8c:	230f      	movs	r3, #15
 8000c8e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c90:	2302      	movs	r3, #2
 8000c92:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c94:	2300      	movs	r3, #0
 8000c96:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c98:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c9c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ca2:	1d3b      	adds	r3, r7, #4
 8000ca4:	2102      	movs	r1, #2
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f002 fefa 	bl	8003aa0 <HAL_RCC_ClockConfig>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000cb2:	f000 f8e1 	bl	8000e78 <Error_Handler>
  }
}
 8000cb6:	bf00      	nop
 8000cb8:	3740      	adds	r7, #64	@ 0x40
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
	...

08000cc0 <MX_IWDG_Init>:

IWDG_HandleTypeDef iwdg;
void MX_IWDG_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
	iwdg.Instance = IWDG;
 8000cc4:	4b09      	ldr	r3, [pc, #36]	@ (8000cec <MX_IWDG_Init+0x2c>)
 8000cc6:	4a0a      	ldr	r2, [pc, #40]	@ (8000cf0 <MX_IWDG_Init+0x30>)
 8000cc8:	601a      	str	r2, [r3, #0]
	iwdg.Init.Prescaler = IWDG_PRESCALER_4;
 8000cca:	4b08      	ldr	r3, [pc, #32]	@ (8000cec <MX_IWDG_Init+0x2c>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	605a      	str	r2, [r3, #4]
	iwdg.Init.Reload = 5000;
 8000cd0:	4b06      	ldr	r3, [pc, #24]	@ (8000cec <MX_IWDG_Init+0x2c>)
 8000cd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000cd6:	609a      	str	r2, [r3, #8]
	if(HAL_IWDG_Init(&iwdg) != HAL_OK)
 8000cd8:	4804      	ldr	r0, [pc, #16]	@ (8000cec <MX_IWDG_Init+0x2c>)
 8000cda:	f002 fc0b 	bl	80034f4 <HAL_IWDG_Init>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <MX_IWDG_Init+0x28>
	{
		Error_Handler();
 8000ce4:	f000 f8c8 	bl	8000e78 <Error_Handler>
	}
}
 8000ce8:	bf00      	nop
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	200001a0 	.word	0x200001a0
 8000cf0:	40003000 	.word	0x40003000

08000cf4 <IWDG_FEED_DOG>:

void IWDG_FEED_DOG(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
	HAL_IWDG_Refresh(&iwdg);	//410ms内清掉看门狗
 8000cf8:	4802      	ldr	r0, [pc, #8]	@ (8000d04 <IWDG_FEED_DOG+0x10>)
 8000cfa:	f002 fc3f 	bl	800357c <HAL_IWDG_Refresh>
}
 8000cfe:	bf00      	nop
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	200001a0 	.word	0x200001a0

08000d08 <Checksum_Reverse>:

/****************************************************************/
/*-----------------ETH下发数据校验和计算函数------------------------*/
unsigned short Checksum_Reverse(unsigned char * p,unsigned short _len)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b0b6      	sub	sp, #216	@ 0xd8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
 8000d10:	460b      	mov	r3, r1
 8000d12:	807b      	strh	r3, [r7, #2]
	uint16_t sum = 0;
 8000d14:	2300      	movs	r3, #0
 8000d16:	f8a7 30d6 	strh.w	r3, [r7, #214]	@ 0xd6
	uint16_t i,y;
	uint16_t Buf[100] = {0};
 8000d1a:	f107 0308 	add.w	r3, r7, #8
 8000d1e:	22c8      	movs	r2, #200	@ 0xc8
 8000d20:	2100      	movs	r1, #0
 8000d22:	4618      	mov	r0, r3
 8000d24:	f004 fafc 	bl	8005320 <memset>
	for(i=0;i<(_len/2);i++)
 8000d28:	2300      	movs	r3, #0
 8000d2a:	f8a7 30d4 	strh.w	r3, [r7, #212]	@ 0xd4
 8000d2e:	e01e      	b.n	8000d6e <Checksum_Reverse+0x66>
	{
		Buf[i] = (p[2*i+1] << 8) + p[2*i];
 8000d30:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	@ 0xd4
 8000d34:	005b      	lsls	r3, r3, #1
 8000d36:	3301      	adds	r3, #1
 8000d38:	687a      	ldr	r2, [r7, #4]
 8000d3a:	4413      	add	r3, r2
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	021b      	lsls	r3, r3, #8
 8000d40:	b29a      	uxth	r2, r3
 8000d42:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	@ 0xd4
 8000d46:	005b      	lsls	r3, r3, #1
 8000d48:	4619      	mov	r1, r3
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	440b      	add	r3, r1
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	4619      	mov	r1, r3
 8000d52:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	@ 0xd4
 8000d56:	440a      	add	r2, r1
 8000d58:	b292      	uxth	r2, r2
 8000d5a:	005b      	lsls	r3, r3, #1
 8000d5c:	33d8      	adds	r3, #216	@ 0xd8
 8000d5e:	443b      	add	r3, r7
 8000d60:	f823 2cd0 	strh.w	r2, [r3, #-208]
	for(i=0;i<(_len/2);i++)
 8000d64:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	@ 0xd4
 8000d68:	3301      	adds	r3, #1
 8000d6a:	f8a7 30d4 	strh.w	r3, [r7, #212]	@ 0xd4
 8000d6e:	887b      	ldrh	r3, [r7, #2]
 8000d70:	085b      	lsrs	r3, r3, #1
 8000d72:	b29b      	uxth	r3, r3
 8000d74:	f8b7 20d4 	ldrh.w	r2, [r7, #212]	@ 0xd4
 8000d78:	429a      	cmp	r2, r3
 8000d7a:	d3d9      	bcc.n	8000d30 <Checksum_Reverse+0x28>
	}
	for(y=0;y<(_len/2);y++)
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	f8a7 30d2 	strh.w	r3, [r7, #210]	@ 0xd2
 8000d82:	e010      	b.n	8000da6 <Checksum_Reverse+0x9e>
	{
		sum += Buf[y];
 8000d84:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	@ 0xd2
 8000d88:	005b      	lsls	r3, r3, #1
 8000d8a:	33d8      	adds	r3, #216	@ 0xd8
 8000d8c:	443b      	add	r3, r7
 8000d8e:	f833 2cd0 	ldrh.w	r2, [r3, #-208]
 8000d92:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	@ 0xd6
 8000d96:	4413      	add	r3, r2
 8000d98:	f8a7 30d6 	strh.w	r3, [r7, #214]	@ 0xd6
	for(y=0;y<(_len/2);y++)
 8000d9c:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	@ 0xd2
 8000da0:	3301      	adds	r3, #1
 8000da2:	f8a7 30d2 	strh.w	r3, [r7, #210]	@ 0xd2
 8000da6:	887b      	ldrh	r3, [r7, #2]
 8000da8:	085b      	lsrs	r3, r3, #1
 8000daa:	b29b      	uxth	r3, r3
 8000dac:	f8b7 20d2 	ldrh.w	r2, [r7, #210]	@ 0xd2
 8000db0:	429a      	cmp	r2, r3
 8000db2:	d3e7      	bcc.n	8000d84 <Checksum_Reverse+0x7c>
	}
	return sum;
 8000db4:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	@ 0xd6
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	37d8      	adds	r7, #216	@ 0xd8
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <Checksum_sum>:

/*---------------------------校验和计算函数------------------------*/
unsigned short Checksum_sum(unsigned char * p,unsigned short _len)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b085      	sub	sp, #20
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
 8000dc8:	460b      	mov	r3, r1
 8000dca:	807b      	strh	r3, [r7, #2]
	uint16_t sum = 0;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	81fb      	strh	r3, [r7, #14]
	for(unsigned char i=0;i<_len;i++)
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	737b      	strb	r3, [r7, #13]
 8000dd4:	e00a      	b.n	8000dec <Checksum_sum+0x2c>
	{
		sum += p[i];
 8000dd6:	7b7b      	ldrb	r3, [r7, #13]
 8000dd8:	687a      	ldr	r2, [r7, #4]
 8000dda:	4413      	add	r3, r2
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	461a      	mov	r2, r3
 8000de0:	89fb      	ldrh	r3, [r7, #14]
 8000de2:	4413      	add	r3, r2
 8000de4:	81fb      	strh	r3, [r7, #14]
	for(unsigned char i=0;i<_len;i++)
 8000de6:	7b7b      	ldrb	r3, [r7, #13]
 8000de8:	3301      	adds	r3, #1
 8000dea:	737b      	strb	r3, [r7, #13]
 8000dec:	7b7b      	ldrb	r3, [r7, #13]
 8000dee:	b29b      	uxth	r3, r3
 8000df0:	887a      	ldrh	r2, [r7, #2]
 8000df2:	429a      	cmp	r2, r3
 8000df4:	d8ef      	bhi.n	8000dd6 <Checksum_sum+0x16>
	}
	return sum;
 8000df6:	89fb      	ldrh	r3, [r7, #14]
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	3714      	adds	r7, #20
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bc80      	pop	{r7}
 8000e00:	4770      	bx	lr

08000e02 <PRINT_LOG>:

int PRINT_LOG(const char *fmt,...)
{	int n;
 8000e02:	b40f      	push	{r0, r1, r2, r3}
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b0c2      	sub	sp, #264	@ 0x108
 8000e08:	af00      	add	r7, sp, #0
	char aBuffer[256];
	va_list args;
	va_start(args,fmt);
 8000e0a:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 8000e0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000e12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000e16:	601a      	str	r2, [r3, #0]
	n = vsnprintf(aBuffer, sizeof(aBuffer), fmt, args);
 8000e18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000e1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000e20:	1d38      	adds	r0, r7, #4
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8000e28:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e2c:	f004 fa6a 	bl	8005304 <vsniprintf>
 8000e30:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
	if (n > (int)sizeof(aBuffer))
 8000e34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8000e38:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000e3c:	dd07      	ble.n	8000e4e <PRINT_LOG+0x4c>
	{
		SEGGER_RTT_Write(0, aBuffer, sizeof(aBuffer));
 8000e3e:	1d3b      	adds	r3, r7, #4
 8000e40:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000e44:	4619      	mov	r1, r3
 8000e46:	2000      	movs	r0, #0
 8000e48:	f001 fb5a 	bl	8002500 <SEGGER_RTT_Write>
 8000e4c:	e00a      	b.n	8000e64 <PRINT_LOG+0x62>
	}
	else if(n > 0)
 8000e4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	dd06      	ble.n	8000e64 <PRINT_LOG+0x62>
	{
		SEGGER_RTT_Write(0, aBuffer, n);
 8000e56:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 8000e5a:	1d3b      	adds	r3, r7, #4
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	2000      	movs	r0, #0
 8000e60:	f001 fb4e 	bl	8002500 <SEGGER_RTT_Write>
	}
	va_end(args);
	return n;
 8000e64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000e74:	b004      	add	sp, #16
 8000e76:	4770      	bx	lr

08000e78 <Error_Handler>:

void Error_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e7c:	b672      	cpsid	i
}
 8000e7e:	bf00      	nop
  __disable_irq();
  while (1)
 8000e80:	bf00      	nop
 8000e82:	e7fd      	b.n	8000e80 <Error_Handler+0x8>

08000e84 <ETH_CMDPOLL>:
unsigned short Sertableactlen;
unsigned short Contralcmdlen;
unsigned char resendtpe;

void ETH_CMDPOLL(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
	if(ETHdataoverflag == 1)
 8000e8a:	4b65      	ldr	r3, [pc, #404]	@ (8001020 <ETH_CMDPOLL+0x19c>)
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	2b01      	cmp	r3, #1
 8000e90:	f040 808b 	bne.w	8000faa <ETH_CMDPOLL+0x126>
	{
		Resetstate(ETHCMD);
 8000e94:	2001      	movs	r0, #1
 8000e96:	f001 f95f 	bl	8002158 <Resetstate>

		switch(Workmode)
 8000e9a:	4b62      	ldr	r3, [pc, #392]	@ (8001024 <ETH_CMDPOLL+0x1a0>)
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	2b04      	cmp	r3, #4
 8000ea0:	d078      	beq.n	8000f94 <ETH_CMDPOLL+0x110>
 8000ea2:	2b04      	cmp	r3, #4
 8000ea4:	f300 8081 	bgt.w	8000faa <ETH_CMDPOLL+0x126>
 8000ea8:	2b01      	cmp	r3, #1
 8000eaa:	d002      	beq.n	8000eb2 <ETH_CMDPOLL+0x2e>
 8000eac:	2b02      	cmp	r3, #2
 8000eae:	d053      	beq.n	8000f58 <ETH_CMDPOLL+0xd4>
 8000eb0:	e07b      	b.n	8000faa <ETH_CMDPOLL+0x126>
		{
			case SERVICETABLE:								//服务表激活
					ToolID = ETHbodybuf[0];
 8000eb2:	4b5d      	ldr	r3, [pc, #372]	@ (8001028 <ETH_CMDPOLL+0x1a4>)
 8000eb4:	781a      	ldrb	r2, [r3, #0]
 8000eb6:	4b5d      	ldr	r3, [pc, #372]	@ (800102c <ETH_CMDPOLL+0x1a8>)
 8000eb8:	701a      	strb	r2, [r3, #0]
					Subsetnumber = ETHbodybuf[1];
 8000eba:	4b5b      	ldr	r3, [pc, #364]	@ (8001028 <ETH_CMDPOLL+0x1a4>)
 8000ebc:	785a      	ldrb	r2, [r3, #1]
 8000ebe:	4b5c      	ldr	r3, [pc, #368]	@ (8001030 <ETH_CMDPOLL+0x1ac>)
 8000ec0:	701a      	strb	r2, [r3, #0]
					Tool_Datalen = (ETHbodybuf[2] << 8) + ETHbodybuf[3];
 8000ec2:	4b59      	ldr	r3, [pc, #356]	@ (8001028 <ETH_CMDPOLL+0x1a4>)
 8000ec4:	789b      	ldrb	r3, [r3, #2]
 8000ec6:	021b      	lsls	r3, r3, #8
 8000ec8:	b29b      	uxth	r3, r3
 8000eca:	4a57      	ldr	r2, [pc, #348]	@ (8001028 <ETH_CMDPOLL+0x1a4>)
 8000ecc:	78d2      	ldrb	r2, [r2, #3]
 8000ece:	4413      	add	r3, r2
 8000ed0:	b29a      	uxth	r2, r3
 8000ed2:	4b58      	ldr	r3, [pc, #352]	@ (8001034 <ETH_CMDPOLL+0x1b0>)
 8000ed4:	801a      	strh	r2, [r3, #0]
					Sampleperiod = (ETHbodybuf[4] << 8) + ETHbodybuf[5];
 8000ed6:	4b54      	ldr	r3, [pc, #336]	@ (8001028 <ETH_CMDPOLL+0x1a4>)
 8000ed8:	791b      	ldrb	r3, [r3, #4]
 8000eda:	021b      	lsls	r3, r3, #8
 8000edc:	b29b      	uxth	r3, r3
 8000ede:	4a52      	ldr	r2, [pc, #328]	@ (8001028 <ETH_CMDPOLL+0x1a4>)
 8000ee0:	7952      	ldrb	r2, [r2, #5]
 8000ee2:	4413      	add	r3, r2
 8000ee4:	b29a      	uxth	r2, r3
 8000ee6:	4b54      	ldr	r3, [pc, #336]	@ (8001038 <ETH_CMDPOLL+0x1b4>)
 8000ee8:	801a      	strh	r2, [r3, #0]
					Delaytime = (ETHbodybuf[6] << 8) + ETHbodybuf[7];
 8000eea:	4b4f      	ldr	r3, [pc, #316]	@ (8001028 <ETH_CMDPOLL+0x1a4>)
 8000eec:	799b      	ldrb	r3, [r3, #6]
 8000eee:	021b      	lsls	r3, r3, #8
 8000ef0:	b29b      	uxth	r3, r3
 8000ef2:	4a4d      	ldr	r2, [pc, #308]	@ (8001028 <ETH_CMDPOLL+0x1a4>)
 8000ef4:	79d2      	ldrb	r2, [r2, #7]
 8000ef6:	4413      	add	r3, r2
 8000ef8:	b29a      	uxth	r2, r3
 8000efa:	4b50      	ldr	r3, [pc, #320]	@ (800103c <ETH_CMDPOLL+0x1b8>)
 8000efc:	801a      	strh	r2, [r3, #0]
					Teleset = (ETHbodybuf[8] << 8) + ETHbodybuf[9];
 8000efe:	4b4a      	ldr	r3, [pc, #296]	@ (8001028 <ETH_CMDPOLL+0x1a4>)
 8000f00:	7a5a      	ldrb	r2, [r3, #9]
 8000f02:	4b4f      	ldr	r3, [pc, #316]	@ (8001040 <ETH_CMDPOLL+0x1bc>)
 8000f04:	701a      	strb	r2, [r3, #0]
					Data_reserve = (ETHbodybuf[10] << 8) + ETHbodybuf[11];		//各参数暂存
 8000f06:	4b48      	ldr	r3, [pc, #288]	@ (8001028 <ETH_CMDPOLL+0x1a4>)
 8000f08:	7ada      	ldrb	r2, [r3, #11]
 8000f0a:	4b4e      	ldr	r3, [pc, #312]	@ (8001044 <ETH_CMDPOLL+0x1c0>)
 8000f0c:	701a      	strb	r2, [r3, #0]

					PRINT_LOG("CMD is SERVICETABLE\n\r");
 8000f0e:	484e      	ldr	r0, [pc, #312]	@ (8001048 <ETH_CMDPOLL+0x1c4>)
 8000f10:	f7ff ff77 	bl	8000e02 <PRINT_LOG>
					Sertableactlen = ETHdatalen;
 8000f14:	4b4d      	ldr	r3, [pc, #308]	@ (800104c <ETH_CMDPOLL+0x1c8>)
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	461a      	mov	r2, r3
 8000f1a:	4b4d      	ldr	r3, [pc, #308]	@ (8001050 <ETH_CMDPOLL+0x1cc>)
 8000f1c:	801a      	strh	r2, [r3, #0]

					for(unsigned char i=0;i<Sertableactlen;i++)
 8000f1e:	2300      	movs	r3, #0
 8000f20:	71fb      	strb	r3, [r7, #7]
 8000f22:	e008      	b.n	8000f36 <ETH_CMDPOLL+0xb2>
					{
						Sertableactbuf[i] = ETHbodybuf[i];
 8000f24:	79fa      	ldrb	r2, [r7, #7]
 8000f26:	79fb      	ldrb	r3, [r7, #7]
 8000f28:	493f      	ldr	r1, [pc, #252]	@ (8001028 <ETH_CMDPOLL+0x1a4>)
 8000f2a:	5c89      	ldrb	r1, [r1, r2]
 8000f2c:	4a49      	ldr	r2, [pc, #292]	@ (8001054 <ETH_CMDPOLL+0x1d0>)
 8000f2e:	54d1      	strb	r1, [r2, r3]
					for(unsigned char i=0;i<Sertableactlen;i++)
 8000f30:	79fb      	ldrb	r3, [r7, #7]
 8000f32:	3301      	adds	r3, #1
 8000f34:	71fb      	strb	r3, [r7, #7]
 8000f36:	79fb      	ldrb	r3, [r7, #7]
 8000f38:	b29a      	uxth	r2, r3
 8000f3a:	4b45      	ldr	r3, [pc, #276]	@ (8001050 <ETH_CMDPOLL+0x1cc>)
 8000f3c:	881b      	ldrh	r3, [r3, #0]
 8000f3e:	429a      	cmp	r2, r3
 8000f40:	d3f0      	bcc.n	8000f24 <ETH_CMDPOLL+0xa0>
					}

					Sertableactflag = 1;
 8000f42:	4b45      	ldr	r3, [pc, #276]	@ (8001058 <ETH_CMDPOLL+0x1d4>)
 8000f44:	2201      	movs	r2, #1
 8000f46:	701a      	strb	r2, [r3, #0]
					isdowndcmdreport = Sampleperiod;
 8000f48:	4b3b      	ldr	r3, [pc, #236]	@ (8001038 <ETH_CMDPOLL+0x1b4>)
 8000f4a:	881a      	ldrh	r2, [r3, #0]
 8000f4c:	4b43      	ldr	r3, [pc, #268]	@ (800105c <ETH_CMDPOLL+0x1d8>)
 8000f4e:	801a      	strh	r2, [r3, #0]
					Downdatatimeoutnum = 0;
 8000f50:	4b43      	ldr	r3, [pc, #268]	@ (8001060 <ETH_CMDPOLL+0x1dc>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	801a      	strh	r2, [r3, #0]
			break;
 8000f56:	e028      	b.n	8000faa <ETH_CMDPOLL+0x126>
			case CONTRALCMD:								//控制命令

					Contralcmdlen = ETHdatalen;
 8000f58:	4b3c      	ldr	r3, [pc, #240]	@ (800104c <ETH_CMDPOLL+0x1c8>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	4b41      	ldr	r3, [pc, #260]	@ (8001064 <ETH_CMDPOLL+0x1e0>)
 8000f60:	801a      	strh	r2, [r3, #0]
					PRINT_LOG("CMD is TOOLCONTRALCMD\n\r");
 8000f62:	4841      	ldr	r0, [pc, #260]	@ (8001068 <ETH_CMDPOLL+0x1e4>)
 8000f64:	f7ff ff4d 	bl	8000e02 <PRINT_LOG>

					for(unsigned char i=0;i<Contralcmdlen;i++)
 8000f68:	2300      	movs	r3, #0
 8000f6a:	71bb      	strb	r3, [r7, #6]
 8000f6c:	e008      	b.n	8000f80 <ETH_CMDPOLL+0xfc>
					{
						Contralcmdbuf[i] = ETHbodybuf[i];
 8000f6e:	79ba      	ldrb	r2, [r7, #6]
 8000f70:	79bb      	ldrb	r3, [r7, #6]
 8000f72:	492d      	ldr	r1, [pc, #180]	@ (8001028 <ETH_CMDPOLL+0x1a4>)
 8000f74:	5c89      	ldrb	r1, [r1, r2]
 8000f76:	4a3d      	ldr	r2, [pc, #244]	@ (800106c <ETH_CMDPOLL+0x1e8>)
 8000f78:	54d1      	strb	r1, [r2, r3]
					for(unsigned char i=0;i<Contralcmdlen;i++)
 8000f7a:	79bb      	ldrb	r3, [r7, #6]
 8000f7c:	3301      	adds	r3, #1
 8000f7e:	71bb      	strb	r3, [r7, #6]
 8000f80:	79bb      	ldrb	r3, [r7, #6]
 8000f82:	b29a      	uxth	r2, r3
 8000f84:	4b37      	ldr	r3, [pc, #220]	@ (8001064 <ETH_CMDPOLL+0x1e0>)
 8000f86:	881b      	ldrh	r3, [r3, #0]
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	d3f0      	bcc.n	8000f6e <ETH_CMDPOLL+0xea>
					}

					TOOLCONTRALCMD = true;
 8000f8c:	4b38      	ldr	r3, [pc, #224]	@ (8001070 <ETH_CMDPOLL+0x1ec>)
 8000f8e:	2201      	movs	r2, #1
 8000f90:	701a      	strb	r2, [r3, #0]
			break;
 8000f92:	e00a      	b.n	8000faa <ETH_CMDPOLL+0x126>
			case DEACTIVE:									//服务表反激活
					Sertableactflag = 0;
 8000f94:	4b30      	ldr	r3, [pc, #192]	@ (8001058 <ETH_CMDPOLL+0x1d4>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	701a      	strb	r2, [r3, #0]
					PRINT_LOG("CMD is DEACTIVE\n\r");
 8000f9a:	4836      	ldr	r0, [pc, #216]	@ (8001074 <ETH_CMDPOLL+0x1f0>)
 8000f9c:	f7ff ff31 	bl	8000e02 <PRINT_LOG>
					Sampleperiod = 0xFFFF;
 8000fa0:	4b25      	ldr	r3, [pc, #148]	@ (8001038 <ETH_CMDPOLL+0x1b4>)
 8000fa2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000fa6:	801a      	strh	r2, [r3, #0]
			break;
 8000fa8:	bf00      	nop
		}
	}
	if(Sertableactflag == 1 && isdowndcmdreport >= Sampleperiod)		//服务表激活后 按照采样率向井下下发
 8000faa:	4b2b      	ldr	r3, [pc, #172]	@ (8001058 <ETH_CMDPOLL+0x1d4>)
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	d132      	bne.n	8001018 <ETH_CMDPOLL+0x194>
 8000fb2:	4b2a      	ldr	r3, [pc, #168]	@ (800105c <ETH_CMDPOLL+0x1d8>)
 8000fb4:	881a      	ldrh	r2, [r3, #0]
 8000fb6:	4b20      	ldr	r3, [pc, #128]	@ (8001038 <ETH_CMDPOLL+0x1b4>)
 8000fb8:	881b      	ldrh	r3, [r3, #0]
 8000fba:	429a      	cmp	r2, r3
 8000fbc:	d32c      	bcc.n	8001018 <ETH_CMDPOLL+0x194>
	{
		if(TOOLCONTRALCMD)
 8000fbe:	4b2c      	ldr	r3, [pc, #176]	@ (8001070 <ETH_CMDPOLL+0x1ec>)
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d00b      	beq.n	8000fde <ETH_CMDPOLL+0x15a>
		{
			Downcmdsend(TOOLCONTRALCMD);
 8000fc6:	4b2a      	ldr	r3, [pc, #168]	@ (8001070 <ETH_CMDPOLL+0x1ec>)
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f000 ff5a 	bl	8001e84 <Downcmdsend>
			TOOLCONTRALCMD = false;
 8000fd0:	4b27      	ldr	r3, [pc, #156]	@ (8001070 <ETH_CMDPOLL+0x1ec>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	701a      	strb	r2, [r3, #0]
			resendtpe = 0;
 8000fd6:	4b28      	ldr	r3, [pc, #160]	@ (8001078 <ETH_CMDPOLL+0x1f4>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	701a      	strb	r2, [r3, #0]
 8000fdc:	e019      	b.n	8001012 <ETH_CMDPOLL+0x18e>
			//PRINT_LOG("CMD is Toolcontralcmd\n\r");
		}
		else
		{
			if(Downtoolctrlcmdback == false && resendtpe < 3)			//控制命令下发，若井下无响应，重发，若三次无响应，舍弃该次控制命令。
 8000fde:	4b27      	ldr	r3, [pc, #156]	@ (800107c <ETH_CMDPOLL+0x1f8>)
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	f083 0301 	eor.w	r3, r3, #1
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d00f      	beq.n	800100c <ETH_CMDPOLL+0x188>
 8000fec:	4b22      	ldr	r3, [pc, #136]	@ (8001078 <ETH_CMDPOLL+0x1f4>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	2b02      	cmp	r3, #2
 8000ff2:	d80b      	bhi.n	800100c <ETH_CMDPOLL+0x188>
			{
				Downcmdsend(TOOLCONTRALCMD);
 8000ff4:	4b1e      	ldr	r3, [pc, #120]	@ (8001070 <ETH_CMDPOLL+0x1ec>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f000 ff43 	bl	8001e84 <Downcmdsend>
				resendtpe++;
 8000ffe:	4b1e      	ldr	r3, [pc, #120]	@ (8001078 <ETH_CMDPOLL+0x1f4>)
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	3301      	adds	r3, #1
 8001004:	b2da      	uxtb	r2, r3
 8001006:	4b1c      	ldr	r3, [pc, #112]	@ (8001078 <ETH_CMDPOLL+0x1f4>)
 8001008:	701a      	strb	r2, [r3, #0]
 800100a:	e002      	b.n	8001012 <ETH_CMDPOLL+0x18e>
			}
			else
			Downcmdsend(SERVICETABLE);
 800100c:	2001      	movs	r0, #1
 800100e:	f000 ff39 	bl	8001e84 <Downcmdsend>
			//PRINT_LOG("CMD is Servicetable\n\r");
		}
		isdowndcmdreport = 0;
 8001012:	4b12      	ldr	r3, [pc, #72]	@ (800105c <ETH_CMDPOLL+0x1d8>)
 8001014:	2200      	movs	r2, #0
 8001016:	801a      	strh	r2, [r3, #0]
	}
}
 8001018:	bf00      	nop
 800101a:	3708      	adds	r7, #8
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	2000079c 	.word	0x2000079c
 8001024:	20000788 	.word	0x20000788
 8001028:	20000584 	.word	0x20000584
 800102c:	200001ac 	.word	0x200001ac
 8001030:	200001ad 	.word	0x200001ad
 8001034:	200001ae 	.word	0x200001ae
 8001038:	20000004 	.word	0x20000004
 800103c:	200001b0 	.word	0x200001b0
 8001040:	200001b2 	.word	0x200001b2
 8001044:	200001b3 	.word	0x200001b3
 8001048:	08005c64 	.word	0x08005c64
 800104c:	20000784 	.word	0x20000784
 8001050:	200001b6 	.word	0x200001b6
 8001054:	200007c0 	.word	0x200007c0
 8001058:	20000006 	.word	0x20000006
 800105c:	20000204 	.word	0x20000204
 8001060:	2000020c 	.word	0x2000020c
 8001064:	200001b8 	.word	0x200001b8
 8001068:	08005c7c 	.word	0x08005c7c
 800106c:	200007f4 	.word	0x200007f4
 8001070:	200001b4 	.word	0x200001b4
 8001074:	08005c94 	.word	0x08005c94
 8001078:	200001ba 	.word	0x200001ba
 800107c:	2000079e 	.word	0x2000079e

08001080 <DOWN_DATAPOLL>:
extern unsigned char DOWNdatabuf[256];
extern unsigned char DOWNdatastate;
extern unsigned char DOWNheaddatanum;
extern unsigned char DOWNdatabodynum;
void DOWN_DATAPOLL(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
	if(DOWNdataoverflag == 1 && Downdatatimeoutnum <= Delaytime	)	//数据接收完毕且切在上位机允许的时间范围内
 8001084:	4b12      	ldr	r3, [pc, #72]	@ (80010d0 <DOWN_DATAPOLL+0x50>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	2b01      	cmp	r3, #1
 800108a:	d10c      	bne.n	80010a6 <DOWN_DATAPOLL+0x26>
 800108c:	4b11      	ldr	r3, [pc, #68]	@ (80010d4 <DOWN_DATAPOLL+0x54>)
 800108e:	881a      	ldrh	r2, [r3, #0]
 8001090:	4b11      	ldr	r3, [pc, #68]	@ (80010d8 <DOWN_DATAPOLL+0x58>)
 8001092:	881b      	ldrh	r3, [r3, #0]
 8001094:	429a      	cmp	r2, r3
 8001096:	d806      	bhi.n	80010a6 <DOWN_DATAPOLL+0x26>
	{
		Downdatasend(DATABACK);
 8001098:	2000      	movs	r0, #0
 800109a:	f000 ffcd 	bl	8002038 <Downdatasend>
		Resetstate(TOOLDATA);
 800109e:	2002      	movs	r0, #2
 80010a0:	f001 f85a 	bl	8002158 <Resetstate>
	{
		Downdatasend(TIMEOUT);
		Downdatatimeoutnum = 0;
		Resetstate(TOOLDATA);
	}
}
 80010a4:	e012      	b.n	80010cc <DOWN_DATAPOLL+0x4c>
	else if(Sertableactflag == 1 && Downdatatimeoutnum > Delaytime)	//无数据或数据接收完毕但超出上位机允许的时间范围
 80010a6:	4b0d      	ldr	r3, [pc, #52]	@ (80010dc <DOWN_DATAPOLL+0x5c>)
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d10e      	bne.n	80010cc <DOWN_DATAPOLL+0x4c>
 80010ae:	4b09      	ldr	r3, [pc, #36]	@ (80010d4 <DOWN_DATAPOLL+0x54>)
 80010b0:	881a      	ldrh	r2, [r3, #0]
 80010b2:	4b09      	ldr	r3, [pc, #36]	@ (80010d8 <DOWN_DATAPOLL+0x58>)
 80010b4:	881b      	ldrh	r3, [r3, #0]
 80010b6:	429a      	cmp	r2, r3
 80010b8:	d908      	bls.n	80010cc <DOWN_DATAPOLL+0x4c>
		Downdatasend(TIMEOUT);
 80010ba:	2001      	movs	r0, #1
 80010bc:	f000 ffbc 	bl	8002038 <Downdatasend>
		Downdatatimeoutnum = 0;
 80010c0:	4b04      	ldr	r3, [pc, #16]	@ (80010d4 <DOWN_DATAPOLL+0x54>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	801a      	strh	r2, [r3, #0]
		Resetstate(TOOLDATA);
 80010c6:	2002      	movs	r0, #2
 80010c8:	f001 f846 	bl	8002158 <Resetstate>
}
 80010cc:	bf00      	nop
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	2000079d 	.word	0x2000079d
 80010d4:	2000020c 	.word	0x2000020c
 80010d8:	200001b0 	.word	0x200001b0
 80010dc:	20000006 	.word	0x20000006

080010e0 <Sendtimestamp>:

extern unsigned char istimestampreport;
extern unsigned int Report_Timestamp;
unsigned char Timestampbuf[10]={0x47,0x47};
void Sendtimestamp(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
	if(istimestampreport >= 9)
 80010e4:	4b13      	ldr	r3, [pc, #76]	@ (8001134 <Sendtimestamp+0x54>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	2b08      	cmp	r3, #8
 80010ea:	d921      	bls.n	8001130 <Sendtimestamp+0x50>
	{
		Timestampbuf[2] = Report_Timestamp;
 80010ec:	4b12      	ldr	r3, [pc, #72]	@ (8001138 <Sendtimestamp+0x58>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	b2da      	uxtb	r2, r3
 80010f2:	4b12      	ldr	r3, [pc, #72]	@ (800113c <Sendtimestamp+0x5c>)
 80010f4:	709a      	strb	r2, [r3, #2]
		Timestampbuf[3] = Report_Timestamp>>8;
 80010f6:	4b10      	ldr	r3, [pc, #64]	@ (8001138 <Sendtimestamp+0x58>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	0a1b      	lsrs	r3, r3, #8
 80010fc:	b2da      	uxtb	r2, r3
 80010fe:	4b0f      	ldr	r3, [pc, #60]	@ (800113c <Sendtimestamp+0x5c>)
 8001100:	70da      	strb	r2, [r3, #3]
		Timestampbuf[4] = Report_Timestamp>>16;
 8001102:	4b0d      	ldr	r3, [pc, #52]	@ (8001138 <Sendtimestamp+0x58>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	0c1b      	lsrs	r3, r3, #16
 8001108:	b2da      	uxtb	r2, r3
 800110a:	4b0c      	ldr	r3, [pc, #48]	@ (800113c <Sendtimestamp+0x5c>)
 800110c:	711a      	strb	r2, [r3, #4]
		Timestampbuf[5] = Report_Timestamp>>24;
 800110e:	4b0a      	ldr	r3, [pc, #40]	@ (8001138 <Sendtimestamp+0x58>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	0e1b      	lsrs	r3, r3, #24
 8001114:	b2da      	uxtb	r2, r3
 8001116:	4b09      	ldr	r3, [pc, #36]	@ (800113c <Sendtimestamp+0x5c>)
 8001118:	715a      	strb	r2, [r3, #5]
		Timestampbuf[6] = 0xab;
 800111a:	4b08      	ldr	r3, [pc, #32]	@ (800113c <Sendtimestamp+0x5c>)
 800111c:	22ab      	movs	r2, #171	@ 0xab
 800111e:	719a      	strb	r2, [r3, #6]
		ComSendBuf(COM4,Timestampbuf,7);
 8001120:	2207      	movs	r2, #7
 8001122:	4906      	ldr	r1, [pc, #24]	@ (800113c <Sendtimestamp+0x5c>)
 8001124:	20cc      	movs	r0, #204	@ 0xcc
 8001126:	f000 fa51 	bl	80015cc <ComSendBuf>
		istimestampreport = 0;
 800112a:	4b02      	ldr	r3, [pc, #8]	@ (8001134 <Sendtimestamp+0x54>)
 800112c:	2200      	movs	r2, #0
 800112e:	701a      	strb	r2, [r3, #0]
	}
}
 8001130:	bf00      	nop
 8001132:	bd80      	pop	{r7, pc}
 8001134:	20000206 	.word	0x20000206
 8001138:	20000208 	.word	0x20000208
 800113c:	20000008 	.word	0x20000008

08001140 <TIM_init>:
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* USER CODE BEGIN 0 */
void TIM_init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
	MX_TIM6_Init();
 8001144:	f000 f808 	bl	8001158 <MX_TIM6_Init>
	HAL_TIM_Base_Start_IT(&htim6);
 8001148:	4802      	ldr	r0, [pc, #8]	@ (8001154 <TIM_init+0x14>)
 800114a:	f002 fe87 	bl	8003e5c <HAL_TIM_Base_Start_IT>
}
 800114e:	bf00      	nop
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	200001bc 	.word	0x200001bc

08001158 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800115e:	463b      	mov	r3, r7
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001166:	4b15      	ldr	r3, [pc, #84]	@ (80011bc <MX_TIM6_Init+0x64>)
 8001168:	4a15      	ldr	r2, [pc, #84]	@ (80011c0 <MX_TIM6_Init+0x68>)
 800116a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7200-1;
 800116c:	4b13      	ldr	r3, [pc, #76]	@ (80011bc <MX_TIM6_Init+0x64>)
 800116e:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8001172:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001174:	4b11      	ldr	r3, [pc, #68]	@ (80011bc <MX_TIM6_Init+0x64>)
 8001176:	2200      	movs	r2, #0
 8001178:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10-1;
 800117a:	4b10      	ldr	r3, [pc, #64]	@ (80011bc <MX_TIM6_Init+0x64>)
 800117c:	2209      	movs	r2, #9
 800117e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001180:	4b0e      	ldr	r3, [pc, #56]	@ (80011bc <MX_TIM6_Init+0x64>)
 8001182:	2200      	movs	r2, #0
 8001184:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001186:	480d      	ldr	r0, [pc, #52]	@ (80011bc <MX_TIM6_Init+0x64>)
 8001188:	f002 fe18 	bl	8003dbc <HAL_TIM_Base_Init>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001192:	f7ff fe71 	bl	8000e78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001196:	2300      	movs	r3, #0
 8001198:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800119a:	2300      	movs	r3, #0
 800119c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800119e:	463b      	mov	r3, r7
 80011a0:	4619      	mov	r1, r3
 80011a2:	4806      	ldr	r0, [pc, #24]	@ (80011bc <MX_TIM6_Init+0x64>)
 80011a4:	f003 f854 	bl	8004250 <HAL_TIMEx_MasterConfigSynchronization>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80011ae:	f7ff fe63 	bl	8000e78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80011b2:	bf00      	nop
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	200001bc 	.word	0x200001bc
 80011c0:	40001000 	.word	0x40001000

080011c4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a0d      	ldr	r2, [pc, #52]	@ (8001208 <HAL_TIM_Base_MspInit+0x44>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d113      	bne.n	80011fe <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80011d6:	4b0d      	ldr	r3, [pc, #52]	@ (800120c <HAL_TIM_Base_MspInit+0x48>)
 80011d8:	69db      	ldr	r3, [r3, #28]
 80011da:	4a0c      	ldr	r2, [pc, #48]	@ (800120c <HAL_TIM_Base_MspInit+0x48>)
 80011dc:	f043 0310 	orr.w	r3, r3, #16
 80011e0:	61d3      	str	r3, [r2, #28]
 80011e2:	4b0a      	ldr	r3, [pc, #40]	@ (800120c <HAL_TIM_Base_MspInit+0x48>)
 80011e4:	69db      	ldr	r3, [r3, #28]
 80011e6:	f003 0310 	and.w	r3, r3, #16
 80011ea:	60fb      	str	r3, [r7, #12]
 80011ec:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 80011ee:	2200      	movs	r2, #0
 80011f0:	2100      	movs	r1, #0
 80011f2:	2036      	movs	r0, #54	@ 0x36
 80011f4:	f001 fae7 	bl	80027c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 80011f8:	2036      	movs	r0, #54	@ 0x36
 80011fa:	f001 fb00 	bl	80027fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80011fe:	bf00      	nop
 8001200:	3710      	adds	r7, #16
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	40001000 	.word	0x40001000
 800120c:	40021000 	.word	0x40021000

08001210 <HAL_TIM_PeriodElapsedCallback>:
unsigned char istimestampreport = 0;
unsigned int Report_Timestamp = 0;
unsigned short Downdatatimeoutnum = 0;
unsigned char isDowntoolcmdreport = 0;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a0f      	ldr	r2, [pc, #60]	@ (800125c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d116      	bne.n	8001250 <HAL_TIM_PeriodElapsedCallback+0x40>
	{
		Report_Timestamp++;
 8001222:	4b0f      	ldr	r3, [pc, #60]	@ (8001260 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	3301      	adds	r3, #1
 8001228:	4a0d      	ldr	r2, [pc, #52]	@ (8001260 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800122a:	6013      	str	r3, [r2, #0]
		isdowndcmdreport++;
 800122c:	4b0d      	ldr	r3, [pc, #52]	@ (8001264 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800122e:	881b      	ldrh	r3, [r3, #0]
 8001230:	3301      	adds	r3, #1
 8001232:	b29a      	uxth	r2, r3
 8001234:	4b0b      	ldr	r3, [pc, #44]	@ (8001264 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001236:	801a      	strh	r2, [r3, #0]
		istimestampreport++;
 8001238:	4b0b      	ldr	r3, [pc, #44]	@ (8001268 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	3301      	adds	r3, #1
 800123e:	b2da      	uxtb	r2, r3
 8001240:	4b09      	ldr	r3, [pc, #36]	@ (8001268 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001242:	701a      	strb	r2, [r3, #0]
		Downdatatimeoutnum++;
 8001244:	4b09      	ldr	r3, [pc, #36]	@ (800126c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001246:	881b      	ldrh	r3, [r3, #0]
 8001248:	3301      	adds	r3, #1
 800124a:	b29a      	uxth	r2, r3
 800124c:	4b07      	ldr	r3, [pc, #28]	@ (800126c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800124e:	801a      	strh	r2, [r3, #0]
	}
}
 8001250:	bf00      	nop
 8001252:	370c      	adds	r7, #12
 8001254:	46bd      	mov	sp, r7
 8001256:	bc80      	pop	{r7}
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	40001000 	.word	0x40001000
 8001260:	20000208 	.word	0x20000208
 8001264:	20000204 	.word	0x20000204
 8001268:	20000206 	.word	0x20000206
 800126c:	2000020c 	.word	0x2000020c

08001270 <usart_init>:
DMA_HandleTypeDef hdma_usart1_tx;
DMA_HandleTypeDef hdma_usart4_tx;


void usart_init (void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
	MX_DMA_Init();
 8001274:	f7ff f88a 	bl	800038c <MX_DMA_Init>
	MX_UART4_Init();				//串口4初始化:串口4为时间深度同步信息上传串口
 8001278:	f000 f806 	bl	8001288 <MX_UART4_Init>
	MX_UART5_Init();				//串口5初始化:串口5为MCU与FPGA通讯串口
 800127c:	f000 f82e 	bl	80012dc <MX_UART5_Init>
	MX_USART1_UART_Init();			//串口1初始化:串口1为主控板与ETH通讯串口
 8001280:	f000 f85c 	bl	800133c <MX_USART1_UART_Init>
}
 8001284:	bf00      	nop
 8001286:	bd80      	pop	{r7, pc}

08001288 <MX_UART4_Init>:
/* UART4 init function */
void MX_UART4_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
  huart4.Instance = UART4;
 800128c:	4b11      	ldr	r3, [pc, #68]	@ (80012d4 <MX_UART4_Init+0x4c>)
 800128e:	4a12      	ldr	r2, [pc, #72]	@ (80012d8 <MX_UART4_Init+0x50>)
 8001290:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;						//波特率115200
 8001292:	4b10      	ldr	r3, [pc, #64]	@ (80012d4 <MX_UART4_Init+0x4c>)
 8001294:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001298:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800129a:	4b0e      	ldr	r3, [pc, #56]	@ (80012d4 <MX_UART4_Init+0x4c>)
 800129c:	2200      	movs	r2, #0
 800129e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80012a0:	4b0c      	ldr	r3, [pc, #48]	@ (80012d4 <MX_UART4_Init+0x4c>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80012a6:	4b0b      	ldr	r3, [pc, #44]	@ (80012d4 <MX_UART4_Init+0x4c>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80012ac:	4b09      	ldr	r3, [pc, #36]	@ (80012d4 <MX_UART4_Init+0x4c>)
 80012ae:	220c      	movs	r2, #12
 80012b0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012b2:	4b08      	ldr	r3, [pc, #32]	@ (80012d4 <MX_UART4_Init+0x4c>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80012b8:	4b06      	ldr	r3, [pc, #24]	@ (80012d4 <MX_UART4_Init+0x4c>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80012be:	4805      	ldr	r0, [pc, #20]	@ (80012d4 <MX_UART4_Init+0x4c>)
 80012c0:	f003 f844 	bl	800434c <HAL_UART_Init>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80012ca:	f7ff fdd5 	bl	8000e78 <Error_Handler>
  }
  //HAL_DMA_IRQHandler(&hdma_usart4_tx);
}
 80012ce:	bf00      	nop
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	20000218 	.word	0x20000218
 80012d8:	40004c00 	.word	0x40004c00

080012dc <MX_UART5_Init>:
void MX_UART5_Init(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
  huart5.Instance = UART5;
 80012e0:	4b13      	ldr	r3, [pc, #76]	@ (8001330 <MX_UART5_Init+0x54>)
 80012e2:	4a14      	ldr	r2, [pc, #80]	@ (8001334 <MX_UART5_Init+0x58>)
 80012e4:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80012e6:	4b12      	ldr	r3, [pc, #72]	@ (8001330 <MX_UART5_Init+0x54>)
 80012e8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80012ec:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80012ee:	4b10      	ldr	r3, [pc, #64]	@ (8001330 <MX_UART5_Init+0x54>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80012f4:	4b0e      	ldr	r3, [pc, #56]	@ (8001330 <MX_UART5_Init+0x54>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80012fa:	4b0d      	ldr	r3, [pc, #52]	@ (8001330 <MX_UART5_Init+0x54>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001300:	4b0b      	ldr	r3, [pc, #44]	@ (8001330 <MX_UART5_Init+0x54>)
 8001302:	220c      	movs	r2, #12
 8001304:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001306:	4b0a      	ldr	r3, [pc, #40]	@ (8001330 <MX_UART5_Init+0x54>)
 8001308:	2200      	movs	r2, #0
 800130a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800130c:	4b08      	ldr	r3, [pc, #32]	@ (8001330 <MX_UART5_Init+0x54>)
 800130e:	2200      	movs	r2, #0
 8001310:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001312:	4807      	ldr	r0, [pc, #28]	@ (8001330 <MX_UART5_Init+0x54>)
 8001314:	f003 f81a 	bl	800434c <HAL_UART_Init>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 800131e:	f7ff fdab 	bl	8000e78 <Error_Handler>
  }
  HAL_UART_Receive_IT(&huart5,(uint8_t*)Uart5_RxBuff, 1);
 8001322:	2201      	movs	r2, #1
 8001324:	4904      	ldr	r1, [pc, #16]	@ (8001338 <MX_UART5_Init+0x5c>)
 8001326:	4802      	ldr	r0, [pc, #8]	@ (8001330 <MX_UART5_Init+0x54>)
 8001328:	f003 f8eb 	bl	8004502 <HAL_UART_Receive_IT>
}
 800132c:	bf00      	nop
 800132e:	bd80      	pop	{r7, pc}
 8001330:	20000260 	.word	0x20000260
 8001334:	40005000 	.word	0x40005000
 8001338:	20000214 	.word	0x20000214

0800133c <MX_USART1_UART_Init>:

void MX_USART1_UART_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 8001340:	4b15      	ldr	r3, [pc, #84]	@ (8001398 <MX_USART1_UART_Init+0x5c>)
 8001342:	4a16      	ldr	r2, [pc, #88]	@ (800139c <MX_USART1_UART_Init+0x60>)
 8001344:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001346:	4b14      	ldr	r3, [pc, #80]	@ (8001398 <MX_USART1_UART_Init+0x5c>)
 8001348:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800134c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800134e:	4b12      	ldr	r3, [pc, #72]	@ (8001398 <MX_USART1_UART_Init+0x5c>)
 8001350:	2200      	movs	r2, #0
 8001352:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001354:	4b10      	ldr	r3, [pc, #64]	@ (8001398 <MX_USART1_UART_Init+0x5c>)
 8001356:	2200      	movs	r2, #0
 8001358:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800135a:	4b0f      	ldr	r3, [pc, #60]	@ (8001398 <MX_USART1_UART_Init+0x5c>)
 800135c:	2200      	movs	r2, #0
 800135e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001360:	4b0d      	ldr	r3, [pc, #52]	@ (8001398 <MX_USART1_UART_Init+0x5c>)
 8001362:	220c      	movs	r2, #12
 8001364:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001366:	4b0c      	ldr	r3, [pc, #48]	@ (8001398 <MX_USART1_UART_Init+0x5c>)
 8001368:	2200      	movs	r2, #0
 800136a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800136c:	4b0a      	ldr	r3, [pc, #40]	@ (8001398 <MX_USART1_UART_Init+0x5c>)
 800136e:	2200      	movs	r2, #0
 8001370:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001372:	4809      	ldr	r0, [pc, #36]	@ (8001398 <MX_USART1_UART_Init+0x5c>)
 8001374:	f002 ffea 	bl	800434c <HAL_UART_Init>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800137e:	f7ff fd7b 	bl	8000e78 <Error_Handler>
  }

  HAL_UART_Receive_IT(&huart1,(uint8_t*)Uart1_RxBuff, 1);
 8001382:	2201      	movs	r2, #1
 8001384:	4906      	ldr	r1, [pc, #24]	@ (80013a0 <MX_USART1_UART_Init+0x64>)
 8001386:	4804      	ldr	r0, [pc, #16]	@ (8001398 <MX_USART1_UART_Init+0x5c>)
 8001388:	f003 f8bb 	bl	8004502 <HAL_UART_Receive_IT>

  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800138c:	4805      	ldr	r0, [pc, #20]	@ (80013a4 <MX_USART1_UART_Init+0x68>)
 800138e:	f001 fc6b 	bl	8002c68 <HAL_DMA_IRQHandler>
}
 8001392:	bf00      	nop
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	200002a8 	.word	0x200002a8
 800139c:	40013800 	.word	0x40013800
 80013a0:	20000210 	.word	0x20000210
 80013a4:	200002f0 	.word	0x200002f0

080013a8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b08e      	sub	sp, #56	@ 0x38
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]
 80013b8:	605a      	str	r2, [r3, #4]
 80013ba:	609a      	str	r2, [r3, #8]
 80013bc:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==UART4)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a79      	ldr	r2, [pc, #484]	@ (80015a8 <HAL_UART_MspInit+0x200>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d13a      	bne.n	800143e <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80013c8:	4b78      	ldr	r3, [pc, #480]	@ (80015ac <HAL_UART_MspInit+0x204>)
 80013ca:	69db      	ldr	r3, [r3, #28]
 80013cc:	4a77      	ldr	r2, [pc, #476]	@ (80015ac <HAL_UART_MspInit+0x204>)
 80013ce:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80013d2:	61d3      	str	r3, [r2, #28]
 80013d4:	4b75      	ldr	r3, [pc, #468]	@ (80015ac <HAL_UART_MspInit+0x204>)
 80013d6:	69db      	ldr	r3, [r3, #28]
 80013d8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80013dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80013de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013e0:	4b72      	ldr	r3, [pc, #456]	@ (80015ac <HAL_UART_MspInit+0x204>)
 80013e2:	699b      	ldr	r3, [r3, #24]
 80013e4:	4a71      	ldr	r2, [pc, #452]	@ (80015ac <HAL_UART_MspInit+0x204>)
 80013e6:	f043 0310 	orr.w	r3, r3, #16
 80013ea:	6193      	str	r3, [r2, #24]
 80013ec:	4b6f      	ldr	r3, [pc, #444]	@ (80015ac <HAL_UART_MspInit+0x204>)
 80013ee:	699b      	ldr	r3, [r3, #24]
 80013f0:	f003 0310 	and.w	r3, r3, #16
 80013f4:	623b      	str	r3, [r7, #32]
 80013f6:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80013f8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80013fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013fe:	2302      	movs	r3, #2
 8001400:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001402:	2303      	movs	r3, #3
 8001404:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001406:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800140a:	4619      	mov	r1, r3
 800140c:	4868      	ldr	r0, [pc, #416]	@ (80015b0 <HAL_UART_MspInit+0x208>)
 800140e:	f001 fe95 	bl	800313c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001412:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001416:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001418:	2300      	movs	r3, #0
 800141a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141c:	2300      	movs	r3, #0
 800141e:	633b      	str	r3, [r7, #48]	@ 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001420:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001424:	4619      	mov	r1, r3
 8001426:	4862      	ldr	r0, [pc, #392]	@ (80015b0 <HAL_UART_MspInit+0x208>)
 8001428:	f001 fe88 	bl	800313c <HAL_GPIO_Init>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart4_tx);*/

    //HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
    //HAL_NVIC_EnableIRQ(UART4_IRQn);

    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800142c:	2200      	movs	r2, #0
 800142e:	2100      	movs	r1, #0
 8001430:	2034      	movs	r0, #52	@ 0x34
 8001432:	f001 f9c8 	bl	80027c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001436:	2034      	movs	r0, #52	@ 0x34
 8001438:	f001 f9e1 	bl	80027fe <HAL_NVIC_EnableIRQ>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);

    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  }
}
 800143c:	e0b0      	b.n	80015a0 <HAL_UART_MspInit+0x1f8>
  else if(uartHandle->Instance==UART5)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a5c      	ldr	r2, [pc, #368]	@ (80015b4 <HAL_UART_MspInit+0x20c>)
 8001444:	4293      	cmp	r3, r2
 8001446:	d145      	bne.n	80014d4 <HAL_UART_MspInit+0x12c>
    __HAL_RCC_UART5_CLK_ENABLE();
 8001448:	4b58      	ldr	r3, [pc, #352]	@ (80015ac <HAL_UART_MspInit+0x204>)
 800144a:	69db      	ldr	r3, [r3, #28]
 800144c:	4a57      	ldr	r2, [pc, #348]	@ (80015ac <HAL_UART_MspInit+0x204>)
 800144e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001452:	61d3      	str	r3, [r2, #28]
 8001454:	4b55      	ldr	r3, [pc, #340]	@ (80015ac <HAL_UART_MspInit+0x204>)
 8001456:	69db      	ldr	r3, [r3, #28]
 8001458:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800145c:	61fb      	str	r3, [r7, #28]
 800145e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001460:	4b52      	ldr	r3, [pc, #328]	@ (80015ac <HAL_UART_MspInit+0x204>)
 8001462:	699b      	ldr	r3, [r3, #24]
 8001464:	4a51      	ldr	r2, [pc, #324]	@ (80015ac <HAL_UART_MspInit+0x204>)
 8001466:	f043 0310 	orr.w	r3, r3, #16
 800146a:	6193      	str	r3, [r2, #24]
 800146c:	4b4f      	ldr	r3, [pc, #316]	@ (80015ac <HAL_UART_MspInit+0x204>)
 800146e:	699b      	ldr	r3, [r3, #24]
 8001470:	f003 0310 	and.w	r3, r3, #16
 8001474:	61bb      	str	r3, [r7, #24]
 8001476:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001478:	4b4c      	ldr	r3, [pc, #304]	@ (80015ac <HAL_UART_MspInit+0x204>)
 800147a:	699b      	ldr	r3, [r3, #24]
 800147c:	4a4b      	ldr	r2, [pc, #300]	@ (80015ac <HAL_UART_MspInit+0x204>)
 800147e:	f043 0320 	orr.w	r3, r3, #32
 8001482:	6193      	str	r3, [r2, #24]
 8001484:	4b49      	ldr	r3, [pc, #292]	@ (80015ac <HAL_UART_MspInit+0x204>)
 8001486:	699b      	ldr	r3, [r3, #24]
 8001488:	f003 0320 	and.w	r3, r3, #32
 800148c:	617b      	str	r3, [r7, #20]
 800148e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001490:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001494:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001496:	2302      	movs	r3, #2
 8001498:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800149a:	2303      	movs	r3, #3
 800149c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800149e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014a2:	4619      	mov	r1, r3
 80014a4:	4842      	ldr	r0, [pc, #264]	@ (80015b0 <HAL_UART_MspInit+0x208>)
 80014a6:	f001 fe49 	bl	800313c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80014aa:	2304      	movs	r3, #4
 80014ac:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014ae:	2300      	movs	r3, #0
 80014b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b2:	2300      	movs	r3, #0
 80014b4:	633b      	str	r3, [r7, #48]	@ 0x30
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014b6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014ba:	4619      	mov	r1, r3
 80014bc:	483e      	ldr	r0, [pc, #248]	@ (80015b8 <HAL_UART_MspInit+0x210>)
 80014be:	f001 fe3d 	bl	800313c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 80014c2:	2200      	movs	r2, #0
 80014c4:	2100      	movs	r1, #0
 80014c6:	2035      	movs	r0, #53	@ 0x35
 80014c8:	f001 f97d 	bl	80027c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80014cc:	2035      	movs	r0, #53	@ 0x35
 80014ce:	f001 f996 	bl	80027fe <HAL_NVIC_EnableIRQ>
}
 80014d2:	e065      	b.n	80015a0 <HAL_UART_MspInit+0x1f8>
  else if(uartHandle->Instance==USART1)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a38      	ldr	r2, [pc, #224]	@ (80015bc <HAL_UART_MspInit+0x214>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d160      	bne.n	80015a0 <HAL_UART_MspInit+0x1f8>
    __HAL_RCC_USART1_CLK_ENABLE();
 80014de:	4b33      	ldr	r3, [pc, #204]	@ (80015ac <HAL_UART_MspInit+0x204>)
 80014e0:	699b      	ldr	r3, [r3, #24]
 80014e2:	4a32      	ldr	r2, [pc, #200]	@ (80015ac <HAL_UART_MspInit+0x204>)
 80014e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014e8:	6193      	str	r3, [r2, #24]
 80014ea:	4b30      	ldr	r3, [pc, #192]	@ (80015ac <HAL_UART_MspInit+0x204>)
 80014ec:	699b      	ldr	r3, [r3, #24]
 80014ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014f2:	613b      	str	r3, [r7, #16]
 80014f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f6:	4b2d      	ldr	r3, [pc, #180]	@ (80015ac <HAL_UART_MspInit+0x204>)
 80014f8:	699b      	ldr	r3, [r3, #24]
 80014fa:	4a2c      	ldr	r2, [pc, #176]	@ (80015ac <HAL_UART_MspInit+0x204>)
 80014fc:	f043 0304 	orr.w	r3, r3, #4
 8001500:	6193      	str	r3, [r2, #24]
 8001502:	4b2a      	ldr	r3, [pc, #168]	@ (80015ac <HAL_UART_MspInit+0x204>)
 8001504:	699b      	ldr	r3, [r3, #24]
 8001506:	f003 0304 	and.w	r3, r3, #4
 800150a:	60fb      	str	r3, [r7, #12]
 800150c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800150e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001512:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001514:	2302      	movs	r3, #2
 8001516:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001518:	2303      	movs	r3, #3
 800151a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800151c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001520:	4619      	mov	r1, r3
 8001522:	4827      	ldr	r0, [pc, #156]	@ (80015c0 <HAL_UART_MspInit+0x218>)
 8001524:	f001 fe0a 	bl	800313c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001528:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800152c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800152e:	2300      	movs	r3, #0
 8001530:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001532:	2300      	movs	r3, #0
 8001534:	633b      	str	r3, [r7, #48]	@ 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001536:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800153a:	4619      	mov	r1, r3
 800153c:	4820      	ldr	r0, [pc, #128]	@ (80015c0 <HAL_UART_MspInit+0x218>)
 800153e:	f001 fdfd 	bl	800313c <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8001542:	4b20      	ldr	r3, [pc, #128]	@ (80015c4 <HAL_UART_MspInit+0x21c>)
 8001544:	4a20      	ldr	r2, [pc, #128]	@ (80015c8 <HAL_UART_MspInit+0x220>)
 8001546:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001548:	4b1e      	ldr	r3, [pc, #120]	@ (80015c4 <HAL_UART_MspInit+0x21c>)
 800154a:	2210      	movs	r2, #16
 800154c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800154e:	4b1d      	ldr	r3, [pc, #116]	@ (80015c4 <HAL_UART_MspInit+0x21c>)
 8001550:	2200      	movs	r2, #0
 8001552:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001554:	4b1b      	ldr	r3, [pc, #108]	@ (80015c4 <HAL_UART_MspInit+0x21c>)
 8001556:	2280      	movs	r2, #128	@ 0x80
 8001558:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800155a:	4b1a      	ldr	r3, [pc, #104]	@ (80015c4 <HAL_UART_MspInit+0x21c>)
 800155c:	2200      	movs	r2, #0
 800155e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001560:	4b18      	ldr	r3, [pc, #96]	@ (80015c4 <HAL_UART_MspInit+0x21c>)
 8001562:	2200      	movs	r2, #0
 8001564:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001566:	4b17      	ldr	r3, [pc, #92]	@ (80015c4 <HAL_UART_MspInit+0x21c>)
 8001568:	2200      	movs	r2, #0
 800156a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800156c:	4b15      	ldr	r3, [pc, #84]	@ (80015c4 <HAL_UART_MspInit+0x21c>)
 800156e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001572:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001574:	4813      	ldr	r0, [pc, #76]	@ (80015c4 <HAL_UART_MspInit+0x21c>)
 8001576:	f001 f95d 	bl	8002834 <HAL_DMA_Init>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <HAL_UART_MspInit+0x1dc>
      Error_Handler();
 8001580:	f7ff fc7a 	bl	8000e78 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	4a0f      	ldr	r2, [pc, #60]	@ (80015c4 <HAL_UART_MspInit+0x21c>)
 8001588:	639a      	str	r2, [r3, #56]	@ 0x38
 800158a:	4a0e      	ldr	r2, [pc, #56]	@ (80015c4 <HAL_UART_MspInit+0x21c>)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6253      	str	r3, [r2, #36]	@ 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001590:	2200      	movs	r2, #0
 8001592:	2100      	movs	r1, #0
 8001594:	2025      	movs	r0, #37	@ 0x25
 8001596:	f001 f916 	bl	80027c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800159a:	2025      	movs	r0, #37	@ 0x25
 800159c:	f001 f92f 	bl	80027fe <HAL_NVIC_EnableIRQ>
}
 80015a0:	bf00      	nop
 80015a2:	3738      	adds	r7, #56	@ 0x38
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	40004c00 	.word	0x40004c00
 80015ac:	40021000 	.word	0x40021000
 80015b0:	40011000 	.word	0x40011000
 80015b4:	40005000 	.word	0x40005000
 80015b8:	40011400 	.word	0x40011400
 80015bc:	40013800 	.word	0x40013800
 80015c0:	40010800 	.word	0x40010800
 80015c4:	200002f0 	.word	0x200002f0
 80015c8:	40020044 	.word	0x40020044

080015cc <ComSendBuf>:
  /* USER CODE END USART1_MspDeInit 1 */
  }
}

void ComSendBuf(uint8_t com,uint8_t *p,uint16_t len)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	4603      	mov	r3, r0
 80015d4:	6039      	str	r1, [r7, #0]
 80015d6:	71fb      	strb	r3, [r7, #7]
 80015d8:	4613      	mov	r3, r2
 80015da:	80bb      	strh	r3, [r7, #4]
	if(com == 0xdd)
 80015dc:	79fb      	ldrb	r3, [r7, #7]
 80015de:	2bdd      	cmp	r3, #221	@ 0xdd
 80015e0:	d105      	bne.n	80015ee <ComSendBuf+0x22>
	{
		HAL_UART_Transmit_DMA(&huart1, p, len);
 80015e2:	88bb      	ldrh	r3, [r7, #4]
 80015e4:	461a      	mov	r2, r3
 80015e6:	6839      	ldr	r1, [r7, #0]
 80015e8:	480c      	ldr	r0, [pc, #48]	@ (800161c <ComSendBuf+0x50>)
 80015ea:	f002 ffaf 	bl	800454c <HAL_UART_Transmit_DMA>
	}
	if(com == 0xee)
 80015ee:	79fb      	ldrb	r3, [r7, #7]
 80015f0:	2bee      	cmp	r3, #238	@ 0xee
 80015f2:	d105      	bne.n	8001600 <ComSendBuf+0x34>
	{
		HAL_UART_Transmit(&huart5, p, len, 0xff);
 80015f4:	88ba      	ldrh	r2, [r7, #4]
 80015f6:	23ff      	movs	r3, #255	@ 0xff
 80015f8:	6839      	ldr	r1, [r7, #0]
 80015fa:	4809      	ldr	r0, [pc, #36]	@ (8001620 <ComSendBuf+0x54>)
 80015fc:	f002 fef6 	bl	80043ec <HAL_UART_Transmit>
	}
	if(com == 0xcc)
 8001600:	79fb      	ldrb	r3, [r7, #7]
 8001602:	2bcc      	cmp	r3, #204	@ 0xcc
 8001604:	d105      	bne.n	8001612 <ComSendBuf+0x46>
	{
		HAL_UART_Transmit(&huart4, p, len, 0xff);
 8001606:	88ba      	ldrh	r2, [r7, #4]
 8001608:	23ff      	movs	r3, #255	@ 0xff
 800160a:	6839      	ldr	r1, [r7, #0]
 800160c:	4805      	ldr	r0, [pc, #20]	@ (8001624 <ComSendBuf+0x58>)
 800160e:	f002 feed 	bl	80043ec <HAL_UART_Transmit>
	}
}
 8001612:	bf00      	nop
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	200002a8 	.word	0x200002a8
 8001620:	20000260 	.word	0x20000260
 8001624:	20000218 	.word	0x20000218

08001628 <HAL_UART_RxCpltCallback>:
unsigned char DOWNdataoverflag;				//井下数据接收完毕标志

_Bool Downtoolctrlcmdback;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)		//串口中断回调函数
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1) 		//如果产生中断的是串口1
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a9e      	ldr	r2, [pc, #632]	@ (80018b0 <HAL_UART_RxCpltCallback+0x288>)
 8001636:	4293      	cmp	r3, r2
 8001638:	f040 82bd 	bne.w	8001bb6 <HAL_UART_RxCpltCallback+0x58e>
	{
		if(Uart1_RxBuff[0] == 0xFF && ETHdatastate<3) {ETHdatastate = 0;}
 800163c:	4b9d      	ldr	r3, [pc, #628]	@ (80018b4 <HAL_UART_RxCpltCallback+0x28c>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	2bff      	cmp	r3, #255	@ 0xff
 8001642:	d106      	bne.n	8001652 <HAL_UART_RxCpltCallback+0x2a>
 8001644:	4b9c      	ldr	r3, [pc, #624]	@ (80018b8 <HAL_UART_RxCpltCallback+0x290>)
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	2b02      	cmp	r3, #2
 800164a:	d802      	bhi.n	8001652 <HAL_UART_RxCpltCallback+0x2a>
 800164c:	4b9a      	ldr	r3, [pc, #616]	@ (80018b8 <HAL_UART_RxCpltCallback+0x290>)
 800164e:	2200      	movs	r2, #0
 8001650:	701a      	strb	r2, [r3, #0]
		switch(ETHdatastate)
 8001652:	4b99      	ldr	r3, [pc, #612]	@ (80018b8 <HAL_UART_RxCpltCallback+0x290>)
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	2b11      	cmp	r3, #17
 8001658:	f200 82a8 	bhi.w	8001bac <HAL_UART_RxCpltCallback+0x584>
 800165c:	a201      	add	r2, pc, #4	@ (adr r2, 8001664 <HAL_UART_RxCpltCallback+0x3c>)
 800165e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001662:	bf00      	nop
 8001664:	080016ad 	.word	0x080016ad
 8001668:	080016e1 	.word	0x080016e1
 800166c:	08001715 	.word	0x08001715
 8001670:	08001749 	.word	0x08001749
 8001674:	0800177d 	.word	0x0800177d
 8001678:	080017ab 	.word	0x080017ab
 800167c:	080017e3 	.word	0x080017e3
 8001680:	080018e1 	.word	0x080018e1
 8001684:	0800190d 	.word	0x0800190d
 8001688:	0800193b 	.word	0x0800193b
 800168c:	08001973 	.word	0x08001973
 8001690:	080019d7 	.word	0x080019d7
 8001694:	08001a05 	.word	0x08001a05
 8001698:	08001a3d 	.word	0x08001a3d
 800169c:	08001a6b 	.word	0x08001a6b
 80016a0:	08001aa3 	.word	0x08001aa3
 80016a4:	08001aeb 	.word	0x08001aeb
 80016a8:	08001b55 	.word	0x08001b55
		{
			case 0:
				if(Uart1_RxBuff[0] == 0xFF)					//同步头FF 00 55 AA
 80016ac:	4b81      	ldr	r3, [pc, #516]	@ (80018b4 <HAL_UART_RxCpltCallback+0x28c>)
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	2bff      	cmp	r3, #255	@ 0xff
 80016b2:	d111      	bne.n	80016d8 <HAL_UART_RxCpltCallback+0xb0>
				{
					ETHdatabuf[ETHdataheadnum++] = Uart1_RxBuff[0];
 80016b4:	4b81      	ldr	r3, [pc, #516]	@ (80018bc <HAL_UART_RxCpltCallback+0x294>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	1c5a      	adds	r2, r3, #1
 80016ba:	b2d1      	uxtb	r1, r2
 80016bc:	4a7f      	ldr	r2, [pc, #508]	@ (80018bc <HAL_UART_RxCpltCallback+0x294>)
 80016be:	7011      	strb	r1, [r2, #0]
 80016c0:	461a      	mov	r2, r3
 80016c2:	4b7c      	ldr	r3, [pc, #496]	@ (80018b4 <HAL_UART_RxCpltCallback+0x28c>)
 80016c4:	7819      	ldrb	r1, [r3, #0]
 80016c6:	4b7e      	ldr	r3, [pc, #504]	@ (80018c0 <HAL_UART_RxCpltCallback+0x298>)
 80016c8:	5499      	strb	r1, [r3, r2]
					ETHdatastate++ ;
 80016ca:	4b7b      	ldr	r3, [pc, #492]	@ (80018b8 <HAL_UART_RxCpltCallback+0x290>)
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	3301      	adds	r3, #1
 80016d0:	b2da      	uxtb	r2, r3
 80016d2:	4b79      	ldr	r3, [pc, #484]	@ (80018b8 <HAL_UART_RxCpltCallback+0x290>)
 80016d4:	701a      	strb	r2, [r3, #0]
				}
				else
				{
					Resetstate(ETHCMD);
				}
				break;
 80016d6:	e269      	b.n	8001bac <HAL_UART_RxCpltCallback+0x584>
					Resetstate(ETHCMD);
 80016d8:	2001      	movs	r0, #1
 80016da:	f000 fd3d 	bl	8002158 <Resetstate>
				break;
 80016de:	e265      	b.n	8001bac <HAL_UART_RxCpltCallback+0x584>
			case 1:
				if(Uart1_RxBuff[0] == 0x00)
 80016e0:	4b74      	ldr	r3, [pc, #464]	@ (80018b4 <HAL_UART_RxCpltCallback+0x28c>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d111      	bne.n	800170c <HAL_UART_RxCpltCallback+0xe4>
				{
					ETHdatabuf[ETHdataheadnum++] = Uart1_RxBuff[0];
 80016e8:	4b74      	ldr	r3, [pc, #464]	@ (80018bc <HAL_UART_RxCpltCallback+0x294>)
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	1c5a      	adds	r2, r3, #1
 80016ee:	b2d1      	uxtb	r1, r2
 80016f0:	4a72      	ldr	r2, [pc, #456]	@ (80018bc <HAL_UART_RxCpltCallback+0x294>)
 80016f2:	7011      	strb	r1, [r2, #0]
 80016f4:	461a      	mov	r2, r3
 80016f6:	4b6f      	ldr	r3, [pc, #444]	@ (80018b4 <HAL_UART_RxCpltCallback+0x28c>)
 80016f8:	7819      	ldrb	r1, [r3, #0]
 80016fa:	4b71      	ldr	r3, [pc, #452]	@ (80018c0 <HAL_UART_RxCpltCallback+0x298>)
 80016fc:	5499      	strb	r1, [r3, r2]
					ETHdatastate++ ;
 80016fe:	4b6e      	ldr	r3, [pc, #440]	@ (80018b8 <HAL_UART_RxCpltCallback+0x290>)
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	3301      	adds	r3, #1
 8001704:	b2da      	uxtb	r2, r3
 8001706:	4b6c      	ldr	r3, [pc, #432]	@ (80018b8 <HAL_UART_RxCpltCallback+0x290>)
 8001708:	701a      	strb	r2, [r3, #0]
				}
				else
				{
					Resetstate(ETHCMD);
				}
				break;
 800170a:	e24f      	b.n	8001bac <HAL_UART_RxCpltCallback+0x584>
					Resetstate(ETHCMD);
 800170c:	2001      	movs	r0, #1
 800170e:	f000 fd23 	bl	8002158 <Resetstate>
				break;
 8001712:	e24b      	b.n	8001bac <HAL_UART_RxCpltCallback+0x584>
			case 2:
				if(Uart1_RxBuff[0] == 0x55)
 8001714:	4b67      	ldr	r3, [pc, #412]	@ (80018b4 <HAL_UART_RxCpltCallback+0x28c>)
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	2b55      	cmp	r3, #85	@ 0x55
 800171a:	d111      	bne.n	8001740 <HAL_UART_RxCpltCallback+0x118>
				{
					ETHdatabuf[ETHdataheadnum++] = Uart1_RxBuff[0];
 800171c:	4b67      	ldr	r3, [pc, #412]	@ (80018bc <HAL_UART_RxCpltCallback+0x294>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	1c5a      	adds	r2, r3, #1
 8001722:	b2d1      	uxtb	r1, r2
 8001724:	4a65      	ldr	r2, [pc, #404]	@ (80018bc <HAL_UART_RxCpltCallback+0x294>)
 8001726:	7011      	strb	r1, [r2, #0]
 8001728:	461a      	mov	r2, r3
 800172a:	4b62      	ldr	r3, [pc, #392]	@ (80018b4 <HAL_UART_RxCpltCallback+0x28c>)
 800172c:	7819      	ldrb	r1, [r3, #0]
 800172e:	4b64      	ldr	r3, [pc, #400]	@ (80018c0 <HAL_UART_RxCpltCallback+0x298>)
 8001730:	5499      	strb	r1, [r3, r2]
					ETHdatastate++ ;
 8001732:	4b61      	ldr	r3, [pc, #388]	@ (80018b8 <HAL_UART_RxCpltCallback+0x290>)
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	3301      	adds	r3, #1
 8001738:	b2da      	uxtb	r2, r3
 800173a:	4b5f      	ldr	r3, [pc, #380]	@ (80018b8 <HAL_UART_RxCpltCallback+0x290>)
 800173c:	701a      	strb	r2, [r3, #0]
				}
				else
				{
					Resetstate(ETHCMD);
				}
				break;
 800173e:	e235      	b.n	8001bac <HAL_UART_RxCpltCallback+0x584>
					Resetstate(ETHCMD);
 8001740:	2001      	movs	r0, #1
 8001742:	f000 fd09 	bl	8002158 <Resetstate>
				break;
 8001746:	e231      	b.n	8001bac <HAL_UART_RxCpltCallback+0x584>
			case 3:
				if(Uart1_RxBuff[0] == 0xAA)
 8001748:	4b5a      	ldr	r3, [pc, #360]	@ (80018b4 <HAL_UART_RxCpltCallback+0x28c>)
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	2baa      	cmp	r3, #170	@ 0xaa
 800174e:	d111      	bne.n	8001774 <HAL_UART_RxCpltCallback+0x14c>
				{
					ETHdatabuf[ETHdataheadnum++] = Uart1_RxBuff[0];
 8001750:	4b5a      	ldr	r3, [pc, #360]	@ (80018bc <HAL_UART_RxCpltCallback+0x294>)
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	1c5a      	adds	r2, r3, #1
 8001756:	b2d1      	uxtb	r1, r2
 8001758:	4a58      	ldr	r2, [pc, #352]	@ (80018bc <HAL_UART_RxCpltCallback+0x294>)
 800175a:	7011      	strb	r1, [r2, #0]
 800175c:	461a      	mov	r2, r3
 800175e:	4b55      	ldr	r3, [pc, #340]	@ (80018b4 <HAL_UART_RxCpltCallback+0x28c>)
 8001760:	7819      	ldrb	r1, [r3, #0]
 8001762:	4b57      	ldr	r3, [pc, #348]	@ (80018c0 <HAL_UART_RxCpltCallback+0x298>)
 8001764:	5499      	strb	r1, [r3, r2]
					ETHdatastate++ ;
 8001766:	4b54      	ldr	r3, [pc, #336]	@ (80018b8 <HAL_UART_RxCpltCallback+0x290>)
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	3301      	adds	r3, #1
 800176c:	b2da      	uxtb	r2, r3
 800176e:	4b52      	ldr	r3, [pc, #328]	@ (80018b8 <HAL_UART_RxCpltCallback+0x290>)
 8001770:	701a      	strb	r2, [r3, #0]
				}
				else
				{
					Resetstate(ETHCMD);
				}
				break;
 8001772:	e21b      	b.n	8001bac <HAL_UART_RxCpltCallback+0x584>
					Resetstate(ETHCMD);
 8001774:	2001      	movs	r0, #1
 8001776:	f000 fcef 	bl	8002158 <Resetstate>
				break;
 800177a:	e217      	b.n	8001bac <HAL_UART_RxCpltCallback+0x584>
			case 4:
				ETHdatabuf[ETHdataheadnum++] = Uart1_RxBuff[0];
 800177c:	4b4f      	ldr	r3, [pc, #316]	@ (80018bc <HAL_UART_RxCpltCallback+0x294>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	1c5a      	adds	r2, r3, #1
 8001782:	b2d1      	uxtb	r1, r2
 8001784:	4a4d      	ldr	r2, [pc, #308]	@ (80018bc <HAL_UART_RxCpltCallback+0x294>)
 8001786:	7011      	strb	r1, [r2, #0]
 8001788:	461a      	mov	r2, r3
 800178a:	4b4a      	ldr	r3, [pc, #296]	@ (80018b4 <HAL_UART_RxCpltCallback+0x28c>)
 800178c:	7819      	ldrb	r1, [r3, #0]
 800178e:	4b4c      	ldr	r3, [pc, #304]	@ (80018c0 <HAL_UART_RxCpltCallback+0x298>)
 8001790:	5499      	strb	r1, [r3, r2]
				ETHdatalen = Uart1_RxBuff[0];						//上位机数据长度高字节
 8001792:	4b48      	ldr	r3, [pc, #288]	@ (80018b4 <HAL_UART_RxCpltCallback+0x28c>)
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	461a      	mov	r2, r3
 8001798:	4b4a      	ldr	r3, [pc, #296]	@ (80018c4 <HAL_UART_RxCpltCallback+0x29c>)
 800179a:	801a      	strh	r2, [r3, #0]
				ETHdatastate++ ;
 800179c:	4b46      	ldr	r3, [pc, #280]	@ (80018b8 <HAL_UART_RxCpltCallback+0x290>)
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	3301      	adds	r3, #1
 80017a2:	b2da      	uxtb	r2, r3
 80017a4:	4b44      	ldr	r3, [pc, #272]	@ (80018b8 <HAL_UART_RxCpltCallback+0x290>)
 80017a6:	701a      	strb	r2, [r3, #0]
				break;
 80017a8:	e200      	b.n	8001bac <HAL_UART_RxCpltCallback+0x584>
			case 5:
				ETHdatabuf[ETHdataheadnum++] = Uart1_RxBuff[0];
 80017aa:	4b44      	ldr	r3, [pc, #272]	@ (80018bc <HAL_UART_RxCpltCallback+0x294>)
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	1c5a      	adds	r2, r3, #1
 80017b0:	b2d1      	uxtb	r1, r2
 80017b2:	4a42      	ldr	r2, [pc, #264]	@ (80018bc <HAL_UART_RxCpltCallback+0x294>)
 80017b4:	7011      	strb	r1, [r2, #0]
 80017b6:	461a      	mov	r2, r3
 80017b8:	4b3e      	ldr	r3, [pc, #248]	@ (80018b4 <HAL_UART_RxCpltCallback+0x28c>)
 80017ba:	7819      	ldrb	r1, [r3, #0]
 80017bc:	4b40      	ldr	r3, [pc, #256]	@ (80018c0 <HAL_UART_RxCpltCallback+0x298>)
 80017be:	5499      	strb	r1, [r3, r2]
				ETHdatalen = (ETHdatalen<<8) + Uart1_RxBuff[0];				//上位机数据长度低字节
 80017c0:	4b40      	ldr	r3, [pc, #256]	@ (80018c4 <HAL_UART_RxCpltCallback+0x29c>)
 80017c2:	881b      	ldrh	r3, [r3, #0]
 80017c4:	021b      	lsls	r3, r3, #8
 80017c6:	b29b      	uxth	r3, r3
 80017c8:	4a3a      	ldr	r2, [pc, #232]	@ (80018b4 <HAL_UART_RxCpltCallback+0x28c>)
 80017ca:	7812      	ldrb	r2, [r2, #0]
 80017cc:	4413      	add	r3, r2
 80017ce:	b29a      	uxth	r2, r3
 80017d0:	4b3c      	ldr	r3, [pc, #240]	@ (80018c4 <HAL_UART_RxCpltCallback+0x29c>)
 80017d2:	801a      	strh	r2, [r3, #0]
				ETHdatastate++ ;
 80017d4:	4b38      	ldr	r3, [pc, #224]	@ (80018b8 <HAL_UART_RxCpltCallback+0x290>)
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	3301      	adds	r3, #1
 80017da:	b2da      	uxtb	r2, r3
 80017dc:	4b36      	ldr	r3, [pc, #216]	@ (80018b8 <HAL_UART_RxCpltCallback+0x290>)
 80017de:	701a      	strb	r2, [r3, #0]
				break;
 80017e0:	e1e4      	b.n	8001bac <HAL_UART_RxCpltCallback+0x584>
			case 6:
				ETHdatabuf[ETHdataheadnum++] = Uart1_RxBuff[0];
 80017e2:	4b36      	ldr	r3, [pc, #216]	@ (80018bc <HAL_UART_RxCpltCallback+0x294>)
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	1c5a      	adds	r2, r3, #1
 80017e8:	b2d1      	uxtb	r1, r2
 80017ea:	4a34      	ldr	r2, [pc, #208]	@ (80018bc <HAL_UART_RxCpltCallback+0x294>)
 80017ec:	7011      	strb	r1, [r2, #0]
 80017ee:	461a      	mov	r2, r3
 80017f0:	4b30      	ldr	r3, [pc, #192]	@ (80018b4 <HAL_UART_RxCpltCallback+0x28c>)
 80017f2:	7819      	ldrb	r1, [r3, #0]
 80017f4:	4b32      	ldr	r3, [pc, #200]	@ (80018c0 <HAL_UART_RxCpltCallback+0x298>)
 80017f6:	5499      	strb	r1, [r3, r2]
				OveralltypeH = Uart1_RxBuff[0]>>4;						//该字节为数据读写总类型标示字节，解析读写数据类型，高位代表读或写，低位代表数据类型
 80017f8:	4b2e      	ldr	r3, [pc, #184]	@ (80018b4 <HAL_UART_RxCpltCallback+0x28c>)
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	091b      	lsrs	r3, r3, #4
 80017fe:	b2da      	uxtb	r2, r3
 8001800:	4b31      	ldr	r3, [pc, #196]	@ (80018c8 <HAL_UART_RxCpltCallback+0x2a0>)
 8001802:	701a      	strb	r2, [r3, #0]
				OveralltypeL = Uart1_RxBuff[0] & 0x0F;
 8001804:	4b2b      	ldr	r3, [pc, #172]	@ (80018b4 <HAL_UART_RxCpltCallback+0x28c>)
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	f003 030f 	and.w	r3, r3, #15
 800180c:	b2da      	uxtb	r2, r3
 800180e:	4b2f      	ldr	r3, [pc, #188]	@ (80018cc <HAL_UART_RxCpltCallback+0x2a4>)
 8001810:	701a      	strb	r2, [r3, #0]
				if(OveralltypeH == 0x01)
 8001812:	4b2d      	ldr	r3, [pc, #180]	@ (80018c8 <HAL_UART_RxCpltCallback+0x2a0>)
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	2b01      	cmp	r3, #1
 8001818:	d13b      	bne.n	8001892 <HAL_UART_RxCpltCallback+0x26a>
				{
					Totaltype = DATA_WR;							//向井下写数据
 800181a:	4b2d      	ldr	r3, [pc, #180]	@ (80018d0 <HAL_UART_RxCpltCallback+0x2a8>)
 800181c:	2201      	movs	r2, #1
 800181e:	701a      	strb	r2, [r3, #0]
					if(OveralltypeL == 0x00)
 8001820:	4b2a      	ldr	r3, [pc, #168]	@ (80018cc <HAL_UART_RxCpltCallback+0x2a4>)
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d109      	bne.n	800183c <HAL_UART_RxCpltCallback+0x214>
					{
						Workmode = SERVICETABLE;					//服务表激活
 8001828:	4b2a      	ldr	r3, [pc, #168]	@ (80018d4 <HAL_UART_RxCpltCallback+0x2ac>)
 800182a:	2201      	movs	r2, #1
 800182c:	701a      	strb	r2, [r3, #0]
						ETHdatastate++ ;
 800182e:	4b22      	ldr	r3, [pc, #136]	@ (80018b8 <HAL_UART_RxCpltCallback+0x290>)
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	3301      	adds	r3, #1
 8001834:	b2da      	uxtb	r2, r3
 8001836:	4b20      	ldr	r3, [pc, #128]	@ (80018b8 <HAL_UART_RxCpltCallback+0x290>)
 8001838:	701a      	strb	r2, [r3, #0]
				}
				else
				{
					Resetstate(ETHCMD);
				}
				break;
 800183a:	e1b7      	b.n	8001bac <HAL_UART_RxCpltCallback+0x584>
					else if(OveralltypeL == 0x01)
 800183c:	4b23      	ldr	r3, [pc, #140]	@ (80018cc <HAL_UART_RxCpltCallback+0x2a4>)
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	2b01      	cmp	r3, #1
 8001842:	d109      	bne.n	8001858 <HAL_UART_RxCpltCallback+0x230>
						Workmode = CONTRALCMD;						//下发控制命令
 8001844:	4b23      	ldr	r3, [pc, #140]	@ (80018d4 <HAL_UART_RxCpltCallback+0x2ac>)
 8001846:	2202      	movs	r2, #2
 8001848:	701a      	strb	r2, [r3, #0]
						ETHdatastate++ ;
 800184a:	4b1b      	ldr	r3, [pc, #108]	@ (80018b8 <HAL_UART_RxCpltCallback+0x290>)
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	3301      	adds	r3, #1
 8001850:	b2da      	uxtb	r2, r3
 8001852:	4b19      	ldr	r3, [pc, #100]	@ (80018b8 <HAL_UART_RxCpltCallback+0x290>)
 8001854:	701a      	strb	r2, [r3, #0]
				break;
 8001856:	e1a9      	b.n	8001bac <HAL_UART_RxCpltCallback+0x584>
					else if(OveralltypeL == 0x03)
 8001858:	4b1c      	ldr	r3, [pc, #112]	@ (80018cc <HAL_UART_RxCpltCallback+0x2a4>)
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	2b03      	cmp	r3, #3
 800185e:	d106      	bne.n	800186e <HAL_UART_RxCpltCallback+0x246>
						ETHdatastate++ ;
 8001860:	4b15      	ldr	r3, [pc, #84]	@ (80018b8 <HAL_UART_RxCpltCallback+0x290>)
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	3301      	adds	r3, #1
 8001866:	b2da      	uxtb	r2, r3
 8001868:	4b13      	ldr	r3, [pc, #76]	@ (80018b8 <HAL_UART_RxCpltCallback+0x290>)
 800186a:	701a      	strb	r2, [r3, #0]
				break;
 800186c:	e19e      	b.n	8001bac <HAL_UART_RxCpltCallback+0x584>
					else if(OveralltypeL == 0x04)
 800186e:	4b17      	ldr	r3, [pc, #92]	@ (80018cc <HAL_UART_RxCpltCallback+0x2a4>)
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	2b04      	cmp	r3, #4
 8001874:	d109      	bne.n	800188a <HAL_UART_RxCpltCallback+0x262>
						Workmode = DEACTIVE;						//服务表反激活
 8001876:	4b17      	ldr	r3, [pc, #92]	@ (80018d4 <HAL_UART_RxCpltCallback+0x2ac>)
 8001878:	2204      	movs	r2, #4
 800187a:	701a      	strb	r2, [r3, #0]
						ETHdatastate++ ;
 800187c:	4b0e      	ldr	r3, [pc, #56]	@ (80018b8 <HAL_UART_RxCpltCallback+0x290>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	3301      	adds	r3, #1
 8001882:	b2da      	uxtb	r2, r3
 8001884:	4b0c      	ldr	r3, [pc, #48]	@ (80018b8 <HAL_UART_RxCpltCallback+0x290>)
 8001886:	701a      	strb	r2, [r3, #0]
				break;
 8001888:	e190      	b.n	8001bac <HAL_UART_RxCpltCallback+0x584>
						Resetstate(ETHCMD);
 800188a:	2001      	movs	r0, #1
 800188c:	f000 fc64 	bl	8002158 <Resetstate>
				break;
 8001890:	e18c      	b.n	8001bac <HAL_UART_RxCpltCallback+0x584>
				else if(OveralltypeH == 0x02)
 8001892:	4b0d      	ldr	r3, [pc, #52]	@ (80018c8 <HAL_UART_RxCpltCallback+0x2a0>)
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	2b02      	cmp	r3, #2
 8001898:	d11e      	bne.n	80018d8 <HAL_UART_RxCpltCallback+0x2b0>
					Totaltype = DATA_RD;							//从井下读数据
 800189a:	4b0d      	ldr	r3, [pc, #52]	@ (80018d0 <HAL_UART_RxCpltCallback+0x2a8>)
 800189c:	2202      	movs	r2, #2
 800189e:	701a      	strb	r2, [r3, #0]
					ETHdatastate++ ;
 80018a0:	4b05      	ldr	r3, [pc, #20]	@ (80018b8 <HAL_UART_RxCpltCallback+0x290>)
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	3301      	adds	r3, #1
 80018a6:	b2da      	uxtb	r2, r3
 80018a8:	4b03      	ldr	r3, [pc, #12]	@ (80018b8 <HAL_UART_RxCpltCallback+0x290>)
 80018aa:	701a      	strb	r2, [r3, #0]
				break;
 80018ac:	e17e      	b.n	8001bac <HAL_UART_RxCpltCallback+0x584>
 80018ae:	bf00      	nop
 80018b0:	40013800 	.word	0x40013800
 80018b4:	20000210 	.word	0x20000210
 80018b8:	20000378 	.word	0x20000378
 80018bc:	2000037a 	.word	0x2000037a
 80018c0:	20000384 	.word	0x20000384
 80018c4:	20000784 	.word	0x20000784
 80018c8:	2000037e 	.word	0x2000037e
 80018cc:	2000037f 	.word	0x2000037f
 80018d0:	20000380 	.word	0x20000380
 80018d4:	20000788 	.word	0x20000788
					Resetstate(ETHCMD);
 80018d8:	2001      	movs	r0, #1
 80018da:	f000 fc3d 	bl	8002158 <Resetstate>
				break;
 80018de:	e165      	b.n	8001bac <HAL_UART_RxCpltCallback+0x584>
			case 7:
				ETHdatabuf[ETHdataheadnum++] = Uart1_RxBuff[0];		//仪器地址
 80018e0:	4b8d      	ldr	r3, [pc, #564]	@ (8001b18 <HAL_UART_RxCpltCallback+0x4f0>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	1c5a      	adds	r2, r3, #1
 80018e6:	b2d1      	uxtb	r1, r2
 80018e8:	4a8b      	ldr	r2, [pc, #556]	@ (8001b18 <HAL_UART_RxCpltCallback+0x4f0>)
 80018ea:	7011      	strb	r1, [r2, #0]
 80018ec:	461a      	mov	r2, r3
 80018ee:	4b8b      	ldr	r3, [pc, #556]	@ (8001b1c <HAL_UART_RxCpltCallback+0x4f4>)
 80018f0:	7819      	ldrb	r1, [r3, #0]
 80018f2:	4b8b      	ldr	r3, [pc, #556]	@ (8001b20 <HAL_UART_RxCpltCallback+0x4f8>)
 80018f4:	5499      	strb	r1, [r3, r2]
				Tooladdress = Uart1_RxBuff[0];
 80018f6:	4b89      	ldr	r3, [pc, #548]	@ (8001b1c <HAL_UART_RxCpltCallback+0x4f4>)
 80018f8:	781a      	ldrb	r2, [r3, #0]
 80018fa:	4b8a      	ldr	r3, [pc, #552]	@ (8001b24 <HAL_UART_RxCpltCallback+0x4fc>)
 80018fc:	701a      	strb	r2, [r3, #0]
				ETHdatastate++ ;
 80018fe:	4b8a      	ldr	r3, [pc, #552]	@ (8001b28 <HAL_UART_RxCpltCallback+0x500>)
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	3301      	adds	r3, #1
 8001904:	b2da      	uxtb	r2, r3
 8001906:	4b88      	ldr	r3, [pc, #544]	@ (8001b28 <HAL_UART_RxCpltCallback+0x500>)
 8001908:	701a      	strb	r2, [r3, #0]
				break;
 800190a:	e14f      	b.n	8001bac <HAL_UART_RxCpltCallback+0x584>
			case 8:
				ETHdatabuf[ETHdataheadnum++] = Uart1_RxBuff[0];
 800190c:	4b82      	ldr	r3, [pc, #520]	@ (8001b18 <HAL_UART_RxCpltCallback+0x4f0>)
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	1c5a      	adds	r2, r3, #1
 8001912:	b2d1      	uxtb	r1, r2
 8001914:	4a80      	ldr	r2, [pc, #512]	@ (8001b18 <HAL_UART_RxCpltCallback+0x4f0>)
 8001916:	7011      	strb	r1, [r2, #0]
 8001918:	461a      	mov	r2, r3
 800191a:	4b80      	ldr	r3, [pc, #512]	@ (8001b1c <HAL_UART_RxCpltCallback+0x4f4>)
 800191c:	7819      	ldrb	r1, [r3, #0]
 800191e:	4b80      	ldr	r3, [pc, #512]	@ (8001b20 <HAL_UART_RxCpltCallback+0x4f8>)
 8001920:	5499      	strb	r1, [r3, r2]
				Cmdword = Uart1_RxBuff[0];
 8001922:	4b7e      	ldr	r3, [pc, #504]	@ (8001b1c <HAL_UART_RxCpltCallback+0x4f4>)
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	461a      	mov	r2, r3
 8001928:	4b80      	ldr	r3, [pc, #512]	@ (8001b2c <HAL_UART_RxCpltCallback+0x504>)
 800192a:	801a      	strh	r2, [r3, #0]
				ETHdatastate++ ;
 800192c:	4b7e      	ldr	r3, [pc, #504]	@ (8001b28 <HAL_UART_RxCpltCallback+0x500>)
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	3301      	adds	r3, #1
 8001932:	b2da      	uxtb	r2, r3
 8001934:	4b7c      	ldr	r3, [pc, #496]	@ (8001b28 <HAL_UART_RxCpltCallback+0x500>)
 8001936:	701a      	strb	r2, [r3, #0]
				break;
 8001938:	e138      	b.n	8001bac <HAL_UART_RxCpltCallback+0x584>
			case 9:
				ETHdatabuf[ETHdataheadnum++] = Uart1_RxBuff[0];		//命令字/subset number
 800193a:	4b77      	ldr	r3, [pc, #476]	@ (8001b18 <HAL_UART_RxCpltCallback+0x4f0>)
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	1c5a      	adds	r2, r3, #1
 8001940:	b2d1      	uxtb	r1, r2
 8001942:	4a75      	ldr	r2, [pc, #468]	@ (8001b18 <HAL_UART_RxCpltCallback+0x4f0>)
 8001944:	7011      	strb	r1, [r2, #0]
 8001946:	461a      	mov	r2, r3
 8001948:	4b74      	ldr	r3, [pc, #464]	@ (8001b1c <HAL_UART_RxCpltCallback+0x4f4>)
 800194a:	7819      	ldrb	r1, [r3, #0]
 800194c:	4b74      	ldr	r3, [pc, #464]	@ (8001b20 <HAL_UART_RxCpltCallback+0x4f8>)
 800194e:	5499      	strb	r1, [r3, r2]
				Cmdword = (Cmdword << 8) + Uart1_RxBuff[0];
 8001950:	4b76      	ldr	r3, [pc, #472]	@ (8001b2c <HAL_UART_RxCpltCallback+0x504>)
 8001952:	881b      	ldrh	r3, [r3, #0]
 8001954:	021b      	lsls	r3, r3, #8
 8001956:	b29b      	uxth	r3, r3
 8001958:	4a70      	ldr	r2, [pc, #448]	@ (8001b1c <HAL_UART_RxCpltCallback+0x4f4>)
 800195a:	7812      	ldrb	r2, [r2, #0]
 800195c:	4413      	add	r3, r2
 800195e:	b29a      	uxth	r2, r3
 8001960:	4b72      	ldr	r3, [pc, #456]	@ (8001b2c <HAL_UART_RxCpltCallback+0x504>)
 8001962:	801a      	strh	r2, [r3, #0]
				ETHdatastate++ ;
 8001964:	4b70      	ldr	r3, [pc, #448]	@ (8001b28 <HAL_UART_RxCpltCallback+0x500>)
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	3301      	adds	r3, #1
 800196a:	b2da      	uxtb	r2, r3
 800196c:	4b6e      	ldr	r3, [pc, #440]	@ (8001b28 <HAL_UART_RxCpltCallback+0x500>)
 800196e:	701a      	strb	r2, [r3, #0]
				break;
 8001970:	e11c      	b.n	8001bac <HAL_UART_RxCpltCallback+0x584>
			case 10:
				if(Timestampnum <= 4)									//四字节时间戳
 8001972:	4b6f      	ldr	r3, [pc, #444]	@ (8001b30 <HAL_UART_RxCpltCallback+0x508>)
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	2b04      	cmp	r3, #4
 8001978:	f200 8115 	bhi.w	8001ba6 <HAL_UART_RxCpltCallback+0x57e>
				{
					Timestampnum++;
 800197c:	4b6c      	ldr	r3, [pc, #432]	@ (8001b30 <HAL_UART_RxCpltCallback+0x508>)
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	3301      	adds	r3, #1
 8001982:	b2da      	uxtb	r2, r3
 8001984:	4b6a      	ldr	r3, [pc, #424]	@ (8001b30 <HAL_UART_RxCpltCallback+0x508>)
 8001986:	701a      	strb	r2, [r3, #0]
					ETHdatabuf[ETHdataheadnum++] = Uart1_RxBuff[0];
 8001988:	4b63      	ldr	r3, [pc, #396]	@ (8001b18 <HAL_UART_RxCpltCallback+0x4f0>)
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	1c5a      	adds	r2, r3, #1
 800198e:	b2d1      	uxtb	r1, r2
 8001990:	4a61      	ldr	r2, [pc, #388]	@ (8001b18 <HAL_UART_RxCpltCallback+0x4f0>)
 8001992:	7011      	strb	r1, [r2, #0]
 8001994:	461a      	mov	r2, r3
 8001996:	4b61      	ldr	r3, [pc, #388]	@ (8001b1c <HAL_UART_RxCpltCallback+0x4f4>)
 8001998:	7819      	ldrb	r1, [r3, #0]
 800199a:	4b61      	ldr	r3, [pc, #388]	@ (8001b20 <HAL_UART_RxCpltCallback+0x4f8>)
 800199c:	5499      	strb	r1, [r3, r2]
					ETH_Timestamp = (ETH_Timestamp << 8) + Uart1_RxBuff[0];
 800199e:	4b65      	ldr	r3, [pc, #404]	@ (8001b34 <HAL_UART_RxCpltCallback+0x50c>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	021b      	lsls	r3, r3, #8
 80019a4:	4a5d      	ldr	r2, [pc, #372]	@ (8001b1c <HAL_UART_RxCpltCallback+0x4f4>)
 80019a6:	7812      	ldrb	r2, [r2, #0]
 80019a8:	4413      	add	r3, r2
 80019aa:	4a62      	ldr	r2, [pc, #392]	@ (8001b34 <HAL_UART_RxCpltCallback+0x50c>)
 80019ac:	6013      	str	r3, [r2, #0]
					HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_12);
 80019ae:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80019b2:	4861      	ldr	r0, [pc, #388]	@ (8001b38 <HAL_UART_RxCpltCallback+0x510>)
 80019b4:	f001 fd85 	bl	80034c2 <HAL_GPIO_TogglePin>
					if(Timestampnum >=4)
 80019b8:	4b5d      	ldr	r3, [pc, #372]	@ (8001b30 <HAL_UART_RxCpltCallback+0x508>)
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	2b03      	cmp	r3, #3
 80019be:	f240 80f2 	bls.w	8001ba6 <HAL_UART_RxCpltCallback+0x57e>
					{
						ETHdatastate++;
 80019c2:	4b59      	ldr	r3, [pc, #356]	@ (8001b28 <HAL_UART_RxCpltCallback+0x500>)
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	3301      	adds	r3, #1
 80019c8:	b2da      	uxtb	r2, r3
 80019ca:	4b57      	ldr	r3, [pc, #348]	@ (8001b28 <HAL_UART_RxCpltCallback+0x500>)
 80019cc:	701a      	strb	r2, [r3, #0]
						Timestampnum = 0;
 80019ce:	4b58      	ldr	r3, [pc, #352]	@ (8001b30 <HAL_UART_RxCpltCallback+0x508>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	701a      	strb	r2, [r3, #0]
					}
				}
				break;
 80019d4:	e0e7      	b.n	8001ba6 <HAL_UART_RxCpltCallback+0x57e>
			case 11:
				ETHdatabuf[ETHdataheadnum++] = Uart1_RxBuff[0];
 80019d6:	4b50      	ldr	r3, [pc, #320]	@ (8001b18 <HAL_UART_RxCpltCallback+0x4f0>)
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	1c5a      	adds	r2, r3, #1
 80019dc:	b2d1      	uxtb	r1, r2
 80019de:	4a4e      	ldr	r2, [pc, #312]	@ (8001b18 <HAL_UART_RxCpltCallback+0x4f0>)
 80019e0:	7011      	strb	r1, [r2, #0]
 80019e2:	461a      	mov	r2, r3
 80019e4:	4b4d      	ldr	r3, [pc, #308]	@ (8001b1c <HAL_UART_RxCpltCallback+0x4f4>)
 80019e6:	7819      	ldrb	r1, [r3, #0]
 80019e8:	4b4d      	ldr	r3, [pc, #308]	@ (8001b20 <HAL_UART_RxCpltCallback+0x4f8>)
 80019ea:	5499      	strb	r1, [r3, r2]
				Overtime = Uart1_RxBuff[0];
 80019ec:	4b4b      	ldr	r3, [pc, #300]	@ (8001b1c <HAL_UART_RxCpltCallback+0x4f4>)
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	461a      	mov	r2, r3
 80019f2:	4b52      	ldr	r3, [pc, #328]	@ (8001b3c <HAL_UART_RxCpltCallback+0x514>)
 80019f4:	801a      	strh	r2, [r3, #0]
				ETHdatastate++;
 80019f6:	4b4c      	ldr	r3, [pc, #304]	@ (8001b28 <HAL_UART_RxCpltCallback+0x500>)
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	3301      	adds	r3, #1
 80019fc:	b2da      	uxtb	r2, r3
 80019fe:	4b4a      	ldr	r3, [pc, #296]	@ (8001b28 <HAL_UART_RxCpltCallback+0x500>)
 8001a00:	701a      	strb	r2, [r3, #0]
				break;
 8001a02:	e0d3      	b.n	8001bac <HAL_UART_RxCpltCallback+0x584>
			case 12:
				ETHdatabuf[ETHdataheadnum++] = Uart1_RxBuff[0];
 8001a04:	4b44      	ldr	r3, [pc, #272]	@ (8001b18 <HAL_UART_RxCpltCallback+0x4f0>)
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	1c5a      	adds	r2, r3, #1
 8001a0a:	b2d1      	uxtb	r1, r2
 8001a0c:	4a42      	ldr	r2, [pc, #264]	@ (8001b18 <HAL_UART_RxCpltCallback+0x4f0>)
 8001a0e:	7011      	strb	r1, [r2, #0]
 8001a10:	461a      	mov	r2, r3
 8001a12:	4b42      	ldr	r3, [pc, #264]	@ (8001b1c <HAL_UART_RxCpltCallback+0x4f4>)
 8001a14:	7819      	ldrb	r1, [r3, #0]
 8001a16:	4b42      	ldr	r3, [pc, #264]	@ (8001b20 <HAL_UART_RxCpltCallback+0x4f8>)
 8001a18:	5499      	strb	r1, [r3, r2]
				Overtime = (Overtime << 8) + Uart1_RxBuff[0];						//超时时间
 8001a1a:	4b48      	ldr	r3, [pc, #288]	@ (8001b3c <HAL_UART_RxCpltCallback+0x514>)
 8001a1c:	881b      	ldrh	r3, [r3, #0]
 8001a1e:	021b      	lsls	r3, r3, #8
 8001a20:	b29b      	uxth	r3, r3
 8001a22:	4a3e      	ldr	r2, [pc, #248]	@ (8001b1c <HAL_UART_RxCpltCallback+0x4f4>)
 8001a24:	7812      	ldrb	r2, [r2, #0]
 8001a26:	4413      	add	r3, r2
 8001a28:	b29a      	uxth	r2, r3
 8001a2a:	4b44      	ldr	r3, [pc, #272]	@ (8001b3c <HAL_UART_RxCpltCallback+0x514>)
 8001a2c:	801a      	strh	r2, [r3, #0]
				ETHdatastate++;
 8001a2e:	4b3e      	ldr	r3, [pc, #248]	@ (8001b28 <HAL_UART_RxCpltCallback+0x500>)
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	3301      	adds	r3, #1
 8001a34:	b2da      	uxtb	r2, r3
 8001a36:	4b3c      	ldr	r3, [pc, #240]	@ (8001b28 <HAL_UART_RxCpltCallback+0x500>)
 8001a38:	701a      	strb	r2, [r3, #0]
				break;
 8001a3a:	e0b7      	b.n	8001bac <HAL_UART_RxCpltCallback+0x584>
			case 13:
				ETHdatabuf[ETHdataheadnum++] = Uart1_RxBuff[0];
 8001a3c:	4b36      	ldr	r3, [pc, #216]	@ (8001b18 <HAL_UART_RxCpltCallback+0x4f0>)
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	1c5a      	adds	r2, r3, #1
 8001a42:	b2d1      	uxtb	r1, r2
 8001a44:	4a34      	ldr	r2, [pc, #208]	@ (8001b18 <HAL_UART_RxCpltCallback+0x4f0>)
 8001a46:	7011      	strb	r1, [r2, #0]
 8001a48:	461a      	mov	r2, r3
 8001a4a:	4b34      	ldr	r3, [pc, #208]	@ (8001b1c <HAL_UART_RxCpltCallback+0x4f4>)
 8001a4c:	7819      	ldrb	r1, [r3, #0]
 8001a4e:	4b34      	ldr	r3, [pc, #208]	@ (8001b20 <HAL_UART_RxCpltCallback+0x4f8>)
 8001a50:	5499      	strb	r1, [r3, r2]
				Reserve = Uart1_RxBuff[0];
 8001a52:	4b32      	ldr	r3, [pc, #200]	@ (8001b1c <HAL_UART_RxCpltCallback+0x4f4>)
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	461a      	mov	r2, r3
 8001a58:	4b39      	ldr	r3, [pc, #228]	@ (8001b40 <HAL_UART_RxCpltCallback+0x518>)
 8001a5a:	801a      	strh	r2, [r3, #0]
				ETHdatastate++;
 8001a5c:	4b32      	ldr	r3, [pc, #200]	@ (8001b28 <HAL_UART_RxCpltCallback+0x500>)
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	3301      	adds	r3, #1
 8001a62:	b2da      	uxtb	r2, r3
 8001a64:	4b30      	ldr	r3, [pc, #192]	@ (8001b28 <HAL_UART_RxCpltCallback+0x500>)
 8001a66:	701a      	strb	r2, [r3, #0]
				break;
 8001a68:	e0a0      	b.n	8001bac <HAL_UART_RxCpltCallback+0x584>
			case 14:
				ETHdatabuf[ETHdataheadnum++] = Uart1_RxBuff[0];
 8001a6a:	4b2b      	ldr	r3, [pc, #172]	@ (8001b18 <HAL_UART_RxCpltCallback+0x4f0>)
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	1c5a      	adds	r2, r3, #1
 8001a70:	b2d1      	uxtb	r1, r2
 8001a72:	4a29      	ldr	r2, [pc, #164]	@ (8001b18 <HAL_UART_RxCpltCallback+0x4f0>)
 8001a74:	7011      	strb	r1, [r2, #0]
 8001a76:	461a      	mov	r2, r3
 8001a78:	4b28      	ldr	r3, [pc, #160]	@ (8001b1c <HAL_UART_RxCpltCallback+0x4f4>)
 8001a7a:	7819      	ldrb	r1, [r3, #0]
 8001a7c:	4b28      	ldr	r3, [pc, #160]	@ (8001b20 <HAL_UART_RxCpltCallback+0x4f8>)
 8001a7e:	5499      	strb	r1, [r3, r2]
				Reserve = (Reserve << 8) + Uart1_RxBuff[0];
 8001a80:	4b2f      	ldr	r3, [pc, #188]	@ (8001b40 <HAL_UART_RxCpltCallback+0x518>)
 8001a82:	881b      	ldrh	r3, [r3, #0]
 8001a84:	021b      	lsls	r3, r3, #8
 8001a86:	b29b      	uxth	r3, r3
 8001a88:	4a24      	ldr	r2, [pc, #144]	@ (8001b1c <HAL_UART_RxCpltCallback+0x4f4>)
 8001a8a:	7812      	ldrb	r2, [r2, #0]
 8001a8c:	4413      	add	r3, r2
 8001a8e:	b29a      	uxth	r2, r3
 8001a90:	4b2b      	ldr	r3, [pc, #172]	@ (8001b40 <HAL_UART_RxCpltCallback+0x518>)
 8001a92:	801a      	strh	r2, [r3, #0]
				ETHdatastate++;
 8001a94:	4b24      	ldr	r3, [pc, #144]	@ (8001b28 <HAL_UART_RxCpltCallback+0x500>)
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	3301      	adds	r3, #1
 8001a9a:	b2da      	uxtb	r2, r3
 8001a9c:	4b22      	ldr	r3, [pc, #136]	@ (8001b28 <HAL_UART_RxCpltCallback+0x500>)
 8001a9e:	701a      	strb	r2, [r3, #0]
				break;
 8001aa0:	e084      	b.n	8001bac <HAL_UART_RxCpltCallback+0x584>
			case 15:
				ETHdatabuf[ETHdataheadnum++] = Uart1_RxBuff[0];
 8001aa2:	4b1d      	ldr	r3, [pc, #116]	@ (8001b18 <HAL_UART_RxCpltCallback+0x4f0>)
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	1c5a      	adds	r2, r3, #1
 8001aa8:	b2d1      	uxtb	r1, r2
 8001aaa:	4a1b      	ldr	r2, [pc, #108]	@ (8001b18 <HAL_UART_RxCpltCallback+0x4f0>)
 8001aac:	7011      	strb	r1, [r2, #0]
 8001aae:	461a      	mov	r2, r3
 8001ab0:	4b1a      	ldr	r3, [pc, #104]	@ (8001b1c <HAL_UART_RxCpltCallback+0x4f4>)
 8001ab2:	7819      	ldrb	r1, [r3, #0]
 8001ab4:	4b1a      	ldr	r3, [pc, #104]	@ (8001b20 <HAL_UART_RxCpltCallback+0x4f8>)
 8001ab6:	5499      	strb	r1, [r3, r2]
				ETHbodybuf[ETHdatabodynum++] = Uart1_RxBuff[0];
 8001ab8:	4b22      	ldr	r3, [pc, #136]	@ (8001b44 <HAL_UART_RxCpltCallback+0x51c>)
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	1c5a      	adds	r2, r3, #1
 8001abe:	b2d1      	uxtb	r1, r2
 8001ac0:	4a20      	ldr	r2, [pc, #128]	@ (8001b44 <HAL_UART_RxCpltCallback+0x51c>)
 8001ac2:	7011      	strb	r1, [r2, #0]
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	4b15      	ldr	r3, [pc, #84]	@ (8001b1c <HAL_UART_RxCpltCallback+0x4f4>)
 8001ac8:	7819      	ldrb	r1, [r3, #0]
 8001aca:	4b1f      	ldr	r3, [pc, #124]	@ (8001b48 <HAL_UART_RxCpltCallback+0x520>)
 8001acc:	5499      	strb	r1, [r3, r2]
				if(ETHdatabodynum >= ETHdatalen)
 8001ace:	4b1d      	ldr	r3, [pc, #116]	@ (8001b44 <HAL_UART_RxCpltCallback+0x51c>)
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	4b1d      	ldr	r3, [pc, #116]	@ (8001b4c <HAL_UART_RxCpltCallback+0x524>)
 8001ad6:	881b      	ldrh	r3, [r3, #0]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d366      	bcc.n	8001baa <HAL_UART_RxCpltCallback+0x582>
				{
					ETHdatastate++;
 8001adc:	4b12      	ldr	r3, [pc, #72]	@ (8001b28 <HAL_UART_RxCpltCallback+0x500>)
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	3301      	adds	r3, #1
 8001ae2:	b2da      	uxtb	r2, r3
 8001ae4:	4b10      	ldr	r3, [pc, #64]	@ (8001b28 <HAL_UART_RxCpltCallback+0x500>)
 8001ae6:	701a      	strb	r2, [r3, #0]
				}
				break;
 8001ae8:	e05f      	b.n	8001baa <HAL_UART_RxCpltCallback+0x582>
			case 16:
				ETHdatabuf[ETHdataheadnum++] = Uart1_RxBuff[0];
 8001aea:	4b0b      	ldr	r3, [pc, #44]	@ (8001b18 <HAL_UART_RxCpltCallback+0x4f0>)
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	1c5a      	adds	r2, r3, #1
 8001af0:	b2d1      	uxtb	r1, r2
 8001af2:	4a09      	ldr	r2, [pc, #36]	@ (8001b18 <HAL_UART_RxCpltCallback+0x4f0>)
 8001af4:	7011      	strb	r1, [r2, #0]
 8001af6:	461a      	mov	r2, r3
 8001af8:	4b08      	ldr	r3, [pc, #32]	@ (8001b1c <HAL_UART_RxCpltCallback+0x4f4>)
 8001afa:	7819      	ldrb	r1, [r3, #0]
 8001afc:	4b08      	ldr	r3, [pc, #32]	@ (8001b20 <HAL_UART_RxCpltCallback+0x4f8>)
 8001afe:	5499      	strb	r1, [r3, r2]
				ETH_Checksum = Uart1_RxBuff[0];
 8001b00:	4b06      	ldr	r3, [pc, #24]	@ (8001b1c <HAL_UART_RxCpltCallback+0x4f4>)
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	461a      	mov	r2, r3
 8001b06:	4b12      	ldr	r3, [pc, #72]	@ (8001b50 <HAL_UART_RxCpltCallback+0x528>)
 8001b08:	801a      	strh	r2, [r3, #0]
				ETHdatastate++;
 8001b0a:	4b07      	ldr	r3, [pc, #28]	@ (8001b28 <HAL_UART_RxCpltCallback+0x500>)
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	3301      	adds	r3, #1
 8001b10:	b2da      	uxtb	r2, r3
 8001b12:	4b05      	ldr	r3, [pc, #20]	@ (8001b28 <HAL_UART_RxCpltCallback+0x500>)
 8001b14:	701a      	strb	r2, [r3, #0]
				break;
 8001b16:	e049      	b.n	8001bac <HAL_UART_RxCpltCallback+0x584>
 8001b18:	2000037a 	.word	0x2000037a
 8001b1c:	20000210 	.word	0x20000210
 8001b20:	20000384 	.word	0x20000384
 8001b24:	20000789 	.word	0x20000789
 8001b28:	20000378 	.word	0x20000378
 8001b2c:	2000078a 	.word	0x2000078a
 8001b30:	2000078c 	.word	0x2000078c
 8001b34:	20000790 	.word	0x20000790
 8001b38:	40010c00 	.word	0x40010c00
 8001b3c:	20000794 	.word	0x20000794
 8001b40:	20000796 	.word	0x20000796
 8001b44:	2000037c 	.word	0x2000037c
 8001b48:	20000584 	.word	0x20000584
 8001b4c:	20000784 	.word	0x20000784
 8001b50:	20000798 	.word	0x20000798
			case 17:
				ETHdatabuf[ETHdataheadnum++] = Uart1_RxBuff[0];
 8001b54:	4b8e      	ldr	r3, [pc, #568]	@ (8001d90 <HAL_UART_RxCpltCallback+0x768>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	1c5a      	adds	r2, r3, #1
 8001b5a:	b2d1      	uxtb	r1, r2
 8001b5c:	4a8c      	ldr	r2, [pc, #560]	@ (8001d90 <HAL_UART_RxCpltCallback+0x768>)
 8001b5e:	7011      	strb	r1, [r2, #0]
 8001b60:	461a      	mov	r2, r3
 8001b62:	4b8c      	ldr	r3, [pc, #560]	@ (8001d94 <HAL_UART_RxCpltCallback+0x76c>)
 8001b64:	7819      	ldrb	r1, [r3, #0]
 8001b66:	4b8c      	ldr	r3, [pc, #560]	@ (8001d98 <HAL_UART_RxCpltCallback+0x770>)
 8001b68:	5499      	strb	r1, [r3, r2]
				ETH_Checksum = (ETH_Checksum << 8) + Uart1_RxBuff[0];
 8001b6a:	4b8c      	ldr	r3, [pc, #560]	@ (8001d9c <HAL_UART_RxCpltCallback+0x774>)
 8001b6c:	881b      	ldrh	r3, [r3, #0]
 8001b6e:	021b      	lsls	r3, r3, #8
 8001b70:	b29b      	uxth	r3, r3
 8001b72:	4a88      	ldr	r2, [pc, #544]	@ (8001d94 <HAL_UART_RxCpltCallback+0x76c>)
 8001b74:	7812      	ldrb	r2, [r2, #0]
 8001b76:	4413      	add	r3, r2
 8001b78:	b29a      	uxth	r2, r3
 8001b7a:	4b88      	ldr	r3, [pc, #544]	@ (8001d9c <HAL_UART_RxCpltCallback+0x774>)
 8001b7c:	801a      	strh	r2, [r3, #0]

				if(ETH_Checksum == Checksum_Reverse(ETHbodybuf,ETHdatalen))
 8001b7e:	4b88      	ldr	r3, [pc, #544]	@ (8001da0 <HAL_UART_RxCpltCallback+0x778>)
 8001b80:	881b      	ldrh	r3, [r3, #0]
 8001b82:	4619      	mov	r1, r3
 8001b84:	4887      	ldr	r0, [pc, #540]	@ (8001da4 <HAL_UART_RxCpltCallback+0x77c>)
 8001b86:	f7ff f8bf 	bl	8000d08 <Checksum_Reverse>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	4b83      	ldr	r3, [pc, #524]	@ (8001d9c <HAL_UART_RxCpltCallback+0x774>)
 8001b90:	881b      	ldrh	r3, [r3, #0]
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d103      	bne.n	8001b9e <HAL_UART_RxCpltCallback+0x576>
				{
					ETHdataoverflag = 1;
 8001b96:	4b84      	ldr	r3, [pc, #528]	@ (8001da8 <HAL_UART_RxCpltCallback+0x780>)
 8001b98:	2201      	movs	r2, #1
 8001b9a:	701a      	strb	r2, [r3, #0]
				}
				else
				{
					Resetstate(ETHCMD);
				}
				break;
 8001b9c:	e006      	b.n	8001bac <HAL_UART_RxCpltCallback+0x584>
					Resetstate(ETHCMD);
 8001b9e:	2001      	movs	r0, #1
 8001ba0:	f000 fada 	bl	8002158 <Resetstate>
				break;
 8001ba4:	e002      	b.n	8001bac <HAL_UART_RxCpltCallback+0x584>
				break;
 8001ba6:	bf00      	nop
 8001ba8:	e000      	b.n	8001bac <HAL_UART_RxCpltCallback+0x584>
				break;
 8001baa:	bf00      	nop
		}
		HAL_UART_Receive_IT(&huart1,Uart1_RxBuff, 1);
 8001bac:	2201      	movs	r2, #1
 8001bae:	4979      	ldr	r1, [pc, #484]	@ (8001d94 <HAL_UART_RxCpltCallback+0x76c>)
 8001bb0:	487e      	ldr	r0, [pc, #504]	@ (8001dac <HAL_UART_RxCpltCallback+0x784>)
 8001bb2:	f002 fca6 	bl	8004502 <HAL_UART_Receive_IT>
	}
	if(huart->Instance == UART5)				//如果产生中断的是串口5
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a7d      	ldr	r2, [pc, #500]	@ (8001db0 <HAL_UART_RxCpltCallback+0x788>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	f040 813d 	bne.w	8001e3c <HAL_UART_RxCpltCallback+0x814>
	{
		//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
		Downdatatimeoutnum = 0;
 8001bc2:	4b7c      	ldr	r3, [pc, #496]	@ (8001db4 <HAL_UART_RxCpltCallback+0x78c>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	801a      	strh	r2, [r3, #0]
		switch(DOWNdatastate)
 8001bc8:	4b7b      	ldr	r3, [pc, #492]	@ (8001db8 <HAL_UART_RxCpltCallback+0x790>)
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	2b07      	cmp	r3, #7
 8001bce:	f200 8130 	bhi.w	8001e32 <HAL_UART_RxCpltCallback+0x80a>
 8001bd2:	a201      	add	r2, pc, #4	@ (adr r2, 8001bd8 <HAL_UART_RxCpltCallback+0x5b0>)
 8001bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bd8:	08001bf9 	.word	0x08001bf9
 8001bdc:	08001c2d 	.word	0x08001c2d
 8001be0:	08001c61 	.word	0x08001c61
 8001be4:	08001c91 	.word	0x08001c91
 8001be8:	08001cc7 	.word	0x08001cc7
 8001bec:	08001d17 	.word	0x08001d17
 8001bf0:	08001d61 	.word	0x08001d61
 8001bf4:	08001ddd 	.word	0x08001ddd
		{
			case 0:
				if(Uart5_RxBuff[0] == 0x66)
 8001bf8:	4b70      	ldr	r3, [pc, #448]	@ (8001dbc <HAL_UART_RxCpltCallback+0x794>)
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	2b66      	cmp	r3, #102	@ 0x66
 8001bfe:	d111      	bne.n	8001c24 <HAL_UART_RxCpltCallback+0x5fc>
				{
					DOWNdatabuf[DOWNheaddatanum++] = Uart5_RxBuff[0];
 8001c00:	4b6f      	ldr	r3, [pc, #444]	@ (8001dc0 <HAL_UART_RxCpltCallback+0x798>)
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	1c5a      	adds	r2, r3, #1
 8001c06:	b2d1      	uxtb	r1, r2
 8001c08:	4a6d      	ldr	r2, [pc, #436]	@ (8001dc0 <HAL_UART_RxCpltCallback+0x798>)
 8001c0a:	7011      	strb	r1, [r2, #0]
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	4b6b      	ldr	r3, [pc, #428]	@ (8001dbc <HAL_UART_RxCpltCallback+0x794>)
 8001c10:	7819      	ldrb	r1, [r3, #0]
 8001c12:	4b6c      	ldr	r3, [pc, #432]	@ (8001dc4 <HAL_UART_RxCpltCallback+0x79c>)
 8001c14:	5499      	strb	r1, [r3, r2]
					DOWNdatastate++;
 8001c16:	4b68      	ldr	r3, [pc, #416]	@ (8001db8 <HAL_UART_RxCpltCallback+0x790>)
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	b2da      	uxtb	r2, r3
 8001c1e:	4b66      	ldr	r3, [pc, #408]	@ (8001db8 <HAL_UART_RxCpltCallback+0x790>)
 8001c20:	701a      	strb	r2, [r3, #0]
				}
				else
				{
					Resetstate(TOOLDATA);
				}
				break;
 8001c22:	e106      	b.n	8001e32 <HAL_UART_RxCpltCallback+0x80a>
					Resetstate(TOOLDATA);
 8001c24:	2002      	movs	r0, #2
 8001c26:	f000 fa97 	bl	8002158 <Resetstate>
				break;
 8001c2a:	e102      	b.n	8001e32 <HAL_UART_RxCpltCallback+0x80a>
			case 1:
				if(Uart5_RxBuff[0] == 0xCC)
 8001c2c:	4b63      	ldr	r3, [pc, #396]	@ (8001dbc <HAL_UART_RxCpltCallback+0x794>)
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	2bcc      	cmp	r3, #204	@ 0xcc
 8001c32:	d111      	bne.n	8001c58 <HAL_UART_RxCpltCallback+0x630>
				{
					DOWNdatabuf[DOWNheaddatanum++] = Uart5_RxBuff[0];
 8001c34:	4b62      	ldr	r3, [pc, #392]	@ (8001dc0 <HAL_UART_RxCpltCallback+0x798>)
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	1c5a      	adds	r2, r3, #1
 8001c3a:	b2d1      	uxtb	r1, r2
 8001c3c:	4a60      	ldr	r2, [pc, #384]	@ (8001dc0 <HAL_UART_RxCpltCallback+0x798>)
 8001c3e:	7011      	strb	r1, [r2, #0]
 8001c40:	461a      	mov	r2, r3
 8001c42:	4b5e      	ldr	r3, [pc, #376]	@ (8001dbc <HAL_UART_RxCpltCallback+0x794>)
 8001c44:	7819      	ldrb	r1, [r3, #0]
 8001c46:	4b5f      	ldr	r3, [pc, #380]	@ (8001dc4 <HAL_UART_RxCpltCallback+0x79c>)
 8001c48:	5499      	strb	r1, [r3, r2]
					DOWNdatastate++;
 8001c4a:	4b5b      	ldr	r3, [pc, #364]	@ (8001db8 <HAL_UART_RxCpltCallback+0x790>)
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	3301      	adds	r3, #1
 8001c50:	b2da      	uxtb	r2, r3
 8001c52:	4b59      	ldr	r3, [pc, #356]	@ (8001db8 <HAL_UART_RxCpltCallback+0x790>)
 8001c54:	701a      	strb	r2, [r3, #0]
				}
				else
				{
					Resetstate(TOOLDATA);
				}
				break;
 8001c56:	e0ec      	b.n	8001e32 <HAL_UART_RxCpltCallback+0x80a>
					Resetstate(TOOLDATA);
 8001c58:	2002      	movs	r0, #2
 8001c5a:	f000 fa7d 	bl	8002158 <Resetstate>
				break;
 8001c5e:	e0e8      	b.n	8001e32 <HAL_UART_RxCpltCallback+0x80a>
			case 2:
				DOWNdatabuf[DOWNheaddatanum++] = Uart5_RxBuff[0];
 8001c60:	4b57      	ldr	r3, [pc, #348]	@ (8001dc0 <HAL_UART_RxCpltCallback+0x798>)
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	1c5a      	adds	r2, r3, #1
 8001c66:	b2d1      	uxtb	r1, r2
 8001c68:	4a55      	ldr	r2, [pc, #340]	@ (8001dc0 <HAL_UART_RxCpltCallback+0x798>)
 8001c6a:	7011      	strb	r1, [r2, #0]
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	4b53      	ldr	r3, [pc, #332]	@ (8001dbc <HAL_UART_RxCpltCallback+0x794>)
 8001c70:	7819      	ldrb	r1, [r3, #0]
 8001c72:	4b54      	ldr	r3, [pc, #336]	@ (8001dc4 <HAL_UART_RxCpltCallback+0x79c>)
 8001c74:	5499      	strb	r1, [r3, r2]
				DOWNdatalen = Uart5_RxBuff[0]<<8;
 8001c76:	4b51      	ldr	r3, [pc, #324]	@ (8001dbc <HAL_UART_RxCpltCallback+0x794>)
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	021b      	lsls	r3, r3, #8
 8001c7c:	b29a      	uxth	r2, r3
 8001c7e:	4b52      	ldr	r3, [pc, #328]	@ (8001dc8 <HAL_UART_RxCpltCallback+0x7a0>)
 8001c80:	801a      	strh	r2, [r3, #0]
				DOWNdatastate++;
 8001c82:	4b4d      	ldr	r3, [pc, #308]	@ (8001db8 <HAL_UART_RxCpltCallback+0x790>)
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	3301      	adds	r3, #1
 8001c88:	b2da      	uxtb	r2, r3
 8001c8a:	4b4b      	ldr	r3, [pc, #300]	@ (8001db8 <HAL_UART_RxCpltCallback+0x790>)
 8001c8c:	701a      	strb	r2, [r3, #0]
				break;
 8001c8e:	e0d0      	b.n	8001e32 <HAL_UART_RxCpltCallback+0x80a>
			case 3:
				DOWNdatabuf[DOWNheaddatanum++] = Uart5_RxBuff[0];
 8001c90:	4b4b      	ldr	r3, [pc, #300]	@ (8001dc0 <HAL_UART_RxCpltCallback+0x798>)
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	1c5a      	adds	r2, r3, #1
 8001c96:	b2d1      	uxtb	r1, r2
 8001c98:	4a49      	ldr	r2, [pc, #292]	@ (8001dc0 <HAL_UART_RxCpltCallback+0x798>)
 8001c9a:	7011      	strb	r1, [r2, #0]
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	4b47      	ldr	r3, [pc, #284]	@ (8001dbc <HAL_UART_RxCpltCallback+0x794>)
 8001ca0:	7819      	ldrb	r1, [r3, #0]
 8001ca2:	4b48      	ldr	r3, [pc, #288]	@ (8001dc4 <HAL_UART_RxCpltCallback+0x79c>)
 8001ca4:	5499      	strb	r1, [r3, r2]
				DOWNdatalen = DOWNdatalen + Uart5_RxBuff[0];
 8001ca6:	4b45      	ldr	r3, [pc, #276]	@ (8001dbc <HAL_UART_RxCpltCallback+0x794>)
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	461a      	mov	r2, r3
 8001cac:	4b46      	ldr	r3, [pc, #280]	@ (8001dc8 <HAL_UART_RxCpltCallback+0x7a0>)
 8001cae:	881b      	ldrh	r3, [r3, #0]
 8001cb0:	4413      	add	r3, r2
 8001cb2:	b29a      	uxth	r2, r3
 8001cb4:	4b44      	ldr	r3, [pc, #272]	@ (8001dc8 <HAL_UART_RxCpltCallback+0x7a0>)
 8001cb6:	801a      	strh	r2, [r3, #0]
				DOWNdatastate++;
 8001cb8:	4b3f      	ldr	r3, [pc, #252]	@ (8001db8 <HAL_UART_RxCpltCallback+0x790>)
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	b2da      	uxtb	r2, r3
 8001cc0:	4b3d      	ldr	r3, [pc, #244]	@ (8001db8 <HAL_UART_RxCpltCallback+0x790>)
 8001cc2:	701a      	strb	r2, [r3, #0]
				break;
 8001cc4:	e0b5      	b.n	8001e32 <HAL_UART_RxCpltCallback+0x80a>
			case 4:
				DOWNdatabuf[DOWNheaddatanum++] = Uart5_RxBuff[0];		//数据类型，井下上传只有服务表数据，应为0x01
 8001cc6:	4b3e      	ldr	r3, [pc, #248]	@ (8001dc0 <HAL_UART_RxCpltCallback+0x798>)
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	1c5a      	adds	r2, r3, #1
 8001ccc:	b2d1      	uxtb	r1, r2
 8001cce:	4a3c      	ldr	r2, [pc, #240]	@ (8001dc0 <HAL_UART_RxCpltCallback+0x798>)
 8001cd0:	7011      	strb	r1, [r2, #0]
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	4b39      	ldr	r3, [pc, #228]	@ (8001dbc <HAL_UART_RxCpltCallback+0x794>)
 8001cd6:	7819      	ldrb	r1, [r3, #0]
 8001cd8:	4b3a      	ldr	r3, [pc, #232]	@ (8001dc4 <HAL_UART_RxCpltCallback+0x79c>)
 8001cda:	5499      	strb	r1, [r3, r2]
				if(Uart5_RxBuff[0] == 0x01)
 8001cdc:	4b37      	ldr	r3, [pc, #220]	@ (8001dbc <HAL_UART_RxCpltCallback+0x794>)
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d106      	bne.n	8001cf2 <HAL_UART_RxCpltCallback+0x6ca>
				{
					DOWNdatastate++;
 8001ce4:	4b34      	ldr	r3, [pc, #208]	@ (8001db8 <HAL_UART_RxCpltCallback+0x790>)
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	3301      	adds	r3, #1
 8001cea:	b2da      	uxtb	r2, r3
 8001cec:	4b32      	ldr	r3, [pc, #200]	@ (8001db8 <HAL_UART_RxCpltCallback+0x790>)
 8001cee:	701a      	strb	r2, [r3, #0]
					Downtoolctrlcmdback = true;
					DOWNdatastate++;
				}
				else
					Resetstate(TOOLDATA);
				break;
 8001cf0:	e09f      	b.n	8001e32 <HAL_UART_RxCpltCallback+0x80a>
				else if(Uart5_RxBuff[0] == 0x02)
 8001cf2:	4b32      	ldr	r3, [pc, #200]	@ (8001dbc <HAL_UART_RxCpltCallback+0x794>)
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d109      	bne.n	8001d0e <HAL_UART_RxCpltCallback+0x6e6>
					Downtoolctrlcmdback = true;
 8001cfa:	4b34      	ldr	r3, [pc, #208]	@ (8001dcc <HAL_UART_RxCpltCallback+0x7a4>)
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	701a      	strb	r2, [r3, #0]
					DOWNdatastate++;
 8001d00:	4b2d      	ldr	r3, [pc, #180]	@ (8001db8 <HAL_UART_RxCpltCallback+0x790>)
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	3301      	adds	r3, #1
 8001d06:	b2da      	uxtb	r2, r3
 8001d08:	4b2b      	ldr	r3, [pc, #172]	@ (8001db8 <HAL_UART_RxCpltCallback+0x790>)
 8001d0a:	701a      	strb	r2, [r3, #0]
				break;
 8001d0c:	e091      	b.n	8001e32 <HAL_UART_RxCpltCallback+0x80a>
					Resetstate(TOOLDATA);
 8001d0e:	2002      	movs	r0, #2
 8001d10:	f000 fa22 	bl	8002158 <Resetstate>
				break;
 8001d14:	e08d      	b.n	8001e32 <HAL_UART_RxCpltCallback+0x80a>
			case 5:
				DOWNdatabuf[DOWNheaddatanum++] = Uart5_RxBuff[0];
 8001d16:	4b2a      	ldr	r3, [pc, #168]	@ (8001dc0 <HAL_UART_RxCpltCallback+0x798>)
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	1c5a      	adds	r2, r3, #1
 8001d1c:	b2d1      	uxtb	r1, r2
 8001d1e:	4a28      	ldr	r2, [pc, #160]	@ (8001dc0 <HAL_UART_RxCpltCallback+0x798>)
 8001d20:	7011      	strb	r1, [r2, #0]
 8001d22:	461a      	mov	r2, r3
 8001d24:	4b25      	ldr	r3, [pc, #148]	@ (8001dbc <HAL_UART_RxCpltCallback+0x794>)
 8001d26:	7819      	ldrb	r1, [r3, #0]
 8001d28:	4b26      	ldr	r3, [pc, #152]	@ (8001dc4 <HAL_UART_RxCpltCallback+0x79c>)
 8001d2a:	5499      	strb	r1, [r3, r2]
				DOWNbodybuf[DOWNdatabodynum++] = Uart5_RxBuff[0];
 8001d2c:	4b28      	ldr	r3, [pc, #160]	@ (8001dd0 <HAL_UART_RxCpltCallback+0x7a8>)
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	1c5a      	adds	r2, r3, #1
 8001d32:	b2d1      	uxtb	r1, r2
 8001d34:	4a26      	ldr	r2, [pc, #152]	@ (8001dd0 <HAL_UART_RxCpltCallback+0x7a8>)
 8001d36:	7011      	strb	r1, [r2, #0]
 8001d38:	461a      	mov	r2, r3
 8001d3a:	4b20      	ldr	r3, [pc, #128]	@ (8001dbc <HAL_UART_RxCpltCallback+0x794>)
 8001d3c:	7819      	ldrb	r1, [r3, #0]
 8001d3e:	4b25      	ldr	r3, [pc, #148]	@ (8001dd4 <HAL_UART_RxCpltCallback+0x7ac>)
 8001d40:	5499      	strb	r1, [r3, r2]
				if(DOWNdatabodynum >= DOWNdatalen-1)
 8001d42:	4b23      	ldr	r3, [pc, #140]	@ (8001dd0 <HAL_UART_RxCpltCallback+0x7a8>)
 8001d44:	781b      	ldrb	r3, [r3, #0]
 8001d46:	461a      	mov	r2, r3
 8001d48:	4b1f      	ldr	r3, [pc, #124]	@ (8001dc8 <HAL_UART_RxCpltCallback+0x7a0>)
 8001d4a:	881b      	ldrh	r3, [r3, #0]
 8001d4c:	3b01      	subs	r3, #1
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	db6e      	blt.n	8001e30 <HAL_UART_RxCpltCallback+0x808>
				{
					DOWNdatastate++;
 8001d52:	4b19      	ldr	r3, [pc, #100]	@ (8001db8 <HAL_UART_RxCpltCallback+0x790>)
 8001d54:	781b      	ldrb	r3, [r3, #0]
 8001d56:	3301      	adds	r3, #1
 8001d58:	b2da      	uxtb	r2, r3
 8001d5a:	4b17      	ldr	r3, [pc, #92]	@ (8001db8 <HAL_UART_RxCpltCallback+0x790>)
 8001d5c:	701a      	strb	r2, [r3, #0]
				}
				break;
 8001d5e:	e067      	b.n	8001e30 <HAL_UART_RxCpltCallback+0x808>
			case 6:
				DOWNdatabuf[DOWNheaddatanum++] = Uart5_RxBuff[0];
 8001d60:	4b17      	ldr	r3, [pc, #92]	@ (8001dc0 <HAL_UART_RxCpltCallback+0x798>)
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	1c5a      	adds	r2, r3, #1
 8001d66:	b2d1      	uxtb	r1, r2
 8001d68:	4a15      	ldr	r2, [pc, #84]	@ (8001dc0 <HAL_UART_RxCpltCallback+0x798>)
 8001d6a:	7011      	strb	r1, [r2, #0]
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	4b13      	ldr	r3, [pc, #76]	@ (8001dbc <HAL_UART_RxCpltCallback+0x794>)
 8001d70:	7819      	ldrb	r1, [r3, #0]
 8001d72:	4b14      	ldr	r3, [pc, #80]	@ (8001dc4 <HAL_UART_RxCpltCallback+0x79c>)
 8001d74:	5499      	strb	r1, [r3, r2]
				DOWN_Checksum = Uart5_RxBuff[0]<<8;
 8001d76:	4b11      	ldr	r3, [pc, #68]	@ (8001dbc <HAL_UART_RxCpltCallback+0x794>)
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	021b      	lsls	r3, r3, #8
 8001d7c:	b29a      	uxth	r2, r3
 8001d7e:	4b16      	ldr	r3, [pc, #88]	@ (8001dd8 <HAL_UART_RxCpltCallback+0x7b0>)
 8001d80:	801a      	strh	r2, [r3, #0]
				DOWNdatastate++;
 8001d82:	4b0d      	ldr	r3, [pc, #52]	@ (8001db8 <HAL_UART_RxCpltCallback+0x790>)
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	3301      	adds	r3, #1
 8001d88:	b2da      	uxtb	r2, r3
 8001d8a:	4b0b      	ldr	r3, [pc, #44]	@ (8001db8 <HAL_UART_RxCpltCallback+0x790>)
 8001d8c:	701a      	strb	r2, [r3, #0]
				break;
 8001d8e:	e050      	b.n	8001e32 <HAL_UART_RxCpltCallback+0x80a>
 8001d90:	2000037a 	.word	0x2000037a
 8001d94:	20000210 	.word	0x20000210
 8001d98:	20000384 	.word	0x20000384
 8001d9c:	20000798 	.word	0x20000798
 8001da0:	20000784 	.word	0x20000784
 8001da4:	20000584 	.word	0x20000584
 8001da8:	2000079c 	.word	0x2000079c
 8001dac:	200002a8 	.word	0x200002a8
 8001db0:	40005000 	.word	0x40005000
 8001db4:	2000020c 	.word	0x2000020c
 8001db8:	20000379 	.word	0x20000379
 8001dbc:	20000214 	.word	0x20000214
 8001dc0:	2000037b 	.word	0x2000037b
 8001dc4:	20000484 	.word	0x20000484
 8001dc8:	20000786 	.word	0x20000786
 8001dcc:	2000079e 	.word	0x2000079e
 8001dd0:	2000037d 	.word	0x2000037d
 8001dd4:	20000684 	.word	0x20000684
 8001dd8:	2000079a 	.word	0x2000079a
			case 7:
				DOWNdatabuf[DOWNheaddatanum++] = Uart5_RxBuff[0];
 8001ddc:	4b19      	ldr	r3, [pc, #100]	@ (8001e44 <HAL_UART_RxCpltCallback+0x81c>)
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	1c5a      	adds	r2, r3, #1
 8001de2:	b2d1      	uxtb	r1, r2
 8001de4:	4a17      	ldr	r2, [pc, #92]	@ (8001e44 <HAL_UART_RxCpltCallback+0x81c>)
 8001de6:	7011      	strb	r1, [r2, #0]
 8001de8:	461a      	mov	r2, r3
 8001dea:	4b17      	ldr	r3, [pc, #92]	@ (8001e48 <HAL_UART_RxCpltCallback+0x820>)
 8001dec:	7819      	ldrb	r1, [r3, #0]
 8001dee:	4b17      	ldr	r3, [pc, #92]	@ (8001e4c <HAL_UART_RxCpltCallback+0x824>)
 8001df0:	5499      	strb	r1, [r3, r2]
				DOWN_Checksum = DOWN_Checksum + Uart5_RxBuff[0];
 8001df2:	4b15      	ldr	r3, [pc, #84]	@ (8001e48 <HAL_UART_RxCpltCallback+0x820>)
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	461a      	mov	r2, r3
 8001df8:	4b15      	ldr	r3, [pc, #84]	@ (8001e50 <HAL_UART_RxCpltCallback+0x828>)
 8001dfa:	881b      	ldrh	r3, [r3, #0]
 8001dfc:	4413      	add	r3, r2
 8001dfe:	b29a      	uxth	r2, r3
 8001e00:	4b13      	ldr	r3, [pc, #76]	@ (8001e50 <HAL_UART_RxCpltCallback+0x828>)
 8001e02:	801a      	strh	r2, [r3, #0]
				if(DOWN_Checksum == Checksum_sum(DOWNdatabuf,DOWNheaddatanum-2))
 8001e04:	4b0f      	ldr	r3, [pc, #60]	@ (8001e44 <HAL_UART_RxCpltCallback+0x81c>)
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	3b02      	subs	r3, #2
 8001e0a:	b29b      	uxth	r3, r3
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	480f      	ldr	r0, [pc, #60]	@ (8001e4c <HAL_UART_RxCpltCallback+0x824>)
 8001e10:	f7fe ffd6 	bl	8000dc0 <Checksum_sum>
 8001e14:	4603      	mov	r3, r0
 8001e16:	461a      	mov	r2, r3
 8001e18:	4b0d      	ldr	r3, [pc, #52]	@ (8001e50 <HAL_UART_RxCpltCallback+0x828>)
 8001e1a:	881b      	ldrh	r3, [r3, #0]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d103      	bne.n	8001e28 <HAL_UART_RxCpltCallback+0x800>
				{
					DOWNdataoverflag = 1;
 8001e20:	4b0c      	ldr	r3, [pc, #48]	@ (8001e54 <HAL_UART_RxCpltCallback+0x82c>)
 8001e22:	2201      	movs	r2, #1
 8001e24:	701a      	strb	r2, [r3, #0]
				else
				{
					Resetstate(TOOLDATA);
				}

				break;
 8001e26:	e004      	b.n	8001e32 <HAL_UART_RxCpltCallback+0x80a>
					Resetstate(TOOLDATA);
 8001e28:	2002      	movs	r0, #2
 8001e2a:	f000 f995 	bl	8002158 <Resetstate>
				break;
 8001e2e:	e000      	b.n	8001e32 <HAL_UART_RxCpltCallback+0x80a>
				break;
 8001e30:	bf00      	nop
		}
		HAL_UART_Receive_IT(&huart5,Uart5_RxBuff,1);
 8001e32:	2201      	movs	r2, #1
 8001e34:	4904      	ldr	r1, [pc, #16]	@ (8001e48 <HAL_UART_RxCpltCallback+0x820>)
 8001e36:	4808      	ldr	r0, [pc, #32]	@ (8001e58 <HAL_UART_RxCpltCallback+0x830>)
 8001e38:	f002 fb63 	bl	8004502 <HAL_UART_Receive_IT>
	}
}
 8001e3c:	bf00      	nop
 8001e3e:	3708      	adds	r7, #8
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	2000037b 	.word	0x2000037b
 8001e48:	20000214 	.word	0x20000214
 8001e4c:	20000484 	.word	0x20000484
 8001e50:	2000079a 	.word	0x2000079a
 8001e54:	2000079d 	.word	0x2000079d
 8001e58:	20000260 	.word	0x20000260

08001e5c <DMA1_Channel4_IRQHandler>:
/* USER CODE BEGIN 1 */

void DMA1_Channel4_IRQHandler(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001e60:	4802      	ldr	r0, [pc, #8]	@ (8001e6c <DMA1_Channel4_IRQHandler+0x10>)
 8001e62:	f000 ff01 	bl	8002c68 <HAL_DMA_IRQHandler>
}
 8001e66:	bf00      	nop
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	200002f0 	.word	0x200002f0

08001e70 <DMA2_Channel4_5_IRQHandler>:

void DMA2_Channel4_5_IRQHandler(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_usart4_tx);
 8001e74:	4802      	ldr	r0, [pc, #8]	@ (8001e80 <DMA2_Channel4_5_IRQHandler+0x10>)
 8001e76:	f000 fef7 	bl	8002c68 <HAL_DMA_IRQHandler>
}
 8001e7a:	bf00      	nop
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	20000334 	.word	0x20000334

08001e84 <Downcmdsend>:

unsigned char Sertableactbuf[50];
unsigned char Contralcmdbuf[50];

void Downcmdsend (uint8_t type)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b084      	sub	sp, #16
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	71fb      	strb	r3, [r7, #7]
	if(type == SERVICETABLE)
 8001e8e:	79fb      	ldrb	r3, [r7, #7]
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d157      	bne.n	8001f44 <Downcmdsend+0xc0>
	{
		Downcmdbuf[0] = 0x55;  								//发送包头
 8001e94:	4b60      	ldr	r3, [pc, #384]	@ (8002018 <Downcmdsend+0x194>)
 8001e96:	2255      	movs	r2, #85	@ 0x55
 8001e98:	701a      	strb	r2, [r3, #0]
		Downcmdbuf[1] = 0xAA;
 8001e9a:	4b5f      	ldr	r3, [pc, #380]	@ (8002018 <Downcmdsend+0x194>)
 8001e9c:	22aa      	movs	r2, #170	@ 0xaa
 8001e9e:	705a      	strb	r2, [r3, #1]
		Downcmdbuf[2] = (Sertableactlen+1)>>8;						//Sertableactlen+1:上位机数据体长度+Downcmdbuf[3]
 8001ea0:	4b5e      	ldr	r3, [pc, #376]	@ (800201c <Downcmdsend+0x198>)
 8001ea2:	881b      	ldrh	r3, [r3, #0]
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	121b      	asrs	r3, r3, #8
 8001ea8:	b2da      	uxtb	r2, r3
 8001eaa:	4b5b      	ldr	r3, [pc, #364]	@ (8002018 <Downcmdsend+0x194>)
 8001eac:	709a      	strb	r2, [r3, #2]
		Downcmdbuf[3] = Sertableactlen+1;
 8001eae:	4b5b      	ldr	r3, [pc, #364]	@ (800201c <Downcmdsend+0x198>)
 8001eb0:	881b      	ldrh	r3, [r3, #0]
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	3301      	adds	r3, #1
 8001eb6:	b2da      	uxtb	r2, r3
 8001eb8:	4b57      	ldr	r3, [pc, #348]	@ (8002018 <Downcmdsend+0x194>)
 8001eba:	70da      	strb	r2, [r3, #3]
		Downcmdbuf[4] = SERVICETABLE;						//数据类型，不属于上位机数据体
 8001ebc:	4b56      	ldr	r3, [pc, #344]	@ (8002018 <Downcmdsend+0x194>)
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	711a      	strb	r2, [r3, #4]

		for(unsigned char i=0;i<Sertableactlen;i++)
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	73fb      	strb	r3, [r7, #15]
 8001ec6:	e009      	b.n	8001edc <Downcmdsend+0x58>
		{
			Downcmdbuf[i+5] = Sertableactbuf[i];				//上位机数据体
 8001ec8:	7bfa      	ldrb	r2, [r7, #15]
 8001eca:	7bfb      	ldrb	r3, [r7, #15]
 8001ecc:	3305      	adds	r3, #5
 8001ece:	4954      	ldr	r1, [pc, #336]	@ (8002020 <Downcmdsend+0x19c>)
 8001ed0:	5c89      	ldrb	r1, [r1, r2]
 8001ed2:	4a51      	ldr	r2, [pc, #324]	@ (8002018 <Downcmdsend+0x194>)
 8001ed4:	54d1      	strb	r1, [r2, r3]
		for(unsigned char i=0;i<Sertableactlen;i++)
 8001ed6:	7bfb      	ldrb	r3, [r7, #15]
 8001ed8:	3301      	adds	r3, #1
 8001eda:	73fb      	strb	r3, [r7, #15]
 8001edc:	7bfb      	ldrb	r3, [r7, #15]
 8001ede:	b29a      	uxth	r2, r3
 8001ee0:	4b4e      	ldr	r3, [pc, #312]	@ (800201c <Downcmdsend+0x198>)
 8001ee2:	881b      	ldrh	r3, [r3, #0]
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d3ef      	bcc.n	8001ec8 <Downcmdsend+0x44>
		}
		Downcmdbuf[Sertableactlen+5] = Checksum_sum(Downcmdbuf,Sertableactlen+5)>>8;
 8001ee8:	4b4c      	ldr	r3, [pc, #304]	@ (800201c <Downcmdsend+0x198>)
 8001eea:	881b      	ldrh	r3, [r3, #0]
 8001eec:	3305      	adds	r3, #5
 8001eee:	b29b      	uxth	r3, r3
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	4849      	ldr	r0, [pc, #292]	@ (8002018 <Downcmdsend+0x194>)
 8001ef4:	f7fe ff64 	bl	8000dc0 <Checksum_sum>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	0a1b      	lsrs	r3, r3, #8
 8001efc:	b29a      	uxth	r2, r3
 8001efe:	4b47      	ldr	r3, [pc, #284]	@ (800201c <Downcmdsend+0x198>)
 8001f00:	881b      	ldrh	r3, [r3, #0]
 8001f02:	3305      	adds	r3, #5
 8001f04:	b2d1      	uxtb	r1, r2
 8001f06:	4a44      	ldr	r2, [pc, #272]	@ (8002018 <Downcmdsend+0x194>)
 8001f08:	54d1      	strb	r1, [r2, r3]
		Downcmdbuf[Sertableactlen+6] = Checksum_sum(Downcmdbuf,Sertableactlen+5);
 8001f0a:	4b44      	ldr	r3, [pc, #272]	@ (800201c <Downcmdsend+0x198>)
 8001f0c:	881b      	ldrh	r3, [r3, #0]
 8001f0e:	3305      	adds	r3, #5
 8001f10:	b29b      	uxth	r3, r3
 8001f12:	4619      	mov	r1, r3
 8001f14:	4840      	ldr	r0, [pc, #256]	@ (8002018 <Downcmdsend+0x194>)
 8001f16:	f7fe ff53 	bl	8000dc0 <Checksum_sum>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	4b3f      	ldr	r3, [pc, #252]	@ (800201c <Downcmdsend+0x198>)
 8001f20:	881b      	ldrh	r3, [r3, #0]
 8001f22:	3306      	adds	r3, #6
 8001f24:	b2d1      	uxtb	r1, r2
 8001f26:	4a3c      	ldr	r2, [pc, #240]	@ (8002018 <Downcmdsend+0x194>)
 8001f28:	54d1      	strb	r1, [r2, r3]
		ComSendBuf(COM5,Downcmdbuf,Sertableactlen+7);			//ETH_Datalen+6:上位机数据体+2byte帧头+2byte长度和数据类型+2byte校验和/0-ETH_Datalen+5
 8001f2a:	4b3c      	ldr	r3, [pc, #240]	@ (800201c <Downcmdsend+0x198>)
 8001f2c:	881b      	ldrh	r3, [r3, #0]
 8001f2e:	3307      	adds	r3, #7
 8001f30:	b29b      	uxth	r3, r3
 8001f32:	461a      	mov	r2, r3
 8001f34:	4938      	ldr	r1, [pc, #224]	@ (8002018 <Downcmdsend+0x194>)
 8001f36:	20ee      	movs	r0, #238	@ 0xee
 8001f38:	f7ff fb48 	bl	80015cc <ComSendBuf>
		Workmode = 0;
 8001f3c:	4b39      	ldr	r3, [pc, #228]	@ (8002024 <Downcmdsend+0x1a0>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	701a      	strb	r2, [r3, #0]

		//ComSendBuf(COM5,Downcmdbuf,ETH_Datalen+6);			//ETH_Datalen+6:上位机数据体+2byte帧头+2byte长度和数据类型+2byte校验和/0-ETH_Datalen+5
		Workmode = 0;
	}*/
	/***************************************************************************/
}
 8001f42:	e064      	b.n	800200e <Downcmdsend+0x18a>
	else if(type == CONTRALCMD)
 8001f44:	79fb      	ldrb	r3, [r7, #7]
 8001f46:	2b02      	cmp	r3, #2
 8001f48:	d161      	bne.n	800200e <Downcmdsend+0x18a>
		Downcmdbuf[0] = 0x55;  								//发送包头
 8001f4a:	4b33      	ldr	r3, [pc, #204]	@ (8002018 <Downcmdsend+0x194>)
 8001f4c:	2255      	movs	r2, #85	@ 0x55
 8001f4e:	701a      	strb	r2, [r3, #0]
		Downcmdbuf[1] = 0xAA;
 8001f50:	4b31      	ldr	r3, [pc, #196]	@ (8002018 <Downcmdsend+0x194>)
 8001f52:	22aa      	movs	r2, #170	@ 0xaa
 8001f54:	705a      	strb	r2, [r3, #1]
		Downcmdbuf[2] = (Contralcmdlen+3)>>8;
 8001f56:	4b34      	ldr	r3, [pc, #208]	@ (8002028 <Downcmdsend+0x1a4>)
 8001f58:	881b      	ldrh	r3, [r3, #0]
 8001f5a:	3303      	adds	r3, #3
 8001f5c:	121b      	asrs	r3, r3, #8
 8001f5e:	b2da      	uxtb	r2, r3
 8001f60:	4b2d      	ldr	r3, [pc, #180]	@ (8002018 <Downcmdsend+0x194>)
 8001f62:	709a      	strb	r2, [r3, #2]
		Downcmdbuf[3] = Contralcmdlen+3;
 8001f64:	4b30      	ldr	r3, [pc, #192]	@ (8002028 <Downcmdsend+0x1a4>)
 8001f66:	881b      	ldrh	r3, [r3, #0]
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	3303      	adds	r3, #3
 8001f6c:	b2da      	uxtb	r2, r3
 8001f6e:	4b2a      	ldr	r3, [pc, #168]	@ (8002018 <Downcmdsend+0x194>)
 8001f70:	70da      	strb	r2, [r3, #3]
		Downcmdbuf[4] = CONTRALCMD;							//数据类型，不属于上位机数据体
 8001f72:	4b29      	ldr	r3, [pc, #164]	@ (8002018 <Downcmdsend+0x194>)
 8001f74:	2202      	movs	r2, #2
 8001f76:	711a      	strb	r2, [r3, #4]
		Downcmdbuf[5] = Tooladdress;						//命令字，切割仪器为5004
 8001f78:	4b2c      	ldr	r3, [pc, #176]	@ (800202c <Downcmdsend+0x1a8>)
 8001f7a:	781a      	ldrb	r2, [r3, #0]
 8001f7c:	4b26      	ldr	r3, [pc, #152]	@ (8002018 <Downcmdsend+0x194>)
 8001f7e:	715a      	strb	r2, [r3, #5]
		Downcmdbuf[6] = Cmdword>>8;
 8001f80:	4b2b      	ldr	r3, [pc, #172]	@ (8002030 <Downcmdsend+0x1ac>)
 8001f82:	881b      	ldrh	r3, [r3, #0]
 8001f84:	0a1b      	lsrs	r3, r3, #8
 8001f86:	b29b      	uxth	r3, r3
 8001f88:	b2da      	uxtb	r2, r3
 8001f8a:	4b23      	ldr	r3, [pc, #140]	@ (8002018 <Downcmdsend+0x194>)
 8001f8c:	719a      	strb	r2, [r3, #6]
		for(uint8_t i=0;i<Contralcmdlen;i++)
 8001f8e:	2300      	movs	r3, #0
 8001f90:	73bb      	strb	r3, [r7, #14]
 8001f92:	e009      	b.n	8001fa8 <Downcmdsend+0x124>
			Downcmdbuf[i+7] = Contralcmdbuf[i];				//上位机数据体，切割仪器控制命令为8字节
 8001f94:	7bba      	ldrb	r2, [r7, #14]
 8001f96:	7bbb      	ldrb	r3, [r7, #14]
 8001f98:	3307      	adds	r3, #7
 8001f9a:	4926      	ldr	r1, [pc, #152]	@ (8002034 <Downcmdsend+0x1b0>)
 8001f9c:	5c89      	ldrb	r1, [r1, r2]
 8001f9e:	4a1e      	ldr	r2, [pc, #120]	@ (8002018 <Downcmdsend+0x194>)
 8001fa0:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i=0;i<Contralcmdlen;i++)
 8001fa2:	7bbb      	ldrb	r3, [r7, #14]
 8001fa4:	3301      	adds	r3, #1
 8001fa6:	73bb      	strb	r3, [r7, #14]
 8001fa8:	7bbb      	ldrb	r3, [r7, #14]
 8001faa:	b29a      	uxth	r2, r3
 8001fac:	4b1e      	ldr	r3, [pc, #120]	@ (8002028 <Downcmdsend+0x1a4>)
 8001fae:	881b      	ldrh	r3, [r3, #0]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d3ef      	bcc.n	8001f94 <Downcmdsend+0x110>
		Downcmdbuf[Contralcmdlen+7] = Checksum_sum(Downcmdbuf,Contralcmdlen+7)>>8;
 8001fb4:	4b1c      	ldr	r3, [pc, #112]	@ (8002028 <Downcmdsend+0x1a4>)
 8001fb6:	881b      	ldrh	r3, [r3, #0]
 8001fb8:	3307      	adds	r3, #7
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	4816      	ldr	r0, [pc, #88]	@ (8002018 <Downcmdsend+0x194>)
 8001fc0:	f7fe fefe 	bl	8000dc0 <Checksum_sum>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	0a1b      	lsrs	r3, r3, #8
 8001fc8:	b29a      	uxth	r2, r3
 8001fca:	4b17      	ldr	r3, [pc, #92]	@ (8002028 <Downcmdsend+0x1a4>)
 8001fcc:	881b      	ldrh	r3, [r3, #0]
 8001fce:	3307      	adds	r3, #7
 8001fd0:	b2d1      	uxtb	r1, r2
 8001fd2:	4a11      	ldr	r2, [pc, #68]	@ (8002018 <Downcmdsend+0x194>)
 8001fd4:	54d1      	strb	r1, [r2, r3]
		Downcmdbuf[Contralcmdlen+8] = Checksum_sum(Downcmdbuf,Contralcmdlen+7);
 8001fd6:	4b14      	ldr	r3, [pc, #80]	@ (8002028 <Downcmdsend+0x1a4>)
 8001fd8:	881b      	ldrh	r3, [r3, #0]
 8001fda:	3307      	adds	r3, #7
 8001fdc:	b29b      	uxth	r3, r3
 8001fde:	4619      	mov	r1, r3
 8001fe0:	480d      	ldr	r0, [pc, #52]	@ (8002018 <Downcmdsend+0x194>)
 8001fe2:	f7fe feed 	bl	8000dc0 <Checksum_sum>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	461a      	mov	r2, r3
 8001fea:	4b0f      	ldr	r3, [pc, #60]	@ (8002028 <Downcmdsend+0x1a4>)
 8001fec:	881b      	ldrh	r3, [r3, #0]
 8001fee:	3308      	adds	r3, #8
 8001ff0:	b2d1      	uxtb	r1, r2
 8001ff2:	4a09      	ldr	r2, [pc, #36]	@ (8002018 <Downcmdsend+0x194>)
 8001ff4:	54d1      	strb	r1, [r2, r3]
		ComSendBuf(COM5,Downcmdbuf,Contralcmdlen+9);			//ETH_Datalen+8:上位机数据体+2byte帧头+2byte长度和数据类型+2byte校验和+2byte命令字/0-ETH_Datalen+7
 8001ff6:	4b0c      	ldr	r3, [pc, #48]	@ (8002028 <Downcmdsend+0x1a4>)
 8001ff8:	881b      	ldrh	r3, [r3, #0]
 8001ffa:	3309      	adds	r3, #9
 8001ffc:	b29b      	uxth	r3, r3
 8001ffe:	461a      	mov	r2, r3
 8002000:	4905      	ldr	r1, [pc, #20]	@ (8002018 <Downcmdsend+0x194>)
 8002002:	20ee      	movs	r0, #238	@ 0xee
 8002004:	f7ff fae2 	bl	80015cc <ComSendBuf>
		Workmode = 0;
 8002008:	4b06      	ldr	r3, [pc, #24]	@ (8002024 <Downcmdsend+0x1a0>)
 800200a:	2200      	movs	r2, #0
 800200c:	701a      	strb	r2, [r3, #0]
}
 800200e:	bf00      	nop
 8002010:	3710      	adds	r7, #16
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	200007a0 	.word	0x200007a0
 800201c:	200001b6 	.word	0x200001b6
 8002020:	200007c0 	.word	0x200007c0
 8002024:	20000788 	.word	0x20000788
 8002028:	200001b8 	.word	0x200001b8
 800202c:	20000789 	.word	0x20000789
 8002030:	2000078a 	.word	0x2000078a
 8002034:	200007f4 	.word	0x200007f4

08002038 <Downdatasend>:


extern unsigned char Subsetnumber;
extern unsigned int Report_Timestamp;
void Downdatasend (unsigned char type)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b084      	sub	sp, #16
 800203c:	af00      	add	r7, sp, #0
 800203e:	4603      	mov	r3, r0
 8002040:	71fb      	strb	r3, [r7, #7]
	Downdataloadbuf[4] = DOWNdatabodynum>>8;
 8002042:	4b3f      	ldr	r3, [pc, #252]	@ (8002140 <Downdatasend+0x108>)
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	121b      	asrs	r3, r3, #8
 8002048:	b2da      	uxtb	r2, r3
 800204a:	4b3e      	ldr	r3, [pc, #248]	@ (8002144 <Downdatasend+0x10c>)
 800204c:	711a      	strb	r2, [r3, #4]
	Downdataloadbuf[5] = DOWNdatabodynum;
 800204e:	4b3c      	ldr	r3, [pc, #240]	@ (8002140 <Downdatasend+0x108>)
 8002050:	781a      	ldrb	r2, [r3, #0]
 8002052:	4b3c      	ldr	r3, [pc, #240]	@ (8002144 <Downdatasend+0x10c>)
 8002054:	715a      	strb	r2, [r3, #5]
	Downdataloadbuf[6] = 0x22;									//从井下读数据：0x20000000，仪器采集数据上行：0x02000000
 8002056:	4b3b      	ldr	r3, [pc, #236]	@ (8002144 <Downdatasend+0x10c>)
 8002058:	2222      	movs	r2, #34	@ 0x22
 800205a:	719a      	strb	r2, [r3, #6]
	Downdataloadbuf[7] = Tooladdress;
 800205c:	4b3a      	ldr	r3, [pc, #232]	@ (8002148 <Downdatasend+0x110>)
 800205e:	781a      	ldrb	r2, [r3, #0]
 8002060:	4b38      	ldr	r3, [pc, #224]	@ (8002144 <Downdatasend+0x10c>)
 8002062:	71da      	strb	r2, [r3, #7]
	Downdataloadbuf[8] = Subsetnumber>>8;
 8002064:	4b39      	ldr	r3, [pc, #228]	@ (800214c <Downdatasend+0x114>)
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	121b      	asrs	r3, r3, #8
 800206a:	b2da      	uxtb	r2, r3
 800206c:	4b35      	ldr	r3, [pc, #212]	@ (8002144 <Downdatasend+0x10c>)
 800206e:	721a      	strb	r2, [r3, #8]
	Downdataloadbuf[9] = Subsetnumber;							//subset号，若为命令返回参数则为命令字
 8002070:	4b36      	ldr	r3, [pc, #216]	@ (800214c <Downdatasend+0x114>)
 8002072:	781a      	ldrb	r2, [r3, #0]
 8002074:	4b33      	ldr	r3, [pc, #204]	@ (8002144 <Downdatasend+0x10c>)
 8002076:	725a      	strb	r2, [r3, #9]
	Downdataloadbuf[10] = Report_Timestamp>>24;
 8002078:	4b35      	ldr	r3, [pc, #212]	@ (8002150 <Downdatasend+0x118>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	0e1b      	lsrs	r3, r3, #24
 800207e:	b2da      	uxtb	r2, r3
 8002080:	4b30      	ldr	r3, [pc, #192]	@ (8002144 <Downdatasend+0x10c>)
 8002082:	729a      	strb	r2, [r3, #10]
	Downdataloadbuf[11] = Report_Timestamp>>16;
 8002084:	4b32      	ldr	r3, [pc, #200]	@ (8002150 <Downdatasend+0x118>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	0c1b      	lsrs	r3, r3, #16
 800208a:	b2da      	uxtb	r2, r3
 800208c:	4b2d      	ldr	r3, [pc, #180]	@ (8002144 <Downdatasend+0x10c>)
 800208e:	72da      	strb	r2, [r3, #11]
	Downdataloadbuf[12] = Report_Timestamp>>8;
 8002090:	4b2f      	ldr	r3, [pc, #188]	@ (8002150 <Downdatasend+0x118>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	0a1b      	lsrs	r3, r3, #8
 8002096:	b2da      	uxtb	r2, r3
 8002098:	4b2a      	ldr	r3, [pc, #168]	@ (8002144 <Downdatasend+0x10c>)
 800209a:	731a      	strb	r2, [r3, #12]
	Downdataloadbuf[13] = Report_Timestamp;						//时间标
 800209c:	4b2c      	ldr	r3, [pc, #176]	@ (8002150 <Downdatasend+0x118>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	b2da      	uxtb	r2, r3
 80020a2:	4b28      	ldr	r3, [pc, #160]	@ (8002144 <Downdatasend+0x10c>)
 80020a4:	735a      	strb	r2, [r3, #13]
	Downdataloadbuf[14] = 0x00;
 80020a6:	4b27      	ldr	r3, [pc, #156]	@ (8002144 <Downdatasend+0x10c>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	739a      	strb	r2, [r3, #14]
	Downdataloadbuf[15] = 0x00;									//超时时间,井下仪器控制命令超时时间，暂时没有返回
 80020ac:	4b25      	ldr	r3, [pc, #148]	@ (8002144 <Downdatasend+0x10c>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	73da      	strb	r2, [r3, #15]
	Downdataloadbuf[16] = type;									//超时or数据
 80020b2:	4a24      	ldr	r2, [pc, #144]	@ (8002144 <Downdatasend+0x10c>)
 80020b4:	79fb      	ldrb	r3, [r7, #7]
 80020b6:	7413      	strb	r3, [r2, #16]
	Downdataloadbuf[17] = 0x00;									//预留
 80020b8:	4b22      	ldr	r3, [pc, #136]	@ (8002144 <Downdatasend+0x10c>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	745a      	strb	r2, [r3, #17]
	for(unsigned char i=0;i<DOWNdatabodynum;i++)
 80020be:	2300      	movs	r3, #0
 80020c0:	73fb      	strb	r3, [r7, #15]
 80020c2:	e009      	b.n	80020d8 <Downdatasend+0xa0>
	{
		Downdataloadbuf[18+i] = DOWNbodybuf[i];
 80020c4:	7bfa      	ldrb	r2, [r7, #15]
 80020c6:	7bfb      	ldrb	r3, [r7, #15]
 80020c8:	3312      	adds	r3, #18
 80020ca:	4922      	ldr	r1, [pc, #136]	@ (8002154 <Downdatasend+0x11c>)
 80020cc:	5c89      	ldrb	r1, [r1, r2]
 80020ce:	4a1d      	ldr	r2, [pc, #116]	@ (8002144 <Downdatasend+0x10c>)
 80020d0:	54d1      	strb	r1, [r2, r3]
	for(unsigned char i=0;i<DOWNdatabodynum;i++)
 80020d2:	7bfb      	ldrb	r3, [r7, #15]
 80020d4:	3301      	adds	r3, #1
 80020d6:	73fb      	strb	r3, [r7, #15]
 80020d8:	4b19      	ldr	r3, [pc, #100]	@ (8002140 <Downdatasend+0x108>)
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	7bfa      	ldrb	r2, [r7, #15]
 80020de:	429a      	cmp	r2, r3
 80020e0:	d3f0      	bcc.n	80020c4 <Downdatasend+0x8c>
	}
	Downdataloadbuf[DOWNdatabodynum+18] = Checksum_sum(Downdataloadbuf,DOWNdatabodynum+18)>>8;
 80020e2:	4b17      	ldr	r3, [pc, #92]	@ (8002140 <Downdatasend+0x108>)
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	3312      	adds	r3, #18
 80020e8:	b29b      	uxth	r3, r3
 80020ea:	4619      	mov	r1, r3
 80020ec:	4815      	ldr	r0, [pc, #84]	@ (8002144 <Downdatasend+0x10c>)
 80020ee:	f7fe fe67 	bl	8000dc0 <Checksum_sum>
 80020f2:	4603      	mov	r3, r0
 80020f4:	0a1b      	lsrs	r3, r3, #8
 80020f6:	b29a      	uxth	r2, r3
 80020f8:	4b11      	ldr	r3, [pc, #68]	@ (8002140 <Downdatasend+0x108>)
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	3312      	adds	r3, #18
 80020fe:	b2d1      	uxtb	r1, r2
 8002100:	4a10      	ldr	r2, [pc, #64]	@ (8002144 <Downdatasend+0x10c>)
 8002102:	54d1      	strb	r1, [r2, r3]
	Downdataloadbuf[DOWNdatabodynum+19] = Checksum_sum(Downdataloadbuf,DOWNdatabodynum+18);
 8002104:	4b0e      	ldr	r3, [pc, #56]	@ (8002140 <Downdatasend+0x108>)
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	3312      	adds	r3, #18
 800210a:	b29b      	uxth	r3, r3
 800210c:	4619      	mov	r1, r3
 800210e:	480d      	ldr	r0, [pc, #52]	@ (8002144 <Downdatasend+0x10c>)
 8002110:	f7fe fe56 	bl	8000dc0 <Checksum_sum>
 8002114:	4603      	mov	r3, r0
 8002116:	461a      	mov	r2, r3
 8002118:	4b09      	ldr	r3, [pc, #36]	@ (8002140 <Downdatasend+0x108>)
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	3313      	adds	r3, #19
 800211e:	b2d1      	uxtb	r1, r2
 8002120:	4a08      	ldr	r2, [pc, #32]	@ (8002144 <Downdatasend+0x10c>)
 8002122:	54d1      	strb	r1, [r2, r3]
	ComSendBuf(COM1,Downdataloadbuf,DOWNdatabodynum+20);
 8002124:	4b06      	ldr	r3, [pc, #24]	@ (8002140 <Downdatasend+0x108>)
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	3314      	adds	r3, #20
 800212a:	b29b      	uxth	r3, r3
 800212c:	461a      	mov	r2, r3
 800212e:	4905      	ldr	r1, [pc, #20]	@ (8002144 <Downdatasend+0x10c>)
 8002130:	20dd      	movs	r0, #221	@ 0xdd
 8002132:	f7ff fa4b 	bl	80015cc <ComSendBuf>
}
 8002136:	bf00      	nop
 8002138:	3710      	adds	r7, #16
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	2000037d 	.word	0x2000037d
 8002144:	20000014 	.word	0x20000014
 8002148:	20000789 	.word	0x20000789
 800214c:	200001ad 	.word	0x200001ad
 8002150:	20000208 	.word	0x20000208
 8002154:	20000684 	.word	0x20000684

08002158 <Resetstate>:
/* USER CODE END 1 */

void Resetstate(unsigned char tep)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	4603      	mov	r3, r0
 8002160:	71fb      	strb	r3, [r7, #7]
	if(tep == ETHCMD)
 8002162:	79fb      	ldrb	r3, [r7, #7]
 8002164:	2b01      	cmp	r3, #1
 8002166:	d10c      	bne.n	8002182 <Resetstate+0x2a>
	{
		ETHdatabodynum = 0;
 8002168:	4b10      	ldr	r3, [pc, #64]	@ (80021ac <Resetstate+0x54>)
 800216a:	2200      	movs	r2, #0
 800216c:	701a      	strb	r2, [r3, #0]
		ETHdatastate = 0;
 800216e:	4b10      	ldr	r3, [pc, #64]	@ (80021b0 <Resetstate+0x58>)
 8002170:	2200      	movs	r2, #0
 8002172:	701a      	strb	r2, [r3, #0]
		ETHdataheadnum = 0;
 8002174:	4b0f      	ldr	r3, [pc, #60]	@ (80021b4 <Resetstate+0x5c>)
 8002176:	2200      	movs	r2, #0
 8002178:	701a      	strb	r2, [r3, #0]
		ETHdataoverflag = 0;
 800217a:	4b0f      	ldr	r3, [pc, #60]	@ (80021b8 <Resetstate+0x60>)
 800217c:	2200      	movs	r2, #0
 800217e:	701a      	strb	r2, [r3, #0]
		DOWNdataoverflag = 0;
		DOWNdatastate = 0;
		DOWNheaddatanum = 0;
		DOWNdatabodynum = 0;
	}
}
 8002180:	e00e      	b.n	80021a0 <Resetstate+0x48>
	else if(tep == TOOLDATA)
 8002182:	79fb      	ldrb	r3, [r7, #7]
 8002184:	2b02      	cmp	r3, #2
 8002186:	d10b      	bne.n	80021a0 <Resetstate+0x48>
		DOWNdataoverflag = 0;
 8002188:	4b0c      	ldr	r3, [pc, #48]	@ (80021bc <Resetstate+0x64>)
 800218a:	2200      	movs	r2, #0
 800218c:	701a      	strb	r2, [r3, #0]
		DOWNdatastate = 0;
 800218e:	4b0c      	ldr	r3, [pc, #48]	@ (80021c0 <Resetstate+0x68>)
 8002190:	2200      	movs	r2, #0
 8002192:	701a      	strb	r2, [r3, #0]
		DOWNheaddatanum = 0;
 8002194:	4b0b      	ldr	r3, [pc, #44]	@ (80021c4 <Resetstate+0x6c>)
 8002196:	2200      	movs	r2, #0
 8002198:	701a      	strb	r2, [r3, #0]
		DOWNdatabodynum = 0;
 800219a:	4b0b      	ldr	r3, [pc, #44]	@ (80021c8 <Resetstate+0x70>)
 800219c:	2200      	movs	r2, #0
 800219e:	701a      	strb	r2, [r3, #0]
}
 80021a0:	bf00      	nop
 80021a2:	370c      	adds	r7, #12
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bc80      	pop	{r7}
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	2000037c 	.word	0x2000037c
 80021b0:	20000378 	.word	0x20000378
 80021b4:	2000037a 	.word	0x2000037a
 80021b8:	2000079c 	.word	0x2000079c
 80021bc:	2000079d 	.word	0x2000079d
 80021c0:	20000379 	.word	0x20000379
 80021c4:	2000037b 	.word	0x2000037b
 80021c8:	2000037d 	.word	0x2000037d

080021cc <main>:
  */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

int main(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	af00      	add	r7, sp, #0
  init();												//硬件初始化
 80021d0:	f7fe fd16 	bl	8000c00 <init>

  while (1)
  {
	  ETH_CMDPOLL();									//ETH指令轮询
 80021d4:	f7fe fe56 	bl	8000e84 <ETH_CMDPOLL>
	  DOWN_DATAPOLL();									//DOWN数据轮询
 80021d8:	f7fe ff52 	bl	8001080 <DOWN_DATAPOLL>
	  Sendtimestamp();									//时间深度同步
 80021dc:	f7fe ff80 	bl	80010e0 <Sendtimestamp>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
 80021e0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80021e4:	4803      	ldr	r0, [pc, #12]	@ (80021f4 <main+0x28>)
 80021e6:	f001 f96c 	bl	80034c2 <HAL_GPIO_TogglePin>

	  IWDG_FEED_DOG();									//喂狗，超过410ms未清看门狗，系统复位
 80021ea:	f7fe fd83 	bl	8000cf4 <IWDG_FEED_DOG>
	  ETH_CMDPOLL();									//ETH指令轮询
 80021ee:	bf00      	nop
 80021f0:	e7f0      	b.n	80021d4 <main+0x8>
 80021f2:	bf00      	nop
 80021f4:	40010c00 	.word	0x40010c00

080021f8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80021f8:	f7fe f8c2 	bl	8000380 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80021fc:	480b      	ldr	r0, [pc, #44]	@ (800222c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80021fe:	490c      	ldr	r1, [pc, #48]	@ (8002230 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002200:	4a0c      	ldr	r2, [pc, #48]	@ (8002234 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002202:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002204:	e002      	b.n	800220c <LoopCopyDataInit>

08002206 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002206:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002208:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800220a:	3304      	adds	r3, #4

0800220c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800220c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800220e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002210:	d3f9      	bcc.n	8002206 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002212:	4a09      	ldr	r2, [pc, #36]	@ (8002238 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002214:	4c09      	ldr	r4, [pc, #36]	@ (800223c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002216:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002218:	e001      	b.n	800221e <LoopFillZerobss>

0800221a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800221a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800221c:	3204      	adds	r2, #4

0800221e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800221e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002220:	d3fb      	bcc.n	800221a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002222:	f003 f88b 	bl	800533c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002226:	f7ff ffd1 	bl	80021cc <main>
  bx lr
 800222a:	4770      	bx	lr
  ldr r0, =_sdata
 800222c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002230:	2000016c 	.word	0x2000016c
  ldr r2, =_sidata
 8002234:	08006124 	.word	0x08006124
  ldr r2, =_sbss
 8002238:	2000016c 	.word	0x2000016c
  ldr r4, =_ebss
 800223c:	20000e2c 	.word	0x20000e2c

08002240 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002240:	e7fe      	b.n	8002240 <ADC1_2_IRQHandler>
	...

08002244 <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
 800224a:	4b21      	ldr	r3, [pc, #132]	@ (80022d0 <_DoInit+0x8c>)
 800224c:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2203      	movs	r2, #3
 8002252:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2203      	movs	r2, #3
 8002258:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a1d      	ldr	r2, [pc, #116]	@ (80022d4 <_DoInit+0x90>)
 800225e:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	4a1d      	ldr	r2, [pc, #116]	@ (80022d8 <_DoInit+0x94>)
 8002264:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800226c:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2200      	movs	r2, #0
 8002272:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2200      	movs	r2, #0
 8002278:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2200      	movs	r2, #0
 800227e:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	4a14      	ldr	r2, [pc, #80]	@ (80022d4 <_DoInit+0x90>)
 8002284:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4a14      	ldr	r2, [pc, #80]	@ (80022dc <_DoInit+0x98>)
 800228a:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2210      	movs	r2, #16
 8002290:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2200      	movs	r2, #0
 8002296:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2200      	movs	r2, #0
 800229c:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2200      	movs	r2, #0
 80022a2:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	3307      	adds	r3, #7
 80022a8:	4a0d      	ldr	r2, [pc, #52]	@ (80022e0 <_DoInit+0x9c>)
 80022aa:	6810      	ldr	r0, [r2, #0]
 80022ac:	6018      	str	r0, [r3, #0]
  strcpy(&p->acID[0], "SEGGER");
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4a0c      	ldr	r2, [pc, #48]	@ (80022e4 <_DoInit+0xa0>)
 80022b2:	6810      	ldr	r0, [r2, #0]
 80022b4:	6018      	str	r0, [r3, #0]
 80022b6:	8891      	ldrh	r1, [r2, #4]
 80022b8:	7992      	ldrb	r2, [r2, #6]
 80022ba:	8099      	strh	r1, [r3, #4]
 80022bc:	719a      	strb	r2, [r3, #6]
  p->acID[6] = ' ';
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2220      	movs	r2, #32
 80022c2:	719a      	strb	r2, [r3, #6]
}
 80022c4:	bf00      	nop
 80022c6:	370c      	adds	r7, #12
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bc80      	pop	{r7}
 80022cc:	4770      	bx	lr
 80022ce:	bf00      	nop
 80022d0:	20000828 	.word	0x20000828
 80022d4:	08005ca8 	.word	0x08005ca8
 80022d8:	200008d0 	.word	0x200008d0
 80022dc:	20000cd0 	.word	0x20000cd0
 80022e0:	08005cb4 	.word	0x08005cb4
 80022e4:	08005cb8 	.word	0x08005cb8

080022e8 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b088      	sub	sp, #32
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	60f8      	str	r0, [r7, #12]
 80022f0:	60b9      	str	r1, [r7, #8]
 80022f2:	607a      	str	r2, [r7, #4]
  char*    pDst;
#endif
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 80022f4:	2300      	movs	r3, #0
 80022f6:	61bb      	str	r3, [r7, #24]
  WrOff = pRing->WrOff;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	617b      	str	r3, [r7, #20]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	691b      	ldr	r3, [r3, #16]
 8002302:	613b      	str	r3, [r7, #16]
    if (RdOff > WrOff) {
 8002304:	693a      	ldr	r2, [r7, #16]
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	429a      	cmp	r2, r3
 800230a:	d905      	bls.n	8002318 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 800230c:	693a      	ldr	r2, [r7, #16]
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	3b01      	subs	r3, #1
 8002314:	61fb      	str	r3, [r7, #28]
 8002316:	e007      	b.n	8002328 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	689a      	ldr	r2, [r3, #8]
 800231c:	6939      	ldr	r1, [r7, #16]
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	1acb      	subs	r3, r1, r3
 8002322:	4413      	add	r3, r2
 8002324:	3b01      	subs	r3, #1
 8002326:	61fb      	str	r3, [r7, #28]
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	689a      	ldr	r2, [r3, #8]
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	1ad3      	subs	r3, r2, r3
 8002330:	69fa      	ldr	r2, [r7, #28]
 8002332:	4293      	cmp	r3, r2
 8002334:	bf28      	it	cs
 8002336:	4613      	movcs	r3, r2
 8002338:	61fb      	str	r3, [r7, #28]
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 800233a:	69fa      	ldr	r2, [r7, #28]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	4293      	cmp	r3, r2
 8002340:	bf28      	it	cs
 8002342:	4613      	movcs	r3, r2
 8002344:	61fb      	str	r3, [r7, #28]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	685a      	ldr	r2, [r3, #4]
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	4413      	add	r3, r2
 800234e:	69fa      	ldr	r2, [r7, #28]
 8002350:	68b9      	ldr	r1, [r7, #8]
 8002352:	4618      	mov	r0, r3
 8002354:	f003 f818 	bl	8005388 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8002358:	69ba      	ldr	r2, [r7, #24]
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	4413      	add	r3, r2
 800235e:	61bb      	str	r3, [r7, #24]
    pBuffer         += NumBytesToWrite;
 8002360:	68ba      	ldr	r2, [r7, #8]
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	4413      	add	r3, r2
 8002366:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8002368:	687a      	ldr	r2, [r7, #4]
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8002370:	697a      	ldr	r2, [r7, #20]
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	4413      	add	r3, r2
 8002376:	617b      	str	r3, [r7, #20]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	697a      	ldr	r2, [r7, #20]
 800237e:	429a      	cmp	r2, r3
 8002380:	d101      	bne.n	8002386 <_WriteBlocking+0x9e>
      WrOff = 0u;
 8002382:	2300      	movs	r3, #0
 8002384:	617b      	str	r3, [r7, #20]
    }
    pRing->WrOff = WrOff;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	697a      	ldr	r2, [r7, #20]
 800238a:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d1b5      	bne.n	80022fe <_WriteBlocking+0x16>
  //
  return NumBytesWritten;
 8002392:	69bb      	ldr	r3, [r7, #24]
}
 8002394:	4618      	mov	r0, r3
 8002396:	3720      	adds	r7, #32
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}

0800239c <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 800239c:	b580      	push	{r7, lr}
 800239e:	b088      	sub	sp, #32
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	60f8      	str	r0, [r7, #12]
 80023a4:	60b9      	str	r1, [r7, #8]
 80023a6:	607a      	str	r2, [r7, #4]
  unsigned Rem;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  char*    pDst;
#endif

  WrOff = pRing->WrOff;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	689a      	ldr	r2, [r3, #8]
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	429a      	cmp	r2, r3
 80023be:	d90e      	bls.n	80023de <_WriteNoCheck+0x42>
    while (NumBytes--) {
      *pDst++ = *pData++;
    };
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	685a      	ldr	r2, [r3, #4]
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	4413      	add	r3, r2
 80023c8:	687a      	ldr	r2, [r7, #4]
 80023ca:	68b9      	ldr	r1, [r7, #8]
 80023cc:	4618      	mov	r0, r3
 80023ce:	f002 ffdb 	bl	8005388 <memcpy>
    pRing->WrOff = WrOff + NumBytes;
 80023d2:	69fa      	ldr	r2, [r7, #28]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	441a      	add	r2, r3
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	60da      	str	r2, [r3, #12]
    NumBytesAtOnce = NumBytes - Rem;
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 80023dc:	e01a      	b.n	8002414 <_WriteNoCheck+0x78>
    NumBytesAtOnce = Rem;
 80023de:	69bb      	ldr	r3, [r7, #24]
 80023e0:	617b      	str	r3, [r7, #20]
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	685a      	ldr	r2, [r3, #4]
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	4413      	add	r3, r2
 80023ea:	697a      	ldr	r2, [r7, #20]
 80023ec:	68b9      	ldr	r1, [r7, #8]
 80023ee:	4618      	mov	r0, r3
 80023f0:	f002 ffca 	bl	8005388 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 80023f4:	687a      	ldr	r2, [r7, #4]
 80023f6:	69bb      	ldr	r3, [r7, #24]
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	617b      	str	r3, [r7, #20]
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	6858      	ldr	r0, [r3, #4]
 8002400:	68ba      	ldr	r2, [r7, #8]
 8002402:	69bb      	ldr	r3, [r7, #24]
 8002404:	4413      	add	r3, r2
 8002406:	697a      	ldr	r2, [r7, #20]
 8002408:	4619      	mov	r1, r3
 800240a:	f002 ffbd 	bl	8005388 <memcpy>
    pRing->WrOff = NumBytesAtOnce;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	697a      	ldr	r2, [r7, #20]
 8002412:	60da      	str	r2, [r3, #12]
}
 8002414:	bf00      	nop
 8002416:	3720      	adds	r7, #32
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}

0800241c <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 800241c:	b480      	push	{r7}
 800241e:	b087      	sub	sp, #28
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	691b      	ldr	r3, [r3, #16]
 8002428:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8002430:	693a      	ldr	r2, [r7, #16]
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	429a      	cmp	r2, r3
 8002436:	d808      	bhi.n	800244a <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	689a      	ldr	r2, [r3, #8]
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	1ad2      	subs	r2, r2, r3
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	4413      	add	r3, r2
 8002444:	3b01      	subs	r3, #1
 8002446:	617b      	str	r3, [r7, #20]
 8002448:	e004      	b.n	8002454 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 800244a:	693a      	ldr	r2, [r7, #16]
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	1ad3      	subs	r3, r2, r3
 8002450:	3b01      	subs	r3, #1
 8002452:	617b      	str	r3, [r7, #20]
  }
  return r;
 8002454:	697b      	ldr	r3, [r7, #20]
}
 8002456:	4618      	mov	r0, r3
 8002458:	371c      	adds	r7, #28
 800245a:	46bd      	mov	sp, r7
 800245c:	bc80      	pop	{r7}
 800245e:	4770      	bx	lr

08002460 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8002460:	b580      	push	{r7, lr}
 8002462:	b088      	sub	sp, #32
 8002464:	af00      	add	r7, sp, #0
 8002466:	60f8      	str	r0, [r7, #12]
 8002468:	60b9      	str	r1, [r7, #8]
 800246a:	607a      	str	r2, [r7, #4]
  unsigned              Status;
  unsigned              Avail;
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;

  pData = (const char *)pBuffer;
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	61bb      	str	r3, [r7, #24]
  //
  // Get "to-host" ring buffer.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	1c5a      	adds	r2, r3, #1
 8002474:	4613      	mov	r3, r2
 8002476:	005b      	lsls	r3, r3, #1
 8002478:	4413      	add	r3, r2
 800247a:	00db      	lsls	r3, r3, #3
 800247c:	4a1f      	ldr	r2, [pc, #124]	@ (80024fc <SEGGER_RTT_WriteNoLock+0x9c>)
 800247e:	4413      	add	r3, r2
 8002480:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	695b      	ldr	r3, [r3, #20]
 8002486:	2b02      	cmp	r3, #2
 8002488:	d029      	beq.n	80024de <SEGGER_RTT_WriteNoLock+0x7e>
 800248a:	2b02      	cmp	r3, #2
 800248c:	d82e      	bhi.n	80024ec <SEGGER_RTT_WriteNoLock+0x8c>
 800248e:	2b00      	cmp	r3, #0
 8002490:	d002      	beq.n	8002498 <SEGGER_RTT_WriteNoLock+0x38>
 8002492:	2b01      	cmp	r3, #1
 8002494:	d013      	beq.n	80024be <SEGGER_RTT_WriteNoLock+0x5e>
 8002496:	e029      	b.n	80024ec <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8002498:	6978      	ldr	r0, [r7, #20]
 800249a:	f7ff ffbf 	bl	800241c <_GetAvailWriteSpace>
 800249e:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 80024a0:	693a      	ldr	r2, [r7, #16]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d202      	bcs.n	80024ae <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 80024a8:	2300      	movs	r3, #0
 80024aa:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 80024ac:	e021      	b.n	80024f2 <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 80024b2:	687a      	ldr	r2, [r7, #4]
 80024b4:	69b9      	ldr	r1, [r7, #24]
 80024b6:	6978      	ldr	r0, [r7, #20]
 80024b8:	f7ff ff70 	bl	800239c <_WriteNoCheck>
    break;
 80024bc:	e019      	b.n	80024f2 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80024be:	6978      	ldr	r0, [r7, #20]
 80024c0:	f7ff ffac 	bl	800241c <_GetAvailWriteSpace>
 80024c4:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	4293      	cmp	r3, r2
 80024cc:	bf28      	it	cs
 80024ce:	4613      	movcs	r3, r2
 80024d0:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 80024d2:	69fa      	ldr	r2, [r7, #28]
 80024d4:	69b9      	ldr	r1, [r7, #24]
 80024d6:	6978      	ldr	r0, [r7, #20]
 80024d8:	f7ff ff60 	bl	800239c <_WriteNoCheck>
    break;
 80024dc:	e009      	b.n	80024f2 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 80024de:	687a      	ldr	r2, [r7, #4]
 80024e0:	69b9      	ldr	r1, [r7, #24]
 80024e2:	6978      	ldr	r0, [r7, #20]
 80024e4:	f7ff ff00 	bl	80022e8 <_WriteBlocking>
 80024e8:	61f8      	str	r0, [r7, #28]
    break;
 80024ea:	e002      	b.n	80024f2 <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 80024ec:	2300      	movs	r3, #0
 80024ee:	61fb      	str	r3, [r7, #28]
    break;
 80024f0:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 80024f2:	69fb      	ldr	r3, [r7, #28]
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	3720      	adds	r7, #32
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	20000828 	.word	0x20000828

08002500 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8002500:	b580      	push	{r7, lr}
 8002502:	b086      	sub	sp, #24
 8002504:	af00      	add	r7, sp, #0
 8002506:	60f8      	str	r0, [r7, #12]
 8002508:	60b9      	str	r1, [r7, #8]
 800250a:	607a      	str	r2, [r7, #4]
  unsigned Status;
  //
  INIT();
 800250c:	4b0d      	ldr	r3, [pc, #52]	@ (8002544 <SEGGER_RTT_Write+0x44>)
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d101      	bne.n	8002518 <SEGGER_RTT_Write+0x18>
 8002514:	f7ff fe96 	bl	8002244 <_DoInit>
  SEGGER_RTT_LOCK();
 8002518:	f3ef 8311 	mrs	r3, BASEPRI
 800251c:	f04f 0120 	mov.w	r1, #32
 8002520:	f381 8811 	msr	BASEPRI, r1
 8002524:	617b      	str	r3, [r7, #20]
  //
  // Call the non-locking write function
  //
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);
 8002526:	687a      	ldr	r2, [r7, #4]
 8002528:	68b9      	ldr	r1, [r7, #8]
 800252a:	68f8      	ldr	r0, [r7, #12]
 800252c:	f7ff ff98 	bl	8002460 <SEGGER_RTT_WriteNoLock>
 8002530:	6138      	str	r0, [r7, #16]
  //
  // Finish up.
  //
  SEGGER_RTT_UNLOCK();
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	f383 8811 	msr	BASEPRI, r3
  //
  return Status;
 8002538:	693b      	ldr	r3, [r7, #16]
}
 800253a:	4618      	mov	r0, r3
 800253c:	3718      	adds	r7, #24
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	20000828 	.word	0x20000828

08002548 <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
 8002548:	b580      	push	{r7, lr}
 800254a:	af00      	add	r7, sp, #0
  _DoInit();
 800254c:	f7ff fe7a 	bl	8002244 <_DoInit>
}
 8002550:	bf00      	nop
 8002552:	bd80      	pop	{r7, pc}

08002554 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002558:	4b08      	ldr	r3, [pc, #32]	@ (800257c <HAL_Init+0x28>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a07      	ldr	r2, [pc, #28]	@ (800257c <HAL_Init+0x28>)
 800255e:	f043 0310 	orr.w	r3, r3, #16
 8002562:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002564:	2003      	movs	r0, #3
 8002566:	f000 f923 	bl	80027b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800256a:	200f      	movs	r0, #15
 800256c:	f000 f808 	bl	8002580 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002570:	f7fd fe58 	bl	8000224 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002574:	2300      	movs	r3, #0
}
 8002576:	4618      	mov	r0, r3
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	40022000 	.word	0x40022000

08002580 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002588:	4b12      	ldr	r3, [pc, #72]	@ (80025d4 <HAL_InitTick+0x54>)
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	4b12      	ldr	r3, [pc, #72]	@ (80025d8 <HAL_InitTick+0x58>)
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	4619      	mov	r1, r3
 8002592:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002596:	fbb3 f3f1 	udiv	r3, r3, r1
 800259a:	fbb2 f3f3 	udiv	r3, r2, r3
 800259e:	4618      	mov	r0, r3
 80025a0:	f000 f93b 	bl	800281a <HAL_SYSTICK_Config>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d001      	beq.n	80025ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e00e      	b.n	80025cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2b0f      	cmp	r3, #15
 80025b2:	d80a      	bhi.n	80025ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025b4:	2200      	movs	r2, #0
 80025b6:	6879      	ldr	r1, [r7, #4]
 80025b8:	f04f 30ff 	mov.w	r0, #4294967295
 80025bc:	f000 f903 	bl	80027c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025c0:	4a06      	ldr	r2, [pc, #24]	@ (80025dc <HAL_InitTick+0x5c>)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025c6:	2300      	movs	r3, #0
 80025c8:	e000      	b.n	80025cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3708      	adds	r7, #8
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	20000000 	.word	0x20000000
 80025d8:	20000118 	.word	0x20000118
 80025dc:	20000114 	.word	0x20000114

080025e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025e0:	b480      	push	{r7}
 80025e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025e4:	4b05      	ldr	r3, [pc, #20]	@ (80025fc <HAL_IncTick+0x1c>)
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	461a      	mov	r2, r3
 80025ea:	4b05      	ldr	r3, [pc, #20]	@ (8002600 <HAL_IncTick+0x20>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4413      	add	r3, r2
 80025f0:	4a03      	ldr	r2, [pc, #12]	@ (8002600 <HAL_IncTick+0x20>)
 80025f2:	6013      	str	r3, [r2, #0]
}
 80025f4:	bf00      	nop
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bc80      	pop	{r7}
 80025fa:	4770      	bx	lr
 80025fc:	20000118 	.word	0x20000118
 8002600:	20000ce0 	.word	0x20000ce0

08002604 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002604:	b480      	push	{r7}
 8002606:	af00      	add	r7, sp, #0
  return uwTick;
 8002608:	4b02      	ldr	r3, [pc, #8]	@ (8002614 <HAL_GetTick+0x10>)
 800260a:	681b      	ldr	r3, [r3, #0]
}
 800260c:	4618      	mov	r0, r3
 800260e:	46bd      	mov	sp, r7
 8002610:	bc80      	pop	{r7}
 8002612:	4770      	bx	lr
 8002614:	20000ce0 	.word	0x20000ce0

08002618 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002618:	b480      	push	{r7}
 800261a:	b085      	sub	sp, #20
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	f003 0307 	and.w	r3, r3, #7
 8002626:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002628:	4b0c      	ldr	r3, [pc, #48]	@ (800265c <__NVIC_SetPriorityGrouping+0x44>)
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800262e:	68ba      	ldr	r2, [r7, #8]
 8002630:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002634:	4013      	ands	r3, r2
 8002636:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002640:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002644:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002648:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800264a:	4a04      	ldr	r2, [pc, #16]	@ (800265c <__NVIC_SetPriorityGrouping+0x44>)
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	60d3      	str	r3, [r2, #12]
}
 8002650:	bf00      	nop
 8002652:	3714      	adds	r7, #20
 8002654:	46bd      	mov	sp, r7
 8002656:	bc80      	pop	{r7}
 8002658:	4770      	bx	lr
 800265a:	bf00      	nop
 800265c:	e000ed00 	.word	0xe000ed00

08002660 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002664:	4b04      	ldr	r3, [pc, #16]	@ (8002678 <__NVIC_GetPriorityGrouping+0x18>)
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	0a1b      	lsrs	r3, r3, #8
 800266a:	f003 0307 	and.w	r3, r3, #7
}
 800266e:	4618      	mov	r0, r3
 8002670:	46bd      	mov	sp, r7
 8002672:	bc80      	pop	{r7}
 8002674:	4770      	bx	lr
 8002676:	bf00      	nop
 8002678:	e000ed00 	.word	0xe000ed00

0800267c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800267c:	b480      	push	{r7}
 800267e:	b083      	sub	sp, #12
 8002680:	af00      	add	r7, sp, #0
 8002682:	4603      	mov	r3, r0
 8002684:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800268a:	2b00      	cmp	r3, #0
 800268c:	db0b      	blt.n	80026a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800268e:	79fb      	ldrb	r3, [r7, #7]
 8002690:	f003 021f 	and.w	r2, r3, #31
 8002694:	4906      	ldr	r1, [pc, #24]	@ (80026b0 <__NVIC_EnableIRQ+0x34>)
 8002696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800269a:	095b      	lsrs	r3, r3, #5
 800269c:	2001      	movs	r0, #1
 800269e:	fa00 f202 	lsl.w	r2, r0, r2
 80026a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026a6:	bf00      	nop
 80026a8:	370c      	adds	r7, #12
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bc80      	pop	{r7}
 80026ae:	4770      	bx	lr
 80026b0:	e000e100 	.word	0xe000e100

080026b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	4603      	mov	r3, r0
 80026bc:	6039      	str	r1, [r7, #0]
 80026be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	db0a      	blt.n	80026de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	b2da      	uxtb	r2, r3
 80026cc:	490c      	ldr	r1, [pc, #48]	@ (8002700 <__NVIC_SetPriority+0x4c>)
 80026ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d2:	0112      	lsls	r2, r2, #4
 80026d4:	b2d2      	uxtb	r2, r2
 80026d6:	440b      	add	r3, r1
 80026d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026dc:	e00a      	b.n	80026f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	b2da      	uxtb	r2, r3
 80026e2:	4908      	ldr	r1, [pc, #32]	@ (8002704 <__NVIC_SetPriority+0x50>)
 80026e4:	79fb      	ldrb	r3, [r7, #7]
 80026e6:	f003 030f 	and.w	r3, r3, #15
 80026ea:	3b04      	subs	r3, #4
 80026ec:	0112      	lsls	r2, r2, #4
 80026ee:	b2d2      	uxtb	r2, r2
 80026f0:	440b      	add	r3, r1
 80026f2:	761a      	strb	r2, [r3, #24]
}
 80026f4:	bf00      	nop
 80026f6:	370c      	adds	r7, #12
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bc80      	pop	{r7}
 80026fc:	4770      	bx	lr
 80026fe:	bf00      	nop
 8002700:	e000e100 	.word	0xe000e100
 8002704:	e000ed00 	.word	0xe000ed00

08002708 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002708:	b480      	push	{r7}
 800270a:	b089      	sub	sp, #36	@ 0x24
 800270c:	af00      	add	r7, sp, #0
 800270e:	60f8      	str	r0, [r7, #12]
 8002710:	60b9      	str	r1, [r7, #8]
 8002712:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	f003 0307 	and.w	r3, r3, #7
 800271a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	f1c3 0307 	rsb	r3, r3, #7
 8002722:	2b04      	cmp	r3, #4
 8002724:	bf28      	it	cs
 8002726:	2304      	movcs	r3, #4
 8002728:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	3304      	adds	r3, #4
 800272e:	2b06      	cmp	r3, #6
 8002730:	d902      	bls.n	8002738 <NVIC_EncodePriority+0x30>
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	3b03      	subs	r3, #3
 8002736:	e000      	b.n	800273a <NVIC_EncodePriority+0x32>
 8002738:	2300      	movs	r3, #0
 800273a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800273c:	f04f 32ff 	mov.w	r2, #4294967295
 8002740:	69bb      	ldr	r3, [r7, #24]
 8002742:	fa02 f303 	lsl.w	r3, r2, r3
 8002746:	43da      	mvns	r2, r3
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	401a      	ands	r2, r3
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002750:	f04f 31ff 	mov.w	r1, #4294967295
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	fa01 f303 	lsl.w	r3, r1, r3
 800275a:	43d9      	mvns	r1, r3
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002760:	4313      	orrs	r3, r2
         );
}
 8002762:	4618      	mov	r0, r3
 8002764:	3724      	adds	r7, #36	@ 0x24
 8002766:	46bd      	mov	sp, r7
 8002768:	bc80      	pop	{r7}
 800276a:	4770      	bx	lr

0800276c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	3b01      	subs	r3, #1
 8002778:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800277c:	d301      	bcc.n	8002782 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800277e:	2301      	movs	r3, #1
 8002780:	e00f      	b.n	80027a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002782:	4a0a      	ldr	r2, [pc, #40]	@ (80027ac <SysTick_Config+0x40>)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	3b01      	subs	r3, #1
 8002788:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800278a:	210f      	movs	r1, #15
 800278c:	f04f 30ff 	mov.w	r0, #4294967295
 8002790:	f7ff ff90 	bl	80026b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002794:	4b05      	ldr	r3, [pc, #20]	@ (80027ac <SysTick_Config+0x40>)
 8002796:	2200      	movs	r2, #0
 8002798:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800279a:	4b04      	ldr	r3, [pc, #16]	@ (80027ac <SysTick_Config+0x40>)
 800279c:	2207      	movs	r2, #7
 800279e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027a0:	2300      	movs	r3, #0
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3708      	adds	r7, #8
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	e000e010 	.word	0xe000e010

080027b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f7ff ff2d 	bl	8002618 <__NVIC_SetPriorityGrouping>
}
 80027be:	bf00      	nop
 80027c0:	3708      	adds	r7, #8
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}

080027c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027c6:	b580      	push	{r7, lr}
 80027c8:	b086      	sub	sp, #24
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	4603      	mov	r3, r0
 80027ce:	60b9      	str	r1, [r7, #8]
 80027d0:	607a      	str	r2, [r7, #4]
 80027d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027d4:	2300      	movs	r3, #0
 80027d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027d8:	f7ff ff42 	bl	8002660 <__NVIC_GetPriorityGrouping>
 80027dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	68b9      	ldr	r1, [r7, #8]
 80027e2:	6978      	ldr	r0, [r7, #20]
 80027e4:	f7ff ff90 	bl	8002708 <NVIC_EncodePriority>
 80027e8:	4602      	mov	r2, r0
 80027ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027ee:	4611      	mov	r1, r2
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7ff ff5f 	bl	80026b4 <__NVIC_SetPriority>
}
 80027f6:	bf00      	nop
 80027f8:	3718      	adds	r7, #24
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}

080027fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027fe:	b580      	push	{r7, lr}
 8002800:	b082      	sub	sp, #8
 8002802:	af00      	add	r7, sp, #0
 8002804:	4603      	mov	r3, r0
 8002806:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002808:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800280c:	4618      	mov	r0, r3
 800280e:	f7ff ff35 	bl	800267c <__NVIC_EnableIRQ>
}
 8002812:	bf00      	nop
 8002814:	3708      	adds	r7, #8
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}

0800281a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800281a:	b580      	push	{r7, lr}
 800281c:	b082      	sub	sp, #8
 800281e:	af00      	add	r7, sp, #0
 8002820:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f7ff ffa2 	bl	800276c <SysTick_Config>
 8002828:	4603      	mov	r3, r0
}
 800282a:	4618      	mov	r0, r3
 800282c:	3708      	adds	r7, #8
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
	...

08002834 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002834:	b480      	push	{r7}
 8002836:	b085      	sub	sp, #20
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800283c:	2300      	movs	r3, #0
 800283e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d101      	bne.n	800284a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e059      	b.n	80028fe <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	461a      	mov	r2, r3
 8002850:	4b2d      	ldr	r3, [pc, #180]	@ (8002908 <HAL_DMA_Init+0xd4>)
 8002852:	429a      	cmp	r2, r3
 8002854:	d80f      	bhi.n	8002876 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	461a      	mov	r2, r3
 800285c:	4b2b      	ldr	r3, [pc, #172]	@ (800290c <HAL_DMA_Init+0xd8>)
 800285e:	4413      	add	r3, r2
 8002860:	4a2b      	ldr	r2, [pc, #172]	@ (8002910 <HAL_DMA_Init+0xdc>)
 8002862:	fba2 2303 	umull	r2, r3, r2, r3
 8002866:	091b      	lsrs	r3, r3, #4
 8002868:	009a      	lsls	r2, r3, #2
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4a28      	ldr	r2, [pc, #160]	@ (8002914 <HAL_DMA_Init+0xe0>)
 8002872:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002874:	e00e      	b.n	8002894 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	461a      	mov	r2, r3
 800287c:	4b26      	ldr	r3, [pc, #152]	@ (8002918 <HAL_DMA_Init+0xe4>)
 800287e:	4413      	add	r3, r2
 8002880:	4a23      	ldr	r2, [pc, #140]	@ (8002910 <HAL_DMA_Init+0xdc>)
 8002882:	fba2 2303 	umull	r2, r3, r2, r3
 8002886:	091b      	lsrs	r3, r3, #4
 8002888:	009a      	lsls	r2, r3, #2
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4a22      	ldr	r2, [pc, #136]	@ (800291c <HAL_DMA_Init+0xe8>)
 8002892:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2202      	movs	r2, #2
 8002898:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80028aa:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80028ae:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80028b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	695b      	ldr	r3, [r3, #20]
 80028ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028d0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	69db      	ldr	r3, [r3, #28]
 80028d6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80028d8:	68fa      	ldr	r2, [r7, #12]
 80028da:	4313      	orrs	r3, r2
 80028dc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	68fa      	ldr	r2, [r7, #12]
 80028e4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2200      	movs	r2, #0
 80028ea:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2201      	movs	r2, #1
 80028f0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2200      	movs	r2, #0
 80028f8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80028fc:	2300      	movs	r3, #0
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3714      	adds	r7, #20
 8002902:	46bd      	mov	sp, r7
 8002904:	bc80      	pop	{r7}
 8002906:	4770      	bx	lr
 8002908:	40020407 	.word	0x40020407
 800290c:	bffdfff8 	.word	0xbffdfff8
 8002910:	cccccccd 	.word	0xcccccccd
 8002914:	40020000 	.word	0x40020000
 8002918:	bffdfbf8 	.word	0xbffdfbf8
 800291c:	40020400 	.word	0x40020400

08002920 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b086      	sub	sp, #24
 8002924:	af00      	add	r7, sp, #0
 8002926:	60f8      	str	r0, [r7, #12]
 8002928:	60b9      	str	r1, [r7, #8]
 800292a:	607a      	str	r2, [r7, #4]
 800292c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800292e:	2300      	movs	r3, #0
 8002930:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002938:	2b01      	cmp	r3, #1
 800293a:	d101      	bne.n	8002940 <HAL_DMA_Start_IT+0x20>
 800293c:	2302      	movs	r3, #2
 800293e:	e04b      	b.n	80029d8 <HAL_DMA_Start_IT+0xb8>
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800294e:	b2db      	uxtb	r3, r3
 8002950:	2b01      	cmp	r3, #1
 8002952:	d13a      	bne.n	80029ca <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2202      	movs	r2, #2
 8002958:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2200      	movs	r2, #0
 8002960:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f022 0201 	bic.w	r2, r2, #1
 8002970:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	687a      	ldr	r2, [r7, #4]
 8002976:	68b9      	ldr	r1, [r7, #8]
 8002978:	68f8      	ldr	r0, [r7, #12]
 800297a:	f000 fbb1 	bl	80030e0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002982:	2b00      	cmp	r3, #0
 8002984:	d008      	beq.n	8002998 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f042 020e 	orr.w	r2, r2, #14
 8002994:	601a      	str	r2, [r3, #0]
 8002996:	e00f      	b.n	80029b8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f022 0204 	bic.w	r2, r2, #4
 80029a6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f042 020a 	orr.w	r2, r2, #10
 80029b6:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f042 0201 	orr.w	r2, r2, #1
 80029c6:	601a      	str	r2, [r3, #0]
 80029c8:	e005      	b.n	80029d6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2200      	movs	r2, #0
 80029ce:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80029d2:	2302      	movs	r3, #2
 80029d4:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80029d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80029d8:	4618      	mov	r0, r3
 80029da:	3718      	adds	r7, #24
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}

080029e0 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b085      	sub	sp, #20
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029e8:	2300      	movs	r3, #0
 80029ea:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	d008      	beq.n	8002a0a <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2204      	movs	r2, #4
 80029fc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2200      	movs	r2, #0
 8002a02:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e020      	b.n	8002a4c <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f022 020e 	bic.w	r2, r2, #14
 8002a18:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f022 0201 	bic.w	r2, r2, #1
 8002a28:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a32:	2101      	movs	r1, #1
 8002a34:	fa01 f202 	lsl.w	r2, r1, r2
 8002a38:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2200      	movs	r2, #0
 8002a46:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002a4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	3714      	adds	r7, #20
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bc80      	pop	{r7}
 8002a54:	4770      	bx	lr
	...

08002a58 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b084      	sub	sp, #16
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a60:	2300      	movs	r3, #0
 8002a62:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d005      	beq.n	8002a7c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2204      	movs	r2, #4
 8002a74:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	73fb      	strb	r3, [r7, #15]
 8002a7a:	e0d6      	b.n	8002c2a <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f022 020e 	bic.w	r2, r2, #14
 8002a8a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f022 0201 	bic.w	r2, r2, #1
 8002a9a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	4b64      	ldr	r3, [pc, #400]	@ (8002c34 <HAL_DMA_Abort_IT+0x1dc>)
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d958      	bls.n	8002b5a <HAL_DMA_Abort_IT+0x102>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a62      	ldr	r2, [pc, #392]	@ (8002c38 <HAL_DMA_Abort_IT+0x1e0>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d04f      	beq.n	8002b52 <HAL_DMA_Abort_IT+0xfa>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a61      	ldr	r2, [pc, #388]	@ (8002c3c <HAL_DMA_Abort_IT+0x1e4>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d048      	beq.n	8002b4e <HAL_DMA_Abort_IT+0xf6>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a5f      	ldr	r2, [pc, #380]	@ (8002c40 <HAL_DMA_Abort_IT+0x1e8>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d040      	beq.n	8002b48 <HAL_DMA_Abort_IT+0xf0>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a5e      	ldr	r2, [pc, #376]	@ (8002c44 <HAL_DMA_Abort_IT+0x1ec>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d038      	beq.n	8002b42 <HAL_DMA_Abort_IT+0xea>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a5c      	ldr	r2, [pc, #368]	@ (8002c48 <HAL_DMA_Abort_IT+0x1f0>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d030      	beq.n	8002b3c <HAL_DMA_Abort_IT+0xe4>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a5b      	ldr	r2, [pc, #364]	@ (8002c4c <HAL_DMA_Abort_IT+0x1f4>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d028      	beq.n	8002b36 <HAL_DMA_Abort_IT+0xde>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a52      	ldr	r2, [pc, #328]	@ (8002c34 <HAL_DMA_Abort_IT+0x1dc>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d020      	beq.n	8002b30 <HAL_DMA_Abort_IT+0xd8>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a57      	ldr	r2, [pc, #348]	@ (8002c50 <HAL_DMA_Abort_IT+0x1f8>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d019      	beq.n	8002b2c <HAL_DMA_Abort_IT+0xd4>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a55      	ldr	r2, [pc, #340]	@ (8002c54 <HAL_DMA_Abort_IT+0x1fc>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d012      	beq.n	8002b28 <HAL_DMA_Abort_IT+0xd0>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a54      	ldr	r2, [pc, #336]	@ (8002c58 <HAL_DMA_Abort_IT+0x200>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d00a      	beq.n	8002b22 <HAL_DMA_Abort_IT+0xca>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a52      	ldr	r2, [pc, #328]	@ (8002c5c <HAL_DMA_Abort_IT+0x204>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d102      	bne.n	8002b1c <HAL_DMA_Abort_IT+0xc4>
 8002b16:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002b1a:	e01b      	b.n	8002b54 <HAL_DMA_Abort_IT+0xfc>
 8002b1c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002b20:	e018      	b.n	8002b54 <HAL_DMA_Abort_IT+0xfc>
 8002b22:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002b26:	e015      	b.n	8002b54 <HAL_DMA_Abort_IT+0xfc>
 8002b28:	2310      	movs	r3, #16
 8002b2a:	e013      	b.n	8002b54 <HAL_DMA_Abort_IT+0xfc>
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e011      	b.n	8002b54 <HAL_DMA_Abort_IT+0xfc>
 8002b30:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002b34:	e00e      	b.n	8002b54 <HAL_DMA_Abort_IT+0xfc>
 8002b36:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002b3a:	e00b      	b.n	8002b54 <HAL_DMA_Abort_IT+0xfc>
 8002b3c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002b40:	e008      	b.n	8002b54 <HAL_DMA_Abort_IT+0xfc>
 8002b42:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002b46:	e005      	b.n	8002b54 <HAL_DMA_Abort_IT+0xfc>
 8002b48:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002b4c:	e002      	b.n	8002b54 <HAL_DMA_Abort_IT+0xfc>
 8002b4e:	2310      	movs	r3, #16
 8002b50:	e000      	b.n	8002b54 <HAL_DMA_Abort_IT+0xfc>
 8002b52:	2301      	movs	r3, #1
 8002b54:	4a42      	ldr	r2, [pc, #264]	@ (8002c60 <HAL_DMA_Abort_IT+0x208>)
 8002b56:	6053      	str	r3, [r2, #4]
 8002b58:	e057      	b.n	8002c0a <HAL_DMA_Abort_IT+0x1b2>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a36      	ldr	r2, [pc, #216]	@ (8002c38 <HAL_DMA_Abort_IT+0x1e0>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d04f      	beq.n	8002c04 <HAL_DMA_Abort_IT+0x1ac>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a34      	ldr	r2, [pc, #208]	@ (8002c3c <HAL_DMA_Abort_IT+0x1e4>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d048      	beq.n	8002c00 <HAL_DMA_Abort_IT+0x1a8>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a33      	ldr	r2, [pc, #204]	@ (8002c40 <HAL_DMA_Abort_IT+0x1e8>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d040      	beq.n	8002bfa <HAL_DMA_Abort_IT+0x1a2>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a31      	ldr	r2, [pc, #196]	@ (8002c44 <HAL_DMA_Abort_IT+0x1ec>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d038      	beq.n	8002bf4 <HAL_DMA_Abort_IT+0x19c>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a30      	ldr	r2, [pc, #192]	@ (8002c48 <HAL_DMA_Abort_IT+0x1f0>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d030      	beq.n	8002bee <HAL_DMA_Abort_IT+0x196>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a2e      	ldr	r2, [pc, #184]	@ (8002c4c <HAL_DMA_Abort_IT+0x1f4>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d028      	beq.n	8002be8 <HAL_DMA_Abort_IT+0x190>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a26      	ldr	r2, [pc, #152]	@ (8002c34 <HAL_DMA_Abort_IT+0x1dc>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d020      	beq.n	8002be2 <HAL_DMA_Abort_IT+0x18a>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a2a      	ldr	r2, [pc, #168]	@ (8002c50 <HAL_DMA_Abort_IT+0x1f8>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d019      	beq.n	8002bde <HAL_DMA_Abort_IT+0x186>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a29      	ldr	r2, [pc, #164]	@ (8002c54 <HAL_DMA_Abort_IT+0x1fc>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d012      	beq.n	8002bda <HAL_DMA_Abort_IT+0x182>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a27      	ldr	r2, [pc, #156]	@ (8002c58 <HAL_DMA_Abort_IT+0x200>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d00a      	beq.n	8002bd4 <HAL_DMA_Abort_IT+0x17c>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a26      	ldr	r2, [pc, #152]	@ (8002c5c <HAL_DMA_Abort_IT+0x204>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d102      	bne.n	8002bce <HAL_DMA_Abort_IT+0x176>
 8002bc8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002bcc:	e01b      	b.n	8002c06 <HAL_DMA_Abort_IT+0x1ae>
 8002bce:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002bd2:	e018      	b.n	8002c06 <HAL_DMA_Abort_IT+0x1ae>
 8002bd4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002bd8:	e015      	b.n	8002c06 <HAL_DMA_Abort_IT+0x1ae>
 8002bda:	2310      	movs	r3, #16
 8002bdc:	e013      	b.n	8002c06 <HAL_DMA_Abort_IT+0x1ae>
 8002bde:	2301      	movs	r3, #1
 8002be0:	e011      	b.n	8002c06 <HAL_DMA_Abort_IT+0x1ae>
 8002be2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002be6:	e00e      	b.n	8002c06 <HAL_DMA_Abort_IT+0x1ae>
 8002be8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002bec:	e00b      	b.n	8002c06 <HAL_DMA_Abort_IT+0x1ae>
 8002bee:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002bf2:	e008      	b.n	8002c06 <HAL_DMA_Abort_IT+0x1ae>
 8002bf4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002bf8:	e005      	b.n	8002c06 <HAL_DMA_Abort_IT+0x1ae>
 8002bfa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002bfe:	e002      	b.n	8002c06 <HAL_DMA_Abort_IT+0x1ae>
 8002c00:	2310      	movs	r3, #16
 8002c02:	e000      	b.n	8002c06 <HAL_DMA_Abort_IT+0x1ae>
 8002c04:	2301      	movs	r3, #1
 8002c06:	4a17      	ldr	r2, [pc, #92]	@ (8002c64 <HAL_DMA_Abort_IT+0x20c>)
 8002c08:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2200      	movs	r2, #0
 8002c16:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d003      	beq.n	8002c2a <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	4798      	blx	r3
    } 
  }
  return status;
 8002c2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3710      	adds	r7, #16
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	40020080 	.word	0x40020080
 8002c38:	40020008 	.word	0x40020008
 8002c3c:	4002001c 	.word	0x4002001c
 8002c40:	40020030 	.word	0x40020030
 8002c44:	40020044 	.word	0x40020044
 8002c48:	40020058 	.word	0x40020058
 8002c4c:	4002006c 	.word	0x4002006c
 8002c50:	40020408 	.word	0x40020408
 8002c54:	4002041c 	.word	0x4002041c
 8002c58:	40020430 	.word	0x40020430
 8002c5c:	40020444 	.word	0x40020444
 8002c60:	40020400 	.word	0x40020400
 8002c64:	40020000 	.word	0x40020000

08002c68 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b084      	sub	sp, #16
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c84:	2204      	movs	r2, #4
 8002c86:	409a      	lsls	r2, r3
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	f000 80f1 	beq.w	8002e74 <HAL_DMA_IRQHandler+0x20c>
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	f003 0304 	and.w	r3, r3, #4
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	f000 80eb 	beq.w	8002e74 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 0320 	and.w	r3, r3, #32
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d107      	bne.n	8002cbc <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f022 0204 	bic.w	r2, r2, #4
 8002cba:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	4b5f      	ldr	r3, [pc, #380]	@ (8002e40 <HAL_DMA_IRQHandler+0x1d8>)
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d958      	bls.n	8002d7a <HAL_DMA_IRQHandler+0x112>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a5d      	ldr	r2, [pc, #372]	@ (8002e44 <HAL_DMA_IRQHandler+0x1dc>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d04f      	beq.n	8002d72 <HAL_DMA_IRQHandler+0x10a>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a5c      	ldr	r2, [pc, #368]	@ (8002e48 <HAL_DMA_IRQHandler+0x1e0>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d048      	beq.n	8002d6e <HAL_DMA_IRQHandler+0x106>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a5a      	ldr	r2, [pc, #360]	@ (8002e4c <HAL_DMA_IRQHandler+0x1e4>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d040      	beq.n	8002d68 <HAL_DMA_IRQHandler+0x100>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a59      	ldr	r2, [pc, #356]	@ (8002e50 <HAL_DMA_IRQHandler+0x1e8>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d038      	beq.n	8002d62 <HAL_DMA_IRQHandler+0xfa>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a57      	ldr	r2, [pc, #348]	@ (8002e54 <HAL_DMA_IRQHandler+0x1ec>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d030      	beq.n	8002d5c <HAL_DMA_IRQHandler+0xf4>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a56      	ldr	r2, [pc, #344]	@ (8002e58 <HAL_DMA_IRQHandler+0x1f0>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d028      	beq.n	8002d56 <HAL_DMA_IRQHandler+0xee>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a4d      	ldr	r2, [pc, #308]	@ (8002e40 <HAL_DMA_IRQHandler+0x1d8>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d020      	beq.n	8002d50 <HAL_DMA_IRQHandler+0xe8>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a52      	ldr	r2, [pc, #328]	@ (8002e5c <HAL_DMA_IRQHandler+0x1f4>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d019      	beq.n	8002d4c <HAL_DMA_IRQHandler+0xe4>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a50      	ldr	r2, [pc, #320]	@ (8002e60 <HAL_DMA_IRQHandler+0x1f8>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d012      	beq.n	8002d48 <HAL_DMA_IRQHandler+0xe0>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a4f      	ldr	r2, [pc, #316]	@ (8002e64 <HAL_DMA_IRQHandler+0x1fc>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d00a      	beq.n	8002d42 <HAL_DMA_IRQHandler+0xda>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a4d      	ldr	r2, [pc, #308]	@ (8002e68 <HAL_DMA_IRQHandler+0x200>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d102      	bne.n	8002d3c <HAL_DMA_IRQHandler+0xd4>
 8002d36:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002d3a:	e01b      	b.n	8002d74 <HAL_DMA_IRQHandler+0x10c>
 8002d3c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002d40:	e018      	b.n	8002d74 <HAL_DMA_IRQHandler+0x10c>
 8002d42:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002d46:	e015      	b.n	8002d74 <HAL_DMA_IRQHandler+0x10c>
 8002d48:	2340      	movs	r3, #64	@ 0x40
 8002d4a:	e013      	b.n	8002d74 <HAL_DMA_IRQHandler+0x10c>
 8002d4c:	2304      	movs	r3, #4
 8002d4e:	e011      	b.n	8002d74 <HAL_DMA_IRQHandler+0x10c>
 8002d50:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002d54:	e00e      	b.n	8002d74 <HAL_DMA_IRQHandler+0x10c>
 8002d56:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002d5a:	e00b      	b.n	8002d74 <HAL_DMA_IRQHandler+0x10c>
 8002d5c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002d60:	e008      	b.n	8002d74 <HAL_DMA_IRQHandler+0x10c>
 8002d62:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002d66:	e005      	b.n	8002d74 <HAL_DMA_IRQHandler+0x10c>
 8002d68:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002d6c:	e002      	b.n	8002d74 <HAL_DMA_IRQHandler+0x10c>
 8002d6e:	2340      	movs	r3, #64	@ 0x40
 8002d70:	e000      	b.n	8002d74 <HAL_DMA_IRQHandler+0x10c>
 8002d72:	2304      	movs	r3, #4
 8002d74:	4a3d      	ldr	r2, [pc, #244]	@ (8002e6c <HAL_DMA_IRQHandler+0x204>)
 8002d76:	6053      	str	r3, [r2, #4]
 8002d78:	e057      	b.n	8002e2a <HAL_DMA_IRQHandler+0x1c2>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a31      	ldr	r2, [pc, #196]	@ (8002e44 <HAL_DMA_IRQHandler+0x1dc>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d04f      	beq.n	8002e24 <HAL_DMA_IRQHandler+0x1bc>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a2f      	ldr	r2, [pc, #188]	@ (8002e48 <HAL_DMA_IRQHandler+0x1e0>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d048      	beq.n	8002e20 <HAL_DMA_IRQHandler+0x1b8>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a2e      	ldr	r2, [pc, #184]	@ (8002e4c <HAL_DMA_IRQHandler+0x1e4>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d040      	beq.n	8002e1a <HAL_DMA_IRQHandler+0x1b2>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a2c      	ldr	r2, [pc, #176]	@ (8002e50 <HAL_DMA_IRQHandler+0x1e8>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d038      	beq.n	8002e14 <HAL_DMA_IRQHandler+0x1ac>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a2b      	ldr	r2, [pc, #172]	@ (8002e54 <HAL_DMA_IRQHandler+0x1ec>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d030      	beq.n	8002e0e <HAL_DMA_IRQHandler+0x1a6>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a29      	ldr	r2, [pc, #164]	@ (8002e58 <HAL_DMA_IRQHandler+0x1f0>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d028      	beq.n	8002e08 <HAL_DMA_IRQHandler+0x1a0>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a21      	ldr	r2, [pc, #132]	@ (8002e40 <HAL_DMA_IRQHandler+0x1d8>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d020      	beq.n	8002e02 <HAL_DMA_IRQHandler+0x19a>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a25      	ldr	r2, [pc, #148]	@ (8002e5c <HAL_DMA_IRQHandler+0x1f4>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d019      	beq.n	8002dfe <HAL_DMA_IRQHandler+0x196>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a24      	ldr	r2, [pc, #144]	@ (8002e60 <HAL_DMA_IRQHandler+0x1f8>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d012      	beq.n	8002dfa <HAL_DMA_IRQHandler+0x192>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a22      	ldr	r2, [pc, #136]	@ (8002e64 <HAL_DMA_IRQHandler+0x1fc>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d00a      	beq.n	8002df4 <HAL_DMA_IRQHandler+0x18c>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a21      	ldr	r2, [pc, #132]	@ (8002e68 <HAL_DMA_IRQHandler+0x200>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d102      	bne.n	8002dee <HAL_DMA_IRQHandler+0x186>
 8002de8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002dec:	e01b      	b.n	8002e26 <HAL_DMA_IRQHandler+0x1be>
 8002dee:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002df2:	e018      	b.n	8002e26 <HAL_DMA_IRQHandler+0x1be>
 8002df4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002df8:	e015      	b.n	8002e26 <HAL_DMA_IRQHandler+0x1be>
 8002dfa:	2340      	movs	r3, #64	@ 0x40
 8002dfc:	e013      	b.n	8002e26 <HAL_DMA_IRQHandler+0x1be>
 8002dfe:	2304      	movs	r3, #4
 8002e00:	e011      	b.n	8002e26 <HAL_DMA_IRQHandler+0x1be>
 8002e02:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002e06:	e00e      	b.n	8002e26 <HAL_DMA_IRQHandler+0x1be>
 8002e08:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002e0c:	e00b      	b.n	8002e26 <HAL_DMA_IRQHandler+0x1be>
 8002e0e:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002e12:	e008      	b.n	8002e26 <HAL_DMA_IRQHandler+0x1be>
 8002e14:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002e18:	e005      	b.n	8002e26 <HAL_DMA_IRQHandler+0x1be>
 8002e1a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002e1e:	e002      	b.n	8002e26 <HAL_DMA_IRQHandler+0x1be>
 8002e20:	2340      	movs	r3, #64	@ 0x40
 8002e22:	e000      	b.n	8002e26 <HAL_DMA_IRQHandler+0x1be>
 8002e24:	2304      	movs	r3, #4
 8002e26:	4a12      	ldr	r2, [pc, #72]	@ (8002e70 <HAL_DMA_IRQHandler+0x208>)
 8002e28:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	f000 8136 	beq.w	80030a0 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002e3c:	e130      	b.n	80030a0 <HAL_DMA_IRQHandler+0x438>
 8002e3e:	bf00      	nop
 8002e40:	40020080 	.word	0x40020080
 8002e44:	40020008 	.word	0x40020008
 8002e48:	4002001c 	.word	0x4002001c
 8002e4c:	40020030 	.word	0x40020030
 8002e50:	40020044 	.word	0x40020044
 8002e54:	40020058 	.word	0x40020058
 8002e58:	4002006c 	.word	0x4002006c
 8002e5c:	40020408 	.word	0x40020408
 8002e60:	4002041c 	.word	0x4002041c
 8002e64:	40020430 	.word	0x40020430
 8002e68:	40020444 	.word	0x40020444
 8002e6c:	40020400 	.word	0x40020400
 8002e70:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e78:	2202      	movs	r2, #2
 8002e7a:	409a      	lsls	r2, r3
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	4013      	ands	r3, r2
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	f000 80dd 	beq.w	8003040 <HAL_DMA_IRQHandler+0x3d8>
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	f003 0302 	and.w	r3, r3, #2
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	f000 80d7 	beq.w	8003040 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0320 	and.w	r3, r3, #32
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d10b      	bne.n	8002eb8 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f022 020a 	bic.w	r2, r2, #10
 8002eae:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	461a      	mov	r2, r3
 8002ebe:	4b7b      	ldr	r3, [pc, #492]	@ (80030ac <HAL_DMA_IRQHandler+0x444>)
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d958      	bls.n	8002f76 <HAL_DMA_IRQHandler+0x30e>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a79      	ldr	r2, [pc, #484]	@ (80030b0 <HAL_DMA_IRQHandler+0x448>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d04f      	beq.n	8002f6e <HAL_DMA_IRQHandler+0x306>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a78      	ldr	r2, [pc, #480]	@ (80030b4 <HAL_DMA_IRQHandler+0x44c>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d048      	beq.n	8002f6a <HAL_DMA_IRQHandler+0x302>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a76      	ldr	r2, [pc, #472]	@ (80030b8 <HAL_DMA_IRQHandler+0x450>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d040      	beq.n	8002f64 <HAL_DMA_IRQHandler+0x2fc>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a75      	ldr	r2, [pc, #468]	@ (80030bc <HAL_DMA_IRQHandler+0x454>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d038      	beq.n	8002f5e <HAL_DMA_IRQHandler+0x2f6>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a73      	ldr	r2, [pc, #460]	@ (80030c0 <HAL_DMA_IRQHandler+0x458>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d030      	beq.n	8002f58 <HAL_DMA_IRQHandler+0x2f0>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a72      	ldr	r2, [pc, #456]	@ (80030c4 <HAL_DMA_IRQHandler+0x45c>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d028      	beq.n	8002f52 <HAL_DMA_IRQHandler+0x2ea>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a69      	ldr	r2, [pc, #420]	@ (80030ac <HAL_DMA_IRQHandler+0x444>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d020      	beq.n	8002f4c <HAL_DMA_IRQHandler+0x2e4>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a6e      	ldr	r2, [pc, #440]	@ (80030c8 <HAL_DMA_IRQHandler+0x460>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d019      	beq.n	8002f48 <HAL_DMA_IRQHandler+0x2e0>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a6c      	ldr	r2, [pc, #432]	@ (80030cc <HAL_DMA_IRQHandler+0x464>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d012      	beq.n	8002f44 <HAL_DMA_IRQHandler+0x2dc>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a6b      	ldr	r2, [pc, #428]	@ (80030d0 <HAL_DMA_IRQHandler+0x468>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d00a      	beq.n	8002f3e <HAL_DMA_IRQHandler+0x2d6>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a69      	ldr	r2, [pc, #420]	@ (80030d4 <HAL_DMA_IRQHandler+0x46c>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d102      	bne.n	8002f38 <HAL_DMA_IRQHandler+0x2d0>
 8002f32:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002f36:	e01b      	b.n	8002f70 <HAL_DMA_IRQHandler+0x308>
 8002f38:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002f3c:	e018      	b.n	8002f70 <HAL_DMA_IRQHandler+0x308>
 8002f3e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002f42:	e015      	b.n	8002f70 <HAL_DMA_IRQHandler+0x308>
 8002f44:	2320      	movs	r3, #32
 8002f46:	e013      	b.n	8002f70 <HAL_DMA_IRQHandler+0x308>
 8002f48:	2302      	movs	r3, #2
 8002f4a:	e011      	b.n	8002f70 <HAL_DMA_IRQHandler+0x308>
 8002f4c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002f50:	e00e      	b.n	8002f70 <HAL_DMA_IRQHandler+0x308>
 8002f52:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002f56:	e00b      	b.n	8002f70 <HAL_DMA_IRQHandler+0x308>
 8002f58:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002f5c:	e008      	b.n	8002f70 <HAL_DMA_IRQHandler+0x308>
 8002f5e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002f62:	e005      	b.n	8002f70 <HAL_DMA_IRQHandler+0x308>
 8002f64:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002f68:	e002      	b.n	8002f70 <HAL_DMA_IRQHandler+0x308>
 8002f6a:	2320      	movs	r3, #32
 8002f6c:	e000      	b.n	8002f70 <HAL_DMA_IRQHandler+0x308>
 8002f6e:	2302      	movs	r3, #2
 8002f70:	4a59      	ldr	r2, [pc, #356]	@ (80030d8 <HAL_DMA_IRQHandler+0x470>)
 8002f72:	6053      	str	r3, [r2, #4]
 8002f74:	e057      	b.n	8003026 <HAL_DMA_IRQHandler+0x3be>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a4d      	ldr	r2, [pc, #308]	@ (80030b0 <HAL_DMA_IRQHandler+0x448>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d04f      	beq.n	8003020 <HAL_DMA_IRQHandler+0x3b8>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a4b      	ldr	r2, [pc, #300]	@ (80030b4 <HAL_DMA_IRQHandler+0x44c>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d048      	beq.n	800301c <HAL_DMA_IRQHandler+0x3b4>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a4a      	ldr	r2, [pc, #296]	@ (80030b8 <HAL_DMA_IRQHandler+0x450>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d040      	beq.n	8003016 <HAL_DMA_IRQHandler+0x3ae>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a48      	ldr	r2, [pc, #288]	@ (80030bc <HAL_DMA_IRQHandler+0x454>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d038      	beq.n	8003010 <HAL_DMA_IRQHandler+0x3a8>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a47      	ldr	r2, [pc, #284]	@ (80030c0 <HAL_DMA_IRQHandler+0x458>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d030      	beq.n	800300a <HAL_DMA_IRQHandler+0x3a2>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a45      	ldr	r2, [pc, #276]	@ (80030c4 <HAL_DMA_IRQHandler+0x45c>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d028      	beq.n	8003004 <HAL_DMA_IRQHandler+0x39c>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a3d      	ldr	r2, [pc, #244]	@ (80030ac <HAL_DMA_IRQHandler+0x444>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d020      	beq.n	8002ffe <HAL_DMA_IRQHandler+0x396>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a41      	ldr	r2, [pc, #260]	@ (80030c8 <HAL_DMA_IRQHandler+0x460>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d019      	beq.n	8002ffa <HAL_DMA_IRQHandler+0x392>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a40      	ldr	r2, [pc, #256]	@ (80030cc <HAL_DMA_IRQHandler+0x464>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d012      	beq.n	8002ff6 <HAL_DMA_IRQHandler+0x38e>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a3e      	ldr	r2, [pc, #248]	@ (80030d0 <HAL_DMA_IRQHandler+0x468>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d00a      	beq.n	8002ff0 <HAL_DMA_IRQHandler+0x388>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a3d      	ldr	r2, [pc, #244]	@ (80030d4 <HAL_DMA_IRQHandler+0x46c>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d102      	bne.n	8002fea <HAL_DMA_IRQHandler+0x382>
 8002fe4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002fe8:	e01b      	b.n	8003022 <HAL_DMA_IRQHandler+0x3ba>
 8002fea:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002fee:	e018      	b.n	8003022 <HAL_DMA_IRQHandler+0x3ba>
 8002ff0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002ff4:	e015      	b.n	8003022 <HAL_DMA_IRQHandler+0x3ba>
 8002ff6:	2320      	movs	r3, #32
 8002ff8:	e013      	b.n	8003022 <HAL_DMA_IRQHandler+0x3ba>
 8002ffa:	2302      	movs	r3, #2
 8002ffc:	e011      	b.n	8003022 <HAL_DMA_IRQHandler+0x3ba>
 8002ffe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003002:	e00e      	b.n	8003022 <HAL_DMA_IRQHandler+0x3ba>
 8003004:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003008:	e00b      	b.n	8003022 <HAL_DMA_IRQHandler+0x3ba>
 800300a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800300e:	e008      	b.n	8003022 <HAL_DMA_IRQHandler+0x3ba>
 8003010:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003014:	e005      	b.n	8003022 <HAL_DMA_IRQHandler+0x3ba>
 8003016:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800301a:	e002      	b.n	8003022 <HAL_DMA_IRQHandler+0x3ba>
 800301c:	2320      	movs	r3, #32
 800301e:	e000      	b.n	8003022 <HAL_DMA_IRQHandler+0x3ba>
 8003020:	2302      	movs	r3, #2
 8003022:	4a2e      	ldr	r2, [pc, #184]	@ (80030dc <HAL_DMA_IRQHandler+0x474>)
 8003024:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003032:	2b00      	cmp	r3, #0
 8003034:	d034      	beq.n	80030a0 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800303e:	e02f      	b.n	80030a0 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003044:	2208      	movs	r2, #8
 8003046:	409a      	lsls	r2, r3
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	4013      	ands	r3, r2
 800304c:	2b00      	cmp	r3, #0
 800304e:	d028      	beq.n	80030a2 <HAL_DMA_IRQHandler+0x43a>
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	f003 0308 	and.w	r3, r3, #8
 8003056:	2b00      	cmp	r3, #0
 8003058:	d023      	beq.n	80030a2 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f022 020e 	bic.w	r2, r2, #14
 8003068:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003072:	2101      	movs	r1, #1
 8003074:	fa01 f202 	lsl.w	r2, r1, r2
 8003078:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2201      	movs	r2, #1
 800307e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2201      	movs	r2, #1
 8003084:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003094:	2b00      	cmp	r3, #0
 8003096:	d004      	beq.n	80030a2 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	4798      	blx	r3
    }
  }
  return;
 80030a0:	bf00      	nop
 80030a2:	bf00      	nop
}
 80030a4:	3710      	adds	r7, #16
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	40020080 	.word	0x40020080
 80030b0:	40020008 	.word	0x40020008
 80030b4:	4002001c 	.word	0x4002001c
 80030b8:	40020030 	.word	0x40020030
 80030bc:	40020044 	.word	0x40020044
 80030c0:	40020058 	.word	0x40020058
 80030c4:	4002006c 	.word	0x4002006c
 80030c8:	40020408 	.word	0x40020408
 80030cc:	4002041c 	.word	0x4002041c
 80030d0:	40020430 	.word	0x40020430
 80030d4:	40020444 	.word	0x40020444
 80030d8:	40020400 	.word	0x40020400
 80030dc:	40020000 	.word	0x40020000

080030e0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b085      	sub	sp, #20
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	60f8      	str	r0, [r7, #12]
 80030e8:	60b9      	str	r1, [r7, #8]
 80030ea:	607a      	str	r2, [r7, #4]
 80030ec:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030f6:	2101      	movs	r1, #1
 80030f8:	fa01 f202 	lsl.w	r2, r1, r2
 80030fc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	683a      	ldr	r2, [r7, #0]
 8003104:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	2b10      	cmp	r3, #16
 800310c:	d108      	bne.n	8003120 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	68ba      	ldr	r2, [r7, #8]
 800311c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800311e:	e007      	b.n	8003130 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	68ba      	ldr	r2, [r7, #8]
 8003126:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	60da      	str	r2, [r3, #12]
}
 8003130:	bf00      	nop
 8003132:	3714      	adds	r7, #20
 8003134:	46bd      	mov	sp, r7
 8003136:	bc80      	pop	{r7}
 8003138:	4770      	bx	lr
	...

0800313c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800313c:	b480      	push	{r7}
 800313e:	b08b      	sub	sp, #44	@ 0x2c
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003146:	2300      	movs	r3, #0
 8003148:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800314a:	2300      	movs	r3, #0
 800314c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800314e:	e179      	b.n	8003444 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003150:	2201      	movs	r2, #1
 8003152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003154:	fa02 f303 	lsl.w	r3, r2, r3
 8003158:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	69fa      	ldr	r2, [r7, #28]
 8003160:	4013      	ands	r3, r2
 8003162:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003164:	69ba      	ldr	r2, [r7, #24]
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	429a      	cmp	r2, r3
 800316a:	f040 8168 	bne.w	800343e <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	4a96      	ldr	r2, [pc, #600]	@ (80033cc <HAL_GPIO_Init+0x290>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d05e      	beq.n	8003236 <HAL_GPIO_Init+0xfa>
 8003178:	4a94      	ldr	r2, [pc, #592]	@ (80033cc <HAL_GPIO_Init+0x290>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d875      	bhi.n	800326a <HAL_GPIO_Init+0x12e>
 800317e:	4a94      	ldr	r2, [pc, #592]	@ (80033d0 <HAL_GPIO_Init+0x294>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d058      	beq.n	8003236 <HAL_GPIO_Init+0xfa>
 8003184:	4a92      	ldr	r2, [pc, #584]	@ (80033d0 <HAL_GPIO_Init+0x294>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d86f      	bhi.n	800326a <HAL_GPIO_Init+0x12e>
 800318a:	4a92      	ldr	r2, [pc, #584]	@ (80033d4 <HAL_GPIO_Init+0x298>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d052      	beq.n	8003236 <HAL_GPIO_Init+0xfa>
 8003190:	4a90      	ldr	r2, [pc, #576]	@ (80033d4 <HAL_GPIO_Init+0x298>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d869      	bhi.n	800326a <HAL_GPIO_Init+0x12e>
 8003196:	4a90      	ldr	r2, [pc, #576]	@ (80033d8 <HAL_GPIO_Init+0x29c>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d04c      	beq.n	8003236 <HAL_GPIO_Init+0xfa>
 800319c:	4a8e      	ldr	r2, [pc, #568]	@ (80033d8 <HAL_GPIO_Init+0x29c>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d863      	bhi.n	800326a <HAL_GPIO_Init+0x12e>
 80031a2:	4a8e      	ldr	r2, [pc, #568]	@ (80033dc <HAL_GPIO_Init+0x2a0>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d046      	beq.n	8003236 <HAL_GPIO_Init+0xfa>
 80031a8:	4a8c      	ldr	r2, [pc, #560]	@ (80033dc <HAL_GPIO_Init+0x2a0>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d85d      	bhi.n	800326a <HAL_GPIO_Init+0x12e>
 80031ae:	2b12      	cmp	r3, #18
 80031b0:	d82a      	bhi.n	8003208 <HAL_GPIO_Init+0xcc>
 80031b2:	2b12      	cmp	r3, #18
 80031b4:	d859      	bhi.n	800326a <HAL_GPIO_Init+0x12e>
 80031b6:	a201      	add	r2, pc, #4	@ (adr r2, 80031bc <HAL_GPIO_Init+0x80>)
 80031b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031bc:	08003237 	.word	0x08003237
 80031c0:	08003211 	.word	0x08003211
 80031c4:	08003223 	.word	0x08003223
 80031c8:	08003265 	.word	0x08003265
 80031cc:	0800326b 	.word	0x0800326b
 80031d0:	0800326b 	.word	0x0800326b
 80031d4:	0800326b 	.word	0x0800326b
 80031d8:	0800326b 	.word	0x0800326b
 80031dc:	0800326b 	.word	0x0800326b
 80031e0:	0800326b 	.word	0x0800326b
 80031e4:	0800326b 	.word	0x0800326b
 80031e8:	0800326b 	.word	0x0800326b
 80031ec:	0800326b 	.word	0x0800326b
 80031f0:	0800326b 	.word	0x0800326b
 80031f4:	0800326b 	.word	0x0800326b
 80031f8:	0800326b 	.word	0x0800326b
 80031fc:	0800326b 	.word	0x0800326b
 8003200:	08003219 	.word	0x08003219
 8003204:	0800322d 	.word	0x0800322d
 8003208:	4a75      	ldr	r2, [pc, #468]	@ (80033e0 <HAL_GPIO_Init+0x2a4>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d013      	beq.n	8003236 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800320e:	e02c      	b.n	800326a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	68db      	ldr	r3, [r3, #12]
 8003214:	623b      	str	r3, [r7, #32]
          break;
 8003216:	e029      	b.n	800326c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	3304      	adds	r3, #4
 800321e:	623b      	str	r3, [r7, #32]
          break;
 8003220:	e024      	b.n	800326c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	3308      	adds	r3, #8
 8003228:	623b      	str	r3, [r7, #32]
          break;
 800322a:	e01f      	b.n	800326c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	330c      	adds	r3, #12
 8003232:	623b      	str	r3, [r7, #32]
          break;
 8003234:	e01a      	b.n	800326c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d102      	bne.n	8003244 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800323e:	2304      	movs	r3, #4
 8003240:	623b      	str	r3, [r7, #32]
          break;
 8003242:	e013      	b.n	800326c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	2b01      	cmp	r3, #1
 800324a:	d105      	bne.n	8003258 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800324c:	2308      	movs	r3, #8
 800324e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	69fa      	ldr	r2, [r7, #28]
 8003254:	611a      	str	r2, [r3, #16]
          break;
 8003256:	e009      	b.n	800326c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003258:	2308      	movs	r3, #8
 800325a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	69fa      	ldr	r2, [r7, #28]
 8003260:	615a      	str	r2, [r3, #20]
          break;
 8003262:	e003      	b.n	800326c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003264:	2300      	movs	r3, #0
 8003266:	623b      	str	r3, [r7, #32]
          break;
 8003268:	e000      	b.n	800326c <HAL_GPIO_Init+0x130>
          break;
 800326a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800326c:	69bb      	ldr	r3, [r7, #24]
 800326e:	2bff      	cmp	r3, #255	@ 0xff
 8003270:	d801      	bhi.n	8003276 <HAL_GPIO_Init+0x13a>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	e001      	b.n	800327a <HAL_GPIO_Init+0x13e>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	3304      	adds	r3, #4
 800327a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800327c:	69bb      	ldr	r3, [r7, #24]
 800327e:	2bff      	cmp	r3, #255	@ 0xff
 8003280:	d802      	bhi.n	8003288 <HAL_GPIO_Init+0x14c>
 8003282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	e002      	b.n	800328e <HAL_GPIO_Init+0x152>
 8003288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800328a:	3b08      	subs	r3, #8
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	210f      	movs	r1, #15
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	fa01 f303 	lsl.w	r3, r1, r3
 800329c:	43db      	mvns	r3, r3
 800329e:	401a      	ands	r2, r3
 80032a0:	6a39      	ldr	r1, [r7, #32]
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	fa01 f303 	lsl.w	r3, r1, r3
 80032a8:	431a      	orrs	r2, r3
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	f000 80c1 	beq.w	800343e <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80032bc:	4b49      	ldr	r3, [pc, #292]	@ (80033e4 <HAL_GPIO_Init+0x2a8>)
 80032be:	699b      	ldr	r3, [r3, #24]
 80032c0:	4a48      	ldr	r2, [pc, #288]	@ (80033e4 <HAL_GPIO_Init+0x2a8>)
 80032c2:	f043 0301 	orr.w	r3, r3, #1
 80032c6:	6193      	str	r3, [r2, #24]
 80032c8:	4b46      	ldr	r3, [pc, #280]	@ (80033e4 <HAL_GPIO_Init+0x2a8>)
 80032ca:	699b      	ldr	r3, [r3, #24]
 80032cc:	f003 0301 	and.w	r3, r3, #1
 80032d0:	60bb      	str	r3, [r7, #8]
 80032d2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80032d4:	4a44      	ldr	r2, [pc, #272]	@ (80033e8 <HAL_GPIO_Init+0x2ac>)
 80032d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032d8:	089b      	lsrs	r3, r3, #2
 80032da:	3302      	adds	r3, #2
 80032dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032e0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80032e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032e4:	f003 0303 	and.w	r3, r3, #3
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	220f      	movs	r2, #15
 80032ec:	fa02 f303 	lsl.w	r3, r2, r3
 80032f0:	43db      	mvns	r3, r3
 80032f2:	68fa      	ldr	r2, [r7, #12]
 80032f4:	4013      	ands	r3, r2
 80032f6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	4a3c      	ldr	r2, [pc, #240]	@ (80033ec <HAL_GPIO_Init+0x2b0>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d01f      	beq.n	8003340 <HAL_GPIO_Init+0x204>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	4a3b      	ldr	r2, [pc, #236]	@ (80033f0 <HAL_GPIO_Init+0x2b4>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d019      	beq.n	800333c <HAL_GPIO_Init+0x200>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	4a3a      	ldr	r2, [pc, #232]	@ (80033f4 <HAL_GPIO_Init+0x2b8>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d013      	beq.n	8003338 <HAL_GPIO_Init+0x1fc>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	4a39      	ldr	r2, [pc, #228]	@ (80033f8 <HAL_GPIO_Init+0x2bc>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d00d      	beq.n	8003334 <HAL_GPIO_Init+0x1f8>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	4a38      	ldr	r2, [pc, #224]	@ (80033fc <HAL_GPIO_Init+0x2c0>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d007      	beq.n	8003330 <HAL_GPIO_Init+0x1f4>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	4a37      	ldr	r2, [pc, #220]	@ (8003400 <HAL_GPIO_Init+0x2c4>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d101      	bne.n	800332c <HAL_GPIO_Init+0x1f0>
 8003328:	2305      	movs	r3, #5
 800332a:	e00a      	b.n	8003342 <HAL_GPIO_Init+0x206>
 800332c:	2306      	movs	r3, #6
 800332e:	e008      	b.n	8003342 <HAL_GPIO_Init+0x206>
 8003330:	2304      	movs	r3, #4
 8003332:	e006      	b.n	8003342 <HAL_GPIO_Init+0x206>
 8003334:	2303      	movs	r3, #3
 8003336:	e004      	b.n	8003342 <HAL_GPIO_Init+0x206>
 8003338:	2302      	movs	r3, #2
 800333a:	e002      	b.n	8003342 <HAL_GPIO_Init+0x206>
 800333c:	2301      	movs	r3, #1
 800333e:	e000      	b.n	8003342 <HAL_GPIO_Init+0x206>
 8003340:	2300      	movs	r3, #0
 8003342:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003344:	f002 0203 	and.w	r2, r2, #3
 8003348:	0092      	lsls	r2, r2, #2
 800334a:	4093      	lsls	r3, r2
 800334c:	68fa      	ldr	r2, [r7, #12]
 800334e:	4313      	orrs	r3, r2
 8003350:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003352:	4925      	ldr	r1, [pc, #148]	@ (80033e8 <HAL_GPIO_Init+0x2ac>)
 8003354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003356:	089b      	lsrs	r3, r3, #2
 8003358:	3302      	adds	r3, #2
 800335a:	68fa      	ldr	r2, [r7, #12]
 800335c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003368:	2b00      	cmp	r3, #0
 800336a:	d006      	beq.n	800337a <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800336c:	4b25      	ldr	r3, [pc, #148]	@ (8003404 <HAL_GPIO_Init+0x2c8>)
 800336e:	689a      	ldr	r2, [r3, #8]
 8003370:	4924      	ldr	r1, [pc, #144]	@ (8003404 <HAL_GPIO_Init+0x2c8>)
 8003372:	69bb      	ldr	r3, [r7, #24]
 8003374:	4313      	orrs	r3, r2
 8003376:	608b      	str	r3, [r1, #8]
 8003378:	e006      	b.n	8003388 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800337a:	4b22      	ldr	r3, [pc, #136]	@ (8003404 <HAL_GPIO_Init+0x2c8>)
 800337c:	689a      	ldr	r2, [r3, #8]
 800337e:	69bb      	ldr	r3, [r7, #24]
 8003380:	43db      	mvns	r3, r3
 8003382:	4920      	ldr	r1, [pc, #128]	@ (8003404 <HAL_GPIO_Init+0x2c8>)
 8003384:	4013      	ands	r3, r2
 8003386:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003390:	2b00      	cmp	r3, #0
 8003392:	d006      	beq.n	80033a2 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003394:	4b1b      	ldr	r3, [pc, #108]	@ (8003404 <HAL_GPIO_Init+0x2c8>)
 8003396:	68da      	ldr	r2, [r3, #12]
 8003398:	491a      	ldr	r1, [pc, #104]	@ (8003404 <HAL_GPIO_Init+0x2c8>)
 800339a:	69bb      	ldr	r3, [r7, #24]
 800339c:	4313      	orrs	r3, r2
 800339e:	60cb      	str	r3, [r1, #12]
 80033a0:	e006      	b.n	80033b0 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80033a2:	4b18      	ldr	r3, [pc, #96]	@ (8003404 <HAL_GPIO_Init+0x2c8>)
 80033a4:	68da      	ldr	r2, [r3, #12]
 80033a6:	69bb      	ldr	r3, [r7, #24]
 80033a8:	43db      	mvns	r3, r3
 80033aa:	4916      	ldr	r1, [pc, #88]	@ (8003404 <HAL_GPIO_Init+0x2c8>)
 80033ac:	4013      	ands	r3, r2
 80033ae:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d025      	beq.n	8003408 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80033bc:	4b11      	ldr	r3, [pc, #68]	@ (8003404 <HAL_GPIO_Init+0x2c8>)
 80033be:	685a      	ldr	r2, [r3, #4]
 80033c0:	4910      	ldr	r1, [pc, #64]	@ (8003404 <HAL_GPIO_Init+0x2c8>)
 80033c2:	69bb      	ldr	r3, [r7, #24]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	604b      	str	r3, [r1, #4]
 80033c8:	e025      	b.n	8003416 <HAL_GPIO_Init+0x2da>
 80033ca:	bf00      	nop
 80033cc:	10320000 	.word	0x10320000
 80033d0:	10310000 	.word	0x10310000
 80033d4:	10220000 	.word	0x10220000
 80033d8:	10210000 	.word	0x10210000
 80033dc:	10120000 	.word	0x10120000
 80033e0:	10110000 	.word	0x10110000
 80033e4:	40021000 	.word	0x40021000
 80033e8:	40010000 	.word	0x40010000
 80033ec:	40010800 	.word	0x40010800
 80033f0:	40010c00 	.word	0x40010c00
 80033f4:	40011000 	.word	0x40011000
 80033f8:	40011400 	.word	0x40011400
 80033fc:	40011800 	.word	0x40011800
 8003400:	40011c00 	.word	0x40011c00
 8003404:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003408:	4b15      	ldr	r3, [pc, #84]	@ (8003460 <HAL_GPIO_Init+0x324>)
 800340a:	685a      	ldr	r2, [r3, #4]
 800340c:	69bb      	ldr	r3, [r7, #24]
 800340e:	43db      	mvns	r3, r3
 8003410:	4913      	ldr	r1, [pc, #76]	@ (8003460 <HAL_GPIO_Init+0x324>)
 8003412:	4013      	ands	r3, r2
 8003414:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d006      	beq.n	8003430 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003422:	4b0f      	ldr	r3, [pc, #60]	@ (8003460 <HAL_GPIO_Init+0x324>)
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	490e      	ldr	r1, [pc, #56]	@ (8003460 <HAL_GPIO_Init+0x324>)
 8003428:	69bb      	ldr	r3, [r7, #24]
 800342a:	4313      	orrs	r3, r2
 800342c:	600b      	str	r3, [r1, #0]
 800342e:	e006      	b.n	800343e <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003430:	4b0b      	ldr	r3, [pc, #44]	@ (8003460 <HAL_GPIO_Init+0x324>)
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	69bb      	ldr	r3, [r7, #24]
 8003436:	43db      	mvns	r3, r3
 8003438:	4909      	ldr	r1, [pc, #36]	@ (8003460 <HAL_GPIO_Init+0x324>)
 800343a:	4013      	ands	r3, r2
 800343c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800343e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003440:	3301      	adds	r3, #1
 8003442:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800344a:	fa22 f303 	lsr.w	r3, r2, r3
 800344e:	2b00      	cmp	r3, #0
 8003450:	f47f ae7e 	bne.w	8003150 <HAL_GPIO_Init+0x14>
  }
}
 8003454:	bf00      	nop
 8003456:	bf00      	nop
 8003458:	372c      	adds	r7, #44	@ 0x2c
 800345a:	46bd      	mov	sp, r7
 800345c:	bc80      	pop	{r7}
 800345e:	4770      	bx	lr
 8003460:	40010400 	.word	0x40010400

08003464 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003464:	b480      	push	{r7}
 8003466:	b085      	sub	sp, #20
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	460b      	mov	r3, r1
 800346e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	689a      	ldr	r2, [r3, #8]
 8003474:	887b      	ldrh	r3, [r7, #2]
 8003476:	4013      	ands	r3, r2
 8003478:	2b00      	cmp	r3, #0
 800347a:	d002      	beq.n	8003482 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800347c:	2301      	movs	r3, #1
 800347e:	73fb      	strb	r3, [r7, #15]
 8003480:	e001      	b.n	8003486 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003482:	2300      	movs	r3, #0
 8003484:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003486:	7bfb      	ldrb	r3, [r7, #15]
}
 8003488:	4618      	mov	r0, r3
 800348a:	3714      	adds	r7, #20
 800348c:	46bd      	mov	sp, r7
 800348e:	bc80      	pop	{r7}
 8003490:	4770      	bx	lr

08003492 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003492:	b480      	push	{r7}
 8003494:	b083      	sub	sp, #12
 8003496:	af00      	add	r7, sp, #0
 8003498:	6078      	str	r0, [r7, #4]
 800349a:	460b      	mov	r3, r1
 800349c:	807b      	strh	r3, [r7, #2]
 800349e:	4613      	mov	r3, r2
 80034a0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80034a2:	787b      	ldrb	r3, [r7, #1]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d003      	beq.n	80034b0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80034a8:	887a      	ldrh	r2, [r7, #2]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80034ae:	e003      	b.n	80034b8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80034b0:	887b      	ldrh	r3, [r7, #2]
 80034b2:	041a      	lsls	r2, r3, #16
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	611a      	str	r2, [r3, #16]
}
 80034b8:	bf00      	nop
 80034ba:	370c      	adds	r7, #12
 80034bc:	46bd      	mov	sp, r7
 80034be:	bc80      	pop	{r7}
 80034c0:	4770      	bx	lr

080034c2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80034c2:	b480      	push	{r7}
 80034c4:	b085      	sub	sp, #20
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	6078      	str	r0, [r7, #4]
 80034ca:	460b      	mov	r3, r1
 80034cc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	68db      	ldr	r3, [r3, #12]
 80034d2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80034d4:	887a      	ldrh	r2, [r7, #2]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	4013      	ands	r3, r2
 80034da:	041a      	lsls	r2, r3, #16
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	43d9      	mvns	r1, r3
 80034e0:	887b      	ldrh	r3, [r7, #2]
 80034e2:	400b      	ands	r3, r1
 80034e4:	431a      	orrs	r2, r3
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	611a      	str	r2, [r3, #16]
}
 80034ea:	bf00      	nop
 80034ec:	3714      	adds	r7, #20
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bc80      	pop	{r7}
 80034f2:	4770      	bx	lr

080034f4 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b084      	sub	sp, #16
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d101      	bne.n	8003506 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e036      	b.n	8003574 <HAL_IWDG_Init+0x80>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 800350e:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f245 5255 	movw	r2, #21845	@ 0x5555
 8003518:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	6852      	ldr	r2, [r2, #4]
 8003522:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	687a      	ldr	r2, [r7, #4]
 800352a:	6892      	ldr	r2, [r2, #8]
 800352c:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800352e:	f7ff f869 	bl	8002604 <HAL_GetTick>
 8003532:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003534:	e011      	b.n	800355a <HAL_IWDG_Init+0x66>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8003536:	f7ff f865 	bl	8002604 <HAL_GetTick>
 800353a:	4602      	mov	r2, r0
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	f241 323c 	movw	r2, #4924	@ 0x133c
 8003544:	4293      	cmp	r3, r2
 8003546:	d908      	bls.n	800355a <HAL_IWDG_Init+0x66>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	68db      	ldr	r3, [r3, #12]
 800354e:	f003 0303 	and.w	r3, r3, #3
 8003552:	2b00      	cmp	r3, #0
 8003554:	d001      	beq.n	800355a <HAL_IWDG_Init+0x66>
      {
        return HAL_TIMEOUT;
 8003556:	2303      	movs	r3, #3
 8003558:	e00c      	b.n	8003574 <HAL_IWDG_Init+0x80>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	f003 0303 	and.w	r3, r3, #3
 8003564:	2b00      	cmp	r3, #0
 8003566:	d1e6      	bne.n	8003536 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8003570:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003572:	2300      	movs	r3, #0
}
 8003574:	4618      	mov	r0, r3
 8003576:	3710      	adds	r7, #16
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}

0800357c <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800357c:	b480      	push	{r7}
 800357e:	b083      	sub	sp, #12
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 800358c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800358e:	2300      	movs	r3, #0
}
 8003590:	4618      	mov	r0, r3
 8003592:	370c      	adds	r7, #12
 8003594:	46bd      	mov	sp, r7
 8003596:	bc80      	pop	{r7}
 8003598:	4770      	bx	lr
	...

0800359c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b086      	sub	sp, #24
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d101      	bne.n	80035ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e272      	b.n	8003a94 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 0301 	and.w	r3, r3, #1
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	f000 8087 	beq.w	80036ca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80035bc:	4b92      	ldr	r3, [pc, #584]	@ (8003808 <HAL_RCC_OscConfig+0x26c>)
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	f003 030c 	and.w	r3, r3, #12
 80035c4:	2b04      	cmp	r3, #4
 80035c6:	d00c      	beq.n	80035e2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80035c8:	4b8f      	ldr	r3, [pc, #572]	@ (8003808 <HAL_RCC_OscConfig+0x26c>)
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	f003 030c 	and.w	r3, r3, #12
 80035d0:	2b08      	cmp	r3, #8
 80035d2:	d112      	bne.n	80035fa <HAL_RCC_OscConfig+0x5e>
 80035d4:	4b8c      	ldr	r3, [pc, #560]	@ (8003808 <HAL_RCC_OscConfig+0x26c>)
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035e0:	d10b      	bne.n	80035fa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035e2:	4b89      	ldr	r3, [pc, #548]	@ (8003808 <HAL_RCC_OscConfig+0x26c>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d06c      	beq.n	80036c8 <HAL_RCC_OscConfig+0x12c>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d168      	bne.n	80036c8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e24c      	b.n	8003a94 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003602:	d106      	bne.n	8003612 <HAL_RCC_OscConfig+0x76>
 8003604:	4b80      	ldr	r3, [pc, #512]	@ (8003808 <HAL_RCC_OscConfig+0x26c>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a7f      	ldr	r2, [pc, #508]	@ (8003808 <HAL_RCC_OscConfig+0x26c>)
 800360a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800360e:	6013      	str	r3, [r2, #0]
 8003610:	e02e      	b.n	8003670 <HAL_RCC_OscConfig+0xd4>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d10c      	bne.n	8003634 <HAL_RCC_OscConfig+0x98>
 800361a:	4b7b      	ldr	r3, [pc, #492]	@ (8003808 <HAL_RCC_OscConfig+0x26c>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a7a      	ldr	r2, [pc, #488]	@ (8003808 <HAL_RCC_OscConfig+0x26c>)
 8003620:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003624:	6013      	str	r3, [r2, #0]
 8003626:	4b78      	ldr	r3, [pc, #480]	@ (8003808 <HAL_RCC_OscConfig+0x26c>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a77      	ldr	r2, [pc, #476]	@ (8003808 <HAL_RCC_OscConfig+0x26c>)
 800362c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003630:	6013      	str	r3, [r2, #0]
 8003632:	e01d      	b.n	8003670 <HAL_RCC_OscConfig+0xd4>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800363c:	d10c      	bne.n	8003658 <HAL_RCC_OscConfig+0xbc>
 800363e:	4b72      	ldr	r3, [pc, #456]	@ (8003808 <HAL_RCC_OscConfig+0x26c>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a71      	ldr	r2, [pc, #452]	@ (8003808 <HAL_RCC_OscConfig+0x26c>)
 8003644:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003648:	6013      	str	r3, [r2, #0]
 800364a:	4b6f      	ldr	r3, [pc, #444]	@ (8003808 <HAL_RCC_OscConfig+0x26c>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a6e      	ldr	r2, [pc, #440]	@ (8003808 <HAL_RCC_OscConfig+0x26c>)
 8003650:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003654:	6013      	str	r3, [r2, #0]
 8003656:	e00b      	b.n	8003670 <HAL_RCC_OscConfig+0xd4>
 8003658:	4b6b      	ldr	r3, [pc, #428]	@ (8003808 <HAL_RCC_OscConfig+0x26c>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a6a      	ldr	r2, [pc, #424]	@ (8003808 <HAL_RCC_OscConfig+0x26c>)
 800365e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003662:	6013      	str	r3, [r2, #0]
 8003664:	4b68      	ldr	r3, [pc, #416]	@ (8003808 <HAL_RCC_OscConfig+0x26c>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a67      	ldr	r2, [pc, #412]	@ (8003808 <HAL_RCC_OscConfig+0x26c>)
 800366a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800366e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d013      	beq.n	80036a0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003678:	f7fe ffc4 	bl	8002604 <HAL_GetTick>
 800367c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800367e:	e008      	b.n	8003692 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003680:	f7fe ffc0 	bl	8002604 <HAL_GetTick>
 8003684:	4602      	mov	r2, r0
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	1ad3      	subs	r3, r2, r3
 800368a:	2b64      	cmp	r3, #100	@ 0x64
 800368c:	d901      	bls.n	8003692 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800368e:	2303      	movs	r3, #3
 8003690:	e200      	b.n	8003a94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003692:	4b5d      	ldr	r3, [pc, #372]	@ (8003808 <HAL_RCC_OscConfig+0x26c>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d0f0      	beq.n	8003680 <HAL_RCC_OscConfig+0xe4>
 800369e:	e014      	b.n	80036ca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036a0:	f7fe ffb0 	bl	8002604 <HAL_GetTick>
 80036a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036a6:	e008      	b.n	80036ba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036a8:	f7fe ffac 	bl	8002604 <HAL_GetTick>
 80036ac:	4602      	mov	r2, r0
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	2b64      	cmp	r3, #100	@ 0x64
 80036b4:	d901      	bls.n	80036ba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	e1ec      	b.n	8003a94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036ba:	4b53      	ldr	r3, [pc, #332]	@ (8003808 <HAL_RCC_OscConfig+0x26c>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d1f0      	bne.n	80036a8 <HAL_RCC_OscConfig+0x10c>
 80036c6:	e000      	b.n	80036ca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 0302 	and.w	r3, r3, #2
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d063      	beq.n	800379e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80036d6:	4b4c      	ldr	r3, [pc, #304]	@ (8003808 <HAL_RCC_OscConfig+0x26c>)
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	f003 030c 	and.w	r3, r3, #12
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d00b      	beq.n	80036fa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80036e2:	4b49      	ldr	r3, [pc, #292]	@ (8003808 <HAL_RCC_OscConfig+0x26c>)
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	f003 030c 	and.w	r3, r3, #12
 80036ea:	2b08      	cmp	r3, #8
 80036ec:	d11c      	bne.n	8003728 <HAL_RCC_OscConfig+0x18c>
 80036ee:	4b46      	ldr	r3, [pc, #280]	@ (8003808 <HAL_RCC_OscConfig+0x26c>)
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d116      	bne.n	8003728 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036fa:	4b43      	ldr	r3, [pc, #268]	@ (8003808 <HAL_RCC_OscConfig+0x26c>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0302 	and.w	r3, r3, #2
 8003702:	2b00      	cmp	r3, #0
 8003704:	d005      	beq.n	8003712 <HAL_RCC_OscConfig+0x176>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	691b      	ldr	r3, [r3, #16]
 800370a:	2b01      	cmp	r3, #1
 800370c:	d001      	beq.n	8003712 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e1c0      	b.n	8003a94 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003712:	4b3d      	ldr	r3, [pc, #244]	@ (8003808 <HAL_RCC_OscConfig+0x26c>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	695b      	ldr	r3, [r3, #20]
 800371e:	00db      	lsls	r3, r3, #3
 8003720:	4939      	ldr	r1, [pc, #228]	@ (8003808 <HAL_RCC_OscConfig+0x26c>)
 8003722:	4313      	orrs	r3, r2
 8003724:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003726:	e03a      	b.n	800379e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	691b      	ldr	r3, [r3, #16]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d020      	beq.n	8003772 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003730:	4b36      	ldr	r3, [pc, #216]	@ (800380c <HAL_RCC_OscConfig+0x270>)
 8003732:	2201      	movs	r2, #1
 8003734:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003736:	f7fe ff65 	bl	8002604 <HAL_GetTick>
 800373a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800373c:	e008      	b.n	8003750 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800373e:	f7fe ff61 	bl	8002604 <HAL_GetTick>
 8003742:	4602      	mov	r2, r0
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	1ad3      	subs	r3, r2, r3
 8003748:	2b02      	cmp	r3, #2
 800374a:	d901      	bls.n	8003750 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800374c:	2303      	movs	r3, #3
 800374e:	e1a1      	b.n	8003a94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003750:	4b2d      	ldr	r3, [pc, #180]	@ (8003808 <HAL_RCC_OscConfig+0x26c>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 0302 	and.w	r3, r3, #2
 8003758:	2b00      	cmp	r3, #0
 800375a:	d0f0      	beq.n	800373e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800375c:	4b2a      	ldr	r3, [pc, #168]	@ (8003808 <HAL_RCC_OscConfig+0x26c>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	695b      	ldr	r3, [r3, #20]
 8003768:	00db      	lsls	r3, r3, #3
 800376a:	4927      	ldr	r1, [pc, #156]	@ (8003808 <HAL_RCC_OscConfig+0x26c>)
 800376c:	4313      	orrs	r3, r2
 800376e:	600b      	str	r3, [r1, #0]
 8003770:	e015      	b.n	800379e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003772:	4b26      	ldr	r3, [pc, #152]	@ (800380c <HAL_RCC_OscConfig+0x270>)
 8003774:	2200      	movs	r2, #0
 8003776:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003778:	f7fe ff44 	bl	8002604 <HAL_GetTick>
 800377c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800377e:	e008      	b.n	8003792 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003780:	f7fe ff40 	bl	8002604 <HAL_GetTick>
 8003784:	4602      	mov	r2, r0
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	2b02      	cmp	r3, #2
 800378c:	d901      	bls.n	8003792 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	e180      	b.n	8003a94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003792:	4b1d      	ldr	r3, [pc, #116]	@ (8003808 <HAL_RCC_OscConfig+0x26c>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0302 	and.w	r3, r3, #2
 800379a:	2b00      	cmp	r3, #0
 800379c:	d1f0      	bne.n	8003780 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0308 	and.w	r3, r3, #8
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d03a      	beq.n	8003820 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	699b      	ldr	r3, [r3, #24]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d019      	beq.n	80037e6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037b2:	4b17      	ldr	r3, [pc, #92]	@ (8003810 <HAL_RCC_OscConfig+0x274>)
 80037b4:	2201      	movs	r2, #1
 80037b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037b8:	f7fe ff24 	bl	8002604 <HAL_GetTick>
 80037bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037be:	e008      	b.n	80037d2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037c0:	f7fe ff20 	bl	8002604 <HAL_GetTick>
 80037c4:	4602      	mov	r2, r0
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	2b02      	cmp	r3, #2
 80037cc:	d901      	bls.n	80037d2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80037ce:	2303      	movs	r3, #3
 80037d0:	e160      	b.n	8003a94 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037d2:	4b0d      	ldr	r3, [pc, #52]	@ (8003808 <HAL_RCC_OscConfig+0x26c>)
 80037d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037d6:	f003 0302 	and.w	r3, r3, #2
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d0f0      	beq.n	80037c0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80037de:	2001      	movs	r0, #1
 80037e0:	f000 face 	bl	8003d80 <RCC_Delay>
 80037e4:	e01c      	b.n	8003820 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037e6:	4b0a      	ldr	r3, [pc, #40]	@ (8003810 <HAL_RCC_OscConfig+0x274>)
 80037e8:	2200      	movs	r2, #0
 80037ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037ec:	f7fe ff0a 	bl	8002604 <HAL_GetTick>
 80037f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037f2:	e00f      	b.n	8003814 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037f4:	f7fe ff06 	bl	8002604 <HAL_GetTick>
 80037f8:	4602      	mov	r2, r0
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	2b02      	cmp	r3, #2
 8003800:	d908      	bls.n	8003814 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003802:	2303      	movs	r3, #3
 8003804:	e146      	b.n	8003a94 <HAL_RCC_OscConfig+0x4f8>
 8003806:	bf00      	nop
 8003808:	40021000 	.word	0x40021000
 800380c:	42420000 	.word	0x42420000
 8003810:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003814:	4b92      	ldr	r3, [pc, #584]	@ (8003a60 <HAL_RCC_OscConfig+0x4c4>)
 8003816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003818:	f003 0302 	and.w	r3, r3, #2
 800381c:	2b00      	cmp	r3, #0
 800381e:	d1e9      	bne.n	80037f4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 0304 	and.w	r3, r3, #4
 8003828:	2b00      	cmp	r3, #0
 800382a:	f000 80a6 	beq.w	800397a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800382e:	2300      	movs	r3, #0
 8003830:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003832:	4b8b      	ldr	r3, [pc, #556]	@ (8003a60 <HAL_RCC_OscConfig+0x4c4>)
 8003834:	69db      	ldr	r3, [r3, #28]
 8003836:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800383a:	2b00      	cmp	r3, #0
 800383c:	d10d      	bne.n	800385a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800383e:	4b88      	ldr	r3, [pc, #544]	@ (8003a60 <HAL_RCC_OscConfig+0x4c4>)
 8003840:	69db      	ldr	r3, [r3, #28]
 8003842:	4a87      	ldr	r2, [pc, #540]	@ (8003a60 <HAL_RCC_OscConfig+0x4c4>)
 8003844:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003848:	61d3      	str	r3, [r2, #28]
 800384a:	4b85      	ldr	r3, [pc, #532]	@ (8003a60 <HAL_RCC_OscConfig+0x4c4>)
 800384c:	69db      	ldr	r3, [r3, #28]
 800384e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003852:	60bb      	str	r3, [r7, #8]
 8003854:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003856:	2301      	movs	r3, #1
 8003858:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800385a:	4b82      	ldr	r3, [pc, #520]	@ (8003a64 <HAL_RCC_OscConfig+0x4c8>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003862:	2b00      	cmp	r3, #0
 8003864:	d118      	bne.n	8003898 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003866:	4b7f      	ldr	r3, [pc, #508]	@ (8003a64 <HAL_RCC_OscConfig+0x4c8>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a7e      	ldr	r2, [pc, #504]	@ (8003a64 <HAL_RCC_OscConfig+0x4c8>)
 800386c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003870:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003872:	f7fe fec7 	bl	8002604 <HAL_GetTick>
 8003876:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003878:	e008      	b.n	800388c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800387a:	f7fe fec3 	bl	8002604 <HAL_GetTick>
 800387e:	4602      	mov	r2, r0
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	1ad3      	subs	r3, r2, r3
 8003884:	2b64      	cmp	r3, #100	@ 0x64
 8003886:	d901      	bls.n	800388c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003888:	2303      	movs	r3, #3
 800388a:	e103      	b.n	8003a94 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800388c:	4b75      	ldr	r3, [pc, #468]	@ (8003a64 <HAL_RCC_OscConfig+0x4c8>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003894:	2b00      	cmp	r3, #0
 8003896:	d0f0      	beq.n	800387a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	2b01      	cmp	r3, #1
 800389e:	d106      	bne.n	80038ae <HAL_RCC_OscConfig+0x312>
 80038a0:	4b6f      	ldr	r3, [pc, #444]	@ (8003a60 <HAL_RCC_OscConfig+0x4c4>)
 80038a2:	6a1b      	ldr	r3, [r3, #32]
 80038a4:	4a6e      	ldr	r2, [pc, #440]	@ (8003a60 <HAL_RCC_OscConfig+0x4c4>)
 80038a6:	f043 0301 	orr.w	r3, r3, #1
 80038aa:	6213      	str	r3, [r2, #32]
 80038ac:	e02d      	b.n	800390a <HAL_RCC_OscConfig+0x36e>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	68db      	ldr	r3, [r3, #12]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d10c      	bne.n	80038d0 <HAL_RCC_OscConfig+0x334>
 80038b6:	4b6a      	ldr	r3, [pc, #424]	@ (8003a60 <HAL_RCC_OscConfig+0x4c4>)
 80038b8:	6a1b      	ldr	r3, [r3, #32]
 80038ba:	4a69      	ldr	r2, [pc, #420]	@ (8003a60 <HAL_RCC_OscConfig+0x4c4>)
 80038bc:	f023 0301 	bic.w	r3, r3, #1
 80038c0:	6213      	str	r3, [r2, #32]
 80038c2:	4b67      	ldr	r3, [pc, #412]	@ (8003a60 <HAL_RCC_OscConfig+0x4c4>)
 80038c4:	6a1b      	ldr	r3, [r3, #32]
 80038c6:	4a66      	ldr	r2, [pc, #408]	@ (8003a60 <HAL_RCC_OscConfig+0x4c4>)
 80038c8:	f023 0304 	bic.w	r3, r3, #4
 80038cc:	6213      	str	r3, [r2, #32]
 80038ce:	e01c      	b.n	800390a <HAL_RCC_OscConfig+0x36e>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	2b05      	cmp	r3, #5
 80038d6:	d10c      	bne.n	80038f2 <HAL_RCC_OscConfig+0x356>
 80038d8:	4b61      	ldr	r3, [pc, #388]	@ (8003a60 <HAL_RCC_OscConfig+0x4c4>)
 80038da:	6a1b      	ldr	r3, [r3, #32]
 80038dc:	4a60      	ldr	r2, [pc, #384]	@ (8003a60 <HAL_RCC_OscConfig+0x4c4>)
 80038de:	f043 0304 	orr.w	r3, r3, #4
 80038e2:	6213      	str	r3, [r2, #32]
 80038e4:	4b5e      	ldr	r3, [pc, #376]	@ (8003a60 <HAL_RCC_OscConfig+0x4c4>)
 80038e6:	6a1b      	ldr	r3, [r3, #32]
 80038e8:	4a5d      	ldr	r2, [pc, #372]	@ (8003a60 <HAL_RCC_OscConfig+0x4c4>)
 80038ea:	f043 0301 	orr.w	r3, r3, #1
 80038ee:	6213      	str	r3, [r2, #32]
 80038f0:	e00b      	b.n	800390a <HAL_RCC_OscConfig+0x36e>
 80038f2:	4b5b      	ldr	r3, [pc, #364]	@ (8003a60 <HAL_RCC_OscConfig+0x4c4>)
 80038f4:	6a1b      	ldr	r3, [r3, #32]
 80038f6:	4a5a      	ldr	r2, [pc, #360]	@ (8003a60 <HAL_RCC_OscConfig+0x4c4>)
 80038f8:	f023 0301 	bic.w	r3, r3, #1
 80038fc:	6213      	str	r3, [r2, #32]
 80038fe:	4b58      	ldr	r3, [pc, #352]	@ (8003a60 <HAL_RCC_OscConfig+0x4c4>)
 8003900:	6a1b      	ldr	r3, [r3, #32]
 8003902:	4a57      	ldr	r2, [pc, #348]	@ (8003a60 <HAL_RCC_OscConfig+0x4c4>)
 8003904:	f023 0304 	bic.w	r3, r3, #4
 8003908:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	68db      	ldr	r3, [r3, #12]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d015      	beq.n	800393e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003912:	f7fe fe77 	bl	8002604 <HAL_GetTick>
 8003916:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003918:	e00a      	b.n	8003930 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800391a:	f7fe fe73 	bl	8002604 <HAL_GetTick>
 800391e:	4602      	mov	r2, r0
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	1ad3      	subs	r3, r2, r3
 8003924:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003928:	4293      	cmp	r3, r2
 800392a:	d901      	bls.n	8003930 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800392c:	2303      	movs	r3, #3
 800392e:	e0b1      	b.n	8003a94 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003930:	4b4b      	ldr	r3, [pc, #300]	@ (8003a60 <HAL_RCC_OscConfig+0x4c4>)
 8003932:	6a1b      	ldr	r3, [r3, #32]
 8003934:	f003 0302 	and.w	r3, r3, #2
 8003938:	2b00      	cmp	r3, #0
 800393a:	d0ee      	beq.n	800391a <HAL_RCC_OscConfig+0x37e>
 800393c:	e014      	b.n	8003968 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800393e:	f7fe fe61 	bl	8002604 <HAL_GetTick>
 8003942:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003944:	e00a      	b.n	800395c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003946:	f7fe fe5d 	bl	8002604 <HAL_GetTick>
 800394a:	4602      	mov	r2, r0
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	1ad3      	subs	r3, r2, r3
 8003950:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003954:	4293      	cmp	r3, r2
 8003956:	d901      	bls.n	800395c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003958:	2303      	movs	r3, #3
 800395a:	e09b      	b.n	8003a94 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800395c:	4b40      	ldr	r3, [pc, #256]	@ (8003a60 <HAL_RCC_OscConfig+0x4c4>)
 800395e:	6a1b      	ldr	r3, [r3, #32]
 8003960:	f003 0302 	and.w	r3, r3, #2
 8003964:	2b00      	cmp	r3, #0
 8003966:	d1ee      	bne.n	8003946 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003968:	7dfb      	ldrb	r3, [r7, #23]
 800396a:	2b01      	cmp	r3, #1
 800396c:	d105      	bne.n	800397a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800396e:	4b3c      	ldr	r3, [pc, #240]	@ (8003a60 <HAL_RCC_OscConfig+0x4c4>)
 8003970:	69db      	ldr	r3, [r3, #28]
 8003972:	4a3b      	ldr	r2, [pc, #236]	@ (8003a60 <HAL_RCC_OscConfig+0x4c4>)
 8003974:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003978:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	69db      	ldr	r3, [r3, #28]
 800397e:	2b00      	cmp	r3, #0
 8003980:	f000 8087 	beq.w	8003a92 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003984:	4b36      	ldr	r3, [pc, #216]	@ (8003a60 <HAL_RCC_OscConfig+0x4c4>)
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	f003 030c 	and.w	r3, r3, #12
 800398c:	2b08      	cmp	r3, #8
 800398e:	d061      	beq.n	8003a54 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	69db      	ldr	r3, [r3, #28]
 8003994:	2b02      	cmp	r3, #2
 8003996:	d146      	bne.n	8003a26 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003998:	4b33      	ldr	r3, [pc, #204]	@ (8003a68 <HAL_RCC_OscConfig+0x4cc>)
 800399a:	2200      	movs	r2, #0
 800399c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800399e:	f7fe fe31 	bl	8002604 <HAL_GetTick>
 80039a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039a4:	e008      	b.n	80039b8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039a6:	f7fe fe2d 	bl	8002604 <HAL_GetTick>
 80039aa:	4602      	mov	r2, r0
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	1ad3      	subs	r3, r2, r3
 80039b0:	2b02      	cmp	r3, #2
 80039b2:	d901      	bls.n	80039b8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80039b4:	2303      	movs	r3, #3
 80039b6:	e06d      	b.n	8003a94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039b8:	4b29      	ldr	r3, [pc, #164]	@ (8003a60 <HAL_RCC_OscConfig+0x4c4>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d1f0      	bne.n	80039a6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6a1b      	ldr	r3, [r3, #32]
 80039c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039cc:	d108      	bne.n	80039e0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80039ce:	4b24      	ldr	r3, [pc, #144]	@ (8003a60 <HAL_RCC_OscConfig+0x4c4>)
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	4921      	ldr	r1, [pc, #132]	@ (8003a60 <HAL_RCC_OscConfig+0x4c4>)
 80039dc:	4313      	orrs	r3, r2
 80039de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039e0:	4b1f      	ldr	r3, [pc, #124]	@ (8003a60 <HAL_RCC_OscConfig+0x4c4>)
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6a19      	ldr	r1, [r3, #32]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039f0:	430b      	orrs	r3, r1
 80039f2:	491b      	ldr	r1, [pc, #108]	@ (8003a60 <HAL_RCC_OscConfig+0x4c4>)
 80039f4:	4313      	orrs	r3, r2
 80039f6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039f8:	4b1b      	ldr	r3, [pc, #108]	@ (8003a68 <HAL_RCC_OscConfig+0x4cc>)
 80039fa:	2201      	movs	r2, #1
 80039fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039fe:	f7fe fe01 	bl	8002604 <HAL_GetTick>
 8003a02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a04:	e008      	b.n	8003a18 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a06:	f7fe fdfd 	bl	8002604 <HAL_GetTick>
 8003a0a:	4602      	mov	r2, r0
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	1ad3      	subs	r3, r2, r3
 8003a10:	2b02      	cmp	r3, #2
 8003a12:	d901      	bls.n	8003a18 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003a14:	2303      	movs	r3, #3
 8003a16:	e03d      	b.n	8003a94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a18:	4b11      	ldr	r3, [pc, #68]	@ (8003a60 <HAL_RCC_OscConfig+0x4c4>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d0f0      	beq.n	8003a06 <HAL_RCC_OscConfig+0x46a>
 8003a24:	e035      	b.n	8003a92 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a26:	4b10      	ldr	r3, [pc, #64]	@ (8003a68 <HAL_RCC_OscConfig+0x4cc>)
 8003a28:	2200      	movs	r2, #0
 8003a2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a2c:	f7fe fdea 	bl	8002604 <HAL_GetTick>
 8003a30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a32:	e008      	b.n	8003a46 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a34:	f7fe fde6 	bl	8002604 <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d901      	bls.n	8003a46 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	e026      	b.n	8003a94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a46:	4b06      	ldr	r3, [pc, #24]	@ (8003a60 <HAL_RCC_OscConfig+0x4c4>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d1f0      	bne.n	8003a34 <HAL_RCC_OscConfig+0x498>
 8003a52:	e01e      	b.n	8003a92 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	69db      	ldr	r3, [r3, #28]
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d107      	bne.n	8003a6c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e019      	b.n	8003a94 <HAL_RCC_OscConfig+0x4f8>
 8003a60:	40021000 	.word	0x40021000
 8003a64:	40007000 	.word	0x40007000
 8003a68:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003a6c:	4b0b      	ldr	r3, [pc, #44]	@ (8003a9c <HAL_RCC_OscConfig+0x500>)
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6a1b      	ldr	r3, [r3, #32]
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d106      	bne.n	8003a8e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d001      	beq.n	8003a92 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e000      	b.n	8003a94 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003a92:	2300      	movs	r3, #0
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3718      	adds	r7, #24
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}
 8003a9c:	40021000 	.word	0x40021000

08003aa0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b084      	sub	sp, #16
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d101      	bne.n	8003ab4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e0d0      	b.n	8003c56 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ab4:	4b6a      	ldr	r3, [pc, #424]	@ (8003c60 <HAL_RCC_ClockConfig+0x1c0>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 0307 	and.w	r3, r3, #7
 8003abc:	683a      	ldr	r2, [r7, #0]
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d910      	bls.n	8003ae4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ac2:	4b67      	ldr	r3, [pc, #412]	@ (8003c60 <HAL_RCC_ClockConfig+0x1c0>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f023 0207 	bic.w	r2, r3, #7
 8003aca:	4965      	ldr	r1, [pc, #404]	@ (8003c60 <HAL_RCC_ClockConfig+0x1c0>)
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ad2:	4b63      	ldr	r3, [pc, #396]	@ (8003c60 <HAL_RCC_ClockConfig+0x1c0>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 0307 	and.w	r3, r3, #7
 8003ada:	683a      	ldr	r2, [r7, #0]
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d001      	beq.n	8003ae4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e0b8      	b.n	8003c56 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 0302 	and.w	r3, r3, #2
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d020      	beq.n	8003b32 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 0304 	and.w	r3, r3, #4
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d005      	beq.n	8003b08 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003afc:	4b59      	ldr	r3, [pc, #356]	@ (8003c64 <HAL_RCC_ClockConfig+0x1c4>)
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	4a58      	ldr	r2, [pc, #352]	@ (8003c64 <HAL_RCC_ClockConfig+0x1c4>)
 8003b02:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003b06:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 0308 	and.w	r3, r3, #8
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d005      	beq.n	8003b20 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b14:	4b53      	ldr	r3, [pc, #332]	@ (8003c64 <HAL_RCC_ClockConfig+0x1c4>)
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	4a52      	ldr	r2, [pc, #328]	@ (8003c64 <HAL_RCC_ClockConfig+0x1c4>)
 8003b1a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003b1e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b20:	4b50      	ldr	r3, [pc, #320]	@ (8003c64 <HAL_RCC_ClockConfig+0x1c4>)
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	494d      	ldr	r1, [pc, #308]	@ (8003c64 <HAL_RCC_ClockConfig+0x1c4>)
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 0301 	and.w	r3, r3, #1
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d040      	beq.n	8003bc0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d107      	bne.n	8003b56 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b46:	4b47      	ldr	r3, [pc, #284]	@ (8003c64 <HAL_RCC_ClockConfig+0x1c4>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d115      	bne.n	8003b7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e07f      	b.n	8003c56 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	2b02      	cmp	r3, #2
 8003b5c:	d107      	bne.n	8003b6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b5e:	4b41      	ldr	r3, [pc, #260]	@ (8003c64 <HAL_RCC_ClockConfig+0x1c4>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d109      	bne.n	8003b7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e073      	b.n	8003c56 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b6e:	4b3d      	ldr	r3, [pc, #244]	@ (8003c64 <HAL_RCC_ClockConfig+0x1c4>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 0302 	and.w	r3, r3, #2
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d101      	bne.n	8003b7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e06b      	b.n	8003c56 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b7e:	4b39      	ldr	r3, [pc, #228]	@ (8003c64 <HAL_RCC_ClockConfig+0x1c4>)
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	f023 0203 	bic.w	r2, r3, #3
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	4936      	ldr	r1, [pc, #216]	@ (8003c64 <HAL_RCC_ClockConfig+0x1c4>)
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b90:	f7fe fd38 	bl	8002604 <HAL_GetTick>
 8003b94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b96:	e00a      	b.n	8003bae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b98:	f7fe fd34 	bl	8002604 <HAL_GetTick>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d901      	bls.n	8003bae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003baa:	2303      	movs	r3, #3
 8003bac:	e053      	b.n	8003c56 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bae:	4b2d      	ldr	r3, [pc, #180]	@ (8003c64 <HAL_RCC_ClockConfig+0x1c4>)
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	f003 020c 	and.w	r2, r3, #12
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d1eb      	bne.n	8003b98 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003bc0:	4b27      	ldr	r3, [pc, #156]	@ (8003c60 <HAL_RCC_ClockConfig+0x1c0>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 0307 	and.w	r3, r3, #7
 8003bc8:	683a      	ldr	r2, [r7, #0]
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d210      	bcs.n	8003bf0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bce:	4b24      	ldr	r3, [pc, #144]	@ (8003c60 <HAL_RCC_ClockConfig+0x1c0>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f023 0207 	bic.w	r2, r3, #7
 8003bd6:	4922      	ldr	r1, [pc, #136]	@ (8003c60 <HAL_RCC_ClockConfig+0x1c0>)
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bde:	4b20      	ldr	r3, [pc, #128]	@ (8003c60 <HAL_RCC_ClockConfig+0x1c0>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 0307 	and.w	r3, r3, #7
 8003be6:	683a      	ldr	r2, [r7, #0]
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d001      	beq.n	8003bf0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	e032      	b.n	8003c56 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f003 0304 	and.w	r3, r3, #4
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d008      	beq.n	8003c0e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bfc:	4b19      	ldr	r3, [pc, #100]	@ (8003c64 <HAL_RCC_ClockConfig+0x1c4>)
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	4916      	ldr	r1, [pc, #88]	@ (8003c64 <HAL_RCC_ClockConfig+0x1c4>)
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 0308 	and.w	r3, r3, #8
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d009      	beq.n	8003c2e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003c1a:	4b12      	ldr	r3, [pc, #72]	@ (8003c64 <HAL_RCC_ClockConfig+0x1c4>)
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	691b      	ldr	r3, [r3, #16]
 8003c26:	00db      	lsls	r3, r3, #3
 8003c28:	490e      	ldr	r1, [pc, #56]	@ (8003c64 <HAL_RCC_ClockConfig+0x1c4>)
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003c2e:	f000 f821 	bl	8003c74 <HAL_RCC_GetSysClockFreq>
 8003c32:	4602      	mov	r2, r0
 8003c34:	4b0b      	ldr	r3, [pc, #44]	@ (8003c64 <HAL_RCC_ClockConfig+0x1c4>)
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	091b      	lsrs	r3, r3, #4
 8003c3a:	f003 030f 	and.w	r3, r3, #15
 8003c3e:	490a      	ldr	r1, [pc, #40]	@ (8003c68 <HAL_RCC_ClockConfig+0x1c8>)
 8003c40:	5ccb      	ldrb	r3, [r1, r3]
 8003c42:	fa22 f303 	lsr.w	r3, r2, r3
 8003c46:	4a09      	ldr	r2, [pc, #36]	@ (8003c6c <HAL_RCC_ClockConfig+0x1cc>)
 8003c48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003c4a:	4b09      	ldr	r3, [pc, #36]	@ (8003c70 <HAL_RCC_ClockConfig+0x1d0>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f7fe fc96 	bl	8002580 <HAL_InitTick>

  return HAL_OK;
 8003c54:	2300      	movs	r3, #0
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3710      	adds	r7, #16
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	bf00      	nop
 8003c60:	40022000 	.word	0x40022000
 8003c64:	40021000 	.word	0x40021000
 8003c68:	08005cc0 	.word	0x08005cc0
 8003c6c:	20000000 	.word	0x20000000
 8003c70:	20000114 	.word	0x20000114

08003c74 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b087      	sub	sp, #28
 8003c78:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	60fb      	str	r3, [r7, #12]
 8003c7e:	2300      	movs	r3, #0
 8003c80:	60bb      	str	r3, [r7, #8]
 8003c82:	2300      	movs	r3, #0
 8003c84:	617b      	str	r3, [r7, #20]
 8003c86:	2300      	movs	r3, #0
 8003c88:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003c8e:	4b1e      	ldr	r3, [pc, #120]	@ (8003d08 <HAL_RCC_GetSysClockFreq+0x94>)
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f003 030c 	and.w	r3, r3, #12
 8003c9a:	2b04      	cmp	r3, #4
 8003c9c:	d002      	beq.n	8003ca4 <HAL_RCC_GetSysClockFreq+0x30>
 8003c9e:	2b08      	cmp	r3, #8
 8003ca0:	d003      	beq.n	8003caa <HAL_RCC_GetSysClockFreq+0x36>
 8003ca2:	e027      	b.n	8003cf4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003ca4:	4b19      	ldr	r3, [pc, #100]	@ (8003d0c <HAL_RCC_GetSysClockFreq+0x98>)
 8003ca6:	613b      	str	r3, [r7, #16]
      break;
 8003ca8:	e027      	b.n	8003cfa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	0c9b      	lsrs	r3, r3, #18
 8003cae:	f003 030f 	and.w	r3, r3, #15
 8003cb2:	4a17      	ldr	r2, [pc, #92]	@ (8003d10 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003cb4:	5cd3      	ldrb	r3, [r2, r3]
 8003cb6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d010      	beq.n	8003ce4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003cc2:	4b11      	ldr	r3, [pc, #68]	@ (8003d08 <HAL_RCC_GetSysClockFreq+0x94>)
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	0c5b      	lsrs	r3, r3, #17
 8003cc8:	f003 0301 	and.w	r3, r3, #1
 8003ccc:	4a11      	ldr	r2, [pc, #68]	@ (8003d14 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003cce:	5cd3      	ldrb	r3, [r2, r3]
 8003cd0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	4a0d      	ldr	r2, [pc, #52]	@ (8003d0c <HAL_RCC_GetSysClockFreq+0x98>)
 8003cd6:	fb03 f202 	mul.w	r2, r3, r2
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ce0:	617b      	str	r3, [r7, #20]
 8003ce2:	e004      	b.n	8003cee <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	4a0c      	ldr	r2, [pc, #48]	@ (8003d18 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003ce8:	fb02 f303 	mul.w	r3, r2, r3
 8003cec:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	613b      	str	r3, [r7, #16]
      break;
 8003cf2:	e002      	b.n	8003cfa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003cf4:	4b05      	ldr	r3, [pc, #20]	@ (8003d0c <HAL_RCC_GetSysClockFreq+0x98>)
 8003cf6:	613b      	str	r3, [r7, #16]
      break;
 8003cf8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003cfa:	693b      	ldr	r3, [r7, #16]
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	371c      	adds	r7, #28
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bc80      	pop	{r7}
 8003d04:	4770      	bx	lr
 8003d06:	bf00      	nop
 8003d08:	40021000 	.word	0x40021000
 8003d0c:	007a1200 	.word	0x007a1200
 8003d10:	080060d4 	.word	0x080060d4
 8003d14:	080060e4 	.word	0x080060e4
 8003d18:	003d0900 	.word	0x003d0900

08003d1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d20:	4b02      	ldr	r3, [pc, #8]	@ (8003d2c <HAL_RCC_GetHCLKFreq+0x10>)
 8003d22:	681b      	ldr	r3, [r3, #0]
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bc80      	pop	{r7}
 8003d2a:	4770      	bx	lr
 8003d2c:	20000000 	.word	0x20000000

08003d30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003d34:	f7ff fff2 	bl	8003d1c <HAL_RCC_GetHCLKFreq>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	4b05      	ldr	r3, [pc, #20]	@ (8003d50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	0a1b      	lsrs	r3, r3, #8
 8003d40:	f003 0307 	and.w	r3, r3, #7
 8003d44:	4903      	ldr	r1, [pc, #12]	@ (8003d54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d46:	5ccb      	ldrb	r3, [r1, r3]
 8003d48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	bd80      	pop	{r7, pc}
 8003d50:	40021000 	.word	0x40021000
 8003d54:	08005cd0 	.word	0x08005cd0

08003d58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003d5c:	f7ff ffde 	bl	8003d1c <HAL_RCC_GetHCLKFreq>
 8003d60:	4602      	mov	r2, r0
 8003d62:	4b05      	ldr	r3, [pc, #20]	@ (8003d78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	0adb      	lsrs	r3, r3, #11
 8003d68:	f003 0307 	and.w	r3, r3, #7
 8003d6c:	4903      	ldr	r1, [pc, #12]	@ (8003d7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d6e:	5ccb      	ldrb	r3, [r1, r3]
 8003d70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	bd80      	pop	{r7, pc}
 8003d78:	40021000 	.word	0x40021000
 8003d7c:	08005cd0 	.word	0x08005cd0

08003d80 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b085      	sub	sp, #20
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003d88:	4b0a      	ldr	r3, [pc, #40]	@ (8003db4 <RCC_Delay+0x34>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a0a      	ldr	r2, [pc, #40]	@ (8003db8 <RCC_Delay+0x38>)
 8003d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d92:	0a5b      	lsrs	r3, r3, #9
 8003d94:	687a      	ldr	r2, [r7, #4]
 8003d96:	fb02 f303 	mul.w	r3, r2, r3
 8003d9a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003d9c:	bf00      	nop
  }
  while (Delay --);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	1e5a      	subs	r2, r3, #1
 8003da2:	60fa      	str	r2, [r7, #12]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d1f9      	bne.n	8003d9c <RCC_Delay+0x1c>
}
 8003da8:	bf00      	nop
 8003daa:	bf00      	nop
 8003dac:	3714      	adds	r7, #20
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bc80      	pop	{r7}
 8003db2:	4770      	bx	lr
 8003db4:	20000000 	.word	0x20000000
 8003db8:	10624dd3 	.word	0x10624dd3

08003dbc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b082      	sub	sp, #8
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d101      	bne.n	8003dce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e041      	b.n	8003e52 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d106      	bne.n	8003de8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f7fd f9ee 	bl	80011c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2202      	movs	r2, #2
 8003dec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	3304      	adds	r3, #4
 8003df8:	4619      	mov	r1, r3
 8003dfa:	4610      	mov	r0, r2
 8003dfc:	f000 f9a2 	bl	8004144 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2201      	movs	r2, #1
 8003e04:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2201      	movs	r2, #1
 8003e14:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2201      	movs	r2, #1
 8003e24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2201      	movs	r2, #1
 8003e44:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003e50:	2300      	movs	r3, #0
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3708      	adds	r7, #8
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
	...

08003e5c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b085      	sub	sp, #20
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d001      	beq.n	8003e74 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	e044      	b.n	8003efe <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2202      	movs	r2, #2
 8003e78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	68da      	ldr	r2, [r3, #12]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f042 0201 	orr.w	r2, r2, #1
 8003e8a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a1d      	ldr	r2, [pc, #116]	@ (8003f08 <HAL_TIM_Base_Start_IT+0xac>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d018      	beq.n	8003ec8 <HAL_TIM_Base_Start_IT+0x6c>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a1c      	ldr	r2, [pc, #112]	@ (8003f0c <HAL_TIM_Base_Start_IT+0xb0>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d013      	beq.n	8003ec8 <HAL_TIM_Base_Start_IT+0x6c>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ea8:	d00e      	beq.n	8003ec8 <HAL_TIM_Base_Start_IT+0x6c>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a18      	ldr	r2, [pc, #96]	@ (8003f10 <HAL_TIM_Base_Start_IT+0xb4>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d009      	beq.n	8003ec8 <HAL_TIM_Base_Start_IT+0x6c>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a16      	ldr	r2, [pc, #88]	@ (8003f14 <HAL_TIM_Base_Start_IT+0xb8>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d004      	beq.n	8003ec8 <HAL_TIM_Base_Start_IT+0x6c>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a15      	ldr	r2, [pc, #84]	@ (8003f18 <HAL_TIM_Base_Start_IT+0xbc>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d111      	bne.n	8003eec <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	f003 0307 	and.w	r3, r3, #7
 8003ed2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2b06      	cmp	r3, #6
 8003ed8:	d010      	beq.n	8003efc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f042 0201 	orr.w	r2, r2, #1
 8003ee8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003eea:	e007      	b.n	8003efc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f042 0201 	orr.w	r2, r2, #1
 8003efa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003efc:	2300      	movs	r3, #0
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3714      	adds	r7, #20
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bc80      	pop	{r7}
 8003f06:	4770      	bx	lr
 8003f08:	40012c00 	.word	0x40012c00
 8003f0c:	40013400 	.word	0x40013400
 8003f10:	40000400 	.word	0x40000400
 8003f14:	40000800 	.word	0x40000800
 8003f18:	40000c00 	.word	0x40000c00

08003f1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b084      	sub	sp, #16
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	68db      	ldr	r3, [r3, #12]
 8003f2a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	691b      	ldr	r3, [r3, #16]
 8003f32:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	f003 0302 	and.w	r3, r3, #2
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d020      	beq.n	8003f80 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	f003 0302 	and.w	r3, r3, #2
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d01b      	beq.n	8003f80 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f06f 0202 	mvn.w	r2, #2
 8003f50:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2201      	movs	r2, #1
 8003f56:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	699b      	ldr	r3, [r3, #24]
 8003f5e:	f003 0303 	and.w	r3, r3, #3
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d003      	beq.n	8003f6e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f000 f8d1 	bl	800410e <HAL_TIM_IC_CaptureCallback>
 8003f6c:	e005      	b.n	8003f7a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f000 f8c4 	bl	80040fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	f000 f8d3 	bl	8004120 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	f003 0304 	and.w	r3, r3, #4
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d020      	beq.n	8003fcc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	f003 0304 	and.w	r3, r3, #4
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d01b      	beq.n	8003fcc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f06f 0204 	mvn.w	r2, #4
 8003f9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2202      	movs	r2, #2
 8003fa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	699b      	ldr	r3, [r3, #24]
 8003faa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d003      	beq.n	8003fba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f000 f8ab 	bl	800410e <HAL_TIM_IC_CaptureCallback>
 8003fb8:	e005      	b.n	8003fc6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f000 f89e 	bl	80040fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	f000 f8ad 	bl	8004120 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	f003 0308 	and.w	r3, r3, #8
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d020      	beq.n	8004018 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	f003 0308 	and.w	r3, r3, #8
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d01b      	beq.n	8004018 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f06f 0208 	mvn.w	r2, #8
 8003fe8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2204      	movs	r2, #4
 8003fee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	69db      	ldr	r3, [r3, #28]
 8003ff6:	f003 0303 	and.w	r3, r3, #3
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d003      	beq.n	8004006 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f000 f885 	bl	800410e <HAL_TIM_IC_CaptureCallback>
 8004004:	e005      	b.n	8004012 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f000 f878 	bl	80040fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	f000 f887 	bl	8004120 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2200      	movs	r2, #0
 8004016:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	f003 0310 	and.w	r3, r3, #16
 800401e:	2b00      	cmp	r3, #0
 8004020:	d020      	beq.n	8004064 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	f003 0310 	and.w	r3, r3, #16
 8004028:	2b00      	cmp	r3, #0
 800402a:	d01b      	beq.n	8004064 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f06f 0210 	mvn.w	r2, #16
 8004034:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2208      	movs	r2, #8
 800403a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	69db      	ldr	r3, [r3, #28]
 8004042:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004046:	2b00      	cmp	r3, #0
 8004048:	d003      	beq.n	8004052 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f000 f85f 	bl	800410e <HAL_TIM_IC_CaptureCallback>
 8004050:	e005      	b.n	800405e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f000 f852 	bl	80040fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004058:	6878      	ldr	r0, [r7, #4]
 800405a:	f000 f861 	bl	8004120 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2200      	movs	r2, #0
 8004062:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	f003 0301 	and.w	r3, r3, #1
 800406a:	2b00      	cmp	r3, #0
 800406c:	d00c      	beq.n	8004088 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	f003 0301 	and.w	r3, r3, #1
 8004074:	2b00      	cmp	r3, #0
 8004076:	d007      	beq.n	8004088 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f06f 0201 	mvn.w	r2, #1
 8004080:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f7fd f8c4 	bl	8001210 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800408e:	2b00      	cmp	r3, #0
 8004090:	d00c      	beq.n	80040ac <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004098:	2b00      	cmp	r3, #0
 800409a:	d007      	beq.n	80040ac <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80040a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f000 f947 	bl	800433a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d00c      	beq.n	80040d0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d007      	beq.n	80040d0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80040c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f000 f831 	bl	8004132 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	f003 0320 	and.w	r3, r3, #32
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d00c      	beq.n	80040f4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	f003 0320 	and.w	r3, r3, #32
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d007      	beq.n	80040f4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f06f 0220 	mvn.w	r2, #32
 80040ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f000 f91a 	bl	8004328 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80040f4:	bf00      	nop
 80040f6:	3710      	adds	r7, #16
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}

080040fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b083      	sub	sp, #12
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004104:	bf00      	nop
 8004106:	370c      	adds	r7, #12
 8004108:	46bd      	mov	sp, r7
 800410a:	bc80      	pop	{r7}
 800410c:	4770      	bx	lr

0800410e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800410e:	b480      	push	{r7}
 8004110:	b083      	sub	sp, #12
 8004112:	af00      	add	r7, sp, #0
 8004114:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004116:	bf00      	nop
 8004118:	370c      	adds	r7, #12
 800411a:	46bd      	mov	sp, r7
 800411c:	bc80      	pop	{r7}
 800411e:	4770      	bx	lr

08004120 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004120:	b480      	push	{r7}
 8004122:	b083      	sub	sp, #12
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004128:	bf00      	nop
 800412a:	370c      	adds	r7, #12
 800412c:	46bd      	mov	sp, r7
 800412e:	bc80      	pop	{r7}
 8004130:	4770      	bx	lr

08004132 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004132:	b480      	push	{r7}
 8004134:	b083      	sub	sp, #12
 8004136:	af00      	add	r7, sp, #0
 8004138:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800413a:	bf00      	nop
 800413c:	370c      	adds	r7, #12
 800413e:	46bd      	mov	sp, r7
 8004140:	bc80      	pop	{r7}
 8004142:	4770      	bx	lr

08004144 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004144:	b480      	push	{r7}
 8004146:	b085      	sub	sp, #20
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	4a39      	ldr	r2, [pc, #228]	@ (800423c <TIM_Base_SetConfig+0xf8>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d013      	beq.n	8004184 <TIM_Base_SetConfig+0x40>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	4a38      	ldr	r2, [pc, #224]	@ (8004240 <TIM_Base_SetConfig+0xfc>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d00f      	beq.n	8004184 <TIM_Base_SetConfig+0x40>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800416a:	d00b      	beq.n	8004184 <TIM_Base_SetConfig+0x40>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	4a35      	ldr	r2, [pc, #212]	@ (8004244 <TIM_Base_SetConfig+0x100>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d007      	beq.n	8004184 <TIM_Base_SetConfig+0x40>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	4a34      	ldr	r2, [pc, #208]	@ (8004248 <TIM_Base_SetConfig+0x104>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d003      	beq.n	8004184 <TIM_Base_SetConfig+0x40>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	4a33      	ldr	r2, [pc, #204]	@ (800424c <TIM_Base_SetConfig+0x108>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d108      	bne.n	8004196 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800418a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	68fa      	ldr	r2, [r7, #12]
 8004192:	4313      	orrs	r3, r2
 8004194:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4a28      	ldr	r2, [pc, #160]	@ (800423c <TIM_Base_SetConfig+0xf8>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d013      	beq.n	80041c6 <TIM_Base_SetConfig+0x82>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	4a27      	ldr	r2, [pc, #156]	@ (8004240 <TIM_Base_SetConfig+0xfc>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d00f      	beq.n	80041c6 <TIM_Base_SetConfig+0x82>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041ac:	d00b      	beq.n	80041c6 <TIM_Base_SetConfig+0x82>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4a24      	ldr	r2, [pc, #144]	@ (8004244 <TIM_Base_SetConfig+0x100>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d007      	beq.n	80041c6 <TIM_Base_SetConfig+0x82>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4a23      	ldr	r2, [pc, #140]	@ (8004248 <TIM_Base_SetConfig+0x104>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d003      	beq.n	80041c6 <TIM_Base_SetConfig+0x82>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4a22      	ldr	r2, [pc, #136]	@ (800424c <TIM_Base_SetConfig+0x108>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d108      	bne.n	80041d8 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	68db      	ldr	r3, [r3, #12]
 80041d2:	68fa      	ldr	r2, [r7, #12]
 80041d4:	4313      	orrs	r3, r2
 80041d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	695b      	ldr	r3, [r3, #20]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	68fa      	ldr	r2, [r7, #12]
 80041ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	689a      	ldr	r2, [r3, #8]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	4a0f      	ldr	r2, [pc, #60]	@ (800423c <TIM_Base_SetConfig+0xf8>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d003      	beq.n	800420c <TIM_Base_SetConfig+0xc8>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	4a0e      	ldr	r2, [pc, #56]	@ (8004240 <TIM_Base_SetConfig+0xfc>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d103      	bne.n	8004214 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	691a      	ldr	r2, [r3, #16]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2201      	movs	r2, #1
 8004218:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	691b      	ldr	r3, [r3, #16]
 800421e:	f003 0301 	and.w	r3, r3, #1
 8004222:	2b00      	cmp	r3, #0
 8004224:	d005      	beq.n	8004232 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	691b      	ldr	r3, [r3, #16]
 800422a:	f023 0201 	bic.w	r2, r3, #1
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	611a      	str	r2, [r3, #16]
  }
}
 8004232:	bf00      	nop
 8004234:	3714      	adds	r7, #20
 8004236:	46bd      	mov	sp, r7
 8004238:	bc80      	pop	{r7}
 800423a:	4770      	bx	lr
 800423c:	40012c00 	.word	0x40012c00
 8004240:	40013400 	.word	0x40013400
 8004244:	40000400 	.word	0x40000400
 8004248:	40000800 	.word	0x40000800
 800424c:	40000c00 	.word	0x40000c00

08004250 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004250:	b480      	push	{r7}
 8004252:	b085      	sub	sp, #20
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004260:	2b01      	cmp	r3, #1
 8004262:	d101      	bne.n	8004268 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004264:	2302      	movs	r3, #2
 8004266:	e050      	b.n	800430a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2201      	movs	r2, #1
 800426c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2202      	movs	r2, #2
 8004274:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800428e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	68fa      	ldr	r2, [r7, #12]
 8004296:	4313      	orrs	r3, r2
 8004298:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	68fa      	ldr	r2, [r7, #12]
 80042a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a1b      	ldr	r2, [pc, #108]	@ (8004314 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d018      	beq.n	80042de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a19      	ldr	r2, [pc, #100]	@ (8004318 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d013      	beq.n	80042de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042be:	d00e      	beq.n	80042de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a15      	ldr	r2, [pc, #84]	@ (800431c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d009      	beq.n	80042de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a14      	ldr	r2, [pc, #80]	@ (8004320 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d004      	beq.n	80042de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a12      	ldr	r2, [pc, #72]	@ (8004324 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d10c      	bne.n	80042f8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80042e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	68ba      	ldr	r2, [r7, #8]
 80042ec:	4313      	orrs	r3, r2
 80042ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	68ba      	ldr	r2, [r7, #8]
 80042f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2201      	movs	r2, #1
 80042fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2200      	movs	r2, #0
 8004304:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004308:	2300      	movs	r3, #0
}
 800430a:	4618      	mov	r0, r3
 800430c:	3714      	adds	r7, #20
 800430e:	46bd      	mov	sp, r7
 8004310:	bc80      	pop	{r7}
 8004312:	4770      	bx	lr
 8004314:	40012c00 	.word	0x40012c00
 8004318:	40013400 	.word	0x40013400
 800431c:	40000400 	.word	0x40000400
 8004320:	40000800 	.word	0x40000800
 8004324:	40000c00 	.word	0x40000c00

08004328 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004328:	b480      	push	{r7}
 800432a:	b083      	sub	sp, #12
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004330:	bf00      	nop
 8004332:	370c      	adds	r7, #12
 8004334:	46bd      	mov	sp, r7
 8004336:	bc80      	pop	{r7}
 8004338:	4770      	bx	lr

0800433a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800433a:	b480      	push	{r7}
 800433c:	b083      	sub	sp, #12
 800433e:	af00      	add	r7, sp, #0
 8004340:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004342:	bf00      	nop
 8004344:	370c      	adds	r7, #12
 8004346:	46bd      	mov	sp, r7
 8004348:	bc80      	pop	{r7}
 800434a:	4770      	bx	lr

0800434c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b082      	sub	sp, #8
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d101      	bne.n	800435e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e042      	b.n	80043e4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004364:	b2db      	uxtb	r3, r3
 8004366:	2b00      	cmp	r3, #0
 8004368:	d106      	bne.n	8004378 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2200      	movs	r2, #0
 800436e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f7fd f818 	bl	80013a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2224      	movs	r2, #36	@ 0x24
 800437c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	68da      	ldr	r2, [r3, #12]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800438e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	f000 fefd 	bl	8005190 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	691a      	ldr	r2, [r3, #16]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80043a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	695a      	ldr	r2, [r3, #20]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80043b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	68da      	ldr	r2, [r3, #12]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80043c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2200      	movs	r2, #0
 80043ca:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2220      	movs	r2, #32
 80043d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2220      	movs	r2, #32
 80043d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80043e2:	2300      	movs	r3, #0
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	3708      	adds	r7, #8
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}

080043ec <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b08a      	sub	sp, #40	@ 0x28
 80043f0:	af02      	add	r7, sp, #8
 80043f2:	60f8      	str	r0, [r7, #12]
 80043f4:	60b9      	str	r1, [r7, #8]
 80043f6:	603b      	str	r3, [r7, #0]
 80043f8:	4613      	mov	r3, r2
 80043fa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80043fc:	2300      	movs	r3, #0
 80043fe:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004406:	b2db      	uxtb	r3, r3
 8004408:	2b20      	cmp	r3, #32
 800440a:	d175      	bne.n	80044f8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d002      	beq.n	8004418 <HAL_UART_Transmit+0x2c>
 8004412:	88fb      	ldrh	r3, [r7, #6]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d101      	bne.n	800441c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	e06e      	b.n	80044fa <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2200      	movs	r2, #0
 8004420:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2221      	movs	r2, #33	@ 0x21
 8004426:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800442a:	f7fe f8eb 	bl	8002604 <HAL_GetTick>
 800442e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	88fa      	ldrh	r2, [r7, #6]
 8004434:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	88fa      	ldrh	r2, [r7, #6]
 800443a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004444:	d108      	bne.n	8004458 <HAL_UART_Transmit+0x6c>
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	691b      	ldr	r3, [r3, #16]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d104      	bne.n	8004458 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800444e:	2300      	movs	r3, #0
 8004450:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	61bb      	str	r3, [r7, #24]
 8004456:	e003      	b.n	8004460 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800445c:	2300      	movs	r3, #0
 800445e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004460:	e02e      	b.n	80044c0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	9300      	str	r3, [sp, #0]
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	2200      	movs	r2, #0
 800446a:	2180      	movs	r1, #128	@ 0x80
 800446c:	68f8      	ldr	r0, [r7, #12]
 800446e:	f000 fc3a 	bl	8004ce6 <UART_WaitOnFlagUntilTimeout>
 8004472:	4603      	mov	r3, r0
 8004474:	2b00      	cmp	r3, #0
 8004476:	d005      	beq.n	8004484 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2220      	movs	r2, #32
 800447c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004480:	2303      	movs	r3, #3
 8004482:	e03a      	b.n	80044fa <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004484:	69fb      	ldr	r3, [r7, #28]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d10b      	bne.n	80044a2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800448a:	69bb      	ldr	r3, [r7, #24]
 800448c:	881b      	ldrh	r3, [r3, #0]
 800448e:	461a      	mov	r2, r3
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004498:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800449a:	69bb      	ldr	r3, [r7, #24]
 800449c:	3302      	adds	r3, #2
 800449e:	61bb      	str	r3, [r7, #24]
 80044a0:	e007      	b.n	80044b2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80044a2:	69fb      	ldr	r3, [r7, #28]
 80044a4:	781a      	ldrb	r2, [r3, #0]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80044ac:	69fb      	ldr	r3, [r7, #28]
 80044ae:	3301      	adds	r3, #1
 80044b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	3b01      	subs	r3, #1
 80044ba:	b29a      	uxth	r2, r3
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80044c4:	b29b      	uxth	r3, r3
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d1cb      	bne.n	8004462 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	9300      	str	r3, [sp, #0]
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	2200      	movs	r2, #0
 80044d2:	2140      	movs	r1, #64	@ 0x40
 80044d4:	68f8      	ldr	r0, [r7, #12]
 80044d6:	f000 fc06 	bl	8004ce6 <UART_WaitOnFlagUntilTimeout>
 80044da:	4603      	mov	r3, r0
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d005      	beq.n	80044ec <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2220      	movs	r2, #32
 80044e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80044e8:	2303      	movs	r3, #3
 80044ea:	e006      	b.n	80044fa <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2220      	movs	r2, #32
 80044f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80044f4:	2300      	movs	r3, #0
 80044f6:	e000      	b.n	80044fa <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80044f8:	2302      	movs	r3, #2
  }
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3720      	adds	r7, #32
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}

08004502 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004502:	b580      	push	{r7, lr}
 8004504:	b084      	sub	sp, #16
 8004506:	af00      	add	r7, sp, #0
 8004508:	60f8      	str	r0, [r7, #12]
 800450a:	60b9      	str	r1, [r7, #8]
 800450c:	4613      	mov	r3, r2
 800450e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004516:	b2db      	uxtb	r3, r3
 8004518:	2b20      	cmp	r3, #32
 800451a:	d112      	bne.n	8004542 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d002      	beq.n	8004528 <HAL_UART_Receive_IT+0x26>
 8004522:	88fb      	ldrh	r3, [r7, #6]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d101      	bne.n	800452c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	e00b      	b.n	8004544 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2200      	movs	r2, #0
 8004530:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004532:	88fb      	ldrh	r3, [r7, #6]
 8004534:	461a      	mov	r2, r3
 8004536:	68b9      	ldr	r1, [r7, #8]
 8004538:	68f8      	ldr	r0, [r7, #12]
 800453a:	f000 fc2d 	bl	8004d98 <UART_Start_Receive_IT>
 800453e:	4603      	mov	r3, r0
 8004540:	e000      	b.n	8004544 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004542:	2302      	movs	r3, #2
  }
}
 8004544:	4618      	mov	r0, r3
 8004546:	3710      	adds	r7, #16
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}

0800454c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b08c      	sub	sp, #48	@ 0x30
 8004550:	af00      	add	r7, sp, #0
 8004552:	60f8      	str	r0, [r7, #12]
 8004554:	60b9      	str	r1, [r7, #8]
 8004556:	4613      	mov	r3, r2
 8004558:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004560:	b2db      	uxtb	r3, r3
 8004562:	2b20      	cmp	r3, #32
 8004564:	d156      	bne.n	8004614 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d002      	beq.n	8004572 <HAL_UART_Transmit_DMA+0x26>
 800456c:	88fb      	ldrh	r3, [r7, #6]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d101      	bne.n	8004576 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	e04f      	b.n	8004616 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8004576:	68ba      	ldr	r2, [r7, #8]
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	88fa      	ldrh	r2, [r7, #6]
 8004580:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	88fa      	ldrh	r2, [r7, #6]
 8004586:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2200      	movs	r2, #0
 800458c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2221      	movs	r2, #33	@ 0x21
 8004592:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800459a:	4a21      	ldr	r2, [pc, #132]	@ (8004620 <HAL_UART_Transmit_DMA+0xd4>)
 800459c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045a2:	4a20      	ldr	r2, [pc, #128]	@ (8004624 <HAL_UART_Transmit_DMA+0xd8>)
 80045a4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045aa:	4a1f      	ldr	r2, [pc, #124]	@ (8004628 <HAL_UART_Transmit_DMA+0xdc>)
 80045ac:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045b2:	2200      	movs	r2, #0
 80045b4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 80045b6:	f107 0308 	add.w	r3, r7, #8
 80045ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80045c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045c2:	6819      	ldr	r1, [r3, #0]
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	3304      	adds	r3, #4
 80045ca:	461a      	mov	r2, r3
 80045cc:	88fb      	ldrh	r3, [r7, #6]
 80045ce:	f7fe f9a7 	bl	8002920 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80045da:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	3314      	adds	r3, #20
 80045e2:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045e4:	69bb      	ldr	r3, [r7, #24]
 80045e6:	e853 3f00 	ldrex	r3, [r3]
 80045ea:	617b      	str	r3, [r7, #20]
   return(result);
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80045f2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	3314      	adds	r3, #20
 80045fa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80045fc:	627a      	str	r2, [r7, #36]	@ 0x24
 80045fe:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004600:	6a39      	ldr	r1, [r7, #32]
 8004602:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004604:	e841 2300 	strex	r3, r2, [r1]
 8004608:	61fb      	str	r3, [r7, #28]
   return(result);
 800460a:	69fb      	ldr	r3, [r7, #28]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d1e5      	bne.n	80045dc <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8004610:	2300      	movs	r3, #0
 8004612:	e000      	b.n	8004616 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8004614:	2302      	movs	r3, #2
  }
}
 8004616:	4618      	mov	r0, r3
 8004618:	3730      	adds	r7, #48	@ 0x30
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}
 800461e:	bf00      	nop
 8004620:	08004b9d 	.word	0x08004b9d
 8004624:	08004c37 	.word	0x08004c37
 8004628:	08004c53 	.word	0x08004c53

0800462c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b0ba      	sub	sp, #232	@ 0xe8
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	68db      	ldr	r3, [r3, #12]
 8004644:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	695b      	ldr	r3, [r3, #20]
 800464e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004652:	2300      	movs	r3, #0
 8004654:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004658:	2300      	movs	r3, #0
 800465a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800465e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004662:	f003 030f 	and.w	r3, r3, #15
 8004666:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800466a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800466e:	2b00      	cmp	r3, #0
 8004670:	d10f      	bne.n	8004692 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004672:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004676:	f003 0320 	and.w	r3, r3, #32
 800467a:	2b00      	cmp	r3, #0
 800467c:	d009      	beq.n	8004692 <HAL_UART_IRQHandler+0x66>
 800467e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004682:	f003 0320 	and.w	r3, r3, #32
 8004686:	2b00      	cmp	r3, #0
 8004688:	d003      	beq.n	8004692 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f000 fcc1 	bl	8005012 <UART_Receive_IT>
      return;
 8004690:	e25b      	b.n	8004b4a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004692:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004696:	2b00      	cmp	r3, #0
 8004698:	f000 80de 	beq.w	8004858 <HAL_UART_IRQHandler+0x22c>
 800469c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80046a0:	f003 0301 	and.w	r3, r3, #1
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d106      	bne.n	80046b6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80046a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046ac:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	f000 80d1 	beq.w	8004858 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80046b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046ba:	f003 0301 	and.w	r3, r3, #1
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d00b      	beq.n	80046da <HAL_UART_IRQHandler+0xae>
 80046c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d005      	beq.n	80046da <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046d2:	f043 0201 	orr.w	r2, r3, #1
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80046da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046de:	f003 0304 	and.w	r3, r3, #4
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d00b      	beq.n	80046fe <HAL_UART_IRQHandler+0xd2>
 80046e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80046ea:	f003 0301 	and.w	r3, r3, #1
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d005      	beq.n	80046fe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046f6:	f043 0202 	orr.w	r2, r3, #2
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80046fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004702:	f003 0302 	and.w	r3, r3, #2
 8004706:	2b00      	cmp	r3, #0
 8004708:	d00b      	beq.n	8004722 <HAL_UART_IRQHandler+0xf6>
 800470a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800470e:	f003 0301 	and.w	r3, r3, #1
 8004712:	2b00      	cmp	r3, #0
 8004714:	d005      	beq.n	8004722 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800471a:	f043 0204 	orr.w	r2, r3, #4
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004722:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004726:	f003 0308 	and.w	r3, r3, #8
 800472a:	2b00      	cmp	r3, #0
 800472c:	d011      	beq.n	8004752 <HAL_UART_IRQHandler+0x126>
 800472e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004732:	f003 0320 	and.w	r3, r3, #32
 8004736:	2b00      	cmp	r3, #0
 8004738:	d105      	bne.n	8004746 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800473a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800473e:	f003 0301 	and.w	r3, r3, #1
 8004742:	2b00      	cmp	r3, #0
 8004744:	d005      	beq.n	8004752 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800474a:	f043 0208 	orr.w	r2, r3, #8
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004756:	2b00      	cmp	r3, #0
 8004758:	f000 81f2 	beq.w	8004b40 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800475c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004760:	f003 0320 	and.w	r3, r3, #32
 8004764:	2b00      	cmp	r3, #0
 8004766:	d008      	beq.n	800477a <HAL_UART_IRQHandler+0x14e>
 8004768:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800476c:	f003 0320 	and.w	r3, r3, #32
 8004770:	2b00      	cmp	r3, #0
 8004772:	d002      	beq.n	800477a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004774:	6878      	ldr	r0, [r7, #4]
 8004776:	f000 fc4c 	bl	8005012 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	695b      	ldr	r3, [r3, #20]
 8004780:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004784:	2b00      	cmp	r3, #0
 8004786:	bf14      	ite	ne
 8004788:	2301      	movne	r3, #1
 800478a:	2300      	moveq	r3, #0
 800478c:	b2db      	uxtb	r3, r3
 800478e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004796:	f003 0308 	and.w	r3, r3, #8
 800479a:	2b00      	cmp	r3, #0
 800479c:	d103      	bne.n	80047a6 <HAL_UART_IRQHandler+0x17a>
 800479e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d04f      	beq.n	8004846 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f000 fb56 	bl	8004e58 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	695b      	ldr	r3, [r3, #20]
 80047b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d041      	beq.n	800483e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	3314      	adds	r3, #20
 80047c0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80047c8:	e853 3f00 	ldrex	r3, [r3]
 80047cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80047d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80047d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80047d8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	3314      	adds	r3, #20
 80047e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80047e6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80047ea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80047f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80047f6:	e841 2300 	strex	r3, r2, [r1]
 80047fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80047fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004802:	2b00      	cmp	r3, #0
 8004804:	d1d9      	bne.n	80047ba <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800480a:	2b00      	cmp	r3, #0
 800480c:	d013      	beq.n	8004836 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004812:	4a7e      	ldr	r2, [pc, #504]	@ (8004a0c <HAL_UART_IRQHandler+0x3e0>)
 8004814:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800481a:	4618      	mov	r0, r3
 800481c:	f7fe f91c 	bl	8002a58 <HAL_DMA_Abort_IT>
 8004820:	4603      	mov	r3, r0
 8004822:	2b00      	cmp	r3, #0
 8004824:	d016      	beq.n	8004854 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800482a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800482c:	687a      	ldr	r2, [r7, #4]
 800482e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004830:	4610      	mov	r0, r2
 8004832:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004834:	e00e      	b.n	8004854 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f000 f99c 	bl	8004b74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800483c:	e00a      	b.n	8004854 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f000 f998 	bl	8004b74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004844:	e006      	b.n	8004854 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f000 f994 	bl	8004b74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2200      	movs	r2, #0
 8004850:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004852:	e175      	b.n	8004b40 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004854:	bf00      	nop
    return;
 8004856:	e173      	b.n	8004b40 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800485c:	2b01      	cmp	r3, #1
 800485e:	f040 814f 	bne.w	8004b00 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004862:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004866:	f003 0310 	and.w	r3, r3, #16
 800486a:	2b00      	cmp	r3, #0
 800486c:	f000 8148 	beq.w	8004b00 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004870:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004874:	f003 0310 	and.w	r3, r3, #16
 8004878:	2b00      	cmp	r3, #0
 800487a:	f000 8141 	beq.w	8004b00 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800487e:	2300      	movs	r3, #0
 8004880:	60bb      	str	r3, [r7, #8]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	60bb      	str	r3, [r7, #8]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	60bb      	str	r3, [r7, #8]
 8004892:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	695b      	ldr	r3, [r3, #20]
 800489a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800489e:	2b00      	cmp	r3, #0
 80048a0:	f000 80b6 	beq.w	8004a10 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80048b0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	f000 8145 	beq.w	8004b44 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80048be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80048c2:	429a      	cmp	r2, r3
 80048c4:	f080 813e 	bcs.w	8004b44 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80048ce:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048d4:	699b      	ldr	r3, [r3, #24]
 80048d6:	2b20      	cmp	r3, #32
 80048d8:	f000 8088 	beq.w	80049ec <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	330c      	adds	r3, #12
 80048e2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048e6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80048ea:	e853 3f00 	ldrex	r3, [r3]
 80048ee:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80048f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80048f6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80048fa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	330c      	adds	r3, #12
 8004904:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004908:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800490c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004910:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004914:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004918:	e841 2300 	strex	r3, r2, [r1]
 800491c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004920:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004924:	2b00      	cmp	r3, #0
 8004926:	d1d9      	bne.n	80048dc <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	3314      	adds	r3, #20
 800492e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004930:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004932:	e853 3f00 	ldrex	r3, [r3]
 8004936:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004938:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800493a:	f023 0301 	bic.w	r3, r3, #1
 800493e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	3314      	adds	r3, #20
 8004948:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800494c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004950:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004952:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004954:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004958:	e841 2300 	strex	r3, r2, [r1]
 800495c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800495e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004960:	2b00      	cmp	r3, #0
 8004962:	d1e1      	bne.n	8004928 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	3314      	adds	r3, #20
 800496a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800496c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800496e:	e853 3f00 	ldrex	r3, [r3]
 8004972:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004974:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004976:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800497a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	3314      	adds	r3, #20
 8004984:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004988:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800498a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800498c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800498e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004990:	e841 2300 	strex	r3, r2, [r1]
 8004994:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004996:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004998:	2b00      	cmp	r3, #0
 800499a:	d1e3      	bne.n	8004964 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2220      	movs	r2, #32
 80049a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2200      	movs	r2, #0
 80049a8:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	330c      	adds	r3, #12
 80049b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80049b4:	e853 3f00 	ldrex	r3, [r3]
 80049b8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80049ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80049bc:	f023 0310 	bic.w	r3, r3, #16
 80049c0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	330c      	adds	r3, #12
 80049ca:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80049ce:	65ba      	str	r2, [r7, #88]	@ 0x58
 80049d0:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049d2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80049d4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80049d6:	e841 2300 	strex	r3, r2, [r1]
 80049da:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80049dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d1e3      	bne.n	80049aa <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049e6:	4618      	mov	r0, r3
 80049e8:	f7fd fffa 	bl	80029e0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2202      	movs	r2, #2
 80049f0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	1ad3      	subs	r3, r2, r3
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	4619      	mov	r1, r3
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f000 f8bf 	bl	8004b86 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004a08:	e09c      	b.n	8004b44 <HAL_UART_IRQHandler+0x518>
 8004a0a:	bf00      	nop
 8004a0c:	08004f1d 	.word	0x08004f1d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004a18:	b29b      	uxth	r3, r3
 8004a1a:	1ad3      	subs	r3, r2, r3
 8004a1c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004a24:	b29b      	uxth	r3, r3
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	f000 808e 	beq.w	8004b48 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004a2c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	f000 8089 	beq.w	8004b48 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	330c      	adds	r3, #12
 8004a3c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a40:	e853 3f00 	ldrex	r3, [r3]
 8004a44:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004a46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a48:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004a4c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	330c      	adds	r3, #12
 8004a56:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004a5a:	647a      	str	r2, [r7, #68]	@ 0x44
 8004a5c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a5e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004a60:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004a62:	e841 2300 	strex	r3, r2, [r1]
 8004a66:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004a68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d1e3      	bne.n	8004a36 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	3314      	adds	r3, #20
 8004a74:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a78:	e853 3f00 	ldrex	r3, [r3]
 8004a7c:	623b      	str	r3, [r7, #32]
   return(result);
 8004a7e:	6a3b      	ldr	r3, [r7, #32]
 8004a80:	f023 0301 	bic.w	r3, r3, #1
 8004a84:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	3314      	adds	r3, #20
 8004a8e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004a92:	633a      	str	r2, [r7, #48]	@ 0x30
 8004a94:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a96:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004a98:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a9a:	e841 2300 	strex	r3, r2, [r1]
 8004a9e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004aa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d1e3      	bne.n	8004a6e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2220      	movs	r2, #32
 8004aaa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	330c      	adds	r3, #12
 8004aba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	e853 3f00 	ldrex	r3, [r3]
 8004ac2:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f023 0310 	bic.w	r3, r3, #16
 8004aca:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	330c      	adds	r3, #12
 8004ad4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004ad8:	61fa      	str	r2, [r7, #28]
 8004ada:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004adc:	69b9      	ldr	r1, [r7, #24]
 8004ade:	69fa      	ldr	r2, [r7, #28]
 8004ae0:	e841 2300 	strex	r3, r2, [r1]
 8004ae4:	617b      	str	r3, [r7, #20]
   return(result);
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d1e3      	bne.n	8004ab4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2202      	movs	r2, #2
 8004af0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004af2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004af6:	4619      	mov	r1, r3
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	f000 f844 	bl	8004b86 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004afe:	e023      	b.n	8004b48 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004b00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d009      	beq.n	8004b20 <HAL_UART_IRQHandler+0x4f4>
 8004b0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d003      	beq.n	8004b20 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004b18:	6878      	ldr	r0, [r7, #4]
 8004b1a:	f000 fa13 	bl	8004f44 <UART_Transmit_IT>
    return;
 8004b1e:	e014      	b.n	8004b4a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004b20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d00e      	beq.n	8004b4a <HAL_UART_IRQHandler+0x51e>
 8004b2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d008      	beq.n	8004b4a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004b38:	6878      	ldr	r0, [r7, #4]
 8004b3a:	f000 fa52 	bl	8004fe2 <UART_EndTransmit_IT>
    return;
 8004b3e:	e004      	b.n	8004b4a <HAL_UART_IRQHandler+0x51e>
    return;
 8004b40:	bf00      	nop
 8004b42:	e002      	b.n	8004b4a <HAL_UART_IRQHandler+0x51e>
      return;
 8004b44:	bf00      	nop
 8004b46:	e000      	b.n	8004b4a <HAL_UART_IRQHandler+0x51e>
      return;
 8004b48:	bf00      	nop
  }
}
 8004b4a:	37e8      	adds	r7, #232	@ 0xe8
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}

08004b50 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b083      	sub	sp, #12
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004b58:	bf00      	nop
 8004b5a:	370c      	adds	r7, #12
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bc80      	pop	{r7}
 8004b60:	4770      	bx	lr

08004b62 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004b62:	b480      	push	{r7}
 8004b64:	b083      	sub	sp, #12
 8004b66:	af00      	add	r7, sp, #0
 8004b68:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8004b6a:	bf00      	nop
 8004b6c:	370c      	adds	r7, #12
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bc80      	pop	{r7}
 8004b72:	4770      	bx	lr

08004b74 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b083      	sub	sp, #12
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004b7c:	bf00      	nop
 8004b7e:	370c      	adds	r7, #12
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bc80      	pop	{r7}
 8004b84:	4770      	bx	lr

08004b86 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004b86:	b480      	push	{r7}
 8004b88:	b083      	sub	sp, #12
 8004b8a:	af00      	add	r7, sp, #0
 8004b8c:	6078      	str	r0, [r7, #4]
 8004b8e:	460b      	mov	r3, r1
 8004b90:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004b92:	bf00      	nop
 8004b94:	370c      	adds	r7, #12
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bc80      	pop	{r7}
 8004b9a:	4770      	bx	lr

08004b9c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b090      	sub	sp, #64	@ 0x40
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ba8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f003 0320 	and.w	r3, r3, #32
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d137      	bne.n	8004c28 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8004bb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004bba:	2200      	movs	r2, #0
 8004bbc:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004bbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	3314      	adds	r3, #20
 8004bc4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bc8:	e853 3f00 	ldrex	r3, [r3]
 8004bcc:	623b      	str	r3, [r7, #32]
   return(result);
 8004bce:	6a3b      	ldr	r3, [r7, #32]
 8004bd0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004bd4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004bd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	3314      	adds	r3, #20
 8004bdc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004bde:	633a      	str	r2, [r7, #48]	@ 0x30
 8004be0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004be2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004be4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004be6:	e841 2300 	strex	r3, r2, [r1]
 8004bea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004bec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d1e5      	bne.n	8004bbe <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004bf2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	330c      	adds	r3, #12
 8004bf8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	e853 3f00 	ldrex	r3, [r3]
 8004c00:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004c08:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	330c      	adds	r3, #12
 8004c10:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004c12:	61fa      	str	r2, [r7, #28]
 8004c14:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c16:	69b9      	ldr	r1, [r7, #24]
 8004c18:	69fa      	ldr	r2, [r7, #28]
 8004c1a:	e841 2300 	strex	r3, r2, [r1]
 8004c1e:	617b      	str	r3, [r7, #20]
   return(result);
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d1e5      	bne.n	8004bf2 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004c26:	e002      	b.n	8004c2e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8004c28:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8004c2a:	f7ff ff91 	bl	8004b50 <HAL_UART_TxCpltCallback>
}
 8004c2e:	bf00      	nop
 8004c30:	3740      	adds	r7, #64	@ 0x40
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}

08004c36 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004c36:	b580      	push	{r7, lr}
 8004c38:	b084      	sub	sp, #16
 8004c3a:	af00      	add	r7, sp, #0
 8004c3c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c42:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004c44:	68f8      	ldr	r0, [r7, #12]
 8004c46:	f7ff ff8c 	bl	8004b62 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c4a:	bf00      	nop
 8004c4c:	3710      	adds	r7, #16
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}

08004c52 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004c52:	b580      	push	{r7, lr}
 8004c54:	b084      	sub	sp, #16
 8004c56:	af00      	add	r7, sp, #0
 8004c58:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c62:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	695b      	ldr	r3, [r3, #20]
 8004c6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	bf14      	ite	ne
 8004c72:	2301      	movne	r3, #1
 8004c74:	2300      	moveq	r3, #0
 8004c76:	b2db      	uxtb	r3, r3
 8004c78:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	2b21      	cmp	r3, #33	@ 0x21
 8004c84:	d108      	bne.n	8004c98 <UART_DMAError+0x46>
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d005      	beq.n	8004c98 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8004c92:	68b8      	ldr	r0, [r7, #8]
 8004c94:	f000 f8b9 	bl	8004e0a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	695b      	ldr	r3, [r3, #20]
 8004c9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	bf14      	ite	ne
 8004ca6:	2301      	movne	r3, #1
 8004ca8:	2300      	moveq	r3, #0
 8004caa:	b2db      	uxtb	r3, r3
 8004cac:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004cb4:	b2db      	uxtb	r3, r3
 8004cb6:	2b22      	cmp	r3, #34	@ 0x22
 8004cb8:	d108      	bne.n	8004ccc <UART_DMAError+0x7a>
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d005      	beq.n	8004ccc <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8004cc6:	68b8      	ldr	r0, [r7, #8]
 8004cc8:	f000 f8c6 	bl	8004e58 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cd0:	f043 0210 	orr.w	r2, r3, #16
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004cd8:	68b8      	ldr	r0, [r7, #8]
 8004cda:	f7ff ff4b 	bl	8004b74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004cde:	bf00      	nop
 8004ce0:	3710      	adds	r7, #16
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}

08004ce6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004ce6:	b580      	push	{r7, lr}
 8004ce8:	b086      	sub	sp, #24
 8004cea:	af00      	add	r7, sp, #0
 8004cec:	60f8      	str	r0, [r7, #12]
 8004cee:	60b9      	str	r1, [r7, #8]
 8004cf0:	603b      	str	r3, [r7, #0]
 8004cf2:	4613      	mov	r3, r2
 8004cf4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cf6:	e03b      	b.n	8004d70 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cf8:	6a3b      	ldr	r3, [r7, #32]
 8004cfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cfe:	d037      	beq.n	8004d70 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d00:	f7fd fc80 	bl	8002604 <HAL_GetTick>
 8004d04:	4602      	mov	r2, r0
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	1ad3      	subs	r3, r2, r3
 8004d0a:	6a3a      	ldr	r2, [r7, #32]
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d302      	bcc.n	8004d16 <UART_WaitOnFlagUntilTimeout+0x30>
 8004d10:	6a3b      	ldr	r3, [r7, #32]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d101      	bne.n	8004d1a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004d16:	2303      	movs	r3, #3
 8004d18:	e03a      	b.n	8004d90 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	68db      	ldr	r3, [r3, #12]
 8004d20:	f003 0304 	and.w	r3, r3, #4
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d023      	beq.n	8004d70 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	2b80      	cmp	r3, #128	@ 0x80
 8004d2c:	d020      	beq.n	8004d70 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	2b40      	cmp	r3, #64	@ 0x40
 8004d32:	d01d      	beq.n	8004d70 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f003 0308 	and.w	r3, r3, #8
 8004d3e:	2b08      	cmp	r3, #8
 8004d40:	d116      	bne.n	8004d70 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004d42:	2300      	movs	r3, #0
 8004d44:	617b      	str	r3, [r7, #20]
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	617b      	str	r3, [r7, #20]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	617b      	str	r3, [r7, #20]
 8004d56:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d58:	68f8      	ldr	r0, [r7, #12]
 8004d5a:	f000 f87d 	bl	8004e58 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2208      	movs	r2, #8
 8004d62:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2200      	movs	r2, #0
 8004d68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	e00f      	b.n	8004d90 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	4013      	ands	r3, r2
 8004d7a:	68ba      	ldr	r2, [r7, #8]
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	bf0c      	ite	eq
 8004d80:	2301      	moveq	r3, #1
 8004d82:	2300      	movne	r3, #0
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	461a      	mov	r2, r3
 8004d88:	79fb      	ldrb	r3, [r7, #7]
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d0b4      	beq.n	8004cf8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d8e:	2300      	movs	r3, #0
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	3718      	adds	r7, #24
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd80      	pop	{r7, pc}

08004d98 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b085      	sub	sp, #20
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	60f8      	str	r0, [r7, #12]
 8004da0:	60b9      	str	r1, [r7, #8]
 8004da2:	4613      	mov	r3, r2
 8004da4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	68ba      	ldr	r2, [r7, #8]
 8004daa:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	88fa      	ldrh	r2, [r7, #6]
 8004db0:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	88fa      	ldrh	r2, [r7, #6]
 8004db6:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2222      	movs	r2, #34	@ 0x22
 8004dc2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	691b      	ldr	r3, [r3, #16]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d007      	beq.n	8004dde <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	68da      	ldr	r2, [r3, #12]
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004ddc:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	695a      	ldr	r2, [r3, #20]
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f042 0201 	orr.w	r2, r2, #1
 8004dec:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	68da      	ldr	r2, [r3, #12]
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f042 0220 	orr.w	r2, r2, #32
 8004dfc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004dfe:	2300      	movs	r3, #0
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	3714      	adds	r7, #20
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bc80      	pop	{r7}
 8004e08:	4770      	bx	lr

08004e0a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004e0a:	b480      	push	{r7}
 8004e0c:	b089      	sub	sp, #36	@ 0x24
 8004e0e:	af00      	add	r7, sp, #0
 8004e10:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	330c      	adds	r3, #12
 8004e18:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	e853 3f00 	ldrex	r3, [r3]
 8004e20:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004e28:	61fb      	str	r3, [r7, #28]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	330c      	adds	r3, #12
 8004e30:	69fa      	ldr	r2, [r7, #28]
 8004e32:	61ba      	str	r2, [r7, #24]
 8004e34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e36:	6979      	ldr	r1, [r7, #20]
 8004e38:	69ba      	ldr	r2, [r7, #24]
 8004e3a:	e841 2300 	strex	r3, r2, [r1]
 8004e3e:	613b      	str	r3, [r7, #16]
   return(result);
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d1e5      	bne.n	8004e12 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2220      	movs	r2, #32
 8004e4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8004e4e:	bf00      	nop
 8004e50:	3724      	adds	r7, #36	@ 0x24
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bc80      	pop	{r7}
 8004e56:	4770      	bx	lr

08004e58 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b095      	sub	sp, #84	@ 0x54
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	330c      	adds	r3, #12
 8004e66:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e6a:	e853 3f00 	ldrex	r3, [r3]
 8004e6e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004e70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e72:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004e76:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	330c      	adds	r3, #12
 8004e7e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004e80:	643a      	str	r2, [r7, #64]	@ 0x40
 8004e82:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e84:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004e86:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004e88:	e841 2300 	strex	r3, r2, [r1]
 8004e8c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004e8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d1e5      	bne.n	8004e60 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	3314      	adds	r3, #20
 8004e9a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e9c:	6a3b      	ldr	r3, [r7, #32]
 8004e9e:	e853 3f00 	ldrex	r3, [r3]
 8004ea2:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ea4:	69fb      	ldr	r3, [r7, #28]
 8004ea6:	f023 0301 	bic.w	r3, r3, #1
 8004eaa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	3314      	adds	r3, #20
 8004eb2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004eb4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004eb6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eb8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004eba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ebc:	e841 2300 	strex	r3, r2, [r1]
 8004ec0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d1e5      	bne.n	8004e94 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d119      	bne.n	8004f04 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	330c      	adds	r3, #12
 8004ed6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	e853 3f00 	ldrex	r3, [r3]
 8004ede:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	f023 0310 	bic.w	r3, r3, #16
 8004ee6:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	330c      	adds	r3, #12
 8004eee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004ef0:	61ba      	str	r2, [r7, #24]
 8004ef2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ef4:	6979      	ldr	r1, [r7, #20]
 8004ef6:	69ba      	ldr	r2, [r7, #24]
 8004ef8:	e841 2300 	strex	r3, r2, [r1]
 8004efc:	613b      	str	r3, [r7, #16]
   return(result);
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d1e5      	bne.n	8004ed0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2220      	movs	r2, #32
 8004f08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004f12:	bf00      	nop
 8004f14:	3754      	adds	r7, #84	@ 0x54
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bc80      	pop	{r7}
 8004f1a:	4770      	bx	lr

08004f1c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b084      	sub	sp, #16
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f28:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2200      	movs	r2, #0
 8004f34:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004f36:	68f8      	ldr	r0, [r7, #12]
 8004f38:	f7ff fe1c 	bl	8004b74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f3c:	bf00      	nop
 8004f3e:	3710      	adds	r7, #16
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}

08004f44 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b085      	sub	sp, #20
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f52:	b2db      	uxtb	r3, r3
 8004f54:	2b21      	cmp	r3, #33	@ 0x21
 8004f56:	d13e      	bne.n	8004fd6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	689b      	ldr	r3, [r3, #8]
 8004f5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f60:	d114      	bne.n	8004f8c <UART_Transmit_IT+0x48>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	691b      	ldr	r3, [r3, #16]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d110      	bne.n	8004f8c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6a1b      	ldr	r3, [r3, #32]
 8004f6e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	881b      	ldrh	r3, [r3, #0]
 8004f74:	461a      	mov	r2, r3
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f7e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6a1b      	ldr	r3, [r3, #32]
 8004f84:	1c9a      	adds	r2, r3, #2
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	621a      	str	r2, [r3, #32]
 8004f8a:	e008      	b.n	8004f9e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6a1b      	ldr	r3, [r3, #32]
 8004f90:	1c59      	adds	r1, r3, #1
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	6211      	str	r1, [r2, #32]
 8004f96:	781a      	ldrb	r2, [r3, #0]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004fa2:	b29b      	uxth	r3, r3
 8004fa4:	3b01      	subs	r3, #1
 8004fa6:	b29b      	uxth	r3, r3
 8004fa8:	687a      	ldr	r2, [r7, #4]
 8004faa:	4619      	mov	r1, r3
 8004fac:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d10f      	bne.n	8004fd2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	68da      	ldr	r2, [r3, #12]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004fc0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	68da      	ldr	r2, [r3, #12]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004fd0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	e000      	b.n	8004fd8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004fd6:	2302      	movs	r3, #2
  }
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3714      	adds	r7, #20
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bc80      	pop	{r7}
 8004fe0:	4770      	bx	lr

08004fe2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004fe2:	b580      	push	{r7, lr}
 8004fe4:	b082      	sub	sp, #8
 8004fe6:	af00      	add	r7, sp, #0
 8004fe8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	68da      	ldr	r2, [r3, #12]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004ff8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2220      	movs	r2, #32
 8004ffe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	f7ff fda4 	bl	8004b50 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005008:	2300      	movs	r3, #0
}
 800500a:	4618      	mov	r0, r3
 800500c:	3708      	adds	r7, #8
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}

08005012 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005012:	b580      	push	{r7, lr}
 8005014:	b08c      	sub	sp, #48	@ 0x30
 8005016:	af00      	add	r7, sp, #0
 8005018:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005020:	b2db      	uxtb	r3, r3
 8005022:	2b22      	cmp	r3, #34	@ 0x22
 8005024:	f040 80ae 	bne.w	8005184 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005030:	d117      	bne.n	8005062 <UART_Receive_IT+0x50>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	691b      	ldr	r3, [r3, #16]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d113      	bne.n	8005062 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800503a:	2300      	movs	r3, #0
 800503c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005042:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	b29b      	uxth	r3, r3
 800504c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005050:	b29a      	uxth	r2, r3
 8005052:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005054:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800505a:	1c9a      	adds	r2, r3, #2
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	629a      	str	r2, [r3, #40]	@ 0x28
 8005060:	e026      	b.n	80050b0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005066:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005068:	2300      	movs	r3, #0
 800506a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005074:	d007      	beq.n	8005086 <UART_Receive_IT+0x74>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	689b      	ldr	r3, [r3, #8]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d10a      	bne.n	8005094 <UART_Receive_IT+0x82>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	691b      	ldr	r3, [r3, #16]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d106      	bne.n	8005094 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	b2da      	uxtb	r2, r3
 800508e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005090:	701a      	strb	r2, [r3, #0]
 8005092:	e008      	b.n	80050a6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	b2db      	uxtb	r3, r3
 800509c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80050a0:	b2da      	uxtb	r2, r3
 80050a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050a4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050aa:	1c5a      	adds	r2, r3, #1
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80050b4:	b29b      	uxth	r3, r3
 80050b6:	3b01      	subs	r3, #1
 80050b8:	b29b      	uxth	r3, r3
 80050ba:	687a      	ldr	r2, [r7, #4]
 80050bc:	4619      	mov	r1, r3
 80050be:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d15d      	bne.n	8005180 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	68da      	ldr	r2, [r3, #12]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f022 0220 	bic.w	r2, r2, #32
 80050d2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	68da      	ldr	r2, [r3, #12]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80050e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	695a      	ldr	r2, [r3, #20]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f022 0201 	bic.w	r2, r2, #1
 80050f2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2220      	movs	r2, #32
 80050f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2200      	movs	r2, #0
 8005100:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005106:	2b01      	cmp	r3, #1
 8005108:	d135      	bne.n	8005176 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2200      	movs	r2, #0
 800510e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	330c      	adds	r3, #12
 8005116:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	e853 3f00 	ldrex	r3, [r3]
 800511e:	613b      	str	r3, [r7, #16]
   return(result);
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	f023 0310 	bic.w	r3, r3, #16
 8005126:	627b      	str	r3, [r7, #36]	@ 0x24
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	330c      	adds	r3, #12
 800512e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005130:	623a      	str	r2, [r7, #32]
 8005132:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005134:	69f9      	ldr	r1, [r7, #28]
 8005136:	6a3a      	ldr	r2, [r7, #32]
 8005138:	e841 2300 	strex	r3, r2, [r1]
 800513c:	61bb      	str	r3, [r7, #24]
   return(result);
 800513e:	69bb      	ldr	r3, [r7, #24]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d1e5      	bne.n	8005110 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f003 0310 	and.w	r3, r3, #16
 800514e:	2b10      	cmp	r3, #16
 8005150:	d10a      	bne.n	8005168 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005152:	2300      	movs	r3, #0
 8005154:	60fb      	str	r3, [r7, #12]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	60fb      	str	r3, [r7, #12]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	60fb      	str	r3, [r7, #12]
 8005166:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800516c:	4619      	mov	r1, r3
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f7ff fd09 	bl	8004b86 <HAL_UARTEx_RxEventCallback>
 8005174:	e002      	b.n	800517c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f7fc fa56 	bl	8001628 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800517c:	2300      	movs	r3, #0
 800517e:	e002      	b.n	8005186 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005180:	2300      	movs	r3, #0
 8005182:	e000      	b.n	8005186 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005184:	2302      	movs	r3, #2
  }
}
 8005186:	4618      	mov	r0, r3
 8005188:	3730      	adds	r7, #48	@ 0x30
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}
	...

08005190 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b084      	sub	sp, #16
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	691b      	ldr	r3, [r3, #16]
 800519e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	68da      	ldr	r2, [r3, #12]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	430a      	orrs	r2, r1
 80051ac:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	689a      	ldr	r2, [r3, #8]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	691b      	ldr	r3, [r3, #16]
 80051b6:	431a      	orrs	r2, r3
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	695b      	ldr	r3, [r3, #20]
 80051bc:	4313      	orrs	r3, r2
 80051be:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	68db      	ldr	r3, [r3, #12]
 80051c6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80051ca:	f023 030c 	bic.w	r3, r3, #12
 80051ce:	687a      	ldr	r2, [r7, #4]
 80051d0:	6812      	ldr	r2, [r2, #0]
 80051d2:	68b9      	ldr	r1, [r7, #8]
 80051d4:	430b      	orrs	r3, r1
 80051d6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	695b      	ldr	r3, [r3, #20]
 80051de:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	699a      	ldr	r2, [r3, #24]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	430a      	orrs	r2, r1
 80051ec:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a2c      	ldr	r2, [pc, #176]	@ (80052a4 <UART_SetConfig+0x114>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d103      	bne.n	8005200 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80051f8:	f7fe fdae 	bl	8003d58 <HAL_RCC_GetPCLK2Freq>
 80051fc:	60f8      	str	r0, [r7, #12]
 80051fe:	e002      	b.n	8005206 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005200:	f7fe fd96 	bl	8003d30 <HAL_RCC_GetPCLK1Freq>
 8005204:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005206:	68fa      	ldr	r2, [r7, #12]
 8005208:	4613      	mov	r3, r2
 800520a:	009b      	lsls	r3, r3, #2
 800520c:	4413      	add	r3, r2
 800520e:	009a      	lsls	r2, r3, #2
 8005210:	441a      	add	r2, r3
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	009b      	lsls	r3, r3, #2
 8005218:	fbb2 f3f3 	udiv	r3, r2, r3
 800521c:	4a22      	ldr	r2, [pc, #136]	@ (80052a8 <UART_SetConfig+0x118>)
 800521e:	fba2 2303 	umull	r2, r3, r2, r3
 8005222:	095b      	lsrs	r3, r3, #5
 8005224:	0119      	lsls	r1, r3, #4
 8005226:	68fa      	ldr	r2, [r7, #12]
 8005228:	4613      	mov	r3, r2
 800522a:	009b      	lsls	r3, r3, #2
 800522c:	4413      	add	r3, r2
 800522e:	009a      	lsls	r2, r3, #2
 8005230:	441a      	add	r2, r3
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	009b      	lsls	r3, r3, #2
 8005238:	fbb2 f2f3 	udiv	r2, r2, r3
 800523c:	4b1a      	ldr	r3, [pc, #104]	@ (80052a8 <UART_SetConfig+0x118>)
 800523e:	fba3 0302 	umull	r0, r3, r3, r2
 8005242:	095b      	lsrs	r3, r3, #5
 8005244:	2064      	movs	r0, #100	@ 0x64
 8005246:	fb00 f303 	mul.w	r3, r0, r3
 800524a:	1ad3      	subs	r3, r2, r3
 800524c:	011b      	lsls	r3, r3, #4
 800524e:	3332      	adds	r3, #50	@ 0x32
 8005250:	4a15      	ldr	r2, [pc, #84]	@ (80052a8 <UART_SetConfig+0x118>)
 8005252:	fba2 2303 	umull	r2, r3, r2, r3
 8005256:	095b      	lsrs	r3, r3, #5
 8005258:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800525c:	4419      	add	r1, r3
 800525e:	68fa      	ldr	r2, [r7, #12]
 8005260:	4613      	mov	r3, r2
 8005262:	009b      	lsls	r3, r3, #2
 8005264:	4413      	add	r3, r2
 8005266:	009a      	lsls	r2, r3, #2
 8005268:	441a      	add	r2, r3
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	009b      	lsls	r3, r3, #2
 8005270:	fbb2 f2f3 	udiv	r2, r2, r3
 8005274:	4b0c      	ldr	r3, [pc, #48]	@ (80052a8 <UART_SetConfig+0x118>)
 8005276:	fba3 0302 	umull	r0, r3, r3, r2
 800527a:	095b      	lsrs	r3, r3, #5
 800527c:	2064      	movs	r0, #100	@ 0x64
 800527e:	fb00 f303 	mul.w	r3, r0, r3
 8005282:	1ad3      	subs	r3, r2, r3
 8005284:	011b      	lsls	r3, r3, #4
 8005286:	3332      	adds	r3, #50	@ 0x32
 8005288:	4a07      	ldr	r2, [pc, #28]	@ (80052a8 <UART_SetConfig+0x118>)
 800528a:	fba2 2303 	umull	r2, r3, r2, r3
 800528e:	095b      	lsrs	r3, r3, #5
 8005290:	f003 020f 	and.w	r2, r3, #15
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	440a      	add	r2, r1
 800529a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800529c:	bf00      	nop
 800529e:	3710      	adds	r7, #16
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}
 80052a4:	40013800 	.word	0x40013800
 80052a8:	51eb851f 	.word	0x51eb851f

080052ac <_vsniprintf_r>:
 80052ac:	b530      	push	{r4, r5, lr}
 80052ae:	4614      	mov	r4, r2
 80052b0:	2c00      	cmp	r4, #0
 80052b2:	4605      	mov	r5, r0
 80052b4:	461a      	mov	r2, r3
 80052b6:	b09b      	sub	sp, #108	@ 0x6c
 80052b8:	da05      	bge.n	80052c6 <_vsniprintf_r+0x1a>
 80052ba:	238b      	movs	r3, #139	@ 0x8b
 80052bc:	6003      	str	r3, [r0, #0]
 80052be:	f04f 30ff 	mov.w	r0, #4294967295
 80052c2:	b01b      	add	sp, #108	@ 0x6c
 80052c4:	bd30      	pop	{r4, r5, pc}
 80052c6:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80052ca:	f8ad 300c 	strh.w	r3, [sp, #12]
 80052ce:	bf0c      	ite	eq
 80052d0:	4623      	moveq	r3, r4
 80052d2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80052d6:	9302      	str	r3, [sp, #8]
 80052d8:	9305      	str	r3, [sp, #20]
 80052da:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80052de:	9100      	str	r1, [sp, #0]
 80052e0:	9104      	str	r1, [sp, #16]
 80052e2:	f8ad 300e 	strh.w	r3, [sp, #14]
 80052e6:	4669      	mov	r1, sp
 80052e8:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80052ea:	f000 f9ad 	bl	8005648 <_svfiprintf_r>
 80052ee:	1c43      	adds	r3, r0, #1
 80052f0:	bfbc      	itt	lt
 80052f2:	238b      	movlt	r3, #139	@ 0x8b
 80052f4:	602b      	strlt	r3, [r5, #0]
 80052f6:	2c00      	cmp	r4, #0
 80052f8:	d0e3      	beq.n	80052c2 <_vsniprintf_r+0x16>
 80052fa:	2200      	movs	r2, #0
 80052fc:	9b00      	ldr	r3, [sp, #0]
 80052fe:	701a      	strb	r2, [r3, #0]
 8005300:	e7df      	b.n	80052c2 <_vsniprintf_r+0x16>
	...

08005304 <vsniprintf>:
 8005304:	b507      	push	{r0, r1, r2, lr}
 8005306:	9300      	str	r3, [sp, #0]
 8005308:	4613      	mov	r3, r2
 800530a:	460a      	mov	r2, r1
 800530c:	4601      	mov	r1, r0
 800530e:	4803      	ldr	r0, [pc, #12]	@ (800531c <vsniprintf+0x18>)
 8005310:	6800      	ldr	r0, [r0, #0]
 8005312:	f7ff ffcb 	bl	80052ac <_vsniprintf_r>
 8005316:	b003      	add	sp, #12
 8005318:	f85d fb04 	ldr.w	pc, [sp], #4
 800531c:	2000011c 	.word	0x2000011c

08005320 <memset>:
 8005320:	4603      	mov	r3, r0
 8005322:	4402      	add	r2, r0
 8005324:	4293      	cmp	r3, r2
 8005326:	d100      	bne.n	800532a <memset+0xa>
 8005328:	4770      	bx	lr
 800532a:	f803 1b01 	strb.w	r1, [r3], #1
 800532e:	e7f9      	b.n	8005324 <memset+0x4>

08005330 <__errno>:
 8005330:	4b01      	ldr	r3, [pc, #4]	@ (8005338 <__errno+0x8>)
 8005332:	6818      	ldr	r0, [r3, #0]
 8005334:	4770      	bx	lr
 8005336:	bf00      	nop
 8005338:	2000011c 	.word	0x2000011c

0800533c <__libc_init_array>:
 800533c:	b570      	push	{r4, r5, r6, lr}
 800533e:	2600      	movs	r6, #0
 8005340:	4d0c      	ldr	r5, [pc, #48]	@ (8005374 <__libc_init_array+0x38>)
 8005342:	4c0d      	ldr	r4, [pc, #52]	@ (8005378 <__libc_init_array+0x3c>)
 8005344:	1b64      	subs	r4, r4, r5
 8005346:	10a4      	asrs	r4, r4, #2
 8005348:	42a6      	cmp	r6, r4
 800534a:	d109      	bne.n	8005360 <__libc_init_array+0x24>
 800534c:	f000 fc78 	bl	8005c40 <_init>
 8005350:	2600      	movs	r6, #0
 8005352:	4d0a      	ldr	r5, [pc, #40]	@ (800537c <__libc_init_array+0x40>)
 8005354:	4c0a      	ldr	r4, [pc, #40]	@ (8005380 <__libc_init_array+0x44>)
 8005356:	1b64      	subs	r4, r4, r5
 8005358:	10a4      	asrs	r4, r4, #2
 800535a:	42a6      	cmp	r6, r4
 800535c:	d105      	bne.n	800536a <__libc_init_array+0x2e>
 800535e:	bd70      	pop	{r4, r5, r6, pc}
 8005360:	f855 3b04 	ldr.w	r3, [r5], #4
 8005364:	4798      	blx	r3
 8005366:	3601      	adds	r6, #1
 8005368:	e7ee      	b.n	8005348 <__libc_init_array+0xc>
 800536a:	f855 3b04 	ldr.w	r3, [r5], #4
 800536e:	4798      	blx	r3
 8005370:	3601      	adds	r6, #1
 8005372:	e7f2      	b.n	800535a <__libc_init_array+0x1e>
 8005374:	0800611c 	.word	0x0800611c
 8005378:	0800611c 	.word	0x0800611c
 800537c:	0800611c 	.word	0x0800611c
 8005380:	08006120 	.word	0x08006120

08005384 <__retarget_lock_acquire_recursive>:
 8005384:	4770      	bx	lr

08005386 <__retarget_lock_release_recursive>:
 8005386:	4770      	bx	lr

08005388 <memcpy>:
 8005388:	440a      	add	r2, r1
 800538a:	4291      	cmp	r1, r2
 800538c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005390:	d100      	bne.n	8005394 <memcpy+0xc>
 8005392:	4770      	bx	lr
 8005394:	b510      	push	{r4, lr}
 8005396:	f811 4b01 	ldrb.w	r4, [r1], #1
 800539a:	4291      	cmp	r1, r2
 800539c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80053a0:	d1f9      	bne.n	8005396 <memcpy+0xe>
 80053a2:	bd10      	pop	{r4, pc}

080053a4 <_free_r>:
 80053a4:	b538      	push	{r3, r4, r5, lr}
 80053a6:	4605      	mov	r5, r0
 80053a8:	2900      	cmp	r1, #0
 80053aa:	d040      	beq.n	800542e <_free_r+0x8a>
 80053ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80053b0:	1f0c      	subs	r4, r1, #4
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	bfb8      	it	lt
 80053b6:	18e4      	addlt	r4, r4, r3
 80053b8:	f000 f8de 	bl	8005578 <__malloc_lock>
 80053bc:	4a1c      	ldr	r2, [pc, #112]	@ (8005430 <_free_r+0x8c>)
 80053be:	6813      	ldr	r3, [r2, #0]
 80053c0:	b933      	cbnz	r3, 80053d0 <_free_r+0x2c>
 80053c2:	6063      	str	r3, [r4, #4]
 80053c4:	6014      	str	r4, [r2, #0]
 80053c6:	4628      	mov	r0, r5
 80053c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80053cc:	f000 b8da 	b.w	8005584 <__malloc_unlock>
 80053d0:	42a3      	cmp	r3, r4
 80053d2:	d908      	bls.n	80053e6 <_free_r+0x42>
 80053d4:	6820      	ldr	r0, [r4, #0]
 80053d6:	1821      	adds	r1, r4, r0
 80053d8:	428b      	cmp	r3, r1
 80053da:	bf01      	itttt	eq
 80053dc:	6819      	ldreq	r1, [r3, #0]
 80053de:	685b      	ldreq	r3, [r3, #4]
 80053e0:	1809      	addeq	r1, r1, r0
 80053e2:	6021      	streq	r1, [r4, #0]
 80053e4:	e7ed      	b.n	80053c2 <_free_r+0x1e>
 80053e6:	461a      	mov	r2, r3
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	b10b      	cbz	r3, 80053f0 <_free_r+0x4c>
 80053ec:	42a3      	cmp	r3, r4
 80053ee:	d9fa      	bls.n	80053e6 <_free_r+0x42>
 80053f0:	6811      	ldr	r1, [r2, #0]
 80053f2:	1850      	adds	r0, r2, r1
 80053f4:	42a0      	cmp	r0, r4
 80053f6:	d10b      	bne.n	8005410 <_free_r+0x6c>
 80053f8:	6820      	ldr	r0, [r4, #0]
 80053fa:	4401      	add	r1, r0
 80053fc:	1850      	adds	r0, r2, r1
 80053fe:	4283      	cmp	r3, r0
 8005400:	6011      	str	r1, [r2, #0]
 8005402:	d1e0      	bne.n	80053c6 <_free_r+0x22>
 8005404:	6818      	ldr	r0, [r3, #0]
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	4408      	add	r0, r1
 800540a:	6010      	str	r0, [r2, #0]
 800540c:	6053      	str	r3, [r2, #4]
 800540e:	e7da      	b.n	80053c6 <_free_r+0x22>
 8005410:	d902      	bls.n	8005418 <_free_r+0x74>
 8005412:	230c      	movs	r3, #12
 8005414:	602b      	str	r3, [r5, #0]
 8005416:	e7d6      	b.n	80053c6 <_free_r+0x22>
 8005418:	6820      	ldr	r0, [r4, #0]
 800541a:	1821      	adds	r1, r4, r0
 800541c:	428b      	cmp	r3, r1
 800541e:	bf01      	itttt	eq
 8005420:	6819      	ldreq	r1, [r3, #0]
 8005422:	685b      	ldreq	r3, [r3, #4]
 8005424:	1809      	addeq	r1, r1, r0
 8005426:	6021      	streq	r1, [r4, #0]
 8005428:	6063      	str	r3, [r4, #4]
 800542a:	6054      	str	r4, [r2, #4]
 800542c:	e7cb      	b.n	80053c6 <_free_r+0x22>
 800542e:	bd38      	pop	{r3, r4, r5, pc}
 8005430:	20000e28 	.word	0x20000e28

08005434 <sbrk_aligned>:
 8005434:	b570      	push	{r4, r5, r6, lr}
 8005436:	4e0f      	ldr	r6, [pc, #60]	@ (8005474 <sbrk_aligned+0x40>)
 8005438:	460c      	mov	r4, r1
 800543a:	6831      	ldr	r1, [r6, #0]
 800543c:	4605      	mov	r5, r0
 800543e:	b911      	cbnz	r1, 8005446 <sbrk_aligned+0x12>
 8005440:	f000 fbaa 	bl	8005b98 <_sbrk_r>
 8005444:	6030      	str	r0, [r6, #0]
 8005446:	4621      	mov	r1, r4
 8005448:	4628      	mov	r0, r5
 800544a:	f000 fba5 	bl	8005b98 <_sbrk_r>
 800544e:	1c43      	adds	r3, r0, #1
 8005450:	d103      	bne.n	800545a <sbrk_aligned+0x26>
 8005452:	f04f 34ff 	mov.w	r4, #4294967295
 8005456:	4620      	mov	r0, r4
 8005458:	bd70      	pop	{r4, r5, r6, pc}
 800545a:	1cc4      	adds	r4, r0, #3
 800545c:	f024 0403 	bic.w	r4, r4, #3
 8005460:	42a0      	cmp	r0, r4
 8005462:	d0f8      	beq.n	8005456 <sbrk_aligned+0x22>
 8005464:	1a21      	subs	r1, r4, r0
 8005466:	4628      	mov	r0, r5
 8005468:	f000 fb96 	bl	8005b98 <_sbrk_r>
 800546c:	3001      	adds	r0, #1
 800546e:	d1f2      	bne.n	8005456 <sbrk_aligned+0x22>
 8005470:	e7ef      	b.n	8005452 <sbrk_aligned+0x1e>
 8005472:	bf00      	nop
 8005474:	20000e24 	.word	0x20000e24

08005478 <_malloc_r>:
 8005478:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800547c:	1ccd      	adds	r5, r1, #3
 800547e:	f025 0503 	bic.w	r5, r5, #3
 8005482:	3508      	adds	r5, #8
 8005484:	2d0c      	cmp	r5, #12
 8005486:	bf38      	it	cc
 8005488:	250c      	movcc	r5, #12
 800548a:	2d00      	cmp	r5, #0
 800548c:	4606      	mov	r6, r0
 800548e:	db01      	blt.n	8005494 <_malloc_r+0x1c>
 8005490:	42a9      	cmp	r1, r5
 8005492:	d904      	bls.n	800549e <_malloc_r+0x26>
 8005494:	230c      	movs	r3, #12
 8005496:	6033      	str	r3, [r6, #0]
 8005498:	2000      	movs	r0, #0
 800549a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800549e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005574 <_malloc_r+0xfc>
 80054a2:	f000 f869 	bl	8005578 <__malloc_lock>
 80054a6:	f8d8 3000 	ldr.w	r3, [r8]
 80054aa:	461c      	mov	r4, r3
 80054ac:	bb44      	cbnz	r4, 8005500 <_malloc_r+0x88>
 80054ae:	4629      	mov	r1, r5
 80054b0:	4630      	mov	r0, r6
 80054b2:	f7ff ffbf 	bl	8005434 <sbrk_aligned>
 80054b6:	1c43      	adds	r3, r0, #1
 80054b8:	4604      	mov	r4, r0
 80054ba:	d158      	bne.n	800556e <_malloc_r+0xf6>
 80054bc:	f8d8 4000 	ldr.w	r4, [r8]
 80054c0:	4627      	mov	r7, r4
 80054c2:	2f00      	cmp	r7, #0
 80054c4:	d143      	bne.n	800554e <_malloc_r+0xd6>
 80054c6:	2c00      	cmp	r4, #0
 80054c8:	d04b      	beq.n	8005562 <_malloc_r+0xea>
 80054ca:	6823      	ldr	r3, [r4, #0]
 80054cc:	4639      	mov	r1, r7
 80054ce:	4630      	mov	r0, r6
 80054d0:	eb04 0903 	add.w	r9, r4, r3
 80054d4:	f000 fb60 	bl	8005b98 <_sbrk_r>
 80054d8:	4581      	cmp	r9, r0
 80054da:	d142      	bne.n	8005562 <_malloc_r+0xea>
 80054dc:	6821      	ldr	r1, [r4, #0]
 80054de:	4630      	mov	r0, r6
 80054e0:	1a6d      	subs	r5, r5, r1
 80054e2:	4629      	mov	r1, r5
 80054e4:	f7ff ffa6 	bl	8005434 <sbrk_aligned>
 80054e8:	3001      	adds	r0, #1
 80054ea:	d03a      	beq.n	8005562 <_malloc_r+0xea>
 80054ec:	6823      	ldr	r3, [r4, #0]
 80054ee:	442b      	add	r3, r5
 80054f0:	6023      	str	r3, [r4, #0]
 80054f2:	f8d8 3000 	ldr.w	r3, [r8]
 80054f6:	685a      	ldr	r2, [r3, #4]
 80054f8:	bb62      	cbnz	r2, 8005554 <_malloc_r+0xdc>
 80054fa:	f8c8 7000 	str.w	r7, [r8]
 80054fe:	e00f      	b.n	8005520 <_malloc_r+0xa8>
 8005500:	6822      	ldr	r2, [r4, #0]
 8005502:	1b52      	subs	r2, r2, r5
 8005504:	d420      	bmi.n	8005548 <_malloc_r+0xd0>
 8005506:	2a0b      	cmp	r2, #11
 8005508:	d917      	bls.n	800553a <_malloc_r+0xc2>
 800550a:	1961      	adds	r1, r4, r5
 800550c:	42a3      	cmp	r3, r4
 800550e:	6025      	str	r5, [r4, #0]
 8005510:	bf18      	it	ne
 8005512:	6059      	strne	r1, [r3, #4]
 8005514:	6863      	ldr	r3, [r4, #4]
 8005516:	bf08      	it	eq
 8005518:	f8c8 1000 	streq.w	r1, [r8]
 800551c:	5162      	str	r2, [r4, r5]
 800551e:	604b      	str	r3, [r1, #4]
 8005520:	4630      	mov	r0, r6
 8005522:	f000 f82f 	bl	8005584 <__malloc_unlock>
 8005526:	f104 000b 	add.w	r0, r4, #11
 800552a:	1d23      	adds	r3, r4, #4
 800552c:	f020 0007 	bic.w	r0, r0, #7
 8005530:	1ac2      	subs	r2, r0, r3
 8005532:	bf1c      	itt	ne
 8005534:	1a1b      	subne	r3, r3, r0
 8005536:	50a3      	strne	r3, [r4, r2]
 8005538:	e7af      	b.n	800549a <_malloc_r+0x22>
 800553a:	6862      	ldr	r2, [r4, #4]
 800553c:	42a3      	cmp	r3, r4
 800553e:	bf0c      	ite	eq
 8005540:	f8c8 2000 	streq.w	r2, [r8]
 8005544:	605a      	strne	r2, [r3, #4]
 8005546:	e7eb      	b.n	8005520 <_malloc_r+0xa8>
 8005548:	4623      	mov	r3, r4
 800554a:	6864      	ldr	r4, [r4, #4]
 800554c:	e7ae      	b.n	80054ac <_malloc_r+0x34>
 800554e:	463c      	mov	r4, r7
 8005550:	687f      	ldr	r7, [r7, #4]
 8005552:	e7b6      	b.n	80054c2 <_malloc_r+0x4a>
 8005554:	461a      	mov	r2, r3
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	42a3      	cmp	r3, r4
 800555a:	d1fb      	bne.n	8005554 <_malloc_r+0xdc>
 800555c:	2300      	movs	r3, #0
 800555e:	6053      	str	r3, [r2, #4]
 8005560:	e7de      	b.n	8005520 <_malloc_r+0xa8>
 8005562:	230c      	movs	r3, #12
 8005564:	4630      	mov	r0, r6
 8005566:	6033      	str	r3, [r6, #0]
 8005568:	f000 f80c 	bl	8005584 <__malloc_unlock>
 800556c:	e794      	b.n	8005498 <_malloc_r+0x20>
 800556e:	6005      	str	r5, [r0, #0]
 8005570:	e7d6      	b.n	8005520 <_malloc_r+0xa8>
 8005572:	bf00      	nop
 8005574:	20000e28 	.word	0x20000e28

08005578 <__malloc_lock>:
 8005578:	4801      	ldr	r0, [pc, #4]	@ (8005580 <__malloc_lock+0x8>)
 800557a:	f7ff bf03 	b.w	8005384 <__retarget_lock_acquire_recursive>
 800557e:	bf00      	nop
 8005580:	20000e20 	.word	0x20000e20

08005584 <__malloc_unlock>:
 8005584:	4801      	ldr	r0, [pc, #4]	@ (800558c <__malloc_unlock+0x8>)
 8005586:	f7ff befe 	b.w	8005386 <__retarget_lock_release_recursive>
 800558a:	bf00      	nop
 800558c:	20000e20 	.word	0x20000e20

08005590 <__ssputs_r>:
 8005590:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005594:	461f      	mov	r7, r3
 8005596:	688e      	ldr	r6, [r1, #8]
 8005598:	4682      	mov	sl, r0
 800559a:	42be      	cmp	r6, r7
 800559c:	460c      	mov	r4, r1
 800559e:	4690      	mov	r8, r2
 80055a0:	680b      	ldr	r3, [r1, #0]
 80055a2:	d82d      	bhi.n	8005600 <__ssputs_r+0x70>
 80055a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80055a8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80055ac:	d026      	beq.n	80055fc <__ssputs_r+0x6c>
 80055ae:	6965      	ldr	r5, [r4, #20]
 80055b0:	6909      	ldr	r1, [r1, #16]
 80055b2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80055b6:	eba3 0901 	sub.w	r9, r3, r1
 80055ba:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80055be:	1c7b      	adds	r3, r7, #1
 80055c0:	444b      	add	r3, r9
 80055c2:	106d      	asrs	r5, r5, #1
 80055c4:	429d      	cmp	r5, r3
 80055c6:	bf38      	it	cc
 80055c8:	461d      	movcc	r5, r3
 80055ca:	0553      	lsls	r3, r2, #21
 80055cc:	d527      	bpl.n	800561e <__ssputs_r+0x8e>
 80055ce:	4629      	mov	r1, r5
 80055d0:	f7ff ff52 	bl	8005478 <_malloc_r>
 80055d4:	4606      	mov	r6, r0
 80055d6:	b360      	cbz	r0, 8005632 <__ssputs_r+0xa2>
 80055d8:	464a      	mov	r2, r9
 80055da:	6921      	ldr	r1, [r4, #16]
 80055dc:	f7ff fed4 	bl	8005388 <memcpy>
 80055e0:	89a3      	ldrh	r3, [r4, #12]
 80055e2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80055e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80055ea:	81a3      	strh	r3, [r4, #12]
 80055ec:	6126      	str	r6, [r4, #16]
 80055ee:	444e      	add	r6, r9
 80055f0:	6026      	str	r6, [r4, #0]
 80055f2:	463e      	mov	r6, r7
 80055f4:	6165      	str	r5, [r4, #20]
 80055f6:	eba5 0509 	sub.w	r5, r5, r9
 80055fa:	60a5      	str	r5, [r4, #8]
 80055fc:	42be      	cmp	r6, r7
 80055fe:	d900      	bls.n	8005602 <__ssputs_r+0x72>
 8005600:	463e      	mov	r6, r7
 8005602:	4632      	mov	r2, r6
 8005604:	4641      	mov	r1, r8
 8005606:	6820      	ldr	r0, [r4, #0]
 8005608:	f000 faac 	bl	8005b64 <memmove>
 800560c:	2000      	movs	r0, #0
 800560e:	68a3      	ldr	r3, [r4, #8]
 8005610:	1b9b      	subs	r3, r3, r6
 8005612:	60a3      	str	r3, [r4, #8]
 8005614:	6823      	ldr	r3, [r4, #0]
 8005616:	4433      	add	r3, r6
 8005618:	6023      	str	r3, [r4, #0]
 800561a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800561e:	462a      	mov	r2, r5
 8005620:	f000 fad8 	bl	8005bd4 <_realloc_r>
 8005624:	4606      	mov	r6, r0
 8005626:	2800      	cmp	r0, #0
 8005628:	d1e0      	bne.n	80055ec <__ssputs_r+0x5c>
 800562a:	4650      	mov	r0, sl
 800562c:	6921      	ldr	r1, [r4, #16]
 800562e:	f7ff feb9 	bl	80053a4 <_free_r>
 8005632:	230c      	movs	r3, #12
 8005634:	f8ca 3000 	str.w	r3, [sl]
 8005638:	89a3      	ldrh	r3, [r4, #12]
 800563a:	f04f 30ff 	mov.w	r0, #4294967295
 800563e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005642:	81a3      	strh	r3, [r4, #12]
 8005644:	e7e9      	b.n	800561a <__ssputs_r+0x8a>
	...

08005648 <_svfiprintf_r>:
 8005648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800564c:	4698      	mov	r8, r3
 800564e:	898b      	ldrh	r3, [r1, #12]
 8005650:	4607      	mov	r7, r0
 8005652:	061b      	lsls	r3, r3, #24
 8005654:	460d      	mov	r5, r1
 8005656:	4614      	mov	r4, r2
 8005658:	b09d      	sub	sp, #116	@ 0x74
 800565a:	d510      	bpl.n	800567e <_svfiprintf_r+0x36>
 800565c:	690b      	ldr	r3, [r1, #16]
 800565e:	b973      	cbnz	r3, 800567e <_svfiprintf_r+0x36>
 8005660:	2140      	movs	r1, #64	@ 0x40
 8005662:	f7ff ff09 	bl	8005478 <_malloc_r>
 8005666:	6028      	str	r0, [r5, #0]
 8005668:	6128      	str	r0, [r5, #16]
 800566a:	b930      	cbnz	r0, 800567a <_svfiprintf_r+0x32>
 800566c:	230c      	movs	r3, #12
 800566e:	603b      	str	r3, [r7, #0]
 8005670:	f04f 30ff 	mov.w	r0, #4294967295
 8005674:	b01d      	add	sp, #116	@ 0x74
 8005676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800567a:	2340      	movs	r3, #64	@ 0x40
 800567c:	616b      	str	r3, [r5, #20]
 800567e:	2300      	movs	r3, #0
 8005680:	9309      	str	r3, [sp, #36]	@ 0x24
 8005682:	2320      	movs	r3, #32
 8005684:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005688:	2330      	movs	r3, #48	@ 0x30
 800568a:	f04f 0901 	mov.w	r9, #1
 800568e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005692:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800582c <_svfiprintf_r+0x1e4>
 8005696:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800569a:	4623      	mov	r3, r4
 800569c:	469a      	mov	sl, r3
 800569e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80056a2:	b10a      	cbz	r2, 80056a8 <_svfiprintf_r+0x60>
 80056a4:	2a25      	cmp	r2, #37	@ 0x25
 80056a6:	d1f9      	bne.n	800569c <_svfiprintf_r+0x54>
 80056a8:	ebba 0b04 	subs.w	fp, sl, r4
 80056ac:	d00b      	beq.n	80056c6 <_svfiprintf_r+0x7e>
 80056ae:	465b      	mov	r3, fp
 80056b0:	4622      	mov	r2, r4
 80056b2:	4629      	mov	r1, r5
 80056b4:	4638      	mov	r0, r7
 80056b6:	f7ff ff6b 	bl	8005590 <__ssputs_r>
 80056ba:	3001      	adds	r0, #1
 80056bc:	f000 80a7 	beq.w	800580e <_svfiprintf_r+0x1c6>
 80056c0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80056c2:	445a      	add	r2, fp
 80056c4:	9209      	str	r2, [sp, #36]	@ 0x24
 80056c6:	f89a 3000 	ldrb.w	r3, [sl]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	f000 809f 	beq.w	800580e <_svfiprintf_r+0x1c6>
 80056d0:	2300      	movs	r3, #0
 80056d2:	f04f 32ff 	mov.w	r2, #4294967295
 80056d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80056da:	f10a 0a01 	add.w	sl, sl, #1
 80056de:	9304      	str	r3, [sp, #16]
 80056e0:	9307      	str	r3, [sp, #28]
 80056e2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80056e6:	931a      	str	r3, [sp, #104]	@ 0x68
 80056e8:	4654      	mov	r4, sl
 80056ea:	2205      	movs	r2, #5
 80056ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056f0:	484e      	ldr	r0, [pc, #312]	@ (800582c <_svfiprintf_r+0x1e4>)
 80056f2:	f000 fa61 	bl	8005bb8 <memchr>
 80056f6:	9a04      	ldr	r2, [sp, #16]
 80056f8:	b9d8      	cbnz	r0, 8005732 <_svfiprintf_r+0xea>
 80056fa:	06d0      	lsls	r0, r2, #27
 80056fc:	bf44      	itt	mi
 80056fe:	2320      	movmi	r3, #32
 8005700:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005704:	0711      	lsls	r1, r2, #28
 8005706:	bf44      	itt	mi
 8005708:	232b      	movmi	r3, #43	@ 0x2b
 800570a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800570e:	f89a 3000 	ldrb.w	r3, [sl]
 8005712:	2b2a      	cmp	r3, #42	@ 0x2a
 8005714:	d015      	beq.n	8005742 <_svfiprintf_r+0xfa>
 8005716:	4654      	mov	r4, sl
 8005718:	2000      	movs	r0, #0
 800571a:	f04f 0c0a 	mov.w	ip, #10
 800571e:	9a07      	ldr	r2, [sp, #28]
 8005720:	4621      	mov	r1, r4
 8005722:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005726:	3b30      	subs	r3, #48	@ 0x30
 8005728:	2b09      	cmp	r3, #9
 800572a:	d94b      	bls.n	80057c4 <_svfiprintf_r+0x17c>
 800572c:	b1b0      	cbz	r0, 800575c <_svfiprintf_r+0x114>
 800572e:	9207      	str	r2, [sp, #28]
 8005730:	e014      	b.n	800575c <_svfiprintf_r+0x114>
 8005732:	eba0 0308 	sub.w	r3, r0, r8
 8005736:	fa09 f303 	lsl.w	r3, r9, r3
 800573a:	4313      	orrs	r3, r2
 800573c:	46a2      	mov	sl, r4
 800573e:	9304      	str	r3, [sp, #16]
 8005740:	e7d2      	b.n	80056e8 <_svfiprintf_r+0xa0>
 8005742:	9b03      	ldr	r3, [sp, #12]
 8005744:	1d19      	adds	r1, r3, #4
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	9103      	str	r1, [sp, #12]
 800574a:	2b00      	cmp	r3, #0
 800574c:	bfbb      	ittet	lt
 800574e:	425b      	neglt	r3, r3
 8005750:	f042 0202 	orrlt.w	r2, r2, #2
 8005754:	9307      	strge	r3, [sp, #28]
 8005756:	9307      	strlt	r3, [sp, #28]
 8005758:	bfb8      	it	lt
 800575a:	9204      	strlt	r2, [sp, #16]
 800575c:	7823      	ldrb	r3, [r4, #0]
 800575e:	2b2e      	cmp	r3, #46	@ 0x2e
 8005760:	d10a      	bne.n	8005778 <_svfiprintf_r+0x130>
 8005762:	7863      	ldrb	r3, [r4, #1]
 8005764:	2b2a      	cmp	r3, #42	@ 0x2a
 8005766:	d132      	bne.n	80057ce <_svfiprintf_r+0x186>
 8005768:	9b03      	ldr	r3, [sp, #12]
 800576a:	3402      	adds	r4, #2
 800576c:	1d1a      	adds	r2, r3, #4
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	9203      	str	r2, [sp, #12]
 8005772:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005776:	9305      	str	r3, [sp, #20]
 8005778:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8005830 <_svfiprintf_r+0x1e8>
 800577c:	2203      	movs	r2, #3
 800577e:	4650      	mov	r0, sl
 8005780:	7821      	ldrb	r1, [r4, #0]
 8005782:	f000 fa19 	bl	8005bb8 <memchr>
 8005786:	b138      	cbz	r0, 8005798 <_svfiprintf_r+0x150>
 8005788:	2240      	movs	r2, #64	@ 0x40
 800578a:	9b04      	ldr	r3, [sp, #16]
 800578c:	eba0 000a 	sub.w	r0, r0, sl
 8005790:	4082      	lsls	r2, r0
 8005792:	4313      	orrs	r3, r2
 8005794:	3401      	adds	r4, #1
 8005796:	9304      	str	r3, [sp, #16]
 8005798:	f814 1b01 	ldrb.w	r1, [r4], #1
 800579c:	2206      	movs	r2, #6
 800579e:	4825      	ldr	r0, [pc, #148]	@ (8005834 <_svfiprintf_r+0x1ec>)
 80057a0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80057a4:	f000 fa08 	bl	8005bb8 <memchr>
 80057a8:	2800      	cmp	r0, #0
 80057aa:	d036      	beq.n	800581a <_svfiprintf_r+0x1d2>
 80057ac:	4b22      	ldr	r3, [pc, #136]	@ (8005838 <_svfiprintf_r+0x1f0>)
 80057ae:	bb1b      	cbnz	r3, 80057f8 <_svfiprintf_r+0x1b0>
 80057b0:	9b03      	ldr	r3, [sp, #12]
 80057b2:	3307      	adds	r3, #7
 80057b4:	f023 0307 	bic.w	r3, r3, #7
 80057b8:	3308      	adds	r3, #8
 80057ba:	9303      	str	r3, [sp, #12]
 80057bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80057be:	4433      	add	r3, r6
 80057c0:	9309      	str	r3, [sp, #36]	@ 0x24
 80057c2:	e76a      	b.n	800569a <_svfiprintf_r+0x52>
 80057c4:	460c      	mov	r4, r1
 80057c6:	2001      	movs	r0, #1
 80057c8:	fb0c 3202 	mla	r2, ip, r2, r3
 80057cc:	e7a8      	b.n	8005720 <_svfiprintf_r+0xd8>
 80057ce:	2300      	movs	r3, #0
 80057d0:	f04f 0c0a 	mov.w	ip, #10
 80057d4:	4619      	mov	r1, r3
 80057d6:	3401      	adds	r4, #1
 80057d8:	9305      	str	r3, [sp, #20]
 80057da:	4620      	mov	r0, r4
 80057dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80057e0:	3a30      	subs	r2, #48	@ 0x30
 80057e2:	2a09      	cmp	r2, #9
 80057e4:	d903      	bls.n	80057ee <_svfiprintf_r+0x1a6>
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d0c6      	beq.n	8005778 <_svfiprintf_r+0x130>
 80057ea:	9105      	str	r1, [sp, #20]
 80057ec:	e7c4      	b.n	8005778 <_svfiprintf_r+0x130>
 80057ee:	4604      	mov	r4, r0
 80057f0:	2301      	movs	r3, #1
 80057f2:	fb0c 2101 	mla	r1, ip, r1, r2
 80057f6:	e7f0      	b.n	80057da <_svfiprintf_r+0x192>
 80057f8:	ab03      	add	r3, sp, #12
 80057fa:	9300      	str	r3, [sp, #0]
 80057fc:	462a      	mov	r2, r5
 80057fe:	4638      	mov	r0, r7
 8005800:	4b0e      	ldr	r3, [pc, #56]	@ (800583c <_svfiprintf_r+0x1f4>)
 8005802:	a904      	add	r1, sp, #16
 8005804:	f3af 8000 	nop.w
 8005808:	1c42      	adds	r2, r0, #1
 800580a:	4606      	mov	r6, r0
 800580c:	d1d6      	bne.n	80057bc <_svfiprintf_r+0x174>
 800580e:	89ab      	ldrh	r3, [r5, #12]
 8005810:	065b      	lsls	r3, r3, #25
 8005812:	f53f af2d 	bmi.w	8005670 <_svfiprintf_r+0x28>
 8005816:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005818:	e72c      	b.n	8005674 <_svfiprintf_r+0x2c>
 800581a:	ab03      	add	r3, sp, #12
 800581c:	9300      	str	r3, [sp, #0]
 800581e:	462a      	mov	r2, r5
 8005820:	4638      	mov	r0, r7
 8005822:	4b06      	ldr	r3, [pc, #24]	@ (800583c <_svfiprintf_r+0x1f4>)
 8005824:	a904      	add	r1, sp, #16
 8005826:	f000 f87d 	bl	8005924 <_printf_i>
 800582a:	e7ed      	b.n	8005808 <_svfiprintf_r+0x1c0>
 800582c:	080060e6 	.word	0x080060e6
 8005830:	080060ec 	.word	0x080060ec
 8005834:	080060f0 	.word	0x080060f0
 8005838:	00000000 	.word	0x00000000
 800583c:	08005591 	.word	0x08005591

08005840 <_printf_common>:
 8005840:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005844:	4616      	mov	r6, r2
 8005846:	4698      	mov	r8, r3
 8005848:	688a      	ldr	r2, [r1, #8]
 800584a:	690b      	ldr	r3, [r1, #16]
 800584c:	4607      	mov	r7, r0
 800584e:	4293      	cmp	r3, r2
 8005850:	bfb8      	it	lt
 8005852:	4613      	movlt	r3, r2
 8005854:	6033      	str	r3, [r6, #0]
 8005856:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800585a:	460c      	mov	r4, r1
 800585c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005860:	b10a      	cbz	r2, 8005866 <_printf_common+0x26>
 8005862:	3301      	adds	r3, #1
 8005864:	6033      	str	r3, [r6, #0]
 8005866:	6823      	ldr	r3, [r4, #0]
 8005868:	0699      	lsls	r1, r3, #26
 800586a:	bf42      	ittt	mi
 800586c:	6833      	ldrmi	r3, [r6, #0]
 800586e:	3302      	addmi	r3, #2
 8005870:	6033      	strmi	r3, [r6, #0]
 8005872:	6825      	ldr	r5, [r4, #0]
 8005874:	f015 0506 	ands.w	r5, r5, #6
 8005878:	d106      	bne.n	8005888 <_printf_common+0x48>
 800587a:	f104 0a19 	add.w	sl, r4, #25
 800587e:	68e3      	ldr	r3, [r4, #12]
 8005880:	6832      	ldr	r2, [r6, #0]
 8005882:	1a9b      	subs	r3, r3, r2
 8005884:	42ab      	cmp	r3, r5
 8005886:	dc2b      	bgt.n	80058e0 <_printf_common+0xa0>
 8005888:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800588c:	6822      	ldr	r2, [r4, #0]
 800588e:	3b00      	subs	r3, #0
 8005890:	bf18      	it	ne
 8005892:	2301      	movne	r3, #1
 8005894:	0692      	lsls	r2, r2, #26
 8005896:	d430      	bmi.n	80058fa <_printf_common+0xba>
 8005898:	4641      	mov	r1, r8
 800589a:	4638      	mov	r0, r7
 800589c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80058a0:	47c8      	blx	r9
 80058a2:	3001      	adds	r0, #1
 80058a4:	d023      	beq.n	80058ee <_printf_common+0xae>
 80058a6:	6823      	ldr	r3, [r4, #0]
 80058a8:	6922      	ldr	r2, [r4, #16]
 80058aa:	f003 0306 	and.w	r3, r3, #6
 80058ae:	2b04      	cmp	r3, #4
 80058b0:	bf14      	ite	ne
 80058b2:	2500      	movne	r5, #0
 80058b4:	6833      	ldreq	r3, [r6, #0]
 80058b6:	f04f 0600 	mov.w	r6, #0
 80058ba:	bf08      	it	eq
 80058bc:	68e5      	ldreq	r5, [r4, #12]
 80058be:	f104 041a 	add.w	r4, r4, #26
 80058c2:	bf08      	it	eq
 80058c4:	1aed      	subeq	r5, r5, r3
 80058c6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80058ca:	bf08      	it	eq
 80058cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80058d0:	4293      	cmp	r3, r2
 80058d2:	bfc4      	itt	gt
 80058d4:	1a9b      	subgt	r3, r3, r2
 80058d6:	18ed      	addgt	r5, r5, r3
 80058d8:	42b5      	cmp	r5, r6
 80058da:	d11a      	bne.n	8005912 <_printf_common+0xd2>
 80058dc:	2000      	movs	r0, #0
 80058de:	e008      	b.n	80058f2 <_printf_common+0xb2>
 80058e0:	2301      	movs	r3, #1
 80058e2:	4652      	mov	r2, sl
 80058e4:	4641      	mov	r1, r8
 80058e6:	4638      	mov	r0, r7
 80058e8:	47c8      	blx	r9
 80058ea:	3001      	adds	r0, #1
 80058ec:	d103      	bne.n	80058f6 <_printf_common+0xb6>
 80058ee:	f04f 30ff 	mov.w	r0, #4294967295
 80058f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058f6:	3501      	adds	r5, #1
 80058f8:	e7c1      	b.n	800587e <_printf_common+0x3e>
 80058fa:	2030      	movs	r0, #48	@ 0x30
 80058fc:	18e1      	adds	r1, r4, r3
 80058fe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005902:	1c5a      	adds	r2, r3, #1
 8005904:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005908:	4422      	add	r2, r4
 800590a:	3302      	adds	r3, #2
 800590c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005910:	e7c2      	b.n	8005898 <_printf_common+0x58>
 8005912:	2301      	movs	r3, #1
 8005914:	4622      	mov	r2, r4
 8005916:	4641      	mov	r1, r8
 8005918:	4638      	mov	r0, r7
 800591a:	47c8      	blx	r9
 800591c:	3001      	adds	r0, #1
 800591e:	d0e6      	beq.n	80058ee <_printf_common+0xae>
 8005920:	3601      	adds	r6, #1
 8005922:	e7d9      	b.n	80058d8 <_printf_common+0x98>

08005924 <_printf_i>:
 8005924:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005928:	7e0f      	ldrb	r7, [r1, #24]
 800592a:	4691      	mov	r9, r2
 800592c:	2f78      	cmp	r7, #120	@ 0x78
 800592e:	4680      	mov	r8, r0
 8005930:	460c      	mov	r4, r1
 8005932:	469a      	mov	sl, r3
 8005934:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005936:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800593a:	d807      	bhi.n	800594c <_printf_i+0x28>
 800593c:	2f62      	cmp	r7, #98	@ 0x62
 800593e:	d80a      	bhi.n	8005956 <_printf_i+0x32>
 8005940:	2f00      	cmp	r7, #0
 8005942:	f000 80d3 	beq.w	8005aec <_printf_i+0x1c8>
 8005946:	2f58      	cmp	r7, #88	@ 0x58
 8005948:	f000 80ba 	beq.w	8005ac0 <_printf_i+0x19c>
 800594c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005950:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005954:	e03a      	b.n	80059cc <_printf_i+0xa8>
 8005956:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800595a:	2b15      	cmp	r3, #21
 800595c:	d8f6      	bhi.n	800594c <_printf_i+0x28>
 800595e:	a101      	add	r1, pc, #4	@ (adr r1, 8005964 <_printf_i+0x40>)
 8005960:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005964:	080059bd 	.word	0x080059bd
 8005968:	080059d1 	.word	0x080059d1
 800596c:	0800594d 	.word	0x0800594d
 8005970:	0800594d 	.word	0x0800594d
 8005974:	0800594d 	.word	0x0800594d
 8005978:	0800594d 	.word	0x0800594d
 800597c:	080059d1 	.word	0x080059d1
 8005980:	0800594d 	.word	0x0800594d
 8005984:	0800594d 	.word	0x0800594d
 8005988:	0800594d 	.word	0x0800594d
 800598c:	0800594d 	.word	0x0800594d
 8005990:	08005ad3 	.word	0x08005ad3
 8005994:	080059fb 	.word	0x080059fb
 8005998:	08005a8d 	.word	0x08005a8d
 800599c:	0800594d 	.word	0x0800594d
 80059a0:	0800594d 	.word	0x0800594d
 80059a4:	08005af5 	.word	0x08005af5
 80059a8:	0800594d 	.word	0x0800594d
 80059ac:	080059fb 	.word	0x080059fb
 80059b0:	0800594d 	.word	0x0800594d
 80059b4:	0800594d 	.word	0x0800594d
 80059b8:	08005a95 	.word	0x08005a95
 80059bc:	6833      	ldr	r3, [r6, #0]
 80059be:	1d1a      	adds	r2, r3, #4
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	6032      	str	r2, [r6, #0]
 80059c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80059c8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80059cc:	2301      	movs	r3, #1
 80059ce:	e09e      	b.n	8005b0e <_printf_i+0x1ea>
 80059d0:	6833      	ldr	r3, [r6, #0]
 80059d2:	6820      	ldr	r0, [r4, #0]
 80059d4:	1d19      	adds	r1, r3, #4
 80059d6:	6031      	str	r1, [r6, #0]
 80059d8:	0606      	lsls	r6, r0, #24
 80059da:	d501      	bpl.n	80059e0 <_printf_i+0xbc>
 80059dc:	681d      	ldr	r5, [r3, #0]
 80059de:	e003      	b.n	80059e8 <_printf_i+0xc4>
 80059e0:	0645      	lsls	r5, r0, #25
 80059e2:	d5fb      	bpl.n	80059dc <_printf_i+0xb8>
 80059e4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80059e8:	2d00      	cmp	r5, #0
 80059ea:	da03      	bge.n	80059f4 <_printf_i+0xd0>
 80059ec:	232d      	movs	r3, #45	@ 0x2d
 80059ee:	426d      	negs	r5, r5
 80059f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80059f4:	230a      	movs	r3, #10
 80059f6:	4859      	ldr	r0, [pc, #356]	@ (8005b5c <_printf_i+0x238>)
 80059f8:	e011      	b.n	8005a1e <_printf_i+0xfa>
 80059fa:	6821      	ldr	r1, [r4, #0]
 80059fc:	6833      	ldr	r3, [r6, #0]
 80059fe:	0608      	lsls	r0, r1, #24
 8005a00:	f853 5b04 	ldr.w	r5, [r3], #4
 8005a04:	d402      	bmi.n	8005a0c <_printf_i+0xe8>
 8005a06:	0649      	lsls	r1, r1, #25
 8005a08:	bf48      	it	mi
 8005a0a:	b2ad      	uxthmi	r5, r5
 8005a0c:	2f6f      	cmp	r7, #111	@ 0x6f
 8005a0e:	6033      	str	r3, [r6, #0]
 8005a10:	bf14      	ite	ne
 8005a12:	230a      	movne	r3, #10
 8005a14:	2308      	moveq	r3, #8
 8005a16:	4851      	ldr	r0, [pc, #324]	@ (8005b5c <_printf_i+0x238>)
 8005a18:	2100      	movs	r1, #0
 8005a1a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005a1e:	6866      	ldr	r6, [r4, #4]
 8005a20:	2e00      	cmp	r6, #0
 8005a22:	bfa8      	it	ge
 8005a24:	6821      	ldrge	r1, [r4, #0]
 8005a26:	60a6      	str	r6, [r4, #8]
 8005a28:	bfa4      	itt	ge
 8005a2a:	f021 0104 	bicge.w	r1, r1, #4
 8005a2e:	6021      	strge	r1, [r4, #0]
 8005a30:	b90d      	cbnz	r5, 8005a36 <_printf_i+0x112>
 8005a32:	2e00      	cmp	r6, #0
 8005a34:	d04b      	beq.n	8005ace <_printf_i+0x1aa>
 8005a36:	4616      	mov	r6, r2
 8005a38:	fbb5 f1f3 	udiv	r1, r5, r3
 8005a3c:	fb03 5711 	mls	r7, r3, r1, r5
 8005a40:	5dc7      	ldrb	r7, [r0, r7]
 8005a42:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005a46:	462f      	mov	r7, r5
 8005a48:	42bb      	cmp	r3, r7
 8005a4a:	460d      	mov	r5, r1
 8005a4c:	d9f4      	bls.n	8005a38 <_printf_i+0x114>
 8005a4e:	2b08      	cmp	r3, #8
 8005a50:	d10b      	bne.n	8005a6a <_printf_i+0x146>
 8005a52:	6823      	ldr	r3, [r4, #0]
 8005a54:	07df      	lsls	r7, r3, #31
 8005a56:	d508      	bpl.n	8005a6a <_printf_i+0x146>
 8005a58:	6923      	ldr	r3, [r4, #16]
 8005a5a:	6861      	ldr	r1, [r4, #4]
 8005a5c:	4299      	cmp	r1, r3
 8005a5e:	bfde      	ittt	le
 8005a60:	2330      	movle	r3, #48	@ 0x30
 8005a62:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005a66:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005a6a:	1b92      	subs	r2, r2, r6
 8005a6c:	6122      	str	r2, [r4, #16]
 8005a6e:	464b      	mov	r3, r9
 8005a70:	4621      	mov	r1, r4
 8005a72:	4640      	mov	r0, r8
 8005a74:	f8cd a000 	str.w	sl, [sp]
 8005a78:	aa03      	add	r2, sp, #12
 8005a7a:	f7ff fee1 	bl	8005840 <_printf_common>
 8005a7e:	3001      	adds	r0, #1
 8005a80:	d14a      	bne.n	8005b18 <_printf_i+0x1f4>
 8005a82:	f04f 30ff 	mov.w	r0, #4294967295
 8005a86:	b004      	add	sp, #16
 8005a88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a8c:	6823      	ldr	r3, [r4, #0]
 8005a8e:	f043 0320 	orr.w	r3, r3, #32
 8005a92:	6023      	str	r3, [r4, #0]
 8005a94:	2778      	movs	r7, #120	@ 0x78
 8005a96:	4832      	ldr	r0, [pc, #200]	@ (8005b60 <_printf_i+0x23c>)
 8005a98:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005a9c:	6823      	ldr	r3, [r4, #0]
 8005a9e:	6831      	ldr	r1, [r6, #0]
 8005aa0:	061f      	lsls	r7, r3, #24
 8005aa2:	f851 5b04 	ldr.w	r5, [r1], #4
 8005aa6:	d402      	bmi.n	8005aae <_printf_i+0x18a>
 8005aa8:	065f      	lsls	r7, r3, #25
 8005aaa:	bf48      	it	mi
 8005aac:	b2ad      	uxthmi	r5, r5
 8005aae:	6031      	str	r1, [r6, #0]
 8005ab0:	07d9      	lsls	r1, r3, #31
 8005ab2:	bf44      	itt	mi
 8005ab4:	f043 0320 	orrmi.w	r3, r3, #32
 8005ab8:	6023      	strmi	r3, [r4, #0]
 8005aba:	b11d      	cbz	r5, 8005ac4 <_printf_i+0x1a0>
 8005abc:	2310      	movs	r3, #16
 8005abe:	e7ab      	b.n	8005a18 <_printf_i+0xf4>
 8005ac0:	4826      	ldr	r0, [pc, #152]	@ (8005b5c <_printf_i+0x238>)
 8005ac2:	e7e9      	b.n	8005a98 <_printf_i+0x174>
 8005ac4:	6823      	ldr	r3, [r4, #0]
 8005ac6:	f023 0320 	bic.w	r3, r3, #32
 8005aca:	6023      	str	r3, [r4, #0]
 8005acc:	e7f6      	b.n	8005abc <_printf_i+0x198>
 8005ace:	4616      	mov	r6, r2
 8005ad0:	e7bd      	b.n	8005a4e <_printf_i+0x12a>
 8005ad2:	6833      	ldr	r3, [r6, #0]
 8005ad4:	6825      	ldr	r5, [r4, #0]
 8005ad6:	1d18      	adds	r0, r3, #4
 8005ad8:	6961      	ldr	r1, [r4, #20]
 8005ada:	6030      	str	r0, [r6, #0]
 8005adc:	062e      	lsls	r6, r5, #24
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	d501      	bpl.n	8005ae6 <_printf_i+0x1c2>
 8005ae2:	6019      	str	r1, [r3, #0]
 8005ae4:	e002      	b.n	8005aec <_printf_i+0x1c8>
 8005ae6:	0668      	lsls	r0, r5, #25
 8005ae8:	d5fb      	bpl.n	8005ae2 <_printf_i+0x1be>
 8005aea:	8019      	strh	r1, [r3, #0]
 8005aec:	2300      	movs	r3, #0
 8005aee:	4616      	mov	r6, r2
 8005af0:	6123      	str	r3, [r4, #16]
 8005af2:	e7bc      	b.n	8005a6e <_printf_i+0x14a>
 8005af4:	6833      	ldr	r3, [r6, #0]
 8005af6:	2100      	movs	r1, #0
 8005af8:	1d1a      	adds	r2, r3, #4
 8005afa:	6032      	str	r2, [r6, #0]
 8005afc:	681e      	ldr	r6, [r3, #0]
 8005afe:	6862      	ldr	r2, [r4, #4]
 8005b00:	4630      	mov	r0, r6
 8005b02:	f000 f859 	bl	8005bb8 <memchr>
 8005b06:	b108      	cbz	r0, 8005b0c <_printf_i+0x1e8>
 8005b08:	1b80      	subs	r0, r0, r6
 8005b0a:	6060      	str	r0, [r4, #4]
 8005b0c:	6863      	ldr	r3, [r4, #4]
 8005b0e:	6123      	str	r3, [r4, #16]
 8005b10:	2300      	movs	r3, #0
 8005b12:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005b16:	e7aa      	b.n	8005a6e <_printf_i+0x14a>
 8005b18:	4632      	mov	r2, r6
 8005b1a:	4649      	mov	r1, r9
 8005b1c:	4640      	mov	r0, r8
 8005b1e:	6923      	ldr	r3, [r4, #16]
 8005b20:	47d0      	blx	sl
 8005b22:	3001      	adds	r0, #1
 8005b24:	d0ad      	beq.n	8005a82 <_printf_i+0x15e>
 8005b26:	6823      	ldr	r3, [r4, #0]
 8005b28:	079b      	lsls	r3, r3, #30
 8005b2a:	d413      	bmi.n	8005b54 <_printf_i+0x230>
 8005b2c:	68e0      	ldr	r0, [r4, #12]
 8005b2e:	9b03      	ldr	r3, [sp, #12]
 8005b30:	4298      	cmp	r0, r3
 8005b32:	bfb8      	it	lt
 8005b34:	4618      	movlt	r0, r3
 8005b36:	e7a6      	b.n	8005a86 <_printf_i+0x162>
 8005b38:	2301      	movs	r3, #1
 8005b3a:	4632      	mov	r2, r6
 8005b3c:	4649      	mov	r1, r9
 8005b3e:	4640      	mov	r0, r8
 8005b40:	47d0      	blx	sl
 8005b42:	3001      	adds	r0, #1
 8005b44:	d09d      	beq.n	8005a82 <_printf_i+0x15e>
 8005b46:	3501      	adds	r5, #1
 8005b48:	68e3      	ldr	r3, [r4, #12]
 8005b4a:	9903      	ldr	r1, [sp, #12]
 8005b4c:	1a5b      	subs	r3, r3, r1
 8005b4e:	42ab      	cmp	r3, r5
 8005b50:	dcf2      	bgt.n	8005b38 <_printf_i+0x214>
 8005b52:	e7eb      	b.n	8005b2c <_printf_i+0x208>
 8005b54:	2500      	movs	r5, #0
 8005b56:	f104 0619 	add.w	r6, r4, #25
 8005b5a:	e7f5      	b.n	8005b48 <_printf_i+0x224>
 8005b5c:	080060f7 	.word	0x080060f7
 8005b60:	08006108 	.word	0x08006108

08005b64 <memmove>:
 8005b64:	4288      	cmp	r0, r1
 8005b66:	b510      	push	{r4, lr}
 8005b68:	eb01 0402 	add.w	r4, r1, r2
 8005b6c:	d902      	bls.n	8005b74 <memmove+0x10>
 8005b6e:	4284      	cmp	r4, r0
 8005b70:	4623      	mov	r3, r4
 8005b72:	d807      	bhi.n	8005b84 <memmove+0x20>
 8005b74:	1e43      	subs	r3, r0, #1
 8005b76:	42a1      	cmp	r1, r4
 8005b78:	d008      	beq.n	8005b8c <memmove+0x28>
 8005b7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005b7e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005b82:	e7f8      	b.n	8005b76 <memmove+0x12>
 8005b84:	4601      	mov	r1, r0
 8005b86:	4402      	add	r2, r0
 8005b88:	428a      	cmp	r2, r1
 8005b8a:	d100      	bne.n	8005b8e <memmove+0x2a>
 8005b8c:	bd10      	pop	{r4, pc}
 8005b8e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005b92:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005b96:	e7f7      	b.n	8005b88 <memmove+0x24>

08005b98 <_sbrk_r>:
 8005b98:	b538      	push	{r3, r4, r5, lr}
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	4d05      	ldr	r5, [pc, #20]	@ (8005bb4 <_sbrk_r+0x1c>)
 8005b9e:	4604      	mov	r4, r0
 8005ba0:	4608      	mov	r0, r1
 8005ba2:	602b      	str	r3, [r5, #0]
 8005ba4:	f7fa fbb6 	bl	8000314 <_sbrk>
 8005ba8:	1c43      	adds	r3, r0, #1
 8005baa:	d102      	bne.n	8005bb2 <_sbrk_r+0x1a>
 8005bac:	682b      	ldr	r3, [r5, #0]
 8005bae:	b103      	cbz	r3, 8005bb2 <_sbrk_r+0x1a>
 8005bb0:	6023      	str	r3, [r4, #0]
 8005bb2:	bd38      	pop	{r3, r4, r5, pc}
 8005bb4:	20000e1c 	.word	0x20000e1c

08005bb8 <memchr>:
 8005bb8:	4603      	mov	r3, r0
 8005bba:	b510      	push	{r4, lr}
 8005bbc:	b2c9      	uxtb	r1, r1
 8005bbe:	4402      	add	r2, r0
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	d101      	bne.n	8005bca <memchr+0x12>
 8005bc6:	2000      	movs	r0, #0
 8005bc8:	e003      	b.n	8005bd2 <memchr+0x1a>
 8005bca:	7804      	ldrb	r4, [r0, #0]
 8005bcc:	3301      	adds	r3, #1
 8005bce:	428c      	cmp	r4, r1
 8005bd0:	d1f6      	bne.n	8005bc0 <memchr+0x8>
 8005bd2:	bd10      	pop	{r4, pc}

08005bd4 <_realloc_r>:
 8005bd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bd8:	4680      	mov	r8, r0
 8005bda:	4615      	mov	r5, r2
 8005bdc:	460c      	mov	r4, r1
 8005bde:	b921      	cbnz	r1, 8005bea <_realloc_r+0x16>
 8005be0:	4611      	mov	r1, r2
 8005be2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005be6:	f7ff bc47 	b.w	8005478 <_malloc_r>
 8005bea:	b92a      	cbnz	r2, 8005bf8 <_realloc_r+0x24>
 8005bec:	f7ff fbda 	bl	80053a4 <_free_r>
 8005bf0:	2400      	movs	r4, #0
 8005bf2:	4620      	mov	r0, r4
 8005bf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005bf8:	f000 f81a 	bl	8005c30 <_malloc_usable_size_r>
 8005bfc:	4285      	cmp	r5, r0
 8005bfe:	4606      	mov	r6, r0
 8005c00:	d802      	bhi.n	8005c08 <_realloc_r+0x34>
 8005c02:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005c06:	d8f4      	bhi.n	8005bf2 <_realloc_r+0x1e>
 8005c08:	4629      	mov	r1, r5
 8005c0a:	4640      	mov	r0, r8
 8005c0c:	f7ff fc34 	bl	8005478 <_malloc_r>
 8005c10:	4607      	mov	r7, r0
 8005c12:	2800      	cmp	r0, #0
 8005c14:	d0ec      	beq.n	8005bf0 <_realloc_r+0x1c>
 8005c16:	42b5      	cmp	r5, r6
 8005c18:	462a      	mov	r2, r5
 8005c1a:	4621      	mov	r1, r4
 8005c1c:	bf28      	it	cs
 8005c1e:	4632      	movcs	r2, r6
 8005c20:	f7ff fbb2 	bl	8005388 <memcpy>
 8005c24:	4621      	mov	r1, r4
 8005c26:	4640      	mov	r0, r8
 8005c28:	f7ff fbbc 	bl	80053a4 <_free_r>
 8005c2c:	463c      	mov	r4, r7
 8005c2e:	e7e0      	b.n	8005bf2 <_realloc_r+0x1e>

08005c30 <_malloc_usable_size_r>:
 8005c30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c34:	1f18      	subs	r0, r3, #4
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	bfbc      	itt	lt
 8005c3a:	580b      	ldrlt	r3, [r1, r0]
 8005c3c:	18c0      	addlt	r0, r0, r3
 8005c3e:	4770      	bx	lr

08005c40 <_init>:
 8005c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c42:	bf00      	nop
 8005c44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c46:	bc08      	pop	{r3}
 8005c48:	469e      	mov	lr, r3
 8005c4a:	4770      	bx	lr

08005c4c <_fini>:
 8005c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c4e:	bf00      	nop
 8005c50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c52:	bc08      	pop	{r3}
 8005c54:	469e      	mov	lr, r3
 8005c56:	4770      	bx	lr
