
CCT_Uphole_V1.2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ac8  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c4  08005cac  08005cac  00006cac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006170  08006170  00008060  2**0
                  CONTENTS
  4 .ARM          00000000  08006170  08006170  00008060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006170  08006170  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006170  08006170  00007170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006174  08006174  00007174  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08006178  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d88  20000060  080061d8  00008060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000de8  080061d8  00008de8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e2cd  00000000  00000000  00008089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029cb  00000000  00000000  00016356  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ea0  00000000  00000000  00018d28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b4c  00000000  00000000  00019bc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b833  00000000  00000000  0001a714  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000151b1  00000000  00000000  00035f47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a44a  00000000  00000000  0004b0f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e5542  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003fac  00000000  00000000  000e5588  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000e9534  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000060 	.word	0x20000060
 8000200:	00000000 	.word	0x00000000
 8000204:	08005c94 	.word	0x08005c94

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000064 	.word	0x20000064
 8000220:	08005c94 	.word	0x08005c94

08000224 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000224:	b480      	push	{r7}
 8000226:	b085      	sub	sp, #20
 8000228:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800022a:	4b13      	ldr	r3, [pc, #76]	@ (8000278 <HAL_MspInit+0x54>)
 800022c:	699b      	ldr	r3, [r3, #24]
 800022e:	4a12      	ldr	r2, [pc, #72]	@ (8000278 <HAL_MspInit+0x54>)
 8000230:	f043 0301 	orr.w	r3, r3, #1
 8000234:	6193      	str	r3, [r2, #24]
 8000236:	4b10      	ldr	r3, [pc, #64]	@ (8000278 <HAL_MspInit+0x54>)
 8000238:	699b      	ldr	r3, [r3, #24]
 800023a:	f003 0301 	and.w	r3, r3, #1
 800023e:	60bb      	str	r3, [r7, #8]
 8000240:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000242:	4b0d      	ldr	r3, [pc, #52]	@ (8000278 <HAL_MspInit+0x54>)
 8000244:	69db      	ldr	r3, [r3, #28]
 8000246:	4a0c      	ldr	r2, [pc, #48]	@ (8000278 <HAL_MspInit+0x54>)
 8000248:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800024c:	61d3      	str	r3, [r2, #28]
 800024e:	4b0a      	ldr	r3, [pc, #40]	@ (8000278 <HAL_MspInit+0x54>)
 8000250:	69db      	ldr	r3, [r3, #28]
 8000252:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000256:	607b      	str	r3, [r7, #4]
 8000258:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** ENABLE: Full SWJ (JTAG-DP + SW-DP): Reset State
  */
  __HAL_AFIO_REMAP_SWJ_ENABLE();
 800025a:	4b08      	ldr	r3, [pc, #32]	@ (800027c <HAL_MspInit+0x58>)
 800025c:	685b      	ldr	r3, [r3, #4]
 800025e:	60fb      	str	r3, [r7, #12]
 8000260:	68fb      	ldr	r3, [r7, #12]
 8000262:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000266:	60fb      	str	r3, [r7, #12]
 8000268:	4a04      	ldr	r2, [pc, #16]	@ (800027c <HAL_MspInit+0x58>)
 800026a:	68fb      	ldr	r3, [r7, #12]
 800026c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800026e:	bf00      	nop
 8000270:	3714      	adds	r7, #20
 8000272:	46bd      	mov	sp, r7
 8000274:	bc80      	pop	{r7}
 8000276:	4770      	bx	lr
 8000278:	40021000 	.word	0x40021000
 800027c:	40010000 	.word	0x40010000

08000280 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000280:	b480      	push	{r7}
 8000282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000284:	bf00      	nop
 8000286:	e7fd      	b.n	8000284 <NMI_Handler+0x4>

08000288 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000288:	b480      	push	{r7}
 800028a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800028c:	bf00      	nop
 800028e:	e7fd      	b.n	800028c <HardFault_Handler+0x4>

08000290 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000290:	b480      	push	{r7}
 8000292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000294:	bf00      	nop
 8000296:	e7fd      	b.n	8000294 <MemManage_Handler+0x4>

08000298 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000298:	b480      	push	{r7}
 800029a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800029c:	bf00      	nop
 800029e:	e7fd      	b.n	800029c <BusFault_Handler+0x4>

080002a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80002a0:	b480      	push	{r7}
 80002a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80002a4:	bf00      	nop
 80002a6:	e7fd      	b.n	80002a4 <UsageFault_Handler+0x4>

080002a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80002a8:	b480      	push	{r7}
 80002aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80002ac:	bf00      	nop
 80002ae:	46bd      	mov	sp, r7
 80002b0:	bc80      	pop	{r7}
 80002b2:	4770      	bx	lr

080002b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80002b4:	b480      	push	{r7}
 80002b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80002b8:	bf00      	nop
 80002ba:	46bd      	mov	sp, r7
 80002bc:	bc80      	pop	{r7}
 80002be:	4770      	bx	lr

080002c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80002c0:	b480      	push	{r7}
 80002c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80002c4:	bf00      	nop
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bc80      	pop	{r7}
 80002ca:	4770      	bx	lr

080002cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80002d0:	f002 f9b0 	bl	8002634 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80002d4:	bf00      	nop
 80002d6:	bd80      	pop	{r7, pc}

080002d8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80002dc:	4802      	ldr	r0, [pc, #8]	@ (80002e8 <USART1_IRQHandler+0x10>)
 80002de:	f004 f9cf 	bl	8004680 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80002e2:	bf00      	nop
 80002e4:	bd80      	pop	{r7, pc}
 80002e6:	bf00      	nop
 80002e8:	200001a8 	.word	0x200001a8

080002ec <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80002f0:	4802      	ldr	r0, [pc, #8]	@ (80002fc <UART5_IRQHandler+0x10>)
 80002f2:	f004 f9c5 	bl	8004680 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80002f6:	bf00      	nop
 80002f8:	bd80      	pop	{r7, pc}
 80002fa:	bf00      	nop
 80002fc:	20000160 	.word	0x20000160

08000300 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000304:	4802      	ldr	r0, [pc, #8]	@ (8000310 <TIM6_IRQHandler+0x10>)
 8000306:	f003 fe33 	bl	8003f70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 800030a:	bf00      	nop
 800030c:	bd80      	pop	{r7, pc}
 800030e:	bf00      	nop
 8000310:	200000bc 	.word	0x200000bc

08000314 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b086      	sub	sp, #24
 8000318:	af00      	add	r7, sp, #0
 800031a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800031c:	4a14      	ldr	r2, [pc, #80]	@ (8000370 <_sbrk+0x5c>)
 800031e:	4b15      	ldr	r3, [pc, #84]	@ (8000374 <_sbrk+0x60>)
 8000320:	1ad3      	subs	r3, r2, r3
 8000322:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000324:	697b      	ldr	r3, [r7, #20]
 8000326:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000328:	4b13      	ldr	r3, [pc, #76]	@ (8000378 <_sbrk+0x64>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	2b00      	cmp	r3, #0
 800032e:	d102      	bne.n	8000336 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000330:	4b11      	ldr	r3, [pc, #68]	@ (8000378 <_sbrk+0x64>)
 8000332:	4a12      	ldr	r2, [pc, #72]	@ (800037c <_sbrk+0x68>)
 8000334:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000336:	4b10      	ldr	r3, [pc, #64]	@ (8000378 <_sbrk+0x64>)
 8000338:	681a      	ldr	r2, [r3, #0]
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	4413      	add	r3, r2
 800033e:	693a      	ldr	r2, [r7, #16]
 8000340:	429a      	cmp	r2, r3
 8000342:	d207      	bcs.n	8000354 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000344:	f005 f81e 	bl	8005384 <__errno>
 8000348:	4603      	mov	r3, r0
 800034a:	220c      	movs	r2, #12
 800034c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800034e:	f04f 33ff 	mov.w	r3, #4294967295
 8000352:	e009      	b.n	8000368 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000354:	4b08      	ldr	r3, [pc, #32]	@ (8000378 <_sbrk+0x64>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800035a:	4b07      	ldr	r3, [pc, #28]	@ (8000378 <_sbrk+0x64>)
 800035c:	681a      	ldr	r2, [r3, #0]
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	4413      	add	r3, r2
 8000362:	4a05      	ldr	r2, [pc, #20]	@ (8000378 <_sbrk+0x64>)
 8000364:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000366:	68fb      	ldr	r3, [r7, #12]
}
 8000368:	4618      	mov	r0, r3
 800036a:	3718      	adds	r7, #24
 800036c:	46bd      	mov	sp, r7
 800036e:	bd80      	pop	{r7, pc}
 8000370:	20010000 	.word	0x20010000
 8000374:	00000400 	.word	0x00000400
 8000378:	2000007c 	.word	0x2000007c
 800037c:	20000de8 	.word	0x20000de8

08000380 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000380:	b480      	push	{r7}
 8000382:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000384:	bf00      	nop
 8000386:	46bd      	mov	sp, r7
 8000388:	bc80      	pop	{r7}
 800038a:	4770      	bx	lr

0800038c <MX_DMA_Init>:
 *      Author: CMY
 */
#include "main.h"

void MX_DMA_Init(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b082      	sub	sp, #8
 8000390:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000392:	4b0c      	ldr	r3, [pc, #48]	@ (80003c4 <MX_DMA_Init+0x38>)
 8000394:	695b      	ldr	r3, [r3, #20]
 8000396:	4a0b      	ldr	r2, [pc, #44]	@ (80003c4 <MX_DMA_Init+0x38>)
 8000398:	f043 0301 	orr.w	r3, r3, #1
 800039c:	6153      	str	r3, [r2, #20]
 800039e:	4b09      	ldr	r3, [pc, #36]	@ (80003c4 <MX_DMA_Init+0x38>)
 80003a0:	695b      	ldr	r3, [r3, #20]
 80003a2:	f003 0301 	and.w	r3, r3, #1
 80003a6:	607b      	str	r3, [r7, #4]
 80003a8:	687b      	ldr	r3, [r7, #4]

 // __HAL_RCC_DMA2_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80003aa:	2200      	movs	r2, #0
 80003ac:	2100      	movs	r1, #0
 80003ae:	200e      	movs	r0, #14
 80003b0:	f002 fa33 	bl	800281a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80003b4:	200e      	movs	r0, #14
 80003b6:	f002 fa4c 	bl	8002852 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel4_5_IRQn interrupt configuration */

  /*HAL_NVIC_SetPriority(DMA2_Channel4_5_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(DMA2_Channel4_5_IRQn);*/

}
 80003ba:	bf00      	nop
 80003bc:	3708      	adds	r7, #8
 80003be:	46bd      	mov	sp, r7
 80003c0:	bd80      	pop	{r7, pc}
 80003c2:	bf00      	nop
 80003c4:	40021000 	.word	0x40021000

080003c8 <FPGA_init>:


unsigned char fp_online;

void FPGA_init(void)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b082      	sub	sp, #8
 80003cc:	af00      	add	r7, sp, #0
	while(fp_online != 0x11)
 80003ce:	e01b      	b.n	8000408 <FPGA_init+0x40>
	{
		fp_online = Fpga_Read(0x00);
 80003d0:	2000      	movs	r0, #0
 80003d2:	f000 f825 	bl	8000420 <Fpga_Read>
 80003d6:	4603      	mov	r3, r0
 80003d8:	461a      	mov	r2, r3
 80003da:	4b10      	ldr	r3, [pc, #64]	@ (800041c <FPGA_init+0x54>)
 80003dc:	701a      	strb	r2, [r3, #0]

		for(unsigned short i=0;i<1000;i++)
 80003de:	2300      	movs	r3, #0
 80003e0:	80fb      	strh	r3, [r7, #6]
 80003e2:	e00d      	b.n	8000400 <FPGA_init+0x38>
		{
			for(unsigned short j=0;j<10000;j++);
 80003e4:	2300      	movs	r3, #0
 80003e6:	80bb      	strh	r3, [r7, #4]
 80003e8:	e002      	b.n	80003f0 <FPGA_init+0x28>
 80003ea:	88bb      	ldrh	r3, [r7, #4]
 80003ec:	3301      	adds	r3, #1
 80003ee:	80bb      	strh	r3, [r7, #4]
 80003f0:	88bb      	ldrh	r3, [r7, #4]
 80003f2:	f242 720f 	movw	r2, #9999	@ 0x270f
 80003f6:	4293      	cmp	r3, r2
 80003f8:	d9f7      	bls.n	80003ea <FPGA_init+0x22>
		for(unsigned short i=0;i<1000;i++)
 80003fa:	88fb      	ldrh	r3, [r7, #6]
 80003fc:	3301      	adds	r3, #1
 80003fe:	80fb      	strh	r3, [r7, #6]
 8000400:	88fb      	ldrh	r3, [r7, #6]
 8000402:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000406:	d3ed      	bcc.n	80003e4 <FPGA_init+0x1c>
	while(fp_online != 0x11)
 8000408:	4b04      	ldr	r3, [pc, #16]	@ (800041c <FPGA_init+0x54>)
 800040a:	781b      	ldrb	r3, [r3, #0]
 800040c:	2b11      	cmp	r3, #17
 800040e:	d1df      	bne.n	80003d0 <FPGA_init+0x8>
		}
	}
	Write_Fir_Parameter();
 8000410:	f000 fa7c 	bl	800090c <Write_Fir_Parameter>
}
 8000414:	bf00      	nop
 8000416:	3708      	adds	r7, #8
 8000418:	46bd      	mov	sp, r7
 800041a:	bd80      	pop	{r7, pc}
 800041c:	20000090 	.word	0x20000090

08000420 <Fpga_Read>:

unsigned char Fpga_Read(unsigned char addRead)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b086      	sub	sp, #24
 8000424:	af00      	add	r7, sp, #0
 8000426:	4603      	mov	r3, r0
 8000428:	71fb      	strb	r3, [r7, #7]
	unsigned char data,A,B,C,D,E,F,G,H;

	/*-----------------------地址&片选初始化，读时为输出----------------------------*/

	GPIO_InitStruct.Pin = ADDR0_Pin|ADDR1_Pin|ADDR2_Pin|ADDR3_Pin|MCU_CS_Pin;
 800042a:	4b8b      	ldr	r3, [pc, #556]	@ (8000658 <Fpga_Read+0x238>)
 800042c:	223d      	movs	r2, #61	@ 0x3d
 800042e:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000430:	4b89      	ldr	r3, [pc, #548]	@ (8000658 <Fpga_Read+0x238>)
 8000432:	2201      	movs	r2, #1
 8000434:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000436:	4b88      	ldr	r3, [pc, #544]	@ (8000658 <Fpga_Read+0x238>)
 8000438:	2200      	movs	r2, #0
 800043a:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800043c:	4b86      	ldr	r3, [pc, #536]	@ (8000658 <Fpga_Read+0x238>)
 800043e:	2203      	movs	r2, #3
 8000440:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000442:	4985      	ldr	r1, [pc, #532]	@ (8000658 <Fpga_Read+0x238>)
 8000444:	4885      	ldr	r0, [pc, #532]	@ (800065c <Fpga_Read+0x23c>)
 8000446:	f002 fea3 	bl	8003190 <HAL_GPIO_Init>

	/*-----------------------读写初始化，读时为输出---------------------------------*/

	GPIO_InitStruct.Pin = MCU_WR_Pin;
 800044a:	4b83      	ldr	r3, [pc, #524]	@ (8000658 <Fpga_Read+0x238>)
 800044c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000450:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000452:	4b81      	ldr	r3, [pc, #516]	@ (8000658 <Fpga_Read+0x238>)
 8000454:	2201      	movs	r2, #1
 8000456:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000458:	4b7f      	ldr	r3, [pc, #508]	@ (8000658 <Fpga_Read+0x238>)
 800045a:	2200      	movs	r2, #0
 800045c:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800045e:	4b7e      	ldr	r3, [pc, #504]	@ (8000658 <Fpga_Read+0x238>)
 8000460:	2203      	movs	r2, #3
 8000462:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000464:	497c      	ldr	r1, [pc, #496]	@ (8000658 <Fpga_Read+0x238>)
 8000466:	487e      	ldr	r0, [pc, #504]	@ (8000660 <Fpga_Read+0x240>)
 8000468:	f002 fe92 	bl	8003190 <HAL_GPIO_Init>

	/*-----------------------数据初始化，读时为输入---------------------------------*/

	GPIO_InitStruct.Pin = DATA1_Pin|DATA0_Pin;
 800046c:	4b7a      	ldr	r3, [pc, #488]	@ (8000658 <Fpga_Read+0x238>)
 800046e:	f241 0204 	movw	r2, #4100	@ 0x1004
 8000472:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000474:	4b78      	ldr	r3, [pc, #480]	@ (8000658 <Fpga_Read+0x238>)
 8000476:	2200      	movs	r2, #0
 8000478:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800047a:	4b77      	ldr	r3, [pc, #476]	@ (8000658 <Fpga_Read+0x238>)
 800047c:	2200      	movs	r2, #0
 800047e:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000480:	4b75      	ldr	r3, [pc, #468]	@ (8000658 <Fpga_Read+0x238>)
 8000482:	2203      	movs	r2, #3
 8000484:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000486:	4974      	ldr	r1, [pc, #464]	@ (8000658 <Fpga_Read+0x238>)
 8000488:	4875      	ldr	r0, [pc, #468]	@ (8000660 <Fpga_Read+0x240>)
 800048a:	f002 fe81 	bl	8003190 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = DATA2_Pin;
 800048e:	4b72      	ldr	r3, [pc, #456]	@ (8000658 <Fpga_Read+0x238>)
 8000490:	2208      	movs	r2, #8
 8000492:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000494:	4b70      	ldr	r3, [pc, #448]	@ (8000658 <Fpga_Read+0x238>)
 8000496:	2200      	movs	r2, #0
 8000498:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800049a:	4b6f      	ldr	r3, [pc, #444]	@ (8000658 <Fpga_Read+0x238>)
 800049c:	2200      	movs	r2, #0
 800049e:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004a0:	4b6d      	ldr	r3, [pc, #436]	@ (8000658 <Fpga_Read+0x238>)
 80004a2:	2202      	movs	r2, #2
 80004a4:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(DATA2_GPIO_Port, &GPIO_InitStruct);
 80004a6:	496c      	ldr	r1, [pc, #432]	@ (8000658 <Fpga_Read+0x238>)
 80004a8:	486d      	ldr	r0, [pc, #436]	@ (8000660 <Fpga_Read+0x240>)
 80004aa:	f002 fe71 	bl	8003190 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = DATA3_Pin|DATA4_Pin;
 80004ae:	4b6a      	ldr	r3, [pc, #424]	@ (8000658 <Fpga_Read+0x238>)
 80004b0:	2248      	movs	r2, #72	@ 0x48
 80004b2:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004b4:	4b68      	ldr	r3, [pc, #416]	@ (8000658 <Fpga_Read+0x238>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ba:	4b67      	ldr	r3, [pc, #412]	@ (8000658 <Fpga_Read+0x238>)
 80004bc:	2200      	movs	r2, #0
 80004be:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004c0:	4b65      	ldr	r3, [pc, #404]	@ (8000658 <Fpga_Read+0x238>)
 80004c2:	2203      	movs	r2, #3
 80004c4:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80004c6:	4964      	ldr	r1, [pc, #400]	@ (8000658 <Fpga_Read+0x238>)
 80004c8:	4866      	ldr	r0, [pc, #408]	@ (8000664 <Fpga_Read+0x244>)
 80004ca:	f002 fe61 	bl	8003190 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = DATA5_Pin|DATA6_Pin|DATA7_Pin;
 80004ce:	4b62      	ldr	r3, [pc, #392]	@ (8000658 <Fpga_Read+0x238>)
 80004d0:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80004d4:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004d6:	4b60      	ldr	r3, [pc, #384]	@ (8000658 <Fpga_Read+0x238>)
 80004d8:	2200      	movs	r2, #0
 80004da:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004dc:	4b5e      	ldr	r3, [pc, #376]	@ (8000658 <Fpga_Read+0x238>)
 80004de:	2200      	movs	r2, #0
 80004e0:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004e2:	4b5d      	ldr	r3, [pc, #372]	@ (8000658 <Fpga_Read+0x238>)
 80004e4:	2203      	movs	r2, #3
 80004e6:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004e8:	495b      	ldr	r1, [pc, #364]	@ (8000658 <Fpga_Read+0x238>)
 80004ea:	485f      	ldr	r0, [pc, #380]	@ (8000668 <Fpga_Read+0x248>)
 80004ec:	f002 fe50 	bl	8003190 <HAL_GPIO_Init>


	HAL_GPIO_WritePin(MCU_WR_GPIO_Port,MCU_WR_Pin,GPIO_PIN_RESET);			//读:WR拉低
 80004f0:	2200      	movs	r2, #0
 80004f2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80004f6:	485a      	ldr	r0, [pc, #360]	@ (8000660 <Fpga_Read+0x240>)
 80004f8:	f002 fff5 	bl	80034e6 <HAL_GPIO_WritePin>

	if(addRead & 0x08)
 80004fc:	79fb      	ldrb	r3, [r7, #7]
 80004fe:	f003 0308 	and.w	r3, r3, #8
 8000502:	2b00      	cmp	r3, #0
 8000504:	d005      	beq.n	8000512 <Fpga_Read+0xf2>
		HAL_GPIO_WritePin(ADDR3_GPIO_Port,ADDR3_Pin,GPIO_PIN_SET);
 8000506:	2201      	movs	r2, #1
 8000508:	2120      	movs	r1, #32
 800050a:	4854      	ldr	r0, [pc, #336]	@ (800065c <Fpga_Read+0x23c>)
 800050c:	f002 ffeb 	bl	80034e6 <HAL_GPIO_WritePin>
 8000510:	e004      	b.n	800051c <Fpga_Read+0xfc>
	else
		HAL_GPIO_WritePin(ADDR3_GPIO_Port,ADDR3_Pin,GPIO_PIN_RESET);
 8000512:	2200      	movs	r2, #0
 8000514:	2120      	movs	r1, #32
 8000516:	4851      	ldr	r0, [pc, #324]	@ (800065c <Fpga_Read+0x23c>)
 8000518:	f002 ffe5 	bl	80034e6 <HAL_GPIO_WritePin>

	if(addRead & 0x04)
 800051c:	79fb      	ldrb	r3, [r7, #7]
 800051e:	f003 0304 	and.w	r3, r3, #4
 8000522:	2b00      	cmp	r3, #0
 8000524:	d005      	beq.n	8000532 <Fpga_Read+0x112>
		HAL_GPIO_WritePin(ADDR2_GPIO_Port,ADDR2_Pin,GPIO_PIN_SET);
 8000526:	2201      	movs	r2, #1
 8000528:	2110      	movs	r1, #16
 800052a:	484c      	ldr	r0, [pc, #304]	@ (800065c <Fpga_Read+0x23c>)
 800052c:	f002 ffdb 	bl	80034e6 <HAL_GPIO_WritePin>
 8000530:	e004      	b.n	800053c <Fpga_Read+0x11c>
	else
		HAL_GPIO_WritePin(ADDR2_GPIO_Port,ADDR2_Pin,GPIO_PIN_RESET);		//例:addRead = d'6/b'0110,  ADDR3=0,ADDR2=1,ADDR1=1;ADDR0=0
 8000532:	2200      	movs	r2, #0
 8000534:	2110      	movs	r1, #16
 8000536:	4849      	ldr	r0, [pc, #292]	@ (800065c <Fpga_Read+0x23c>)
 8000538:	f002 ffd5 	bl	80034e6 <HAL_GPIO_WritePin>

	if(addRead & 0x02)
 800053c:	79fb      	ldrb	r3, [r7, #7]
 800053e:	f003 0302 	and.w	r3, r3, #2
 8000542:	2b00      	cmp	r3, #0
 8000544:	d005      	beq.n	8000552 <Fpga_Read+0x132>
		HAL_GPIO_WritePin(ADDR1_GPIO_Port,ADDR1_Pin,GPIO_PIN_SET);
 8000546:	2201      	movs	r2, #1
 8000548:	2108      	movs	r1, #8
 800054a:	4844      	ldr	r0, [pc, #272]	@ (800065c <Fpga_Read+0x23c>)
 800054c:	f002 ffcb 	bl	80034e6 <HAL_GPIO_WritePin>
 8000550:	e004      	b.n	800055c <Fpga_Read+0x13c>
	else
		HAL_GPIO_WritePin(ADDR1_GPIO_Port,ADDR1_Pin,GPIO_PIN_RESET);
 8000552:	2200      	movs	r2, #0
 8000554:	2108      	movs	r1, #8
 8000556:	4841      	ldr	r0, [pc, #260]	@ (800065c <Fpga_Read+0x23c>)
 8000558:	f002 ffc5 	bl	80034e6 <HAL_GPIO_WritePin>

	if(addRead & 0x01)
 800055c:	79fb      	ldrb	r3, [r7, #7]
 800055e:	f003 0301 	and.w	r3, r3, #1
 8000562:	2b00      	cmp	r3, #0
 8000564:	d005      	beq.n	8000572 <Fpga_Read+0x152>
		HAL_GPIO_WritePin(ADDR0_GPIO_Port,ADDR0_Pin,GPIO_PIN_SET);
 8000566:	2201      	movs	r2, #1
 8000568:	2104      	movs	r1, #4
 800056a:	483c      	ldr	r0, [pc, #240]	@ (800065c <Fpga_Read+0x23c>)
 800056c:	f002 ffbb 	bl	80034e6 <HAL_GPIO_WritePin>
 8000570:	e004      	b.n	800057c <Fpga_Read+0x15c>
	else
		HAL_GPIO_WritePin(ADDR0_GPIO_Port,ADDR0_Pin,GPIO_PIN_RESET);
 8000572:	2200      	movs	r2, #0
 8000574:	2104      	movs	r1, #4
 8000576:	4839      	ldr	r0, [pc, #228]	@ (800065c <Fpga_Read+0x23c>)
 8000578:	f002 ffb5 	bl	80034e6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(MCU_CS_GPIO_Port,MCU_CS_Pin,GPIO_PIN_RESET);			//片选拉低
 800057c:	2200      	movs	r2, #0
 800057e:	2101      	movs	r1, #1
 8000580:	4836      	ldr	r0, [pc, #216]	@ (800065c <Fpga_Read+0x23c>)
 8000582:	f002 ffb0 	bl	80034e6 <HAL_GPIO_WritePin>

	A = HAL_GPIO_ReadPin(DATA0_GPIO_Port,DATA0_Pin);
 8000586:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800058a:	4835      	ldr	r0, [pc, #212]	@ (8000660 <Fpga_Read+0x240>)
 800058c:	f002 ff94 	bl	80034b8 <HAL_GPIO_ReadPin>
 8000590:	4603      	mov	r3, r0
 8000592:	75fb      	strb	r3, [r7, #23]
	B = HAL_GPIO_ReadPin(DATA1_GPIO_Port,DATA1_Pin);
 8000594:	2104      	movs	r1, #4
 8000596:	4832      	ldr	r0, [pc, #200]	@ (8000660 <Fpga_Read+0x240>)
 8000598:	f002 ff8e 	bl	80034b8 <HAL_GPIO_ReadPin>
 800059c:	4603      	mov	r3, r0
 800059e:	75bb      	strb	r3, [r7, #22]
	C = HAL_GPIO_ReadPin(DATA2_GPIO_Port,DATA2_Pin);
 80005a0:	2108      	movs	r1, #8
 80005a2:	482f      	ldr	r0, [pc, #188]	@ (8000660 <Fpga_Read+0x240>)
 80005a4:	f002 ff88 	bl	80034b8 <HAL_GPIO_ReadPin>
 80005a8:	4603      	mov	r3, r0
 80005aa:	757b      	strb	r3, [r7, #21]
	D = HAL_GPIO_ReadPin(DATA3_GPIO_Port,DATA3_Pin);
 80005ac:	2108      	movs	r1, #8
 80005ae:	482d      	ldr	r0, [pc, #180]	@ (8000664 <Fpga_Read+0x244>)
 80005b0:	f002 ff82 	bl	80034b8 <HAL_GPIO_ReadPin>
 80005b4:	4603      	mov	r3, r0
 80005b6:	753b      	strb	r3, [r7, #20]
	E = HAL_GPIO_ReadPin(DATA4_GPIO_Port,DATA4_Pin);
 80005b8:	2140      	movs	r1, #64	@ 0x40
 80005ba:	482a      	ldr	r0, [pc, #168]	@ (8000664 <Fpga_Read+0x244>)
 80005bc:	f002 ff7c 	bl	80034b8 <HAL_GPIO_ReadPin>
 80005c0:	4603      	mov	r3, r0
 80005c2:	74fb      	strb	r3, [r7, #19]
	F = HAL_GPIO_ReadPin(DATA5_GPIO_Port,DATA5_Pin);
 80005c4:	2120      	movs	r1, #32
 80005c6:	4828      	ldr	r0, [pc, #160]	@ (8000668 <Fpga_Read+0x248>)
 80005c8:	f002 ff76 	bl	80034b8 <HAL_GPIO_ReadPin>
 80005cc:	4603      	mov	r3, r0
 80005ce:	74bb      	strb	r3, [r7, #18]
	G = HAL_GPIO_ReadPin(DATA6_GPIO_Port,DATA6_Pin);
 80005d0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005d4:	4824      	ldr	r0, [pc, #144]	@ (8000668 <Fpga_Read+0x248>)
 80005d6:	f002 ff6f 	bl	80034b8 <HAL_GPIO_ReadPin>
 80005da:	4603      	mov	r3, r0
 80005dc:	747b      	strb	r3, [r7, #17]
	H = HAL_GPIO_ReadPin(DATA7_GPIO_Port,DATA7_Pin);
 80005de:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80005e2:	4821      	ldr	r0, [pc, #132]	@ (8000668 <Fpga_Read+0x248>)
 80005e4:	f002 ff68 	bl	80034b8 <HAL_GPIO_ReadPin>
 80005e8:	4603      	mov	r3, r0
 80005ea:	743b      	strb	r3, [r7, #16]

	HAL_GPIO_WritePin(MCU_CS_GPIO_Port,MCU_CS_Pin,GPIO_PIN_SET);			//片选拉高
 80005ec:	2201      	movs	r2, #1
 80005ee:	2101      	movs	r1, #1
 80005f0:	481a      	ldr	r0, [pc, #104]	@ (800065c <Fpga_Read+0x23c>)
 80005f2:	f002 ff78 	bl	80034e6 <HAL_GPIO_WritePin>

	data =  H<<7;
 80005f6:	7c3b      	ldrb	r3, [r7, #16]
 80005f8:	01db      	lsls	r3, r3, #7
 80005fa:	73fb      	strb	r3, [r7, #15]
	data += G<<6;
 80005fc:	7c7b      	ldrb	r3, [r7, #17]
 80005fe:	019b      	lsls	r3, r3, #6
 8000600:	b2da      	uxtb	r2, r3
 8000602:	7bfb      	ldrb	r3, [r7, #15]
 8000604:	4413      	add	r3, r2
 8000606:	73fb      	strb	r3, [r7, #15]
	data += F<<5;
 8000608:	7cbb      	ldrb	r3, [r7, #18]
 800060a:	015b      	lsls	r3, r3, #5
 800060c:	b2da      	uxtb	r2, r3
 800060e:	7bfb      	ldrb	r3, [r7, #15]
 8000610:	4413      	add	r3, r2
 8000612:	73fb      	strb	r3, [r7, #15]
	data += E<<4;
 8000614:	7cfb      	ldrb	r3, [r7, #19]
 8000616:	011b      	lsls	r3, r3, #4
 8000618:	b2da      	uxtb	r2, r3
 800061a:	7bfb      	ldrb	r3, [r7, #15]
 800061c:	4413      	add	r3, r2
 800061e:	73fb      	strb	r3, [r7, #15]
	data += D<<3;
 8000620:	7d3b      	ldrb	r3, [r7, #20]
 8000622:	00db      	lsls	r3, r3, #3
 8000624:	b2da      	uxtb	r2, r3
 8000626:	7bfb      	ldrb	r3, [r7, #15]
 8000628:	4413      	add	r3, r2
 800062a:	73fb      	strb	r3, [r7, #15]
	data += C<<2;
 800062c:	7d7b      	ldrb	r3, [r7, #21]
 800062e:	009b      	lsls	r3, r3, #2
 8000630:	b2da      	uxtb	r2, r3
 8000632:	7bfb      	ldrb	r3, [r7, #15]
 8000634:	4413      	add	r3, r2
 8000636:	73fb      	strb	r3, [r7, #15]
	data += B<<1;
 8000638:	7dbb      	ldrb	r3, [r7, #22]
 800063a:	005b      	lsls	r3, r3, #1
 800063c:	b2da      	uxtb	r2, r3
 800063e:	7bfb      	ldrb	r3, [r7, #15]
 8000640:	4413      	add	r3, r2
 8000642:	73fb      	strb	r3, [r7, #15]
	data += A;
 8000644:	7bfa      	ldrb	r2, [r7, #15]
 8000646:	7dfb      	ldrb	r3, [r7, #23]
 8000648:	4413      	add	r3, r2
 800064a:	73fb      	strb	r3, [r7, #15]

	return data;
 800064c:	7bfb      	ldrb	r3, [r7, #15]
}
 800064e:	4618      	mov	r0, r3
 8000650:	3718      	adds	r7, #24
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	20000080 	.word	0x20000080
 800065c:	40011800 	.word	0x40011800
 8000660:	40010800 	.word	0x40010800
 8000664:	40011400 	.word	0x40011400
 8000668:	40010c00 	.word	0x40010c00

0800066c <Fpga_Write>:

void Fpga_Write(unsigned char addWrite,unsigned char Data)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
 8000672:	4603      	mov	r3, r0
 8000674:	460a      	mov	r2, r1
 8000676:	71fb      	strb	r3, [r7, #7]
 8000678:	4613      	mov	r3, r2
 800067a:	71bb      	strb	r3, [r7, #6]

	/*------------------------------数据，写时为输出---------------------------------*/

	GPIO_InitStruct.Pin = DATA1_Pin|DATA0_Pin|DATA2_Pin;
 800067c:	4b9e      	ldr	r3, [pc, #632]	@ (80008f8 <Fpga_Write+0x28c>)
 800067e:	f241 020c 	movw	r2, #4108	@ 0x100c
 8000682:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000684:	4b9c      	ldr	r3, [pc, #624]	@ (80008f8 <Fpga_Write+0x28c>)
 8000686:	2201      	movs	r2, #1
 8000688:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068a:	4b9b      	ldr	r3, [pc, #620]	@ (80008f8 <Fpga_Write+0x28c>)
 800068c:	2200      	movs	r2, #0
 800068e:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000690:	4b99      	ldr	r3, [pc, #612]	@ (80008f8 <Fpga_Write+0x28c>)
 8000692:	2203      	movs	r2, #3
 8000694:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000696:	4998      	ldr	r1, [pc, #608]	@ (80008f8 <Fpga_Write+0x28c>)
 8000698:	4898      	ldr	r0, [pc, #608]	@ (80008fc <Fpga_Write+0x290>)
 800069a:	f002 fd79 	bl	8003190 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = DATA3_Pin|DATA4_Pin;
 800069e:	4b96      	ldr	r3, [pc, #600]	@ (80008f8 <Fpga_Write+0x28c>)
 80006a0:	2248      	movs	r2, #72	@ 0x48
 80006a2:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a4:	4b94      	ldr	r3, [pc, #592]	@ (80008f8 <Fpga_Write+0x28c>)
 80006a6:	2201      	movs	r2, #1
 80006a8:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006aa:	4b93      	ldr	r3, [pc, #588]	@ (80008f8 <Fpga_Write+0x28c>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006b0:	4b91      	ldr	r3, [pc, #580]	@ (80008f8 <Fpga_Write+0x28c>)
 80006b2:	2203      	movs	r2, #3
 80006b4:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006b6:	4990      	ldr	r1, [pc, #576]	@ (80008f8 <Fpga_Write+0x28c>)
 80006b8:	4891      	ldr	r0, [pc, #580]	@ (8000900 <Fpga_Write+0x294>)
 80006ba:	f002 fd69 	bl	8003190 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = DATA5_Pin|DATA6_Pin|DATA7_Pin;
 80006be:	4b8e      	ldr	r3, [pc, #568]	@ (80008f8 <Fpga_Write+0x28c>)
 80006c0:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80006c4:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c6:	4b8c      	ldr	r3, [pc, #560]	@ (80008f8 <Fpga_Write+0x28c>)
 80006c8:	2201      	movs	r2, #1
 80006ca:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006cc:	4b8a      	ldr	r3, [pc, #552]	@ (80008f8 <Fpga_Write+0x28c>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006d2:	4b89      	ldr	r3, [pc, #548]	@ (80008f8 <Fpga_Write+0x28c>)
 80006d4:	2203      	movs	r2, #3
 80006d6:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006d8:	4987      	ldr	r1, [pc, #540]	@ (80008f8 <Fpga_Write+0x28c>)
 80006da:	488a      	ldr	r0, [pc, #552]	@ (8000904 <Fpga_Write+0x298>)
 80006dc:	f002 fd58 	bl	8003190 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(MCU_WR_GPIO_Port,MCU_WR_Pin,GPIO_PIN_SET);			//写:WR拉高
 80006e0:	2201      	movs	r2, #1
 80006e2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80006e6:	4885      	ldr	r0, [pc, #532]	@ (80008fc <Fpga_Write+0x290>)
 80006e8:	f002 fefd 	bl	80034e6 <HAL_GPIO_WritePin>

	/*----------------------4位地址--------------------------------*/
	if(addWrite & 0x08)
 80006ec:	79fb      	ldrb	r3, [r7, #7]
 80006ee:	f003 0308 	and.w	r3, r3, #8
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d005      	beq.n	8000702 <Fpga_Write+0x96>
		HAL_GPIO_WritePin(ADDR3_GPIO_Port,ADDR3_Pin,GPIO_PIN_SET);
 80006f6:	2201      	movs	r2, #1
 80006f8:	2120      	movs	r1, #32
 80006fa:	4883      	ldr	r0, [pc, #524]	@ (8000908 <Fpga_Write+0x29c>)
 80006fc:	f002 fef3 	bl	80034e6 <HAL_GPIO_WritePin>
 8000700:	e004      	b.n	800070c <Fpga_Write+0xa0>
	else
		HAL_GPIO_WritePin(ADDR3_GPIO_Port,ADDR3_Pin,GPIO_PIN_RESET);
 8000702:	2200      	movs	r2, #0
 8000704:	2120      	movs	r1, #32
 8000706:	4880      	ldr	r0, [pc, #512]	@ (8000908 <Fpga_Write+0x29c>)
 8000708:	f002 feed 	bl	80034e6 <HAL_GPIO_WritePin>

	if(addWrite & 0x04)
 800070c:	79fb      	ldrb	r3, [r7, #7]
 800070e:	f003 0304 	and.w	r3, r3, #4
 8000712:	2b00      	cmp	r3, #0
 8000714:	d005      	beq.n	8000722 <Fpga_Write+0xb6>
		HAL_GPIO_WritePin(ADDR2_GPIO_Port,ADDR2_Pin,GPIO_PIN_SET);
 8000716:	2201      	movs	r2, #1
 8000718:	2110      	movs	r1, #16
 800071a:	487b      	ldr	r0, [pc, #492]	@ (8000908 <Fpga_Write+0x29c>)
 800071c:	f002 fee3 	bl	80034e6 <HAL_GPIO_WritePin>
 8000720:	e004      	b.n	800072c <Fpga_Write+0xc0>
	else
		HAL_GPIO_WritePin(ADDR2_GPIO_Port,ADDR2_Pin,GPIO_PIN_RESET);		//例:addRead = d'6/b'0110,  ADDR3=0,ADDR2=1,ADDR1=1;ADDR0=0
 8000722:	2200      	movs	r2, #0
 8000724:	2110      	movs	r1, #16
 8000726:	4878      	ldr	r0, [pc, #480]	@ (8000908 <Fpga_Write+0x29c>)
 8000728:	f002 fedd 	bl	80034e6 <HAL_GPIO_WritePin>

	if(addWrite & 0x02)
 800072c:	79fb      	ldrb	r3, [r7, #7]
 800072e:	f003 0302 	and.w	r3, r3, #2
 8000732:	2b00      	cmp	r3, #0
 8000734:	d005      	beq.n	8000742 <Fpga_Write+0xd6>
		HAL_GPIO_WritePin(ADDR1_GPIO_Port,ADDR1_Pin,GPIO_PIN_SET);
 8000736:	2201      	movs	r2, #1
 8000738:	2108      	movs	r1, #8
 800073a:	4873      	ldr	r0, [pc, #460]	@ (8000908 <Fpga_Write+0x29c>)
 800073c:	f002 fed3 	bl	80034e6 <HAL_GPIO_WritePin>
 8000740:	e004      	b.n	800074c <Fpga_Write+0xe0>
	else
		HAL_GPIO_WritePin(ADDR1_GPIO_Port,ADDR1_Pin,GPIO_PIN_RESET);
 8000742:	2200      	movs	r2, #0
 8000744:	2108      	movs	r1, #8
 8000746:	4870      	ldr	r0, [pc, #448]	@ (8000908 <Fpga_Write+0x29c>)
 8000748:	f002 fecd 	bl	80034e6 <HAL_GPIO_WritePin>

	if(addWrite & 0x01)
 800074c:	79fb      	ldrb	r3, [r7, #7]
 800074e:	f003 0301 	and.w	r3, r3, #1
 8000752:	2b00      	cmp	r3, #0
 8000754:	d005      	beq.n	8000762 <Fpga_Write+0xf6>
		HAL_GPIO_WritePin(ADDR0_GPIO_Port,ADDR0_Pin,GPIO_PIN_SET);
 8000756:	2201      	movs	r2, #1
 8000758:	2104      	movs	r1, #4
 800075a:	486b      	ldr	r0, [pc, #428]	@ (8000908 <Fpga_Write+0x29c>)
 800075c:	f002 fec3 	bl	80034e6 <HAL_GPIO_WritePin>
 8000760:	e004      	b.n	800076c <Fpga_Write+0x100>
	else
		HAL_GPIO_WritePin(ADDR0_GPIO_Port,ADDR0_Pin,GPIO_PIN_RESET);
 8000762:	2200      	movs	r2, #0
 8000764:	2104      	movs	r1, #4
 8000766:	4868      	ldr	r0, [pc, #416]	@ (8000908 <Fpga_Write+0x29c>)
 8000768:	f002 febd 	bl	80034e6 <HAL_GPIO_WritePin>

	/*----------------------8位数据--------------------------------*/
	if(Data & 0x80)
 800076c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000770:	2b00      	cmp	r3, #0
 8000772:	da06      	bge.n	8000782 <Fpga_Write+0x116>
		HAL_GPIO_WritePin(DATA7_GPIO_Port,DATA7_Pin,GPIO_PIN_SET);
 8000774:	2201      	movs	r2, #1
 8000776:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800077a:	4862      	ldr	r0, [pc, #392]	@ (8000904 <Fpga_Write+0x298>)
 800077c:	f002 feb3 	bl	80034e6 <HAL_GPIO_WritePin>
 8000780:	e005      	b.n	800078e <Fpga_Write+0x122>
	else
		HAL_GPIO_WritePin(DATA7_GPIO_Port,DATA7_Pin,GPIO_PIN_RESET);
 8000782:	2200      	movs	r2, #0
 8000784:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000788:	485e      	ldr	r0, [pc, #376]	@ (8000904 <Fpga_Write+0x298>)
 800078a:	f002 feac 	bl	80034e6 <HAL_GPIO_WritePin>

	if(Data & 0x40)
 800078e:	79bb      	ldrb	r3, [r7, #6]
 8000790:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000794:	2b00      	cmp	r3, #0
 8000796:	d006      	beq.n	80007a6 <Fpga_Write+0x13a>
		HAL_GPIO_WritePin(DATA6_GPIO_Port,DATA6_Pin,GPIO_PIN_SET);
 8000798:	2201      	movs	r2, #1
 800079a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800079e:	4859      	ldr	r0, [pc, #356]	@ (8000904 <Fpga_Write+0x298>)
 80007a0:	f002 fea1 	bl	80034e6 <HAL_GPIO_WritePin>
 80007a4:	e005      	b.n	80007b2 <Fpga_Write+0x146>
	else
		HAL_GPIO_WritePin(DATA6_GPIO_Port,DATA6_Pin,GPIO_PIN_RESET);
 80007a6:	2200      	movs	r2, #0
 80007a8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80007ac:	4855      	ldr	r0, [pc, #340]	@ (8000904 <Fpga_Write+0x298>)
 80007ae:	f002 fe9a 	bl	80034e6 <HAL_GPIO_WritePin>

	if(Data & 0x20)
 80007b2:	79bb      	ldrb	r3, [r7, #6]
 80007b4:	f003 0320 	and.w	r3, r3, #32
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d005      	beq.n	80007c8 <Fpga_Write+0x15c>
		HAL_GPIO_WritePin(DATA5_GPIO_Port,DATA5_Pin,GPIO_PIN_SET);
 80007bc:	2201      	movs	r2, #1
 80007be:	2120      	movs	r1, #32
 80007c0:	4850      	ldr	r0, [pc, #320]	@ (8000904 <Fpga_Write+0x298>)
 80007c2:	f002 fe90 	bl	80034e6 <HAL_GPIO_WritePin>
 80007c6:	e004      	b.n	80007d2 <Fpga_Write+0x166>
	else
		HAL_GPIO_WritePin(DATA5_GPIO_Port,DATA5_Pin,GPIO_PIN_RESET);
 80007c8:	2200      	movs	r2, #0
 80007ca:	2120      	movs	r1, #32
 80007cc:	484d      	ldr	r0, [pc, #308]	@ (8000904 <Fpga_Write+0x298>)
 80007ce:	f002 fe8a 	bl	80034e6 <HAL_GPIO_WritePin>

	if(Data & 0x10)
 80007d2:	79bb      	ldrb	r3, [r7, #6]
 80007d4:	f003 0310 	and.w	r3, r3, #16
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d005      	beq.n	80007e8 <Fpga_Write+0x17c>
		HAL_GPIO_WritePin(DATA4_GPIO_Port,DATA4_Pin,GPIO_PIN_SET);
 80007dc:	2201      	movs	r2, #1
 80007de:	2140      	movs	r1, #64	@ 0x40
 80007e0:	4847      	ldr	r0, [pc, #284]	@ (8000900 <Fpga_Write+0x294>)
 80007e2:	f002 fe80 	bl	80034e6 <HAL_GPIO_WritePin>
 80007e6:	e004      	b.n	80007f2 <Fpga_Write+0x186>
	else
		HAL_GPIO_WritePin(DATA4_GPIO_Port,DATA4_Pin,GPIO_PIN_RESET);
 80007e8:	2200      	movs	r2, #0
 80007ea:	2140      	movs	r1, #64	@ 0x40
 80007ec:	4844      	ldr	r0, [pc, #272]	@ (8000900 <Fpga_Write+0x294>)
 80007ee:	f002 fe7a 	bl	80034e6 <HAL_GPIO_WritePin>



	if(Data & 0x08)
 80007f2:	79bb      	ldrb	r3, [r7, #6]
 80007f4:	f003 0308 	and.w	r3, r3, #8
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d005      	beq.n	8000808 <Fpga_Write+0x19c>
		HAL_GPIO_WritePin(DATA3_GPIO_Port,DATA3_Pin,GPIO_PIN_SET);
 80007fc:	2201      	movs	r2, #1
 80007fe:	2108      	movs	r1, #8
 8000800:	483f      	ldr	r0, [pc, #252]	@ (8000900 <Fpga_Write+0x294>)
 8000802:	f002 fe70 	bl	80034e6 <HAL_GPIO_WritePin>
 8000806:	e004      	b.n	8000812 <Fpga_Write+0x1a6>
	else
		HAL_GPIO_WritePin(DATA3_GPIO_Port,DATA3_Pin,GPIO_PIN_RESET);
 8000808:	2200      	movs	r2, #0
 800080a:	2108      	movs	r1, #8
 800080c:	483c      	ldr	r0, [pc, #240]	@ (8000900 <Fpga_Write+0x294>)
 800080e:	f002 fe6a 	bl	80034e6 <HAL_GPIO_WritePin>

	if(Data & 0x04)
 8000812:	79bb      	ldrb	r3, [r7, #6]
 8000814:	f003 0304 	and.w	r3, r3, #4
 8000818:	2b00      	cmp	r3, #0
 800081a:	d005      	beq.n	8000828 <Fpga_Write+0x1bc>
		HAL_GPIO_WritePin(DATA2_GPIO_Port,DATA2_Pin,GPIO_PIN_SET);
 800081c:	2201      	movs	r2, #1
 800081e:	2108      	movs	r1, #8
 8000820:	4836      	ldr	r0, [pc, #216]	@ (80008fc <Fpga_Write+0x290>)
 8000822:	f002 fe60 	bl	80034e6 <HAL_GPIO_WritePin>
 8000826:	e004      	b.n	8000832 <Fpga_Write+0x1c6>
	else
		HAL_GPIO_WritePin(DATA2_GPIO_Port,DATA2_Pin,GPIO_PIN_RESET);
 8000828:	2200      	movs	r2, #0
 800082a:	2108      	movs	r1, #8
 800082c:	4833      	ldr	r0, [pc, #204]	@ (80008fc <Fpga_Write+0x290>)
 800082e:	f002 fe5a 	bl	80034e6 <HAL_GPIO_WritePin>

	if(Data & 0x02)
 8000832:	79bb      	ldrb	r3, [r7, #6]
 8000834:	f003 0302 	and.w	r3, r3, #2
 8000838:	2b00      	cmp	r3, #0
 800083a:	d005      	beq.n	8000848 <Fpga_Write+0x1dc>
		HAL_GPIO_WritePin(DATA1_GPIO_Port,DATA1_Pin,GPIO_PIN_SET);
 800083c:	2201      	movs	r2, #1
 800083e:	2104      	movs	r1, #4
 8000840:	482e      	ldr	r0, [pc, #184]	@ (80008fc <Fpga_Write+0x290>)
 8000842:	f002 fe50 	bl	80034e6 <HAL_GPIO_WritePin>
 8000846:	e004      	b.n	8000852 <Fpga_Write+0x1e6>
	else
		HAL_GPIO_WritePin(DATA1_GPIO_Port,DATA1_Pin,GPIO_PIN_RESET);
 8000848:	2200      	movs	r2, #0
 800084a:	2104      	movs	r1, #4
 800084c:	482b      	ldr	r0, [pc, #172]	@ (80008fc <Fpga_Write+0x290>)
 800084e:	f002 fe4a 	bl	80034e6 <HAL_GPIO_WritePin>

	if(Data & 0x01)
 8000852:	79bb      	ldrb	r3, [r7, #6]
 8000854:	f003 0301 	and.w	r3, r3, #1
 8000858:	2b00      	cmp	r3, #0
 800085a:	d006      	beq.n	800086a <Fpga_Write+0x1fe>
		HAL_GPIO_WritePin(DATA0_GPIO_Port,DATA0_Pin,GPIO_PIN_SET);
 800085c:	2201      	movs	r2, #1
 800085e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000862:	4826      	ldr	r0, [pc, #152]	@ (80008fc <Fpga_Write+0x290>)
 8000864:	f002 fe3f 	bl	80034e6 <HAL_GPIO_WritePin>
 8000868:	e005      	b.n	8000876 <Fpga_Write+0x20a>
	else
		HAL_GPIO_WritePin(DATA0_GPIO_Port,DATA0_Pin,GPIO_PIN_RESET);
 800086a:	2200      	movs	r2, #0
 800086c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000870:	4822      	ldr	r0, [pc, #136]	@ (80008fc <Fpga_Write+0x290>)
 8000872:	f002 fe38 	bl	80034e6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(MCU_CS_GPIO_Port,MCU_CS_Pin,GPIO_PIN_RESET);			//片选拉低
 8000876:	2200      	movs	r2, #0
 8000878:	2101      	movs	r1, #1
 800087a:	4823      	ldr	r0, [pc, #140]	@ (8000908 <Fpga_Write+0x29c>)
 800087c:	f002 fe33 	bl	80034e6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(MCU_CS_GPIO_Port,MCU_CS_Pin,GPIO_PIN_SET);			//片选拉高
 8000880:	2201      	movs	r2, #1
 8000882:	2101      	movs	r1, #1
 8000884:	4820      	ldr	r0, [pc, #128]	@ (8000908 <Fpga_Write+0x29c>)
 8000886:	f002 fe2e 	bl	80034e6 <HAL_GPIO_WritePin>


	GPIO_InitStruct.Pin = DATA1_Pin|DATA0_Pin|DATA2_Pin;
 800088a:	4b1b      	ldr	r3, [pc, #108]	@ (80008f8 <Fpga_Write+0x28c>)
 800088c:	f241 020c 	movw	r2, #4108	@ 0x100c
 8000890:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000892:	4b19      	ldr	r3, [pc, #100]	@ (80008f8 <Fpga_Write+0x28c>)
 8000894:	2200      	movs	r2, #0
 8000896:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000898:	4b17      	ldr	r3, [pc, #92]	@ (80008f8 <Fpga_Write+0x28c>)
 800089a:	2200      	movs	r2, #0
 800089c:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800089e:	4b16      	ldr	r3, [pc, #88]	@ (80008f8 <Fpga_Write+0x28c>)
 80008a0:	2203      	movs	r2, #3
 80008a2:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a4:	4914      	ldr	r1, [pc, #80]	@ (80008f8 <Fpga_Write+0x28c>)
 80008a6:	4815      	ldr	r0, [pc, #84]	@ (80008fc <Fpga_Write+0x290>)
 80008a8:	f002 fc72 	bl	8003190 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = DATA3_Pin|DATA4_Pin;
 80008ac:	4b12      	ldr	r3, [pc, #72]	@ (80008f8 <Fpga_Write+0x28c>)
 80008ae:	2248      	movs	r2, #72	@ 0x48
 80008b0:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008b2:	4b11      	ldr	r3, [pc, #68]	@ (80008f8 <Fpga_Write+0x28c>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b8:	4b0f      	ldr	r3, [pc, #60]	@ (80008f8 <Fpga_Write+0x28c>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008be:	4b0e      	ldr	r3, [pc, #56]	@ (80008f8 <Fpga_Write+0x28c>)
 80008c0:	2203      	movs	r2, #3
 80008c2:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008c4:	490c      	ldr	r1, [pc, #48]	@ (80008f8 <Fpga_Write+0x28c>)
 80008c6:	480e      	ldr	r0, [pc, #56]	@ (8000900 <Fpga_Write+0x294>)
 80008c8:	f002 fc62 	bl	8003190 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = DATA5_Pin|DATA6_Pin|DATA7_Pin;
 80008cc:	4b0a      	ldr	r3, [pc, #40]	@ (80008f8 <Fpga_Write+0x28c>)
 80008ce:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80008d2:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008d4:	4b08      	ldr	r3, [pc, #32]	@ (80008f8 <Fpga_Write+0x28c>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008da:	4b07      	ldr	r3, [pc, #28]	@ (80008f8 <Fpga_Write+0x28c>)
 80008dc:	2200      	movs	r2, #0
 80008de:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008e0:	4b05      	ldr	r3, [pc, #20]	@ (80008f8 <Fpga_Write+0x28c>)
 80008e2:	2203      	movs	r2, #3
 80008e4:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008e6:	4904      	ldr	r1, [pc, #16]	@ (80008f8 <Fpga_Write+0x28c>)
 80008e8:	4806      	ldr	r0, [pc, #24]	@ (8000904 <Fpga_Write+0x298>)
 80008ea:	f002 fc51 	bl	8003190 <HAL_GPIO_Init>
}
 80008ee:	bf00      	nop
 80008f0:	3708      	adds	r7, #8
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	20000080 	.word	0x20000080
 80008fc:	40010800 	.word	0x40010800
 8000900:	40011400 	.word	0x40011400
 8000904:	40010c00 	.word	0x40010c00
 8000908:	40011800 	.word	0x40011800

0800090c <Write_Fir_Parameter>:

#define Filter_Order 		255

void Write_Fir_Parameter(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b084      	sub	sp, #16
 8000910:	af00      	add	r7, sp, #0
    unsigned short i,j,t,d;
	unsigned char init_cn;
	unsigned char sum1,sum2;

    Fpga_Write(7,Filter_Order >> 8);
 8000912:	2100      	movs	r1, #0
 8000914:	2007      	movs	r0, #7
 8000916:	f7ff fea9 	bl	800066c <Fpga_Write>
    Fpga_Write(8,(Filter_Order & 0x00FF));
 800091a:	21ff      	movs	r1, #255	@ 0xff
 800091c:	2008      	movs	r0, #8
 800091e:	f7ff fea5 	bl	800066c <Fpga_Write>

	init_cn = 0;
 8000922:	2300      	movs	r3, #0
 8000924:	727b      	strb	r3, [r7, #9]
	while(init_cn < 10)
 8000926:	e0a1      	b.n	8000a6c <Write_Fir_Parameter+0x160>
	{
		sum1 = 0;
 8000928:	2300      	movs	r3, #0
 800092a:	723b      	strb	r3, [r7, #8]
		sum2 = 0;
 800092c:	2300      	movs	r3, #0
 800092e:	71fb      	strb	r3, [r7, #7]

		t = 0x80;
 8000930:	2380      	movs	r3, #128	@ 0x80
 8000932:	817b      	strh	r3, [r7, #10]
		for(i=0; i<Filter_Order;)
 8000934:	2300      	movs	r3, #0
 8000936:	81fb      	strh	r3, [r7, #14]
 8000938:	e04d      	b.n	80009d6 <Write_Fir_Parameter+0xca>
		{
			for(j=0; j<32; j++,i++)
 800093a:	2300      	movs	r3, #0
 800093c:	81bb      	strh	r3, [r7, #12]
 800093e:	e044      	b.n	80009ca <Write_Fir_Parameter+0xbe>
			{
				if(i < Filter_Order)
 8000940:	89fb      	ldrh	r3, [r7, #14]
 8000942:	2bfe      	cmp	r3, #254	@ 0xfe
 8000944:	d827      	bhi.n	8000996 <Write_Fir_Parameter+0x8a>
				{
					Fpga_Write(0x09,j);
 8000946:	89bb      	ldrh	r3, [r7, #12]
 8000948:	b2db      	uxtb	r3, r3
 800094a:	4619      	mov	r1, r3
 800094c:	2009      	movs	r0, #9
 800094e:	f7ff fe8d 	bl	800066c <Fpga_Write>
					Fpga_Write(0x0A,FIR_Parameter[i] >> 8);
 8000952:	89fb      	ldrh	r3, [r7, #14]
 8000954:	4a4a      	ldr	r2, [pc, #296]	@ (8000a80 <Write_Fir_Parameter+0x174>)
 8000956:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800095a:	121b      	asrs	r3, r3, #8
 800095c:	b2db      	uxtb	r3, r3
 800095e:	4619      	mov	r1, r3
 8000960:	200a      	movs	r0, #10
 8000962:	f7ff fe83 	bl	800066c <Fpga_Write>
					Fpga_Write(0x0B,FIR_Parameter[i]);
 8000966:	89fb      	ldrh	r3, [r7, #14]
 8000968:	4a45      	ldr	r2, [pc, #276]	@ (8000a80 <Write_Fir_Parameter+0x174>)
 800096a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800096e:	b2db      	uxtb	r3, r3
 8000970:	4619      	mov	r1, r3
 8000972:	200b      	movs	r0, #11
 8000974:	f7ff fe7a 	bl	800066c <Fpga_Write>
					Fpga_Write(0x0C,t);		//Fir_Parameter_Ram_WR(MSB),Fir_Parameter_Ram_sel
 8000978:	897b      	ldrh	r3, [r7, #10]
 800097a:	b2db      	uxtb	r3, r3
 800097c:	4619      	mov	r1, r3
 800097e:	200c      	movs	r0, #12
 8000980:	f7ff fe74 	bl	800066c <Fpga_Write>
					sum1 += FIR_Parameter[i];
 8000984:	89fb      	ldrh	r3, [r7, #14]
 8000986:	4a3e      	ldr	r2, [pc, #248]	@ (8000a80 <Write_Fir_Parameter+0x174>)
 8000988:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800098c:	b2da      	uxtb	r2, r3
 800098e:	7a3b      	ldrb	r3, [r7, #8]
 8000990:	4413      	add	r3, r2
 8000992:	723b      	strb	r3, [r7, #8]
 8000994:	e013      	b.n	80009be <Write_Fir_Parameter+0xb2>
				}
				else
				{
					Fpga_Write(0x09,j);
 8000996:	89bb      	ldrh	r3, [r7, #12]
 8000998:	b2db      	uxtb	r3, r3
 800099a:	4619      	mov	r1, r3
 800099c:	2009      	movs	r0, #9
 800099e:	f7ff fe65 	bl	800066c <Fpga_Write>
					Fpga_Write(0x0A,0);
 80009a2:	2100      	movs	r1, #0
 80009a4:	200a      	movs	r0, #10
 80009a6:	f7ff fe61 	bl	800066c <Fpga_Write>
					Fpga_Write(0x0B,0);
 80009aa:	2100      	movs	r1, #0
 80009ac:	200b      	movs	r0, #11
 80009ae:	f7ff fe5d 	bl	800066c <Fpga_Write>
					Fpga_Write(0x0C,t);		//Fir_Parameter_Ram_WR(MSB),Fir_Parameter_Ram_sel
 80009b2:	897b      	ldrh	r3, [r7, #10]
 80009b4:	b2db      	uxtb	r3, r3
 80009b6:	4619      	mov	r1, r3
 80009b8:	200c      	movs	r0, #12
 80009ba:	f7ff fe57 	bl	800066c <Fpga_Write>
			for(j=0; j<32; j++,i++)
 80009be:	89bb      	ldrh	r3, [r7, #12]
 80009c0:	3301      	adds	r3, #1
 80009c2:	81bb      	strh	r3, [r7, #12]
 80009c4:	89fb      	ldrh	r3, [r7, #14]
 80009c6:	3301      	adds	r3, #1
 80009c8:	81fb      	strh	r3, [r7, #14]
 80009ca:	89bb      	ldrh	r3, [r7, #12]
 80009cc:	2b1f      	cmp	r3, #31
 80009ce:	d9b7      	bls.n	8000940 <Write_Fir_Parameter+0x34>
				}
			}
			t++;
 80009d0:	897b      	ldrh	r3, [r7, #10]
 80009d2:	3301      	adds	r3, #1
 80009d4:	817b      	strh	r3, [r7, #10]
		for(i=0; i<Filter_Order;)
 80009d6:	89fb      	ldrh	r3, [r7, #14]
 80009d8:	2bfe      	cmp	r3, #254	@ 0xfe
 80009da:	d9ae      	bls.n	800093a <Write_Fir_Parameter+0x2e>
		}

		t = 0x00;
 80009dc:	2300      	movs	r3, #0
 80009de:	817b      	strh	r3, [r7, #10]
		for(i=0; i<Filter_Order;)
 80009e0:	2300      	movs	r3, #0
 80009e2:	81fb      	strh	r3, [r7, #14]
 80009e4:	e035      	b.n	8000a52 <Write_Fir_Parameter+0x146>
		{
			for(j=0; j<32; j++,i++)
 80009e6:	2300      	movs	r3, #0
 80009e8:	81bb      	strh	r3, [r7, #12]
 80009ea:	e02c      	b.n	8000a46 <Write_Fir_Parameter+0x13a>
			{
				if(i < Filter_Order)
 80009ec:	89fb      	ldrh	r3, [r7, #14]
 80009ee:	2bfe      	cmp	r3, #254	@ 0xfe
 80009f0:	d821      	bhi.n	8000a36 <Write_Fir_Parameter+0x12a>
				{
					Fpga_Write(0x09,j);
 80009f2:	89bb      	ldrh	r3, [r7, #12]
 80009f4:	b2db      	uxtb	r3, r3
 80009f6:	4619      	mov	r1, r3
 80009f8:	2009      	movs	r0, #9
 80009fa:	f7ff fe37 	bl	800066c <Fpga_Write>
					Fpga_Write(0x0C,t);		//Fir_Parameter_Ram_WR(MSB),Fir_Parameter_Ram_sel
 80009fe:	897b      	ldrh	r3, [r7, #10]
 8000a00:	b2db      	uxtb	r3, r3
 8000a02:	4619      	mov	r1, r3
 8000a04:	200c      	movs	r0, #12
 8000a06:	f7ff fe31 	bl	800066c <Fpga_Write>
					d = Fpga_Read(0x0A);
 8000a0a:	200a      	movs	r0, #10
 8000a0c:	f7ff fd08 	bl	8000420 <Fpga_Read>
 8000a10:	4603      	mov	r3, r0
 8000a12:	80bb      	strh	r3, [r7, #4]
					d = d << 8;
 8000a14:	88bb      	ldrh	r3, [r7, #4]
 8000a16:	021b      	lsls	r3, r3, #8
 8000a18:	80bb      	strh	r3, [r7, #4]
					d |= Fpga_Read(0x0B);
 8000a1a:	200b      	movs	r0, #11
 8000a1c:	f7ff fd00 	bl	8000420 <Fpga_Read>
 8000a20:	4603      	mov	r3, r0
 8000a22:	461a      	mov	r2, r3
 8000a24:	88bb      	ldrh	r3, [r7, #4]
 8000a26:	4313      	orrs	r3, r2
 8000a28:	80bb      	strh	r3, [r7, #4]
					sum2 += d;
 8000a2a:	88bb      	ldrh	r3, [r7, #4]
 8000a2c:	b2da      	uxtb	r2, r3
 8000a2e:	79fb      	ldrb	r3, [r7, #7]
 8000a30:	4413      	add	r3, r2
 8000a32:	71fb      	strb	r3, [r7, #7]
 8000a34:	e001      	b.n	8000a3a <Write_Fir_Parameter+0x12e>
				}
				else
				{
					d = 0;
 8000a36:	2300      	movs	r3, #0
 8000a38:	80bb      	strh	r3, [r7, #4]
			for(j=0; j<32; j++,i++)
 8000a3a:	89bb      	ldrh	r3, [r7, #12]
 8000a3c:	3301      	adds	r3, #1
 8000a3e:	81bb      	strh	r3, [r7, #12]
 8000a40:	89fb      	ldrh	r3, [r7, #14]
 8000a42:	3301      	adds	r3, #1
 8000a44:	81fb      	strh	r3, [r7, #14]
 8000a46:	89bb      	ldrh	r3, [r7, #12]
 8000a48:	2b1f      	cmp	r3, #31
 8000a4a:	d9cf      	bls.n	80009ec <Write_Fir_Parameter+0xe0>
				}
			}
			t++;
 8000a4c:	897b      	ldrh	r3, [r7, #10]
 8000a4e:	3301      	adds	r3, #1
 8000a50:	817b      	strh	r3, [r7, #10]
		for(i=0; i<Filter_Order;)
 8000a52:	89fb      	ldrh	r3, [r7, #14]
 8000a54:	2bfe      	cmp	r3, #254	@ 0xfe
 8000a56:	d9c6      	bls.n	80009e6 <Write_Fir_Parameter+0xda>
		}

		if(sum1 != sum2)
 8000a58:	7a3a      	ldrb	r2, [r7, #8]
 8000a5a:	79fb      	ldrb	r3, [r7, #7]
 8000a5c:	429a      	cmp	r2, r3
 8000a5e:	d003      	beq.n	8000a68 <Write_Fir_Parameter+0x15c>
			init_cn++;
 8000a60:	7a7b      	ldrb	r3, [r7, #9]
 8000a62:	3301      	adds	r3, #1
 8000a64:	727b      	strb	r3, [r7, #9]
 8000a66:	e001      	b.n	8000a6c <Write_Fir_Parameter+0x160>
		else
			init_cn = 10;
 8000a68:	230a      	movs	r3, #10
 8000a6a:	727b      	strb	r3, [r7, #9]
	while(init_cn < 10)
 8000a6c:	7a7b      	ldrb	r3, [r7, #9]
 8000a6e:	2b09      	cmp	r3, #9
 8000a70:	f67f af5a 	bls.w	8000928 <Write_Fir_Parameter+0x1c>
//	ComSendChar(COM1,(sum2 >> 8));
//	ComSendChar(COM1,sum2);
//
//	ComSendChar(COM1,init_cn);

}
 8000a74:	bf00      	nop
 8000a76:	bf00      	nop
 8000a78:	3710      	adds	r7, #16
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	08005d2c 	.word	0x08005d2c

08000a84 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b08a      	sub	sp, #40	@ 0x28
 8000a88:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a8a:	f107 0318 	add.w	r3, r7, #24
 8000a8e:	2200      	movs	r2, #0
 8000a90:	601a      	str	r2, [r3, #0]
 8000a92:	605a      	str	r2, [r3, #4]
 8000a94:	609a      	str	r2, [r3, #8]
 8000a96:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a98:	4b54      	ldr	r3, [pc, #336]	@ (8000bec <MX_GPIO_Init+0x168>)
 8000a9a:	699b      	ldr	r3, [r3, #24]
 8000a9c:	4a53      	ldr	r2, [pc, #332]	@ (8000bec <MX_GPIO_Init+0x168>)
 8000a9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000aa2:	6193      	str	r3, [r2, #24]
 8000aa4:	4b51      	ldr	r3, [pc, #324]	@ (8000bec <MX_GPIO_Init+0x168>)
 8000aa6:	699b      	ldr	r3, [r3, #24]
 8000aa8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000aac:	617b      	str	r3, [r7, #20]
 8000aae:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab0:	4b4e      	ldr	r3, [pc, #312]	@ (8000bec <MX_GPIO_Init+0x168>)
 8000ab2:	699b      	ldr	r3, [r3, #24]
 8000ab4:	4a4d      	ldr	r2, [pc, #308]	@ (8000bec <MX_GPIO_Init+0x168>)
 8000ab6:	f043 0304 	orr.w	r3, r3, #4
 8000aba:	6193      	str	r3, [r2, #24]
 8000abc:	4b4b      	ldr	r3, [pc, #300]	@ (8000bec <MX_GPIO_Init+0x168>)
 8000abe:	699b      	ldr	r3, [r3, #24]
 8000ac0:	f003 0304 	and.w	r3, r3, #4
 8000ac4:	613b      	str	r3, [r7, #16]
 8000ac6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ac8:	4b48      	ldr	r3, [pc, #288]	@ (8000bec <MX_GPIO_Init+0x168>)
 8000aca:	699b      	ldr	r3, [r3, #24]
 8000acc:	4a47      	ldr	r2, [pc, #284]	@ (8000bec <MX_GPIO_Init+0x168>)
 8000ace:	f043 0310 	orr.w	r3, r3, #16
 8000ad2:	6193      	str	r3, [r2, #24]
 8000ad4:	4b45      	ldr	r3, [pc, #276]	@ (8000bec <MX_GPIO_Init+0x168>)
 8000ad6:	699b      	ldr	r3, [r3, #24]
 8000ad8:	f003 0310 	and.w	r3, r3, #16
 8000adc:	60fb      	str	r3, [r7, #12]
 8000ade:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ae0:	4b42      	ldr	r3, [pc, #264]	@ (8000bec <MX_GPIO_Init+0x168>)
 8000ae2:	699b      	ldr	r3, [r3, #24]
 8000ae4:	4a41      	ldr	r2, [pc, #260]	@ (8000bec <MX_GPIO_Init+0x168>)
 8000ae6:	f043 0320 	orr.w	r3, r3, #32
 8000aea:	6193      	str	r3, [r2, #24]
 8000aec:	4b3f      	ldr	r3, [pc, #252]	@ (8000bec <MX_GPIO_Init+0x168>)
 8000aee:	699b      	ldr	r3, [r3, #24]
 8000af0:	f003 0320 	and.w	r3, r3, #32
 8000af4:	60bb      	str	r3, [r7, #8]
 8000af6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000af8:	4b3c      	ldr	r3, [pc, #240]	@ (8000bec <MX_GPIO_Init+0x168>)
 8000afa:	699b      	ldr	r3, [r3, #24]
 8000afc:	4a3b      	ldr	r2, [pc, #236]	@ (8000bec <MX_GPIO_Init+0x168>)
 8000afe:	f043 0308 	orr.w	r3, r3, #8
 8000b02:	6193      	str	r3, [r2, #24]
 8000b04:	4b39      	ldr	r3, [pc, #228]	@ (8000bec <MX_GPIO_Init+0x168>)
 8000b06:	699b      	ldr	r3, [r3, #24]
 8000b08:	f003 0308 	and.w	r3, r3, #8
 8000b0c:	607b      	str	r3, [r7, #4]
 8000b0e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ADDR0_Pin|ADDR1_Pin|ADDR2_Pin|ADDR3_Pin
 8000b10:	2200      	movs	r2, #0
 8000b12:	213d      	movs	r1, #61	@ 0x3d
 8000b14:	4836      	ldr	r0, [pc, #216]	@ (8000bf0 <MX_GPIO_Init+0x16c>)
 8000b16:	f002 fce6 	bl	80034e6 <HAL_GPIO_WritePin>
                          |MCU_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DATA1_Pin|MCU_WR_Pin|DATA0_Pin, GPIO_PIN_RESET);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	f641 0104 	movw	r1, #6148	@ 0x1804
 8000b20:	4834      	ldr	r0, [pc, #208]	@ (8000bf4 <MX_GPIO_Init+0x170>)
 8000b22:	f002 fce0 	bl	80034e6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DATA2_GPIO_Port, DATA2_Pin, GPIO_PIN_RESET);
 8000b26:	2200      	movs	r2, #0
 8000b28:	2108      	movs	r1, #8
 8000b2a:	4832      	ldr	r0, [pc, #200]	@ (8000bf4 <MX_GPIO_Init+0x170>)
 8000b2c:	f002 fcdb 	bl	80034e6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, DATA3_Pin|DATA4_Pin, GPIO_PIN_RESET);
 8000b30:	2200      	movs	r2, #0
 8000b32:	2148      	movs	r1, #72	@ 0x48
 8000b34:	4830      	ldr	r0, [pc, #192]	@ (8000bf8 <MX_GPIO_Init+0x174>)
 8000b36:	f002 fcd6 	bl	80034e6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DATA5_Pin|DATA6_Pin|DATA7_Pin, GPIO_PIN_RESET);
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	f44f 7148 	mov.w	r1, #800	@ 0x320
 8000b40:	482e      	ldr	r0, [pc, #184]	@ (8000bfc <MX_GPIO_Init+0x178>)
 8000b42:	f002 fcd0 	bl	80034e6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
	GPIO_InitStruct.Pin = ADDR0_Pin|ADDR1_Pin|ADDR2_Pin|ADDR3_Pin
 8000b46:	233d      	movs	r3, #61	@ 0x3d
 8000b48:	61bb      	str	r3, [r7, #24]
						  |MCU_CS_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b52:	2303      	movs	r3, #3
 8000b54:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b56:	f107 0318 	add.w	r3, r7, #24
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	4824      	ldr	r0, [pc, #144]	@ (8000bf0 <MX_GPIO_Init+0x16c>)
 8000b5e:	f002 fb17 	bl	8003190 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = MCU_WR_Pin;
 8000b62:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000b66:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b68:	2301      	movs	r3, #1
 8000b6a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b70:	2303      	movs	r3, #3
 8000b72:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b74:	f107 0318 	add.w	r3, r7, #24
 8000b78:	4619      	mov	r1, r3
 8000b7a:	481e      	ldr	r0, [pc, #120]	@ (8000bf4 <MX_GPIO_Init+0x170>)
 8000b7c:	f002 fb08 	bl	8003190 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = DATA1_Pin|MCU_WR_Pin|DATA0_Pin|DATA2_Pin;
 8000b80:	f641 030c 	movw	r3, #6156	@ 0x180c
 8000b84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b86:	2301      	movs	r3, #1
 8000b88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b8e:	2303      	movs	r3, #3
 8000b90:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b92:	f107 0318 	add.w	r3, r7, #24
 8000b96:	4619      	mov	r1, r3
 8000b98:	4816      	ldr	r0, [pc, #88]	@ (8000bf4 <MX_GPIO_Init+0x170>)
 8000b9a:	f002 faf9 	bl	8003190 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = DATA3_Pin|DATA4_Pin;
 8000b9e:	2348      	movs	r3, #72	@ 0x48
 8000ba0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000baa:	2303      	movs	r3, #3
 8000bac:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bae:	f107 0318 	add.w	r3, r7, #24
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	4810      	ldr	r0, [pc, #64]	@ (8000bf8 <MX_GPIO_Init+0x174>)
 8000bb6:	f002 faeb 	bl	8003190 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DATA5_Pin|DATA6_Pin|DATA7_Pin|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8000bba:	f247 3320 	movw	r3, #29472	@ 0x7320
 8000bbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bc8:	2303      	movs	r3, #3
 8000bca:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bcc:	f107 0318 	add.w	r3, r7, #24
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	480a      	ldr	r0, [pc, #40]	@ (8000bfc <MX_GPIO_Init+0x178>)
 8000bd4:	f002 fadc 	bl	8003190 <HAL_GPIO_Init>


  HAL_GPIO_WritePin(GPIOE,MCU_CS_Pin,GPIO_PIN_SET);//fpga片选拉高
 8000bd8:	2201      	movs	r2, #1
 8000bda:	2101      	movs	r1, #1
 8000bdc:	4804      	ldr	r0, [pc, #16]	@ (8000bf0 <MX_GPIO_Init+0x16c>)
 8000bde:	f002 fc82 	bl	80034e6 <HAL_GPIO_WritePin>

}
 8000be2:	bf00      	nop
 8000be4:	3728      	adds	r7, #40	@ 0x28
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	40021000 	.word	0x40021000
 8000bf0:	40011800 	.word	0x40011800
 8000bf4:	40010800 	.word	0x40010800
 8000bf8:	40011400 	.word	0x40011400
 8000bfc:	40010c00 	.word	0x40010c00

08000c00 <init>:
 *      Author: 16194
 */
#include "main.h"

void init (void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
	SystemClock_Config();			//时钟配置
 8000c04:	f000 f816 	bl	8000c34 <SystemClock_Config>

	HAL_Init();						//HAL库初始化
 8000c08:	f001 fcce 	bl	80025a8 <HAL_Init>
	MX_GPIO_Init();					//GPIO初始化
 8000c0c:	f7ff ff3a 	bl	8000a84 <MX_GPIO_Init>
	TIM_init();						//定时器初始化
 8000c10:	f000 faa6 	bl	8001160 <TIM_init>
	usart_init();					//串口初始化
 8000c14:	f000 fb3c 	bl	8001290 <usart_init>
	FPGA_init();					//FPGA初始化
 8000c18:	f7ff fbd6 	bl	80003c8 <FPGA_init>
	MX_IWDG_Init();					//独立看门狗初始化
 8000c1c:	f000 f850 	bl	8000cc0 <MX_IWDG_Init>

	SEGGER_RTT_Init();				//SEGGERRTT初始化
 8000c20:	f001 fcbc 	bl	800259c <SEGGER_RTT_Init>

	PRINT_LOG("initover\n\r");
 8000c24:	4802      	ldr	r0, [pc, #8]	@ (8000c30 <init+0x30>)
 8000c26:	f000 f8ec 	bl	8000e02 <PRINT_LOG>
}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	08005cac 	.word	0x08005cac

08000c34 <SystemClock_Config>:

void SystemClock_Config(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b090      	sub	sp, #64	@ 0x40
 8000c38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c3a:	f107 0318 	add.w	r3, r7, #24
 8000c3e:	2228      	movs	r2, #40	@ 0x28
 8000c40:	2100      	movs	r1, #0
 8000c42:	4618      	mov	r0, r3
 8000c44:	f004 fb96 	bl	8005374 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c48:	1d3b      	adds	r3, r7, #4
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	601a      	str	r2, [r3, #0]
 8000c4e:	605a      	str	r2, [r3, #4]
 8000c50:	609a      	str	r2, [r3, #8]
 8000c52:	60da      	str	r2, [r3, #12]
 8000c54:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c56:	2301      	movs	r3, #1
 8000c58:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c5a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c5e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000c60:	2300      	movs	r3, #0
 8000c62:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c64:	2301      	movs	r3, #1
 8000c66:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c68:	2302      	movs	r3, #2
 8000c6a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c6c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c70:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000c72:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000c76:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c78:	f107 0318 	add.w	r3, r7, #24
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f002 fcb7 	bl	80035f0 <HAL_RCC_OscConfig>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000c88:	f000 f8f6 	bl	8000e78 <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c8c:	230f      	movs	r3, #15
 8000c8e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c90:	2302      	movs	r3, #2
 8000c92:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c94:	2300      	movs	r3, #0
 8000c96:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c98:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c9c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ca2:	1d3b      	adds	r3, r7, #4
 8000ca4:	2102      	movs	r1, #2
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f002 ff24 	bl	8003af4 <HAL_RCC_ClockConfig>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000cb2:	f000 f8e1 	bl	8000e78 <Error_Handler>
  }
}
 8000cb6:	bf00      	nop
 8000cb8:	3740      	adds	r7, #64	@ 0x40
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
	...

08000cc0 <MX_IWDG_Init>:

IWDG_HandleTypeDef iwdg;
void MX_IWDG_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
	iwdg.Instance = IWDG;
 8000cc4:	4b09      	ldr	r3, [pc, #36]	@ (8000cec <MX_IWDG_Init+0x2c>)
 8000cc6:	4a0a      	ldr	r2, [pc, #40]	@ (8000cf0 <MX_IWDG_Init+0x30>)
 8000cc8:	601a      	str	r2, [r3, #0]
	iwdg.Init.Prescaler = IWDG_PRESCALER_4;
 8000cca:	4b08      	ldr	r3, [pc, #32]	@ (8000cec <MX_IWDG_Init+0x2c>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	605a      	str	r2, [r3, #4]
	iwdg.Init.Reload = 5000;
 8000cd0:	4b06      	ldr	r3, [pc, #24]	@ (8000cec <MX_IWDG_Init+0x2c>)
 8000cd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000cd6:	609a      	str	r2, [r3, #8]
	if(HAL_IWDG_Init(&iwdg) != HAL_OK)
 8000cd8:	4804      	ldr	r0, [pc, #16]	@ (8000cec <MX_IWDG_Init+0x2c>)
 8000cda:	f002 fc35 	bl	8003548 <HAL_IWDG_Init>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <MX_IWDG_Init+0x28>
	{
		Error_Handler();
 8000ce4:	f000 f8c8 	bl	8000e78 <Error_Handler>
	}
}
 8000ce8:	bf00      	nop
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	20000094 	.word	0x20000094
 8000cf0:	40003000 	.word	0x40003000

08000cf4 <IWDG_FEED_DOG>:

void IWDG_FEED_DOG(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
	HAL_IWDG_Refresh(&iwdg);	//410ms内清掉看门狗
 8000cf8:	4802      	ldr	r0, [pc, #8]	@ (8000d04 <IWDG_FEED_DOG+0x10>)
 8000cfa:	f002 fc69 	bl	80035d0 <HAL_IWDG_Refresh>
}
 8000cfe:	bf00      	nop
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	20000094 	.word	0x20000094

08000d08 <Checksum_Reverse>:

/****************************************************************/
/*-----------------ETH下发数据校验和计算函数------------------------*/
unsigned short Checksum_Reverse(unsigned char * p,unsigned short _len)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b0b6      	sub	sp, #216	@ 0xd8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
 8000d10:	460b      	mov	r3, r1
 8000d12:	807b      	strh	r3, [r7, #2]
	uint16_t sum = 0;
 8000d14:	2300      	movs	r3, #0
 8000d16:	f8a7 30d6 	strh.w	r3, [r7, #214]	@ 0xd6
	uint16_t i,y;
	uint16_t Buf[100] = {0};
 8000d1a:	f107 0308 	add.w	r3, r7, #8
 8000d1e:	22c8      	movs	r2, #200	@ 0xc8
 8000d20:	2100      	movs	r1, #0
 8000d22:	4618      	mov	r0, r3
 8000d24:	f004 fb26 	bl	8005374 <memset>
	for(i=0;i<(_len/2);i++)
 8000d28:	2300      	movs	r3, #0
 8000d2a:	f8a7 30d4 	strh.w	r3, [r7, #212]	@ 0xd4
 8000d2e:	e01e      	b.n	8000d6e <Checksum_Reverse+0x66>
	{
		Buf[i] = (p[2*i+1] << 8) + p[2*i];
 8000d30:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	@ 0xd4
 8000d34:	005b      	lsls	r3, r3, #1
 8000d36:	3301      	adds	r3, #1
 8000d38:	687a      	ldr	r2, [r7, #4]
 8000d3a:	4413      	add	r3, r2
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	021b      	lsls	r3, r3, #8
 8000d40:	b29a      	uxth	r2, r3
 8000d42:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	@ 0xd4
 8000d46:	005b      	lsls	r3, r3, #1
 8000d48:	4619      	mov	r1, r3
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	440b      	add	r3, r1
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	4619      	mov	r1, r3
 8000d52:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	@ 0xd4
 8000d56:	440a      	add	r2, r1
 8000d58:	b292      	uxth	r2, r2
 8000d5a:	005b      	lsls	r3, r3, #1
 8000d5c:	33d8      	adds	r3, #216	@ 0xd8
 8000d5e:	443b      	add	r3, r7
 8000d60:	f823 2cd0 	strh.w	r2, [r3, #-208]
	for(i=0;i<(_len/2);i++)
 8000d64:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	@ 0xd4
 8000d68:	3301      	adds	r3, #1
 8000d6a:	f8a7 30d4 	strh.w	r3, [r7, #212]	@ 0xd4
 8000d6e:	887b      	ldrh	r3, [r7, #2]
 8000d70:	085b      	lsrs	r3, r3, #1
 8000d72:	b29b      	uxth	r3, r3
 8000d74:	f8b7 20d4 	ldrh.w	r2, [r7, #212]	@ 0xd4
 8000d78:	429a      	cmp	r2, r3
 8000d7a:	d3d9      	bcc.n	8000d30 <Checksum_Reverse+0x28>
	}
	for(y=0;y<(_len/2);y++)
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	f8a7 30d2 	strh.w	r3, [r7, #210]	@ 0xd2
 8000d82:	e010      	b.n	8000da6 <Checksum_Reverse+0x9e>
	{
		sum += Buf[y];
 8000d84:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	@ 0xd2
 8000d88:	005b      	lsls	r3, r3, #1
 8000d8a:	33d8      	adds	r3, #216	@ 0xd8
 8000d8c:	443b      	add	r3, r7
 8000d8e:	f833 2cd0 	ldrh.w	r2, [r3, #-208]
 8000d92:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	@ 0xd6
 8000d96:	4413      	add	r3, r2
 8000d98:	f8a7 30d6 	strh.w	r3, [r7, #214]	@ 0xd6
	for(y=0;y<(_len/2);y++)
 8000d9c:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	@ 0xd2
 8000da0:	3301      	adds	r3, #1
 8000da2:	f8a7 30d2 	strh.w	r3, [r7, #210]	@ 0xd2
 8000da6:	887b      	ldrh	r3, [r7, #2]
 8000da8:	085b      	lsrs	r3, r3, #1
 8000daa:	b29b      	uxth	r3, r3
 8000dac:	f8b7 20d2 	ldrh.w	r2, [r7, #210]	@ 0xd2
 8000db0:	429a      	cmp	r2, r3
 8000db2:	d3e7      	bcc.n	8000d84 <Checksum_Reverse+0x7c>
	}
	return sum;
 8000db4:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	@ 0xd6
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	37d8      	adds	r7, #216	@ 0xd8
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <Checksum_sum>:

/*---------------------------校验和计算函数------------------------*/
unsigned short Checksum_sum(unsigned char * p,unsigned short _len)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b085      	sub	sp, #20
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
 8000dc8:	460b      	mov	r3, r1
 8000dca:	807b      	strh	r3, [r7, #2]
	uint16_t sum = 0;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	81fb      	strh	r3, [r7, #14]
	for(unsigned char i=0;i<_len;i++)
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	737b      	strb	r3, [r7, #13]
 8000dd4:	e00a      	b.n	8000dec <Checksum_sum+0x2c>
	{
		sum += p[i];
 8000dd6:	7b7b      	ldrb	r3, [r7, #13]
 8000dd8:	687a      	ldr	r2, [r7, #4]
 8000dda:	4413      	add	r3, r2
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	461a      	mov	r2, r3
 8000de0:	89fb      	ldrh	r3, [r7, #14]
 8000de2:	4413      	add	r3, r2
 8000de4:	81fb      	strh	r3, [r7, #14]
	for(unsigned char i=0;i<_len;i++)
 8000de6:	7b7b      	ldrb	r3, [r7, #13]
 8000de8:	3301      	adds	r3, #1
 8000dea:	737b      	strb	r3, [r7, #13]
 8000dec:	7b7b      	ldrb	r3, [r7, #13]
 8000dee:	b29b      	uxth	r3, r3
 8000df0:	887a      	ldrh	r2, [r7, #2]
 8000df2:	429a      	cmp	r2, r3
 8000df4:	d8ef      	bhi.n	8000dd6 <Checksum_sum+0x16>
	}
	return sum;
 8000df6:	89fb      	ldrh	r3, [r7, #14]
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	3714      	adds	r7, #20
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bc80      	pop	{r7}
 8000e00:	4770      	bx	lr

08000e02 <PRINT_LOG>:

int PRINT_LOG(const char *fmt,...)
{	int n;
 8000e02:	b40f      	push	{r0, r1, r2, r3}
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b0c2      	sub	sp, #264	@ 0x108
 8000e08:	af00      	add	r7, sp, #0
	char aBuffer[256];
	va_list args;
	va_start(args,fmt);
 8000e0a:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 8000e0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000e12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000e16:	601a      	str	r2, [r3, #0]
	n = vsnprintf(aBuffer, sizeof(aBuffer), fmt, args);
 8000e18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000e1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000e20:	1d38      	adds	r0, r7, #4
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8000e28:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e2c:	f004 fa94 	bl	8005358 <vsniprintf>
 8000e30:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
	if (n > (int)sizeof(aBuffer))
 8000e34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8000e38:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000e3c:	dd07      	ble.n	8000e4e <PRINT_LOG+0x4c>
	{
		SEGGER_RTT_Write(0, aBuffer, sizeof(aBuffer));
 8000e3e:	1d3b      	adds	r3, r7, #4
 8000e40:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000e44:	4619      	mov	r1, r3
 8000e46:	2000      	movs	r0, #0
 8000e48:	f001 fb84 	bl	8002554 <SEGGER_RTT_Write>
 8000e4c:	e00a      	b.n	8000e64 <PRINT_LOG+0x62>
	}
	else if(n > 0)
 8000e4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	dd06      	ble.n	8000e64 <PRINT_LOG+0x62>
	{
		SEGGER_RTT_Write(0, aBuffer, n);
 8000e56:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 8000e5a:	1d3b      	adds	r3, r7, #4
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	2000      	movs	r0, #0
 8000e60:	f001 fb78 	bl	8002554 <SEGGER_RTT_Write>
	}
	va_end(args);
	return n;
 8000e64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000e74:	b004      	add	sp, #16
 8000e76:	4770      	bx	lr

08000e78 <Error_Handler>:

void Error_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e7c:	b672      	cpsid	i
}
 8000e7e:	bf00      	nop
  __disable_irq();
  while (1)
 8000e80:	bf00      	nop
 8000e82:	e7fd      	b.n	8000e80 <Error_Handler+0x8>

08000e84 <ETH_CMDPOLL>:
unsigned char resendtpe;

_Bool TOOLCONTRALCMD = false;

void ETH_CMDPOLL(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
	if(ETHdata.overflag == 1)
 8000e8a:	4b6e      	ldr	r3, [pc, #440]	@ (8001044 <ETH_CMDPOLL+0x1c0>)
 8000e8c:	f893 3216 	ldrb.w	r3, [r3, #534]	@ 0x216
 8000e90:	2b01      	cmp	r3, #1
 8000e92:	f040 809b 	bne.w	8000fcc <ETH_CMDPOLL+0x148>
	{
		Resetstate(ETHCMD);
 8000e96:	2001      	movs	r0, #1
 8000e98:	f001 f992 	bl	80021c0 <Resetstate>

		switch(ETHdata.Workmode)
 8000e9c:	4b69      	ldr	r3, [pc, #420]	@ (8001044 <ETH_CMDPOLL+0x1c0>)
 8000e9e:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 8000ea2:	2b04      	cmp	r3, #4
 8000ea4:	f000 8087 	beq.w	8000fb6 <ETH_CMDPOLL+0x132>
 8000ea8:	2b04      	cmp	r3, #4
 8000eaa:	f300 808f 	bgt.w	8000fcc <ETH_CMDPOLL+0x148>
 8000eae:	2b01      	cmp	r3, #1
 8000eb0:	d002      	beq.n	8000eb8 <ETH_CMDPOLL+0x34>
 8000eb2:	2b02      	cmp	r3, #2
 8000eb4:	d05f      	beq.n	8000f76 <ETH_CMDPOLL+0xf2>
 8000eb6:	e089      	b.n	8000fcc <ETH_CMDPOLL+0x148>
		{
			case SERVICETABLE:								//服务表激活
					ToolID = ETHdata.bodybuf[0];
 8000eb8:	4b62      	ldr	r3, [pc, #392]	@ (8001044 <ETH_CMDPOLL+0x1c0>)
 8000eba:	f893 2106 	ldrb.w	r2, [r3, #262]	@ 0x106
 8000ebe:	4b62      	ldr	r3, [pc, #392]	@ (8001048 <ETH_CMDPOLL+0x1c4>)
 8000ec0:	701a      	strb	r2, [r3, #0]
					Subsetnumber = ETHdata.bodybuf[1];
 8000ec2:	4b60      	ldr	r3, [pc, #384]	@ (8001044 <ETH_CMDPOLL+0x1c0>)
 8000ec4:	f893 2107 	ldrb.w	r2, [r3, #263]	@ 0x107
 8000ec8:	4b60      	ldr	r3, [pc, #384]	@ (800104c <ETH_CMDPOLL+0x1c8>)
 8000eca:	701a      	strb	r2, [r3, #0]
					Tool_Datalen = (ETHdata.bodybuf[2] << 8) + ETHdata.bodybuf[3];
 8000ecc:	4b5d      	ldr	r3, [pc, #372]	@ (8001044 <ETH_CMDPOLL+0x1c0>)
 8000ece:	f893 3108 	ldrb.w	r3, [r3, #264]	@ 0x108
 8000ed2:	021b      	lsls	r3, r3, #8
 8000ed4:	b29b      	uxth	r3, r3
 8000ed6:	4a5b      	ldr	r2, [pc, #364]	@ (8001044 <ETH_CMDPOLL+0x1c0>)
 8000ed8:	f892 2109 	ldrb.w	r2, [r2, #265]	@ 0x109
 8000edc:	4413      	add	r3, r2
 8000ede:	b29a      	uxth	r2, r3
 8000ee0:	4b5b      	ldr	r3, [pc, #364]	@ (8001050 <ETH_CMDPOLL+0x1cc>)
 8000ee2:	801a      	strh	r2, [r3, #0]
					Sampleperiod = (ETHdata.bodybuf[4] << 8) + ETHdata.bodybuf[5];
 8000ee4:	4b57      	ldr	r3, [pc, #348]	@ (8001044 <ETH_CMDPOLL+0x1c0>)
 8000ee6:	f893 310a 	ldrb.w	r3, [r3, #266]	@ 0x10a
 8000eea:	021b      	lsls	r3, r3, #8
 8000eec:	b29b      	uxth	r3, r3
 8000eee:	4a55      	ldr	r2, [pc, #340]	@ (8001044 <ETH_CMDPOLL+0x1c0>)
 8000ef0:	f892 210b 	ldrb.w	r2, [r2, #267]	@ 0x10b
 8000ef4:	4413      	add	r3, r2
 8000ef6:	b29a      	uxth	r2, r3
 8000ef8:	4b56      	ldr	r3, [pc, #344]	@ (8001054 <ETH_CMDPOLL+0x1d0>)
 8000efa:	801a      	strh	r2, [r3, #0]
					Delaytime = (ETHdata.bodybuf[6] << 8) + ETHdata.bodybuf[7];
 8000efc:	4b51      	ldr	r3, [pc, #324]	@ (8001044 <ETH_CMDPOLL+0x1c0>)
 8000efe:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 8000f02:	021b      	lsls	r3, r3, #8
 8000f04:	b29b      	uxth	r3, r3
 8000f06:	4a4f      	ldr	r2, [pc, #316]	@ (8001044 <ETH_CMDPOLL+0x1c0>)
 8000f08:	f892 210d 	ldrb.w	r2, [r2, #269]	@ 0x10d
 8000f0c:	4413      	add	r3, r2
 8000f0e:	b29a      	uxth	r2, r3
 8000f10:	4b51      	ldr	r3, [pc, #324]	@ (8001058 <ETH_CMDPOLL+0x1d4>)
 8000f12:	801a      	strh	r2, [r3, #0]
					Teleset = (ETHdata.bodybuf[8] << 8) + ETHdata.bodybuf[9];
 8000f14:	4b4b      	ldr	r3, [pc, #300]	@ (8001044 <ETH_CMDPOLL+0x1c0>)
 8000f16:	f893 210f 	ldrb.w	r2, [r3, #271]	@ 0x10f
 8000f1a:	4b50      	ldr	r3, [pc, #320]	@ (800105c <ETH_CMDPOLL+0x1d8>)
 8000f1c:	701a      	strb	r2, [r3, #0]
					Data_reserve = (ETHdata.bodybuf[10] << 8) + ETHdata.bodybuf[11];		//各参数暂存
 8000f1e:	4b49      	ldr	r3, [pc, #292]	@ (8001044 <ETH_CMDPOLL+0x1c0>)
 8000f20:	f893 2111 	ldrb.w	r2, [r3, #273]	@ 0x111
 8000f24:	4b4e      	ldr	r3, [pc, #312]	@ (8001060 <ETH_CMDPOLL+0x1dc>)
 8000f26:	701a      	strb	r2, [r3, #0]

					PRINT_LOG("CMD is SERVICETABLE\n\r");
 8000f28:	484e      	ldr	r0, [pc, #312]	@ (8001064 <ETH_CMDPOLL+0x1e0>)
 8000f2a:	f7ff ff6a 	bl	8000e02 <PRINT_LOG>
					Sertableactlen = ETHdata.datalen;
 8000f2e:	4b45      	ldr	r3, [pc, #276]	@ (8001044 <ETH_CMDPOLL+0x1c0>)
 8000f30:	f8b3 2206 	ldrh.w	r2, [r3, #518]	@ 0x206
 8000f34:	4b4c      	ldr	r3, [pc, #304]	@ (8001068 <ETH_CMDPOLL+0x1e4>)
 8000f36:	801a      	strh	r2, [r3, #0]

					for(unsigned char i=0;i<Sertableactlen;i++)
 8000f38:	2300      	movs	r3, #0
 8000f3a:	71fb      	strb	r3, [r7, #7]
 8000f3c:	e00a      	b.n	8000f54 <ETH_CMDPOLL+0xd0>
					{
						Sertableactbuf[i] = ETHdata.bodybuf[i];
 8000f3e:	79fa      	ldrb	r2, [r7, #7]
 8000f40:	79fb      	ldrb	r3, [r7, #7]
 8000f42:	4940      	ldr	r1, [pc, #256]	@ (8001044 <ETH_CMDPOLL+0x1c0>)
 8000f44:	440a      	add	r2, r1
 8000f46:	f892 1106 	ldrb.w	r1, [r2, #262]	@ 0x106
 8000f4a:	4a48      	ldr	r2, [pc, #288]	@ (800106c <ETH_CMDPOLL+0x1e8>)
 8000f4c:	54d1      	strb	r1, [r2, r3]
					for(unsigned char i=0;i<Sertableactlen;i++)
 8000f4e:	79fb      	ldrb	r3, [r7, #7]
 8000f50:	3301      	adds	r3, #1
 8000f52:	71fb      	strb	r3, [r7, #7]
 8000f54:	79fb      	ldrb	r3, [r7, #7]
 8000f56:	b29a      	uxth	r2, r3
 8000f58:	4b43      	ldr	r3, [pc, #268]	@ (8001068 <ETH_CMDPOLL+0x1e4>)
 8000f5a:	881b      	ldrh	r3, [r3, #0]
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	d3ee      	bcc.n	8000f3e <ETH_CMDPOLL+0xba>
					}

					Sertableactflag = 1;
 8000f60:	4b43      	ldr	r3, [pc, #268]	@ (8001070 <ETH_CMDPOLL+0x1ec>)
 8000f62:	2201      	movs	r2, #1
 8000f64:	701a      	strb	r2, [r3, #0]
					isdowndcmdreport = Sampleperiod;
 8000f66:	4b3b      	ldr	r3, [pc, #236]	@ (8001054 <ETH_CMDPOLL+0x1d0>)
 8000f68:	881a      	ldrh	r2, [r3, #0]
 8000f6a:	4b42      	ldr	r3, [pc, #264]	@ (8001074 <ETH_CMDPOLL+0x1f0>)
 8000f6c:	801a      	strh	r2, [r3, #0]
					Downdatatimeoutnum = 0;
 8000f6e:	4b42      	ldr	r3, [pc, #264]	@ (8001078 <ETH_CMDPOLL+0x1f4>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	801a      	strh	r2, [r3, #0]
			break;
 8000f74:	e02a      	b.n	8000fcc <ETH_CMDPOLL+0x148>
			case CONTRALCMD:								//控制命令

					Contralcmdlen = ETHdata.datalen;
 8000f76:	4b33      	ldr	r3, [pc, #204]	@ (8001044 <ETH_CMDPOLL+0x1c0>)
 8000f78:	f8b3 2206 	ldrh.w	r2, [r3, #518]	@ 0x206
 8000f7c:	4b3f      	ldr	r3, [pc, #252]	@ (800107c <ETH_CMDPOLL+0x1f8>)
 8000f7e:	801a      	strh	r2, [r3, #0]
					PRINT_LOG("CMD is TOOLCONTRALCMD\n\r");
 8000f80:	483f      	ldr	r0, [pc, #252]	@ (8001080 <ETH_CMDPOLL+0x1fc>)
 8000f82:	f7ff ff3e 	bl	8000e02 <PRINT_LOG>

					for(unsigned char i=0;i<Contralcmdlen;i++)
 8000f86:	2300      	movs	r3, #0
 8000f88:	71bb      	strb	r3, [r7, #6]
 8000f8a:	e00a      	b.n	8000fa2 <ETH_CMDPOLL+0x11e>
					{
						Contralcmdbuf[i] = ETHdata.bodybuf[i];
 8000f8c:	79ba      	ldrb	r2, [r7, #6]
 8000f8e:	79bb      	ldrb	r3, [r7, #6]
 8000f90:	492c      	ldr	r1, [pc, #176]	@ (8001044 <ETH_CMDPOLL+0x1c0>)
 8000f92:	440a      	add	r2, r1
 8000f94:	f892 1106 	ldrb.w	r1, [r2, #262]	@ 0x106
 8000f98:	4a3a      	ldr	r2, [pc, #232]	@ (8001084 <ETH_CMDPOLL+0x200>)
 8000f9a:	54d1      	strb	r1, [r2, r3]
					for(unsigned char i=0;i<Contralcmdlen;i++)
 8000f9c:	79bb      	ldrb	r3, [r7, #6]
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	71bb      	strb	r3, [r7, #6]
 8000fa2:	79bb      	ldrb	r3, [r7, #6]
 8000fa4:	b29a      	uxth	r2, r3
 8000fa6:	4b35      	ldr	r3, [pc, #212]	@ (800107c <ETH_CMDPOLL+0x1f8>)
 8000fa8:	881b      	ldrh	r3, [r3, #0]
 8000faa:	429a      	cmp	r2, r3
 8000fac:	d3ee      	bcc.n	8000f8c <ETH_CMDPOLL+0x108>
					}

					TOOLCONTRALCMD = true;
 8000fae:	4b36      	ldr	r3, [pc, #216]	@ (8001088 <ETH_CMDPOLL+0x204>)
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	701a      	strb	r2, [r3, #0]
			break;
 8000fb4:	e00a      	b.n	8000fcc <ETH_CMDPOLL+0x148>
			case DEACTIVE:									//服务表反激活
					Sertableactflag = 0;
 8000fb6:	4b2e      	ldr	r3, [pc, #184]	@ (8001070 <ETH_CMDPOLL+0x1ec>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	701a      	strb	r2, [r3, #0]
					PRINT_LOG("CMD is DEACTIVE\n\r");
 8000fbc:	4833      	ldr	r0, [pc, #204]	@ (800108c <ETH_CMDPOLL+0x208>)
 8000fbe:	f7ff ff20 	bl	8000e02 <PRINT_LOG>
					Sampleperiod = 0xFFFF;
 8000fc2:	4b24      	ldr	r3, [pc, #144]	@ (8001054 <ETH_CMDPOLL+0x1d0>)
 8000fc4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000fc8:	801a      	strh	r2, [r3, #0]
			break;
 8000fca:	bf00      	nop
		}
	}
	if(Sertableactflag == 1 && isdowndcmdreport >= Sampleperiod)		//服务表激活后 按照采样率向井下下发
 8000fcc:	4b28      	ldr	r3, [pc, #160]	@ (8001070 <ETH_CMDPOLL+0x1ec>)
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	2b01      	cmp	r3, #1
 8000fd2:	d132      	bne.n	800103a <ETH_CMDPOLL+0x1b6>
 8000fd4:	4b27      	ldr	r3, [pc, #156]	@ (8001074 <ETH_CMDPOLL+0x1f0>)
 8000fd6:	881a      	ldrh	r2, [r3, #0]
 8000fd8:	4b1e      	ldr	r3, [pc, #120]	@ (8001054 <ETH_CMDPOLL+0x1d0>)
 8000fda:	881b      	ldrh	r3, [r3, #0]
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	d32c      	bcc.n	800103a <ETH_CMDPOLL+0x1b6>
	{
		if(TOOLCONTRALCMD)
 8000fe0:	4b29      	ldr	r3, [pc, #164]	@ (8001088 <ETH_CMDPOLL+0x204>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d00b      	beq.n	8001000 <ETH_CMDPOLL+0x17c>
		{
			Downcmdsend(TOOLCONTRALCMD);
 8000fe8:	4b27      	ldr	r3, [pc, #156]	@ (8001088 <ETH_CMDPOLL+0x204>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	4618      	mov	r0, r3
 8000fee:	f000 ff71 	bl	8001ed4 <Downcmdsend>
			TOOLCONTRALCMD = false;
 8000ff2:	4b25      	ldr	r3, [pc, #148]	@ (8001088 <ETH_CMDPOLL+0x204>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	701a      	strb	r2, [r3, #0]
			resendtpe = 0;
 8000ff8:	4b25      	ldr	r3, [pc, #148]	@ (8001090 <ETH_CMDPOLL+0x20c>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	701a      	strb	r2, [r3, #0]
 8000ffe:	e019      	b.n	8001034 <ETH_CMDPOLL+0x1b0>
			//PRINT_LOG("CMD is Toolcontralcmd\n\r");
		}
		else
		{
			if(Downtoolctrlcmdback == false && resendtpe < 3)			//控制命令下发，若井下无响应，重发，若三次无响应，舍弃该次控制命令。
 8001000:	4b24      	ldr	r3, [pc, #144]	@ (8001094 <ETH_CMDPOLL+0x210>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	f083 0301 	eor.w	r3, r3, #1
 8001008:	b2db      	uxtb	r3, r3
 800100a:	2b00      	cmp	r3, #0
 800100c:	d00f      	beq.n	800102e <ETH_CMDPOLL+0x1aa>
 800100e:	4b20      	ldr	r3, [pc, #128]	@ (8001090 <ETH_CMDPOLL+0x20c>)
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	2b02      	cmp	r3, #2
 8001014:	d80b      	bhi.n	800102e <ETH_CMDPOLL+0x1aa>
			{
				Downcmdsend(TOOLCONTRALCMD);
 8001016:	4b1c      	ldr	r3, [pc, #112]	@ (8001088 <ETH_CMDPOLL+0x204>)
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	4618      	mov	r0, r3
 800101c:	f000 ff5a 	bl	8001ed4 <Downcmdsend>
				resendtpe++;
 8001020:	4b1b      	ldr	r3, [pc, #108]	@ (8001090 <ETH_CMDPOLL+0x20c>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	3301      	adds	r3, #1
 8001026:	b2da      	uxtb	r2, r3
 8001028:	4b19      	ldr	r3, [pc, #100]	@ (8001090 <ETH_CMDPOLL+0x20c>)
 800102a:	701a      	strb	r2, [r3, #0]
 800102c:	e002      	b.n	8001034 <ETH_CMDPOLL+0x1b0>
			}
			else
			Downcmdsend(SERVICETABLE);
 800102e:	2001      	movs	r0, #1
 8001030:	f000 ff50 	bl	8001ed4 <Downcmdsend>
			//PRINT_LOG("CMD is Servicetable\n\r");
		}
		isdowndcmdreport = 0;
 8001034:	4b0f      	ldr	r3, [pc, #60]	@ (8001074 <ETH_CMDPOLL+0x1f0>)
 8001036:	2200      	movs	r2, #0
 8001038:	801a      	strh	r2, [r3, #0]
	}
}
 800103a:	bf00      	nop
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	20000234 	.word	0x20000234
 8001048:	200000a0 	.word	0x200000a0
 800104c:	200000a1 	.word	0x200000a1
 8001050:	200000a2 	.word	0x200000a2
 8001054:	20000004 	.word	0x20000004
 8001058:	200000a4 	.word	0x200000a4
 800105c:	200000a6 	.word	0x200000a6
 8001060:	200000a7 	.word	0x200000a7
 8001064:	08005cb8 	.word	0x08005cb8
 8001068:	200000a8 	.word	0x200000a8
 800106c:	2000077c 	.word	0x2000077c
 8001070:	20000006 	.word	0x20000006
 8001074:	20000104 	.word	0x20000104
 8001078:	2000010c 	.word	0x2000010c
 800107c:	200000aa 	.word	0x200000aa
 8001080:	08005cd0 	.word	0x08005cd0
 8001084:	200007b0 	.word	0x200007b0
 8001088:	200000ad 	.word	0x200000ad
 800108c:	08005ce8 	.word	0x08005ce8
 8001090:	200000ac 	.word	0x200000ac
 8001094:	20000658 	.word	0x20000658

08001098 <DOWN_DATAPOLL>:

_Bool OVERTIME;
void DOWN_DATAPOLL(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
	if(DOWNdata.overflag == 1 && Downdatatimeoutnum <= Delaytime)	//数据接收完毕且切在上位机允许的时间范围内
 800109c:	4b11      	ldr	r3, [pc, #68]	@ (80010e4 <DOWN_DATAPOLL+0x4c>)
 800109e:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d10c      	bne.n	80010c0 <DOWN_DATAPOLL+0x28>
 80010a6:	4b10      	ldr	r3, [pc, #64]	@ (80010e8 <DOWN_DATAPOLL+0x50>)
 80010a8:	881a      	ldrh	r2, [r3, #0]
 80010aa:	4b10      	ldr	r3, [pc, #64]	@ (80010ec <DOWN_DATAPOLL+0x54>)
 80010ac:	881b      	ldrh	r3, [r3, #0]
 80010ae:	429a      	cmp	r2, r3
 80010b0:	d806      	bhi.n	80010c0 <DOWN_DATAPOLL+0x28>
	{
		Downdatasend(DATABACK);
 80010b2:	2000      	movs	r0, #0
 80010b4:	f000 ffe8 	bl	8002088 <Downdatasend>
		Resetstate(TOOLDATA);
 80010b8:	2002      	movs	r0, #2
 80010ba:	f001 f881 	bl	80021c0 <Resetstate>
	else if(Sertableactflag == 1 && Downdatatimeoutnum > Delaytime)	//无数据或数据接收完毕但超出上位机允许的时间范围
	{
		Downdatasend(TIMEOUT);
		Resetstate(TOOLDATA);
	}
}
 80010be:	e00f      	b.n	80010e0 <DOWN_DATAPOLL+0x48>
	else if(Sertableactflag == 1 && Downdatatimeoutnum > Delaytime)	//无数据或数据接收完毕但超出上位机允许的时间范围
 80010c0:	4b0b      	ldr	r3, [pc, #44]	@ (80010f0 <DOWN_DATAPOLL+0x58>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d10b      	bne.n	80010e0 <DOWN_DATAPOLL+0x48>
 80010c8:	4b07      	ldr	r3, [pc, #28]	@ (80010e8 <DOWN_DATAPOLL+0x50>)
 80010ca:	881a      	ldrh	r2, [r3, #0]
 80010cc:	4b07      	ldr	r3, [pc, #28]	@ (80010ec <DOWN_DATAPOLL+0x54>)
 80010ce:	881b      	ldrh	r3, [r3, #0]
 80010d0:	429a      	cmp	r2, r3
 80010d2:	d905      	bls.n	80010e0 <DOWN_DATAPOLL+0x48>
		Downdatasend(TIMEOUT);
 80010d4:	2001      	movs	r0, #1
 80010d6:	f000 ffd7 	bl	8002088 <Downdatasend>
		Resetstate(TOOLDATA);
 80010da:	2002      	movs	r0, #2
 80010dc:	f001 f870 	bl	80021c0 <Resetstate>
}
 80010e0:	bf00      	nop
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	2000044c 	.word	0x2000044c
 80010e8:	2000010c 	.word	0x2000010c
 80010ec:	200000a4 	.word	0x200000a4
 80010f0:	20000006 	.word	0x20000006

080010f4 <Sendtimestamp>:

extern unsigned char istimestampreport;
extern unsigned int Report_Timestamp;
unsigned char Timestampbuf[10];
void Sendtimestamp(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
	if(istimestampreport >= 9)
 80010f8:	4b16      	ldr	r3, [pc, #88]	@ (8001154 <Sendtimestamp+0x60>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	2b08      	cmp	r3, #8
 80010fe:	d927      	bls.n	8001150 <Sendtimestamp+0x5c>
	{
		Timestampbuf[1] = 0x47;
 8001100:	4b15      	ldr	r3, [pc, #84]	@ (8001158 <Sendtimestamp+0x64>)
 8001102:	2247      	movs	r2, #71	@ 0x47
 8001104:	705a      	strb	r2, [r3, #1]
		Timestampbuf[2] = 0x47;
 8001106:	4b14      	ldr	r3, [pc, #80]	@ (8001158 <Sendtimestamp+0x64>)
 8001108:	2247      	movs	r2, #71	@ 0x47
 800110a:	709a      	strb	r2, [r3, #2]
		Timestampbuf[2] = Report_Timestamp;
 800110c:	4b13      	ldr	r3, [pc, #76]	@ (800115c <Sendtimestamp+0x68>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	b2da      	uxtb	r2, r3
 8001112:	4b11      	ldr	r3, [pc, #68]	@ (8001158 <Sendtimestamp+0x64>)
 8001114:	709a      	strb	r2, [r3, #2]
		Timestampbuf[3] = Report_Timestamp>>8;
 8001116:	4b11      	ldr	r3, [pc, #68]	@ (800115c <Sendtimestamp+0x68>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	0a1b      	lsrs	r3, r3, #8
 800111c:	b2da      	uxtb	r2, r3
 800111e:	4b0e      	ldr	r3, [pc, #56]	@ (8001158 <Sendtimestamp+0x64>)
 8001120:	70da      	strb	r2, [r3, #3]
		Timestampbuf[4] = Report_Timestamp>>16;
 8001122:	4b0e      	ldr	r3, [pc, #56]	@ (800115c <Sendtimestamp+0x68>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	0c1b      	lsrs	r3, r3, #16
 8001128:	b2da      	uxtb	r2, r3
 800112a:	4b0b      	ldr	r3, [pc, #44]	@ (8001158 <Sendtimestamp+0x64>)
 800112c:	711a      	strb	r2, [r3, #4]
		Timestampbuf[5] = Report_Timestamp>>24;
 800112e:	4b0b      	ldr	r3, [pc, #44]	@ (800115c <Sendtimestamp+0x68>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	0e1b      	lsrs	r3, r3, #24
 8001134:	b2da      	uxtb	r2, r3
 8001136:	4b08      	ldr	r3, [pc, #32]	@ (8001158 <Sendtimestamp+0x64>)
 8001138:	715a      	strb	r2, [r3, #5]
		Timestampbuf[6] = 0xab;
 800113a:	4b07      	ldr	r3, [pc, #28]	@ (8001158 <Sendtimestamp+0x64>)
 800113c:	22ab      	movs	r2, #171	@ 0xab
 800113e:	719a      	strb	r2, [r3, #6]
		ComSendBuf(COM4,Timestampbuf,7);
 8001140:	2207      	movs	r2, #7
 8001142:	4905      	ldr	r1, [pc, #20]	@ (8001158 <Sendtimestamp+0x64>)
 8001144:	20cc      	movs	r0, #204	@ 0xcc
 8001146:	f000 fa51 	bl	80015ec <ComSendBuf>
		istimestampreport = 0;
 800114a:	4b02      	ldr	r3, [pc, #8]	@ (8001154 <Sendtimestamp+0x60>)
 800114c:	2200      	movs	r2, #0
 800114e:	701a      	strb	r2, [r3, #0]
	}
}
 8001150:	bf00      	nop
 8001152:	bd80      	pop	{r7, pc}
 8001154:	20000106 	.word	0x20000106
 8001158:	200000b0 	.word	0x200000b0
 800115c:	20000108 	.word	0x20000108

08001160 <TIM_init>:
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* USER CODE BEGIN 0 */
void TIM_init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
	MX_TIM6_Init();
 8001164:	f000 f808 	bl	8001178 <MX_TIM6_Init>
	HAL_TIM_Base_Start_IT(&htim6);
 8001168:	4802      	ldr	r0, [pc, #8]	@ (8001174 <TIM_init+0x14>)
 800116a:	f002 fea1 	bl	8003eb0 <HAL_TIM_Base_Start_IT>
}
 800116e:	bf00      	nop
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	200000bc 	.word	0x200000bc

08001178 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800117e:	463b      	mov	r3, r7
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001186:	4b15      	ldr	r3, [pc, #84]	@ (80011dc <MX_TIM6_Init+0x64>)
 8001188:	4a15      	ldr	r2, [pc, #84]	@ (80011e0 <MX_TIM6_Init+0x68>)
 800118a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7200-1;
 800118c:	4b13      	ldr	r3, [pc, #76]	@ (80011dc <MX_TIM6_Init+0x64>)
 800118e:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8001192:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001194:	4b11      	ldr	r3, [pc, #68]	@ (80011dc <MX_TIM6_Init+0x64>)
 8001196:	2200      	movs	r2, #0
 8001198:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10-1;
 800119a:	4b10      	ldr	r3, [pc, #64]	@ (80011dc <MX_TIM6_Init+0x64>)
 800119c:	2209      	movs	r2, #9
 800119e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011a0:	4b0e      	ldr	r3, [pc, #56]	@ (80011dc <MX_TIM6_Init+0x64>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80011a6:	480d      	ldr	r0, [pc, #52]	@ (80011dc <MX_TIM6_Init+0x64>)
 80011a8:	f002 fe32 	bl	8003e10 <HAL_TIM_Base_Init>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80011b2:	f7ff fe61 	bl	8000e78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011b6:	2300      	movs	r3, #0
 80011b8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011ba:	2300      	movs	r3, #0
 80011bc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80011be:	463b      	mov	r3, r7
 80011c0:	4619      	mov	r1, r3
 80011c2:	4806      	ldr	r0, [pc, #24]	@ (80011dc <MX_TIM6_Init+0x64>)
 80011c4:	f003 f86e 	bl	80042a4 <HAL_TIMEx_MasterConfigSynchronization>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80011ce:	f7ff fe53 	bl	8000e78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80011d2:	bf00      	nop
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	200000bc 	.word	0x200000bc
 80011e0:	40001000 	.word	0x40001000

080011e4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b084      	sub	sp, #16
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a0d      	ldr	r2, [pc, #52]	@ (8001228 <HAL_TIM_Base_MspInit+0x44>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d113      	bne.n	800121e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80011f6:	4b0d      	ldr	r3, [pc, #52]	@ (800122c <HAL_TIM_Base_MspInit+0x48>)
 80011f8:	69db      	ldr	r3, [r3, #28]
 80011fa:	4a0c      	ldr	r2, [pc, #48]	@ (800122c <HAL_TIM_Base_MspInit+0x48>)
 80011fc:	f043 0310 	orr.w	r3, r3, #16
 8001200:	61d3      	str	r3, [r2, #28]
 8001202:	4b0a      	ldr	r3, [pc, #40]	@ (800122c <HAL_TIM_Base_MspInit+0x48>)
 8001204:	69db      	ldr	r3, [r3, #28]
 8001206:	f003 0310 	and.w	r3, r3, #16
 800120a:	60fb      	str	r3, [r7, #12]
 800120c:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 800120e:	2200      	movs	r2, #0
 8001210:	2100      	movs	r1, #0
 8001212:	2036      	movs	r0, #54	@ 0x36
 8001214:	f001 fb01 	bl	800281a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8001218:	2036      	movs	r0, #54	@ 0x36
 800121a:	f001 fb1a 	bl	8002852 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800121e:	bf00      	nop
 8001220:	3710      	adds	r7, #16
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	40001000 	.word	0x40001000
 800122c:	40021000 	.word	0x40021000

08001230 <HAL_TIM_PeriodElapsedCallback>:
unsigned char istimestampreport = 0;
unsigned int Report_Timestamp = 0;
unsigned short Downdatatimeoutnum = 0;
unsigned char isDowntoolcmdreport = 0;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a0f      	ldr	r2, [pc, #60]	@ (800127c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d116      	bne.n	8001270 <HAL_TIM_PeriodElapsedCallback+0x40>
	{
		Report_Timestamp++;
 8001242:	4b0f      	ldr	r3, [pc, #60]	@ (8001280 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	3301      	adds	r3, #1
 8001248:	4a0d      	ldr	r2, [pc, #52]	@ (8001280 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800124a:	6013      	str	r3, [r2, #0]
		isdowndcmdreport++;
 800124c:	4b0d      	ldr	r3, [pc, #52]	@ (8001284 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800124e:	881b      	ldrh	r3, [r3, #0]
 8001250:	3301      	adds	r3, #1
 8001252:	b29a      	uxth	r2, r3
 8001254:	4b0b      	ldr	r3, [pc, #44]	@ (8001284 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001256:	801a      	strh	r2, [r3, #0]
		istimestampreport++;
 8001258:	4b0b      	ldr	r3, [pc, #44]	@ (8001288 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	3301      	adds	r3, #1
 800125e:	b2da      	uxtb	r2, r3
 8001260:	4b09      	ldr	r3, [pc, #36]	@ (8001288 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001262:	701a      	strb	r2, [r3, #0]
		Downdatatimeoutnum++;
 8001264:	4b09      	ldr	r3, [pc, #36]	@ (800128c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001266:	881b      	ldrh	r3, [r3, #0]
 8001268:	3301      	adds	r3, #1
 800126a:	b29a      	uxth	r2, r3
 800126c:	4b07      	ldr	r3, [pc, #28]	@ (800128c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800126e:	801a      	strh	r2, [r3, #0]
	}
}
 8001270:	bf00      	nop
 8001272:	370c      	adds	r7, #12
 8001274:	46bd      	mov	sp, r7
 8001276:	bc80      	pop	{r7}
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	40001000 	.word	0x40001000
 8001280:	20000108 	.word	0x20000108
 8001284:	20000104 	.word	0x20000104
 8001288:	20000106 	.word	0x20000106
 800128c:	2000010c 	.word	0x2000010c

08001290 <usart_init>:
ETHdatapull ETHdata;
DOWNdatapull DOWNdata;


void usart_init (void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
	MX_DMA_Init();
 8001294:	f7ff f87a 	bl	800038c <MX_DMA_Init>
	MX_UART4_Init();				//串口4初始化:串口4为时间深度同步信息上传串口
 8001298:	f000 f806 	bl	80012a8 <MX_UART4_Init>
	MX_UART5_Init();				//串口5初始化:串口5为MCU与FPGA通讯串口
 800129c:	f000 f82e 	bl	80012fc <MX_UART5_Init>
	MX_USART1_UART_Init();			//串口1初始化:串口1为主控板与ETH通讯串口
 80012a0:	f000 f85c 	bl	800135c <MX_USART1_UART_Init>
}
 80012a4:	bf00      	nop
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <MX_UART4_Init>:
/* UART4 init function */
void MX_UART4_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
  huart4.Instance = UART4;
 80012ac:	4b11      	ldr	r3, [pc, #68]	@ (80012f4 <MX_UART4_Init+0x4c>)
 80012ae:	4a12      	ldr	r2, [pc, #72]	@ (80012f8 <MX_UART4_Init+0x50>)
 80012b0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;						//波特率115200
 80012b2:	4b10      	ldr	r3, [pc, #64]	@ (80012f4 <MX_UART4_Init+0x4c>)
 80012b4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80012b8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80012ba:	4b0e      	ldr	r3, [pc, #56]	@ (80012f4 <MX_UART4_Init+0x4c>)
 80012bc:	2200      	movs	r2, #0
 80012be:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80012c0:	4b0c      	ldr	r3, [pc, #48]	@ (80012f4 <MX_UART4_Init+0x4c>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80012c6:	4b0b      	ldr	r3, [pc, #44]	@ (80012f4 <MX_UART4_Init+0x4c>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80012cc:	4b09      	ldr	r3, [pc, #36]	@ (80012f4 <MX_UART4_Init+0x4c>)
 80012ce:	220c      	movs	r2, #12
 80012d0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012d2:	4b08      	ldr	r3, [pc, #32]	@ (80012f4 <MX_UART4_Init+0x4c>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80012d8:	4b06      	ldr	r3, [pc, #24]	@ (80012f4 <MX_UART4_Init+0x4c>)
 80012da:	2200      	movs	r2, #0
 80012dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80012de:	4805      	ldr	r0, [pc, #20]	@ (80012f4 <MX_UART4_Init+0x4c>)
 80012e0:	f003 f85e 	bl	80043a0 <HAL_UART_Init>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80012ea:	f7ff fdc5 	bl	8000e78 <Error_Handler>
  }
  //HAL_DMA_IRQHandler(&hdma_usart4_tx);
}
 80012ee:	bf00      	nop
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	20000118 	.word	0x20000118
 80012f8:	40004c00 	.word	0x40004c00

080012fc <MX_UART5_Init>:
void MX_UART5_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  huart5.Instance = UART5;
 8001300:	4b13      	ldr	r3, [pc, #76]	@ (8001350 <MX_UART5_Init+0x54>)
 8001302:	4a14      	ldr	r2, [pc, #80]	@ (8001354 <MX_UART5_Init+0x58>)
 8001304:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001306:	4b12      	ldr	r3, [pc, #72]	@ (8001350 <MX_UART5_Init+0x54>)
 8001308:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800130c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800130e:	4b10      	ldr	r3, [pc, #64]	@ (8001350 <MX_UART5_Init+0x54>)
 8001310:	2200      	movs	r2, #0
 8001312:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001314:	4b0e      	ldr	r3, [pc, #56]	@ (8001350 <MX_UART5_Init+0x54>)
 8001316:	2200      	movs	r2, #0
 8001318:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800131a:	4b0d      	ldr	r3, [pc, #52]	@ (8001350 <MX_UART5_Init+0x54>)
 800131c:	2200      	movs	r2, #0
 800131e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001320:	4b0b      	ldr	r3, [pc, #44]	@ (8001350 <MX_UART5_Init+0x54>)
 8001322:	220c      	movs	r2, #12
 8001324:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001326:	4b0a      	ldr	r3, [pc, #40]	@ (8001350 <MX_UART5_Init+0x54>)
 8001328:	2200      	movs	r2, #0
 800132a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800132c:	4b08      	ldr	r3, [pc, #32]	@ (8001350 <MX_UART5_Init+0x54>)
 800132e:	2200      	movs	r2, #0
 8001330:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001332:	4807      	ldr	r0, [pc, #28]	@ (8001350 <MX_UART5_Init+0x54>)
 8001334:	f003 f834 	bl	80043a0 <HAL_UART_Init>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 800133e:	f7ff fd9b 	bl	8000e78 <Error_Handler>
  }
  HAL_UART_Receive_IT(&huart5,(uint8_t*)Uart5_RxBuff, 1);
 8001342:	2201      	movs	r2, #1
 8001344:	4904      	ldr	r1, [pc, #16]	@ (8001358 <MX_UART5_Init+0x5c>)
 8001346:	4802      	ldr	r0, [pc, #8]	@ (8001350 <MX_UART5_Init+0x54>)
 8001348:	f003 f905 	bl	8004556 <HAL_UART_Receive_IT>
}
 800134c:	bf00      	nop
 800134e:	bd80      	pop	{r7, pc}
 8001350:	20000160 	.word	0x20000160
 8001354:	40005000 	.word	0x40005000
 8001358:	20000114 	.word	0x20000114

0800135c <MX_USART1_UART_Init>:

void MX_USART1_UART_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 8001360:	4b15      	ldr	r3, [pc, #84]	@ (80013b8 <MX_USART1_UART_Init+0x5c>)
 8001362:	4a16      	ldr	r2, [pc, #88]	@ (80013bc <MX_USART1_UART_Init+0x60>)
 8001364:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001366:	4b14      	ldr	r3, [pc, #80]	@ (80013b8 <MX_USART1_UART_Init+0x5c>)
 8001368:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800136c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800136e:	4b12      	ldr	r3, [pc, #72]	@ (80013b8 <MX_USART1_UART_Init+0x5c>)
 8001370:	2200      	movs	r2, #0
 8001372:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001374:	4b10      	ldr	r3, [pc, #64]	@ (80013b8 <MX_USART1_UART_Init+0x5c>)
 8001376:	2200      	movs	r2, #0
 8001378:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800137a:	4b0f      	ldr	r3, [pc, #60]	@ (80013b8 <MX_USART1_UART_Init+0x5c>)
 800137c:	2200      	movs	r2, #0
 800137e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001380:	4b0d      	ldr	r3, [pc, #52]	@ (80013b8 <MX_USART1_UART_Init+0x5c>)
 8001382:	220c      	movs	r2, #12
 8001384:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001386:	4b0c      	ldr	r3, [pc, #48]	@ (80013b8 <MX_USART1_UART_Init+0x5c>)
 8001388:	2200      	movs	r2, #0
 800138a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800138c:	4b0a      	ldr	r3, [pc, #40]	@ (80013b8 <MX_USART1_UART_Init+0x5c>)
 800138e:	2200      	movs	r2, #0
 8001390:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001392:	4809      	ldr	r0, [pc, #36]	@ (80013b8 <MX_USART1_UART_Init+0x5c>)
 8001394:	f003 f804 	bl	80043a0 <HAL_UART_Init>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800139e:	f7ff fd6b 	bl	8000e78 <Error_Handler>
  }

  HAL_UART_Receive_IT(&huart1,(uint8_t*)Uart1_RxBuff, 1);
 80013a2:	2201      	movs	r2, #1
 80013a4:	4906      	ldr	r1, [pc, #24]	@ (80013c0 <MX_USART1_UART_Init+0x64>)
 80013a6:	4804      	ldr	r0, [pc, #16]	@ (80013b8 <MX_USART1_UART_Init+0x5c>)
 80013a8:	f003 f8d5 	bl	8004556 <HAL_UART_Receive_IT>

  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80013ac:	4805      	ldr	r0, [pc, #20]	@ (80013c4 <MX_USART1_UART_Init+0x68>)
 80013ae:	f001 fc85 	bl	8002cbc <HAL_DMA_IRQHandler>
}
 80013b2:	bf00      	nop
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	200001a8 	.word	0x200001a8
 80013bc:	40013800 	.word	0x40013800
 80013c0:	20000110 	.word	0x20000110
 80013c4:	200001f0 	.word	0x200001f0

080013c8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b08e      	sub	sp, #56	@ 0x38
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	605a      	str	r2, [r3, #4]
 80013da:	609a      	str	r2, [r3, #8]
 80013dc:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==UART4)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a79      	ldr	r2, [pc, #484]	@ (80015c8 <HAL_UART_MspInit+0x200>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d13a      	bne.n	800145e <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80013e8:	4b78      	ldr	r3, [pc, #480]	@ (80015cc <HAL_UART_MspInit+0x204>)
 80013ea:	69db      	ldr	r3, [r3, #28]
 80013ec:	4a77      	ldr	r2, [pc, #476]	@ (80015cc <HAL_UART_MspInit+0x204>)
 80013ee:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80013f2:	61d3      	str	r3, [r2, #28]
 80013f4:	4b75      	ldr	r3, [pc, #468]	@ (80015cc <HAL_UART_MspInit+0x204>)
 80013f6:	69db      	ldr	r3, [r3, #28]
 80013f8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80013fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80013fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001400:	4b72      	ldr	r3, [pc, #456]	@ (80015cc <HAL_UART_MspInit+0x204>)
 8001402:	699b      	ldr	r3, [r3, #24]
 8001404:	4a71      	ldr	r2, [pc, #452]	@ (80015cc <HAL_UART_MspInit+0x204>)
 8001406:	f043 0310 	orr.w	r3, r3, #16
 800140a:	6193      	str	r3, [r2, #24]
 800140c:	4b6f      	ldr	r3, [pc, #444]	@ (80015cc <HAL_UART_MspInit+0x204>)
 800140e:	699b      	ldr	r3, [r3, #24]
 8001410:	f003 0310 	and.w	r3, r3, #16
 8001414:	623b      	str	r3, [r7, #32]
 8001416:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001418:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800141c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800141e:	2302      	movs	r3, #2
 8001420:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001422:	2303      	movs	r3, #3
 8001424:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001426:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800142a:	4619      	mov	r1, r3
 800142c:	4868      	ldr	r0, [pc, #416]	@ (80015d0 <HAL_UART_MspInit+0x208>)
 800142e:	f001 feaf 	bl	8003190 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001432:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001436:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001438:	2300      	movs	r3, #0
 800143a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143c:	2300      	movs	r3, #0
 800143e:	633b      	str	r3, [r7, #48]	@ 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001440:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001444:	4619      	mov	r1, r3
 8001446:	4862      	ldr	r0, [pc, #392]	@ (80015d0 <HAL_UART_MspInit+0x208>)
 8001448:	f001 fea2 	bl	8003190 <HAL_GPIO_Init>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart4_tx);*/

    //HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
    //HAL_NVIC_EnableIRQ(UART4_IRQn);

    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800144c:	2200      	movs	r2, #0
 800144e:	2100      	movs	r1, #0
 8001450:	2034      	movs	r0, #52	@ 0x34
 8001452:	f001 f9e2 	bl	800281a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001456:	2034      	movs	r0, #52	@ 0x34
 8001458:	f001 f9fb 	bl	8002852 <HAL_NVIC_EnableIRQ>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);

    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  }
}
 800145c:	e0b0      	b.n	80015c0 <HAL_UART_MspInit+0x1f8>
  else if(uartHandle->Instance==UART5)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a5c      	ldr	r2, [pc, #368]	@ (80015d4 <HAL_UART_MspInit+0x20c>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d145      	bne.n	80014f4 <HAL_UART_MspInit+0x12c>
    __HAL_RCC_UART5_CLK_ENABLE();
 8001468:	4b58      	ldr	r3, [pc, #352]	@ (80015cc <HAL_UART_MspInit+0x204>)
 800146a:	69db      	ldr	r3, [r3, #28]
 800146c:	4a57      	ldr	r2, [pc, #348]	@ (80015cc <HAL_UART_MspInit+0x204>)
 800146e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001472:	61d3      	str	r3, [r2, #28]
 8001474:	4b55      	ldr	r3, [pc, #340]	@ (80015cc <HAL_UART_MspInit+0x204>)
 8001476:	69db      	ldr	r3, [r3, #28]
 8001478:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800147c:	61fb      	str	r3, [r7, #28]
 800147e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001480:	4b52      	ldr	r3, [pc, #328]	@ (80015cc <HAL_UART_MspInit+0x204>)
 8001482:	699b      	ldr	r3, [r3, #24]
 8001484:	4a51      	ldr	r2, [pc, #324]	@ (80015cc <HAL_UART_MspInit+0x204>)
 8001486:	f043 0310 	orr.w	r3, r3, #16
 800148a:	6193      	str	r3, [r2, #24]
 800148c:	4b4f      	ldr	r3, [pc, #316]	@ (80015cc <HAL_UART_MspInit+0x204>)
 800148e:	699b      	ldr	r3, [r3, #24]
 8001490:	f003 0310 	and.w	r3, r3, #16
 8001494:	61bb      	str	r3, [r7, #24]
 8001496:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001498:	4b4c      	ldr	r3, [pc, #304]	@ (80015cc <HAL_UART_MspInit+0x204>)
 800149a:	699b      	ldr	r3, [r3, #24]
 800149c:	4a4b      	ldr	r2, [pc, #300]	@ (80015cc <HAL_UART_MspInit+0x204>)
 800149e:	f043 0320 	orr.w	r3, r3, #32
 80014a2:	6193      	str	r3, [r2, #24]
 80014a4:	4b49      	ldr	r3, [pc, #292]	@ (80015cc <HAL_UART_MspInit+0x204>)
 80014a6:	699b      	ldr	r3, [r3, #24]
 80014a8:	f003 0320 	and.w	r3, r3, #32
 80014ac:	617b      	str	r3, [r7, #20]
 80014ae:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80014b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b6:	2302      	movs	r3, #2
 80014b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014ba:	2303      	movs	r3, #3
 80014bc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014be:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014c2:	4619      	mov	r1, r3
 80014c4:	4842      	ldr	r0, [pc, #264]	@ (80015d0 <HAL_UART_MspInit+0x208>)
 80014c6:	f001 fe63 	bl	8003190 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80014ca:	2304      	movs	r3, #4
 80014cc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014ce:	2300      	movs	r3, #0
 80014d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d2:	2300      	movs	r3, #0
 80014d4:	633b      	str	r3, [r7, #48]	@ 0x30
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014d6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014da:	4619      	mov	r1, r3
 80014dc:	483e      	ldr	r0, [pc, #248]	@ (80015d8 <HAL_UART_MspInit+0x210>)
 80014de:	f001 fe57 	bl	8003190 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 80014e2:	2200      	movs	r2, #0
 80014e4:	2100      	movs	r1, #0
 80014e6:	2035      	movs	r0, #53	@ 0x35
 80014e8:	f001 f997 	bl	800281a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80014ec:	2035      	movs	r0, #53	@ 0x35
 80014ee:	f001 f9b0 	bl	8002852 <HAL_NVIC_EnableIRQ>
}
 80014f2:	e065      	b.n	80015c0 <HAL_UART_MspInit+0x1f8>
  else if(uartHandle->Instance==USART1)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a38      	ldr	r2, [pc, #224]	@ (80015dc <HAL_UART_MspInit+0x214>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d160      	bne.n	80015c0 <HAL_UART_MspInit+0x1f8>
    __HAL_RCC_USART1_CLK_ENABLE();
 80014fe:	4b33      	ldr	r3, [pc, #204]	@ (80015cc <HAL_UART_MspInit+0x204>)
 8001500:	699b      	ldr	r3, [r3, #24]
 8001502:	4a32      	ldr	r2, [pc, #200]	@ (80015cc <HAL_UART_MspInit+0x204>)
 8001504:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001508:	6193      	str	r3, [r2, #24]
 800150a:	4b30      	ldr	r3, [pc, #192]	@ (80015cc <HAL_UART_MspInit+0x204>)
 800150c:	699b      	ldr	r3, [r3, #24]
 800150e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001512:	613b      	str	r3, [r7, #16]
 8001514:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001516:	4b2d      	ldr	r3, [pc, #180]	@ (80015cc <HAL_UART_MspInit+0x204>)
 8001518:	699b      	ldr	r3, [r3, #24]
 800151a:	4a2c      	ldr	r2, [pc, #176]	@ (80015cc <HAL_UART_MspInit+0x204>)
 800151c:	f043 0304 	orr.w	r3, r3, #4
 8001520:	6193      	str	r3, [r2, #24]
 8001522:	4b2a      	ldr	r3, [pc, #168]	@ (80015cc <HAL_UART_MspInit+0x204>)
 8001524:	699b      	ldr	r3, [r3, #24]
 8001526:	f003 0304 	and.w	r3, r3, #4
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800152e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001532:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001534:	2302      	movs	r3, #2
 8001536:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001538:	2303      	movs	r3, #3
 800153a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800153c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001540:	4619      	mov	r1, r3
 8001542:	4827      	ldr	r0, [pc, #156]	@ (80015e0 <HAL_UART_MspInit+0x218>)
 8001544:	f001 fe24 	bl	8003190 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001548:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800154c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800154e:	2300      	movs	r3, #0
 8001550:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001552:	2300      	movs	r3, #0
 8001554:	633b      	str	r3, [r7, #48]	@ 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001556:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800155a:	4619      	mov	r1, r3
 800155c:	4820      	ldr	r0, [pc, #128]	@ (80015e0 <HAL_UART_MspInit+0x218>)
 800155e:	f001 fe17 	bl	8003190 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8001562:	4b20      	ldr	r3, [pc, #128]	@ (80015e4 <HAL_UART_MspInit+0x21c>)
 8001564:	4a20      	ldr	r2, [pc, #128]	@ (80015e8 <HAL_UART_MspInit+0x220>)
 8001566:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001568:	4b1e      	ldr	r3, [pc, #120]	@ (80015e4 <HAL_UART_MspInit+0x21c>)
 800156a:	2210      	movs	r2, #16
 800156c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800156e:	4b1d      	ldr	r3, [pc, #116]	@ (80015e4 <HAL_UART_MspInit+0x21c>)
 8001570:	2200      	movs	r2, #0
 8001572:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001574:	4b1b      	ldr	r3, [pc, #108]	@ (80015e4 <HAL_UART_MspInit+0x21c>)
 8001576:	2280      	movs	r2, #128	@ 0x80
 8001578:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800157a:	4b1a      	ldr	r3, [pc, #104]	@ (80015e4 <HAL_UART_MspInit+0x21c>)
 800157c:	2200      	movs	r2, #0
 800157e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001580:	4b18      	ldr	r3, [pc, #96]	@ (80015e4 <HAL_UART_MspInit+0x21c>)
 8001582:	2200      	movs	r2, #0
 8001584:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001586:	4b17      	ldr	r3, [pc, #92]	@ (80015e4 <HAL_UART_MspInit+0x21c>)
 8001588:	2200      	movs	r2, #0
 800158a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800158c:	4b15      	ldr	r3, [pc, #84]	@ (80015e4 <HAL_UART_MspInit+0x21c>)
 800158e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001592:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001594:	4813      	ldr	r0, [pc, #76]	@ (80015e4 <HAL_UART_MspInit+0x21c>)
 8001596:	f001 f977 	bl	8002888 <HAL_DMA_Init>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <HAL_UART_MspInit+0x1dc>
      Error_Handler();
 80015a0:	f7ff fc6a 	bl	8000e78 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	4a0f      	ldr	r2, [pc, #60]	@ (80015e4 <HAL_UART_MspInit+0x21c>)
 80015a8:	639a      	str	r2, [r3, #56]	@ 0x38
 80015aa:	4a0e      	ldr	r2, [pc, #56]	@ (80015e4 <HAL_UART_MspInit+0x21c>)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6253      	str	r3, [r2, #36]	@ 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80015b0:	2200      	movs	r2, #0
 80015b2:	2100      	movs	r1, #0
 80015b4:	2025      	movs	r0, #37	@ 0x25
 80015b6:	f001 f930 	bl	800281a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80015ba:	2025      	movs	r0, #37	@ 0x25
 80015bc:	f001 f949 	bl	8002852 <HAL_NVIC_EnableIRQ>
}
 80015c0:	bf00      	nop
 80015c2:	3738      	adds	r7, #56	@ 0x38
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	40004c00 	.word	0x40004c00
 80015cc:	40021000 	.word	0x40021000
 80015d0:	40011000 	.word	0x40011000
 80015d4:	40005000 	.word	0x40005000
 80015d8:	40011400 	.word	0x40011400
 80015dc:	40013800 	.word	0x40013800
 80015e0:	40010800 	.word	0x40010800
 80015e4:	200001f0 	.word	0x200001f0
 80015e8:	40020044 	.word	0x40020044

080015ec <ComSendBuf>:
  /* USER CODE END USART1_MspDeInit 1 */
  }
}

void ComSendBuf(uint8_t com,uint8_t *p,uint16_t len)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	4603      	mov	r3, r0
 80015f4:	6039      	str	r1, [r7, #0]
 80015f6:	71fb      	strb	r3, [r7, #7]
 80015f8:	4613      	mov	r3, r2
 80015fa:	80bb      	strh	r3, [r7, #4]
	if(com == 0xdd)
 80015fc:	79fb      	ldrb	r3, [r7, #7]
 80015fe:	2bdd      	cmp	r3, #221	@ 0xdd
 8001600:	d105      	bne.n	800160e <ComSendBuf+0x22>
	{
		HAL_UART_Transmit_DMA(&huart1, p, len);
 8001602:	88bb      	ldrh	r3, [r7, #4]
 8001604:	461a      	mov	r2, r3
 8001606:	6839      	ldr	r1, [r7, #0]
 8001608:	480c      	ldr	r0, [pc, #48]	@ (800163c <ComSendBuf+0x50>)
 800160a:	f002 ffc9 	bl	80045a0 <HAL_UART_Transmit_DMA>
	}
	if(com == 0xee)
 800160e:	79fb      	ldrb	r3, [r7, #7]
 8001610:	2bee      	cmp	r3, #238	@ 0xee
 8001612:	d105      	bne.n	8001620 <ComSendBuf+0x34>
	{
		HAL_UART_Transmit(&huart5, p, len, 0xff);
 8001614:	88ba      	ldrh	r2, [r7, #4]
 8001616:	23ff      	movs	r3, #255	@ 0xff
 8001618:	6839      	ldr	r1, [r7, #0]
 800161a:	4809      	ldr	r0, [pc, #36]	@ (8001640 <ComSendBuf+0x54>)
 800161c:	f002 ff10 	bl	8004440 <HAL_UART_Transmit>
	}
	if(com == 0xcc)
 8001620:	79fb      	ldrb	r3, [r7, #7]
 8001622:	2bcc      	cmp	r3, #204	@ 0xcc
 8001624:	d105      	bne.n	8001632 <ComSendBuf+0x46>
	{
		HAL_UART_Transmit(&huart4, p, len, 0xff);
 8001626:	88ba      	ldrh	r2, [r7, #4]
 8001628:	23ff      	movs	r3, #255	@ 0xff
 800162a:	6839      	ldr	r1, [r7, #0]
 800162c:	4805      	ldr	r0, [pc, #20]	@ (8001644 <ComSendBuf+0x58>)
 800162e:	f002 ff07 	bl	8004440 <HAL_UART_Transmit>
	}
}
 8001632:	bf00      	nop
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	200001a8 	.word	0x200001a8
 8001640:	20000160 	.word	0x20000160
 8001644:	20000118 	.word	0x20000118

08001648 <HAL_UART_RxCpltCallback>:
unsigned char Timestampnum;

_Bool Downtoolctrlcmdback;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)		//串口中断回调函数
{
 8001648:	b590      	push	{r4, r7, lr}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1) 		//如果产生中断的是串口1
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a9e      	ldr	r2, [pc, #632]	@ (80018d0 <HAL_UART_RxCpltCallback+0x288>)
 8001656:	4293      	cmp	r3, r2
 8001658:	f040 82e7 	bne.w	8001c2a <HAL_UART_RxCpltCallback+0x5e2>
	{
		if(Uart1_RxBuff[0] == 0xFF && ETHdata.state<3) {ETHdata.state = 0;}
 800165c:	4b9d      	ldr	r3, [pc, #628]	@ (80018d4 <HAL_UART_RxCpltCallback+0x28c>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	2bff      	cmp	r3, #255	@ 0xff
 8001662:	d106      	bne.n	8001672 <HAL_UART_RxCpltCallback+0x2a>
 8001664:	4b9c      	ldr	r3, [pc, #624]	@ (80018d8 <HAL_UART_RxCpltCallback+0x290>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	2b02      	cmp	r3, #2
 800166a:	d802      	bhi.n	8001672 <HAL_UART_RxCpltCallback+0x2a>
 800166c:	4b9a      	ldr	r3, [pc, #616]	@ (80018d8 <HAL_UART_RxCpltCallback+0x290>)
 800166e:	2200      	movs	r2, #0
 8001670:	701a      	strb	r2, [r3, #0]
		switch(ETHdata.state)
 8001672:	4b99      	ldr	r3, [pc, #612]	@ (80018d8 <HAL_UART_RxCpltCallback+0x290>)
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	2b11      	cmp	r3, #17
 8001678:	f200 82d2 	bhi.w	8001c20 <HAL_UART_RxCpltCallback+0x5d8>
 800167c:	a201      	add	r2, pc, #4	@ (adr r2, 8001684 <HAL_UART_RxCpltCallback+0x3c>)
 800167e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001682:	bf00      	nop
 8001684:	080016cd 	.word	0x080016cd
 8001688:	08001703 	.word	0x08001703
 800168c:	08001739 	.word	0x08001739
 8001690:	0800176f 	.word	0x0800176f
 8001694:	080017a5 	.word	0x080017a5
 8001698:	080017d7 	.word	0x080017d7
 800169c:	08001815 	.word	0x08001815
 80016a0:	08001909 	.word	0x08001909
 80016a4:	08001939 	.word	0x08001939
 80016a8:	0800196b 	.word	0x0800196b
 80016ac:	080019a9 	.word	0x080019a9
 80016b0:	08001a13 	.word	0x08001a13
 80016b4:	08001a45 	.word	0x08001a45
 80016b8:	08001a83 	.word	0x08001a83
 80016bc:	08001ab5 	.word	0x08001ab5
 80016c0:	08001b09 	.word	0x08001b09
 80016c4:	08001b8d 	.word	0x08001b8d
 80016c8:	08001bbf 	.word	0x08001bbf
		{
			case 0:
				if(Uart1_RxBuff[0] == 0xFF)					//同步头FF 00 55 AA
 80016cc:	4b81      	ldr	r3, [pc, #516]	@ (80018d4 <HAL_UART_RxCpltCallback+0x28c>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	2bff      	cmp	r3, #255	@ 0xff
 80016d2:	d112      	bne.n	80016fa <HAL_UART_RxCpltCallback+0xb2>
				{
					ETHdata.databuf[ETHdata.headnum++] = Uart1_RxBuff[0];
 80016d4:	4b80      	ldr	r3, [pc, #512]	@ (80018d8 <HAL_UART_RxCpltCallback+0x290>)
 80016d6:	785b      	ldrb	r3, [r3, #1]
 80016d8:	1c5a      	adds	r2, r3, #1
 80016da:	b2d1      	uxtb	r1, r2
 80016dc:	4a7e      	ldr	r2, [pc, #504]	@ (80018d8 <HAL_UART_RxCpltCallback+0x290>)
 80016de:	7051      	strb	r1, [r2, #1]
 80016e0:	4619      	mov	r1, r3
 80016e2:	4b7c      	ldr	r3, [pc, #496]	@ (80018d4 <HAL_UART_RxCpltCallback+0x28c>)
 80016e4:	781a      	ldrb	r2, [r3, #0]
 80016e6:	4b7c      	ldr	r3, [pc, #496]	@ (80018d8 <HAL_UART_RxCpltCallback+0x290>)
 80016e8:	440b      	add	r3, r1
 80016ea:	719a      	strb	r2, [r3, #6]
					ETHdata.state++ ;
 80016ec:	4b7a      	ldr	r3, [pc, #488]	@ (80018d8 <HAL_UART_RxCpltCallback+0x290>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	3301      	adds	r3, #1
 80016f2:	b2da      	uxtb	r2, r3
 80016f4:	4b78      	ldr	r3, [pc, #480]	@ (80018d8 <HAL_UART_RxCpltCallback+0x290>)
 80016f6:	701a      	strb	r2, [r3, #0]
				}
				else
				{
					Resetstate(ETHCMD);
				}
				break;
 80016f8:	e292      	b.n	8001c20 <HAL_UART_RxCpltCallback+0x5d8>
					Resetstate(ETHCMD);
 80016fa:	2001      	movs	r0, #1
 80016fc:	f000 fd60 	bl	80021c0 <Resetstate>
				break;
 8001700:	e28e      	b.n	8001c20 <HAL_UART_RxCpltCallback+0x5d8>
			case 1:
				if(Uart1_RxBuff[0] == 0x00)
 8001702:	4b74      	ldr	r3, [pc, #464]	@ (80018d4 <HAL_UART_RxCpltCallback+0x28c>)
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d112      	bne.n	8001730 <HAL_UART_RxCpltCallback+0xe8>
				{
					ETHdata.databuf[ETHdata.headnum++] = Uart1_RxBuff[0];
 800170a:	4b73      	ldr	r3, [pc, #460]	@ (80018d8 <HAL_UART_RxCpltCallback+0x290>)
 800170c:	785b      	ldrb	r3, [r3, #1]
 800170e:	1c5a      	adds	r2, r3, #1
 8001710:	b2d1      	uxtb	r1, r2
 8001712:	4a71      	ldr	r2, [pc, #452]	@ (80018d8 <HAL_UART_RxCpltCallback+0x290>)
 8001714:	7051      	strb	r1, [r2, #1]
 8001716:	4619      	mov	r1, r3
 8001718:	4b6e      	ldr	r3, [pc, #440]	@ (80018d4 <HAL_UART_RxCpltCallback+0x28c>)
 800171a:	781a      	ldrb	r2, [r3, #0]
 800171c:	4b6e      	ldr	r3, [pc, #440]	@ (80018d8 <HAL_UART_RxCpltCallback+0x290>)
 800171e:	440b      	add	r3, r1
 8001720:	719a      	strb	r2, [r3, #6]
					ETHdata.state++ ;
 8001722:	4b6d      	ldr	r3, [pc, #436]	@ (80018d8 <HAL_UART_RxCpltCallback+0x290>)
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	3301      	adds	r3, #1
 8001728:	b2da      	uxtb	r2, r3
 800172a:	4b6b      	ldr	r3, [pc, #428]	@ (80018d8 <HAL_UART_RxCpltCallback+0x290>)
 800172c:	701a      	strb	r2, [r3, #0]
				}
				else
				{
					Resetstate(ETHCMD);
				}
				break;
 800172e:	e277      	b.n	8001c20 <HAL_UART_RxCpltCallback+0x5d8>
					Resetstate(ETHCMD);
 8001730:	2001      	movs	r0, #1
 8001732:	f000 fd45 	bl	80021c0 <Resetstate>
				break;
 8001736:	e273      	b.n	8001c20 <HAL_UART_RxCpltCallback+0x5d8>
			case 2:
				if(Uart1_RxBuff[0] == 0x55)
 8001738:	4b66      	ldr	r3, [pc, #408]	@ (80018d4 <HAL_UART_RxCpltCallback+0x28c>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	2b55      	cmp	r3, #85	@ 0x55
 800173e:	d112      	bne.n	8001766 <HAL_UART_RxCpltCallback+0x11e>
				{
					ETHdata.databuf[ETHdata.headnum++] = Uart1_RxBuff[0];
 8001740:	4b65      	ldr	r3, [pc, #404]	@ (80018d8 <HAL_UART_RxCpltCallback+0x290>)
 8001742:	785b      	ldrb	r3, [r3, #1]
 8001744:	1c5a      	adds	r2, r3, #1
 8001746:	b2d1      	uxtb	r1, r2
 8001748:	4a63      	ldr	r2, [pc, #396]	@ (80018d8 <HAL_UART_RxCpltCallback+0x290>)
 800174a:	7051      	strb	r1, [r2, #1]
 800174c:	4619      	mov	r1, r3
 800174e:	4b61      	ldr	r3, [pc, #388]	@ (80018d4 <HAL_UART_RxCpltCallback+0x28c>)
 8001750:	781a      	ldrb	r2, [r3, #0]
 8001752:	4b61      	ldr	r3, [pc, #388]	@ (80018d8 <HAL_UART_RxCpltCallback+0x290>)
 8001754:	440b      	add	r3, r1
 8001756:	719a      	strb	r2, [r3, #6]
					ETHdata.state++ ;
 8001758:	4b5f      	ldr	r3, [pc, #380]	@ (80018d8 <HAL_UART_RxCpltCallback+0x290>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	3301      	adds	r3, #1
 800175e:	b2da      	uxtb	r2, r3
 8001760:	4b5d      	ldr	r3, [pc, #372]	@ (80018d8 <HAL_UART_RxCpltCallback+0x290>)
 8001762:	701a      	strb	r2, [r3, #0]
				}
				else
				{
					Resetstate(ETHCMD);
				}
				break;
 8001764:	e25c      	b.n	8001c20 <HAL_UART_RxCpltCallback+0x5d8>
					Resetstate(ETHCMD);
 8001766:	2001      	movs	r0, #1
 8001768:	f000 fd2a 	bl	80021c0 <Resetstate>
				break;
 800176c:	e258      	b.n	8001c20 <HAL_UART_RxCpltCallback+0x5d8>
			case 3:
				if(Uart1_RxBuff[0] == 0xAA)
 800176e:	4b59      	ldr	r3, [pc, #356]	@ (80018d4 <HAL_UART_RxCpltCallback+0x28c>)
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	2baa      	cmp	r3, #170	@ 0xaa
 8001774:	d112      	bne.n	800179c <HAL_UART_RxCpltCallback+0x154>
				{
					ETHdata.databuf[ETHdata.headnum++] = Uart1_RxBuff[0];
 8001776:	4b58      	ldr	r3, [pc, #352]	@ (80018d8 <HAL_UART_RxCpltCallback+0x290>)
 8001778:	785b      	ldrb	r3, [r3, #1]
 800177a:	1c5a      	adds	r2, r3, #1
 800177c:	b2d1      	uxtb	r1, r2
 800177e:	4a56      	ldr	r2, [pc, #344]	@ (80018d8 <HAL_UART_RxCpltCallback+0x290>)
 8001780:	7051      	strb	r1, [r2, #1]
 8001782:	4619      	mov	r1, r3
 8001784:	4b53      	ldr	r3, [pc, #332]	@ (80018d4 <HAL_UART_RxCpltCallback+0x28c>)
 8001786:	781a      	ldrb	r2, [r3, #0]
 8001788:	4b53      	ldr	r3, [pc, #332]	@ (80018d8 <HAL_UART_RxCpltCallback+0x290>)
 800178a:	440b      	add	r3, r1
 800178c:	719a      	strb	r2, [r3, #6]
					ETHdata.state++ ;
 800178e:	4b52      	ldr	r3, [pc, #328]	@ (80018d8 <HAL_UART_RxCpltCallback+0x290>)
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	3301      	adds	r3, #1
 8001794:	b2da      	uxtb	r2, r3
 8001796:	4b50      	ldr	r3, [pc, #320]	@ (80018d8 <HAL_UART_RxCpltCallback+0x290>)
 8001798:	701a      	strb	r2, [r3, #0]
				}
				else
				{
					Resetstate(ETHCMD);
				}
				break;
 800179a:	e241      	b.n	8001c20 <HAL_UART_RxCpltCallback+0x5d8>
					Resetstate(ETHCMD);
 800179c:	2001      	movs	r0, #1
 800179e:	f000 fd0f 	bl	80021c0 <Resetstate>
				break;
 80017a2:	e23d      	b.n	8001c20 <HAL_UART_RxCpltCallback+0x5d8>
			case 4:
				ETHdata.databuf[ETHdata.headnum++] = Uart1_RxBuff[0];
 80017a4:	4b4c      	ldr	r3, [pc, #304]	@ (80018d8 <HAL_UART_RxCpltCallback+0x290>)
 80017a6:	785b      	ldrb	r3, [r3, #1]
 80017a8:	1c5a      	adds	r2, r3, #1
 80017aa:	b2d1      	uxtb	r1, r2
 80017ac:	4a4a      	ldr	r2, [pc, #296]	@ (80018d8 <HAL_UART_RxCpltCallback+0x290>)
 80017ae:	7051      	strb	r1, [r2, #1]
 80017b0:	4619      	mov	r1, r3
 80017b2:	4b48      	ldr	r3, [pc, #288]	@ (80018d4 <HAL_UART_RxCpltCallback+0x28c>)
 80017b4:	781a      	ldrb	r2, [r3, #0]
 80017b6:	4b48      	ldr	r3, [pc, #288]	@ (80018d8 <HAL_UART_RxCpltCallback+0x290>)
 80017b8:	440b      	add	r3, r1
 80017ba:	719a      	strb	r2, [r3, #6]
				ETHdata.datalen = Uart1_RxBuff[0];						//上位机数据长度高字节
 80017bc:	4b45      	ldr	r3, [pc, #276]	@ (80018d4 <HAL_UART_RxCpltCallback+0x28c>)
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	461a      	mov	r2, r3
 80017c2:	4b45      	ldr	r3, [pc, #276]	@ (80018d8 <HAL_UART_RxCpltCallback+0x290>)
 80017c4:	f8a3 2206 	strh.w	r2, [r3, #518]	@ 0x206
				ETHdata.state++ ;
 80017c8:	4b43      	ldr	r3, [pc, #268]	@ (80018d8 <HAL_UART_RxCpltCallback+0x290>)
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	3301      	adds	r3, #1
 80017ce:	b2da      	uxtb	r2, r3
 80017d0:	4b41      	ldr	r3, [pc, #260]	@ (80018d8 <HAL_UART_RxCpltCallback+0x290>)
 80017d2:	701a      	strb	r2, [r3, #0]
				break;
 80017d4:	e224      	b.n	8001c20 <HAL_UART_RxCpltCallback+0x5d8>
			case 5:
				ETHdata.databuf[ETHdata.headnum++] = Uart1_RxBuff[0];
 80017d6:	4b40      	ldr	r3, [pc, #256]	@ (80018d8 <HAL_UART_RxCpltCallback+0x290>)
 80017d8:	785b      	ldrb	r3, [r3, #1]
 80017da:	1c5a      	adds	r2, r3, #1
 80017dc:	b2d1      	uxtb	r1, r2
 80017de:	4a3e      	ldr	r2, [pc, #248]	@ (80018d8 <HAL_UART_RxCpltCallback+0x290>)
 80017e0:	7051      	strb	r1, [r2, #1]
 80017e2:	4619      	mov	r1, r3
 80017e4:	4b3b      	ldr	r3, [pc, #236]	@ (80018d4 <HAL_UART_RxCpltCallback+0x28c>)
 80017e6:	781a      	ldrb	r2, [r3, #0]
 80017e8:	4b3b      	ldr	r3, [pc, #236]	@ (80018d8 <HAL_UART_RxCpltCallback+0x290>)
 80017ea:	440b      	add	r3, r1
 80017ec:	719a      	strb	r2, [r3, #6]
				ETHdata.datalen = (ETHdata.datalen<<8) + Uart1_RxBuff[0];				//上位机数据长度低字节
 80017ee:	4b3a      	ldr	r3, [pc, #232]	@ (80018d8 <HAL_UART_RxCpltCallback+0x290>)
 80017f0:	f8b3 3206 	ldrh.w	r3, [r3, #518]	@ 0x206
 80017f4:	021b      	lsls	r3, r3, #8
 80017f6:	b29b      	uxth	r3, r3
 80017f8:	4a36      	ldr	r2, [pc, #216]	@ (80018d4 <HAL_UART_RxCpltCallback+0x28c>)
 80017fa:	7812      	ldrb	r2, [r2, #0]
 80017fc:	4413      	add	r3, r2
 80017fe:	b29a      	uxth	r2, r3
 8001800:	4b35      	ldr	r3, [pc, #212]	@ (80018d8 <HAL_UART_RxCpltCallback+0x290>)
 8001802:	f8a3 2206 	strh.w	r2, [r3, #518]	@ 0x206
				ETHdata.state++ ;
 8001806:	4b34      	ldr	r3, [pc, #208]	@ (80018d8 <HAL_UART_RxCpltCallback+0x290>)
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	3301      	adds	r3, #1
 800180c:	b2da      	uxtb	r2, r3
 800180e:	4b32      	ldr	r3, [pc, #200]	@ (80018d8 <HAL_UART_RxCpltCallback+0x290>)
 8001810:	701a      	strb	r2, [r3, #0]
				break;
 8001812:	e205      	b.n	8001c20 <HAL_UART_RxCpltCallback+0x5d8>
			case 6:
				ETHdata.databuf[ETHdata.headnum++] = Uart1_RxBuff[0];
 8001814:	4b30      	ldr	r3, [pc, #192]	@ (80018d8 <HAL_UART_RxCpltCallback+0x290>)
 8001816:	785b      	ldrb	r3, [r3, #1]
 8001818:	1c5a      	adds	r2, r3, #1
 800181a:	b2d1      	uxtb	r1, r2
 800181c:	4a2e      	ldr	r2, [pc, #184]	@ (80018d8 <HAL_UART_RxCpltCallback+0x290>)
 800181e:	7051      	strb	r1, [r2, #1]
 8001820:	4619      	mov	r1, r3
 8001822:	4b2c      	ldr	r3, [pc, #176]	@ (80018d4 <HAL_UART_RxCpltCallback+0x28c>)
 8001824:	781a      	ldrb	r2, [r3, #0]
 8001826:	4b2c      	ldr	r3, [pc, #176]	@ (80018d8 <HAL_UART_RxCpltCallback+0x290>)
 8001828:	440b      	add	r3, r1
 800182a:	719a      	strb	r2, [r3, #6]
				ETHdata.Overalltype = Uart1_RxBuff[0];						//该字节为数据读写总类型标示字节，解析读写数据类型，高位代表读或写，低位代表数据类型
 800182c:	4b29      	ldr	r3, [pc, #164]	@ (80018d4 <HAL_UART_RxCpltCallback+0x28c>)
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	461a      	mov	r2, r3
 8001832:	4b29      	ldr	r3, [pc, #164]	@ (80018d8 <HAL_UART_RxCpltCallback+0x290>)
 8001834:	809a      	strh	r2, [r3, #4]
				if((ETHdata.Overalltype & 0xF0) == 0x10)
 8001836:	4b28      	ldr	r3, [pc, #160]	@ (80018d8 <HAL_UART_RxCpltCallback+0x290>)
 8001838:	889b      	ldrh	r3, [r3, #4]
 800183a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800183e:	2b10      	cmp	r3, #16
 8001840:	d14e      	bne.n	80018e0 <HAL_UART_RxCpltCallback+0x298>
				{
					Totaltype = DATA_WR;							//向井下写数据
 8001842:	4b26      	ldr	r3, [pc, #152]	@ (80018dc <HAL_UART_RxCpltCallback+0x294>)
 8001844:	2201      	movs	r2, #1
 8001846:	701a      	strb	r2, [r3, #0]
					if((ETHdata.Overalltype & 0x0F) == 0x00)
 8001848:	4b23      	ldr	r3, [pc, #140]	@ (80018d8 <HAL_UART_RxCpltCallback+0x290>)
 800184a:	889b      	ldrh	r3, [r3, #4]
 800184c:	f003 030f 	and.w	r3, r3, #15
 8001850:	2b00      	cmp	r3, #0
 8001852:	d10a      	bne.n	800186a <HAL_UART_RxCpltCallback+0x222>
					{
						ETHdata.Workmode = SERVICETABLE;					//服务表激活
 8001854:	4b20      	ldr	r3, [pc, #128]	@ (80018d8 <HAL_UART_RxCpltCallback+0x290>)
 8001856:	2201      	movs	r2, #1
 8001858:	f883 2208 	strb.w	r2, [r3, #520]	@ 0x208
						ETHdata.state++ ;
 800185c:	4b1e      	ldr	r3, [pc, #120]	@ (80018d8 <HAL_UART_RxCpltCallback+0x290>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	3301      	adds	r3, #1
 8001862:	b2da      	uxtb	r2, r3
 8001864:	4b1c      	ldr	r3, [pc, #112]	@ (80018d8 <HAL_UART_RxCpltCallback+0x290>)
 8001866:	701a      	strb	r2, [r3, #0]
				}
				else
				{
					Resetstate(ETHCMD);
				}
				break;
 8001868:	e1da      	b.n	8001c20 <HAL_UART_RxCpltCallback+0x5d8>
					else if((ETHdata.Overalltype & 0x0F) == 0x01)
 800186a:	4b1b      	ldr	r3, [pc, #108]	@ (80018d8 <HAL_UART_RxCpltCallback+0x290>)
 800186c:	889b      	ldrh	r3, [r3, #4]
 800186e:	f003 030f 	and.w	r3, r3, #15
 8001872:	2b01      	cmp	r3, #1
 8001874:	d10a      	bne.n	800188c <HAL_UART_RxCpltCallback+0x244>
						ETHdata.Workmode = CONTRALCMD;						//下发控制命令
 8001876:	4b18      	ldr	r3, [pc, #96]	@ (80018d8 <HAL_UART_RxCpltCallback+0x290>)
 8001878:	2202      	movs	r2, #2
 800187a:	f883 2208 	strb.w	r2, [r3, #520]	@ 0x208
						ETHdata.state++ ;
 800187e:	4b16      	ldr	r3, [pc, #88]	@ (80018d8 <HAL_UART_RxCpltCallback+0x290>)
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	3301      	adds	r3, #1
 8001884:	b2da      	uxtb	r2, r3
 8001886:	4b14      	ldr	r3, [pc, #80]	@ (80018d8 <HAL_UART_RxCpltCallback+0x290>)
 8001888:	701a      	strb	r2, [r3, #0]
				break;
 800188a:	e1c9      	b.n	8001c20 <HAL_UART_RxCpltCallback+0x5d8>
					else if((ETHdata.Overalltype & 0x0F) == 0x03)
 800188c:	4b12      	ldr	r3, [pc, #72]	@ (80018d8 <HAL_UART_RxCpltCallback+0x290>)
 800188e:	889b      	ldrh	r3, [r3, #4]
 8001890:	f003 030f 	and.w	r3, r3, #15
 8001894:	2b03      	cmp	r3, #3
 8001896:	d106      	bne.n	80018a6 <HAL_UART_RxCpltCallback+0x25e>
						ETHdata.state++ ;
 8001898:	4b0f      	ldr	r3, [pc, #60]	@ (80018d8 <HAL_UART_RxCpltCallback+0x290>)
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	3301      	adds	r3, #1
 800189e:	b2da      	uxtb	r2, r3
 80018a0:	4b0d      	ldr	r3, [pc, #52]	@ (80018d8 <HAL_UART_RxCpltCallback+0x290>)
 80018a2:	701a      	strb	r2, [r3, #0]
				break;
 80018a4:	e1bc      	b.n	8001c20 <HAL_UART_RxCpltCallback+0x5d8>
					else if((ETHdata.Overalltype & 0x0F) == 0x04)
 80018a6:	4b0c      	ldr	r3, [pc, #48]	@ (80018d8 <HAL_UART_RxCpltCallback+0x290>)
 80018a8:	889b      	ldrh	r3, [r3, #4]
 80018aa:	f003 030f 	and.w	r3, r3, #15
 80018ae:	2b04      	cmp	r3, #4
 80018b0:	d10a      	bne.n	80018c8 <HAL_UART_RxCpltCallback+0x280>
						ETHdata.Workmode = DEACTIVE;						//服务表反激活
 80018b2:	4b09      	ldr	r3, [pc, #36]	@ (80018d8 <HAL_UART_RxCpltCallback+0x290>)
 80018b4:	2204      	movs	r2, #4
 80018b6:	f883 2208 	strb.w	r2, [r3, #520]	@ 0x208
						ETHdata.state++ ;
 80018ba:	4b07      	ldr	r3, [pc, #28]	@ (80018d8 <HAL_UART_RxCpltCallback+0x290>)
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	3301      	adds	r3, #1
 80018c0:	b2da      	uxtb	r2, r3
 80018c2:	4b05      	ldr	r3, [pc, #20]	@ (80018d8 <HAL_UART_RxCpltCallback+0x290>)
 80018c4:	701a      	strb	r2, [r3, #0]
				break;
 80018c6:	e1ab      	b.n	8001c20 <HAL_UART_RxCpltCallback+0x5d8>
						Resetstate(ETHCMD);
 80018c8:	2001      	movs	r0, #1
 80018ca:	f000 fc79 	bl	80021c0 <Resetstate>
				break;
 80018ce:	e1a7      	b.n	8001c20 <HAL_UART_RxCpltCallback+0x5d8>
 80018d0:	40013800 	.word	0x40013800
 80018d4:	20000110 	.word	0x20000110
 80018d8:	20000234 	.word	0x20000234
 80018dc:	20000656 	.word	0x20000656
				else if((ETHdata.Overalltype & 0xF0) == 0x20)
 80018e0:	4b84      	ldr	r3, [pc, #528]	@ (8001af4 <HAL_UART_RxCpltCallback+0x4ac>)
 80018e2:	889b      	ldrh	r3, [r3, #4]
 80018e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80018e8:	2b20      	cmp	r3, #32
 80018ea:	d109      	bne.n	8001900 <HAL_UART_RxCpltCallback+0x2b8>
					Totaltype = DATA_RD;							//从井下读数据
 80018ec:	4b82      	ldr	r3, [pc, #520]	@ (8001af8 <HAL_UART_RxCpltCallback+0x4b0>)
 80018ee:	2202      	movs	r2, #2
 80018f0:	701a      	strb	r2, [r3, #0]
					ETHdata.state++ ;
 80018f2:	4b80      	ldr	r3, [pc, #512]	@ (8001af4 <HAL_UART_RxCpltCallback+0x4ac>)
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	3301      	adds	r3, #1
 80018f8:	b2da      	uxtb	r2, r3
 80018fa:	4b7e      	ldr	r3, [pc, #504]	@ (8001af4 <HAL_UART_RxCpltCallback+0x4ac>)
 80018fc:	701a      	strb	r2, [r3, #0]
				break;
 80018fe:	e18f      	b.n	8001c20 <HAL_UART_RxCpltCallback+0x5d8>
					Resetstate(ETHCMD);
 8001900:	2001      	movs	r0, #1
 8001902:	f000 fc5d 	bl	80021c0 <Resetstate>
				break;
 8001906:	e18b      	b.n	8001c20 <HAL_UART_RxCpltCallback+0x5d8>
			case 7:
				ETHdata.databuf[ETHdata.headnum++] = Uart1_RxBuff[0];		//仪器地址
 8001908:	4b7a      	ldr	r3, [pc, #488]	@ (8001af4 <HAL_UART_RxCpltCallback+0x4ac>)
 800190a:	785b      	ldrb	r3, [r3, #1]
 800190c:	1c5a      	adds	r2, r3, #1
 800190e:	b2d1      	uxtb	r1, r2
 8001910:	4a78      	ldr	r2, [pc, #480]	@ (8001af4 <HAL_UART_RxCpltCallback+0x4ac>)
 8001912:	7051      	strb	r1, [r2, #1]
 8001914:	4619      	mov	r1, r3
 8001916:	4b79      	ldr	r3, [pc, #484]	@ (8001afc <HAL_UART_RxCpltCallback+0x4b4>)
 8001918:	781a      	ldrb	r2, [r3, #0]
 800191a:	4b76      	ldr	r3, [pc, #472]	@ (8001af4 <HAL_UART_RxCpltCallback+0x4ac>)
 800191c:	440b      	add	r3, r1
 800191e:	719a      	strb	r2, [r3, #6]
				ETHdata.Tooladdress = Uart1_RxBuff[0];
 8001920:	4b76      	ldr	r3, [pc, #472]	@ (8001afc <HAL_UART_RxCpltCallback+0x4b4>)
 8001922:	781a      	ldrb	r2, [r3, #0]
 8001924:	4b73      	ldr	r3, [pc, #460]	@ (8001af4 <HAL_UART_RxCpltCallback+0x4ac>)
 8001926:	f883 2209 	strb.w	r2, [r3, #521]	@ 0x209
				ETHdata.state++ ;
 800192a:	4b72      	ldr	r3, [pc, #456]	@ (8001af4 <HAL_UART_RxCpltCallback+0x4ac>)
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	3301      	adds	r3, #1
 8001930:	b2da      	uxtb	r2, r3
 8001932:	4b70      	ldr	r3, [pc, #448]	@ (8001af4 <HAL_UART_RxCpltCallback+0x4ac>)
 8001934:	701a      	strb	r2, [r3, #0]
				break;
 8001936:	e173      	b.n	8001c20 <HAL_UART_RxCpltCallback+0x5d8>
			case 8:
				ETHdata.databuf[ETHdata.headnum++] = Uart1_RxBuff[0];
 8001938:	4b6e      	ldr	r3, [pc, #440]	@ (8001af4 <HAL_UART_RxCpltCallback+0x4ac>)
 800193a:	785b      	ldrb	r3, [r3, #1]
 800193c:	1c5a      	adds	r2, r3, #1
 800193e:	b2d1      	uxtb	r1, r2
 8001940:	4a6c      	ldr	r2, [pc, #432]	@ (8001af4 <HAL_UART_RxCpltCallback+0x4ac>)
 8001942:	7051      	strb	r1, [r2, #1]
 8001944:	4619      	mov	r1, r3
 8001946:	4b6d      	ldr	r3, [pc, #436]	@ (8001afc <HAL_UART_RxCpltCallback+0x4b4>)
 8001948:	781a      	ldrb	r2, [r3, #0]
 800194a:	4b6a      	ldr	r3, [pc, #424]	@ (8001af4 <HAL_UART_RxCpltCallback+0x4ac>)
 800194c:	440b      	add	r3, r1
 800194e:	719a      	strb	r2, [r3, #6]
				ETHdata.Cmdword = Uart1_RxBuff[0];
 8001950:	4b6a      	ldr	r3, [pc, #424]	@ (8001afc <HAL_UART_RxCpltCallback+0x4b4>)
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	461a      	mov	r2, r3
 8001956:	4b67      	ldr	r3, [pc, #412]	@ (8001af4 <HAL_UART_RxCpltCallback+0x4ac>)
 8001958:	f8a3 220a 	strh.w	r2, [r3, #522]	@ 0x20a
				ETHdata.state++ ;
 800195c:	4b65      	ldr	r3, [pc, #404]	@ (8001af4 <HAL_UART_RxCpltCallback+0x4ac>)
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	3301      	adds	r3, #1
 8001962:	b2da      	uxtb	r2, r3
 8001964:	4b63      	ldr	r3, [pc, #396]	@ (8001af4 <HAL_UART_RxCpltCallback+0x4ac>)
 8001966:	701a      	strb	r2, [r3, #0]
				break;
 8001968:	e15a      	b.n	8001c20 <HAL_UART_RxCpltCallback+0x5d8>
			case 9:
				ETHdata.databuf[ETHdata.headnum++] = Uart1_RxBuff[0];		//命令字/subset number
 800196a:	4b62      	ldr	r3, [pc, #392]	@ (8001af4 <HAL_UART_RxCpltCallback+0x4ac>)
 800196c:	785b      	ldrb	r3, [r3, #1]
 800196e:	1c5a      	adds	r2, r3, #1
 8001970:	b2d1      	uxtb	r1, r2
 8001972:	4a60      	ldr	r2, [pc, #384]	@ (8001af4 <HAL_UART_RxCpltCallback+0x4ac>)
 8001974:	7051      	strb	r1, [r2, #1]
 8001976:	4619      	mov	r1, r3
 8001978:	4b60      	ldr	r3, [pc, #384]	@ (8001afc <HAL_UART_RxCpltCallback+0x4b4>)
 800197a:	781a      	ldrb	r2, [r3, #0]
 800197c:	4b5d      	ldr	r3, [pc, #372]	@ (8001af4 <HAL_UART_RxCpltCallback+0x4ac>)
 800197e:	440b      	add	r3, r1
 8001980:	719a      	strb	r2, [r3, #6]
				ETHdata.Cmdword = (ETHdata.Cmdword << 8) + Uart1_RxBuff[0];
 8001982:	4b5c      	ldr	r3, [pc, #368]	@ (8001af4 <HAL_UART_RxCpltCallback+0x4ac>)
 8001984:	f8b3 320a 	ldrh.w	r3, [r3, #522]	@ 0x20a
 8001988:	021b      	lsls	r3, r3, #8
 800198a:	b29b      	uxth	r3, r3
 800198c:	4a5b      	ldr	r2, [pc, #364]	@ (8001afc <HAL_UART_RxCpltCallback+0x4b4>)
 800198e:	7812      	ldrb	r2, [r2, #0]
 8001990:	4413      	add	r3, r2
 8001992:	b29a      	uxth	r2, r3
 8001994:	4b57      	ldr	r3, [pc, #348]	@ (8001af4 <HAL_UART_RxCpltCallback+0x4ac>)
 8001996:	f8a3 220a 	strh.w	r2, [r3, #522]	@ 0x20a
				ETHdata.state++ ;
 800199a:	4b56      	ldr	r3, [pc, #344]	@ (8001af4 <HAL_UART_RxCpltCallback+0x4ac>)
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	3301      	adds	r3, #1
 80019a0:	b2da      	uxtb	r2, r3
 80019a2:	4b54      	ldr	r3, [pc, #336]	@ (8001af4 <HAL_UART_RxCpltCallback+0x4ac>)
 80019a4:	701a      	strb	r2, [r3, #0]
				break;
 80019a6:	e13b      	b.n	8001c20 <HAL_UART_RxCpltCallback+0x5d8>
			case 10:
				if(Timestampnum <= 4)									//四字节时间戳
 80019a8:	4b55      	ldr	r3, [pc, #340]	@ (8001b00 <HAL_UART_RxCpltCallback+0x4b8>)
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	2b04      	cmp	r3, #4
 80019ae:	f200 8134 	bhi.w	8001c1a <HAL_UART_RxCpltCallback+0x5d2>
				{
					Timestampnum++;
 80019b2:	4b53      	ldr	r3, [pc, #332]	@ (8001b00 <HAL_UART_RxCpltCallback+0x4b8>)
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	3301      	adds	r3, #1
 80019b8:	b2da      	uxtb	r2, r3
 80019ba:	4b51      	ldr	r3, [pc, #324]	@ (8001b00 <HAL_UART_RxCpltCallback+0x4b8>)
 80019bc:	701a      	strb	r2, [r3, #0]
					ETHdata.databuf[ETHdata.headnum++] = Uart1_RxBuff[0];
 80019be:	4b4d      	ldr	r3, [pc, #308]	@ (8001af4 <HAL_UART_RxCpltCallback+0x4ac>)
 80019c0:	785b      	ldrb	r3, [r3, #1]
 80019c2:	1c5a      	adds	r2, r3, #1
 80019c4:	b2d1      	uxtb	r1, r2
 80019c6:	4a4b      	ldr	r2, [pc, #300]	@ (8001af4 <HAL_UART_RxCpltCallback+0x4ac>)
 80019c8:	7051      	strb	r1, [r2, #1]
 80019ca:	4619      	mov	r1, r3
 80019cc:	4b4b      	ldr	r3, [pc, #300]	@ (8001afc <HAL_UART_RxCpltCallback+0x4b4>)
 80019ce:	781a      	ldrb	r2, [r3, #0]
 80019d0:	4b48      	ldr	r3, [pc, #288]	@ (8001af4 <HAL_UART_RxCpltCallback+0x4ac>)
 80019d2:	440b      	add	r3, r1
 80019d4:	719a      	strb	r2, [r3, #6]
					ETHdata.Timestamp = (ETHdata.Timestamp << 8) + Uart1_RxBuff[0];
 80019d6:	4b47      	ldr	r3, [pc, #284]	@ (8001af4 <HAL_UART_RxCpltCallback+0x4ac>)
 80019d8:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 80019dc:	021b      	lsls	r3, r3, #8
 80019de:	4a47      	ldr	r2, [pc, #284]	@ (8001afc <HAL_UART_RxCpltCallback+0x4b4>)
 80019e0:	7812      	ldrb	r2, [r2, #0]
 80019e2:	4413      	add	r3, r2
 80019e4:	4a43      	ldr	r2, [pc, #268]	@ (8001af4 <HAL_UART_RxCpltCallback+0x4ac>)
 80019e6:	f8c2 320c 	str.w	r3, [r2, #524]	@ 0x20c
					HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_12);
 80019ea:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80019ee:	4845      	ldr	r0, [pc, #276]	@ (8001b04 <HAL_UART_RxCpltCallback+0x4bc>)
 80019f0:	f001 fd91 	bl	8003516 <HAL_GPIO_TogglePin>
					if(Timestampnum >=4)
 80019f4:	4b42      	ldr	r3, [pc, #264]	@ (8001b00 <HAL_UART_RxCpltCallback+0x4b8>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	2b03      	cmp	r3, #3
 80019fa:	f240 810e 	bls.w	8001c1a <HAL_UART_RxCpltCallback+0x5d2>
					{
						ETHdata.state++;
 80019fe:	4b3d      	ldr	r3, [pc, #244]	@ (8001af4 <HAL_UART_RxCpltCallback+0x4ac>)
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	3301      	adds	r3, #1
 8001a04:	b2da      	uxtb	r2, r3
 8001a06:	4b3b      	ldr	r3, [pc, #236]	@ (8001af4 <HAL_UART_RxCpltCallback+0x4ac>)
 8001a08:	701a      	strb	r2, [r3, #0]
						Timestampnum = 0;
 8001a0a:	4b3d      	ldr	r3, [pc, #244]	@ (8001b00 <HAL_UART_RxCpltCallback+0x4b8>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	701a      	strb	r2, [r3, #0]
					}
				}
				break;
 8001a10:	e103      	b.n	8001c1a <HAL_UART_RxCpltCallback+0x5d2>
			case 11:
				ETHdata.databuf[ETHdata.headnum++] = Uart1_RxBuff[0];
 8001a12:	4b38      	ldr	r3, [pc, #224]	@ (8001af4 <HAL_UART_RxCpltCallback+0x4ac>)
 8001a14:	785b      	ldrb	r3, [r3, #1]
 8001a16:	1c5a      	adds	r2, r3, #1
 8001a18:	b2d1      	uxtb	r1, r2
 8001a1a:	4a36      	ldr	r2, [pc, #216]	@ (8001af4 <HAL_UART_RxCpltCallback+0x4ac>)
 8001a1c:	7051      	strb	r1, [r2, #1]
 8001a1e:	4619      	mov	r1, r3
 8001a20:	4b36      	ldr	r3, [pc, #216]	@ (8001afc <HAL_UART_RxCpltCallback+0x4b4>)
 8001a22:	781a      	ldrb	r2, [r3, #0]
 8001a24:	4b33      	ldr	r3, [pc, #204]	@ (8001af4 <HAL_UART_RxCpltCallback+0x4ac>)
 8001a26:	440b      	add	r3, r1
 8001a28:	719a      	strb	r2, [r3, #6]
				ETHdata.Overtime = Uart1_RxBuff[0];
 8001a2a:	4b34      	ldr	r3, [pc, #208]	@ (8001afc <HAL_UART_RxCpltCallback+0x4b4>)
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	461a      	mov	r2, r3
 8001a30:	4b30      	ldr	r3, [pc, #192]	@ (8001af4 <HAL_UART_RxCpltCallback+0x4ac>)
 8001a32:	f8a3 2210 	strh.w	r2, [r3, #528]	@ 0x210
				ETHdata.state++;
 8001a36:	4b2f      	ldr	r3, [pc, #188]	@ (8001af4 <HAL_UART_RxCpltCallback+0x4ac>)
 8001a38:	781b      	ldrb	r3, [r3, #0]
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	b2da      	uxtb	r2, r3
 8001a3e:	4b2d      	ldr	r3, [pc, #180]	@ (8001af4 <HAL_UART_RxCpltCallback+0x4ac>)
 8001a40:	701a      	strb	r2, [r3, #0]
				break;
 8001a42:	e0ed      	b.n	8001c20 <HAL_UART_RxCpltCallback+0x5d8>
			case 12:
				ETHdata.databuf[ETHdata.headnum++] = Uart1_RxBuff[0];
 8001a44:	4b2b      	ldr	r3, [pc, #172]	@ (8001af4 <HAL_UART_RxCpltCallback+0x4ac>)
 8001a46:	785b      	ldrb	r3, [r3, #1]
 8001a48:	1c5a      	adds	r2, r3, #1
 8001a4a:	b2d1      	uxtb	r1, r2
 8001a4c:	4a29      	ldr	r2, [pc, #164]	@ (8001af4 <HAL_UART_RxCpltCallback+0x4ac>)
 8001a4e:	7051      	strb	r1, [r2, #1]
 8001a50:	4619      	mov	r1, r3
 8001a52:	4b2a      	ldr	r3, [pc, #168]	@ (8001afc <HAL_UART_RxCpltCallback+0x4b4>)
 8001a54:	781a      	ldrb	r2, [r3, #0]
 8001a56:	4b27      	ldr	r3, [pc, #156]	@ (8001af4 <HAL_UART_RxCpltCallback+0x4ac>)
 8001a58:	440b      	add	r3, r1
 8001a5a:	719a      	strb	r2, [r3, #6]
				ETHdata.Overtime = (ETHdata.Overtime << 8) + Uart1_RxBuff[0];						//超时时间
 8001a5c:	4b25      	ldr	r3, [pc, #148]	@ (8001af4 <HAL_UART_RxCpltCallback+0x4ac>)
 8001a5e:	f8b3 3210 	ldrh.w	r3, [r3, #528]	@ 0x210
 8001a62:	021b      	lsls	r3, r3, #8
 8001a64:	b29b      	uxth	r3, r3
 8001a66:	4a25      	ldr	r2, [pc, #148]	@ (8001afc <HAL_UART_RxCpltCallback+0x4b4>)
 8001a68:	7812      	ldrb	r2, [r2, #0]
 8001a6a:	4413      	add	r3, r2
 8001a6c:	b29a      	uxth	r2, r3
 8001a6e:	4b21      	ldr	r3, [pc, #132]	@ (8001af4 <HAL_UART_RxCpltCallback+0x4ac>)
 8001a70:	f8a3 2210 	strh.w	r2, [r3, #528]	@ 0x210
				ETHdata.state++;
 8001a74:	4b1f      	ldr	r3, [pc, #124]	@ (8001af4 <HAL_UART_RxCpltCallback+0x4ac>)
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	3301      	adds	r3, #1
 8001a7a:	b2da      	uxtb	r2, r3
 8001a7c:	4b1d      	ldr	r3, [pc, #116]	@ (8001af4 <HAL_UART_RxCpltCallback+0x4ac>)
 8001a7e:	701a      	strb	r2, [r3, #0]
				break;
 8001a80:	e0ce      	b.n	8001c20 <HAL_UART_RxCpltCallback+0x5d8>
			case 13:
				ETHdata.databuf[ETHdata.headnum++] = Uart1_RxBuff[0];
 8001a82:	4b1c      	ldr	r3, [pc, #112]	@ (8001af4 <HAL_UART_RxCpltCallback+0x4ac>)
 8001a84:	785b      	ldrb	r3, [r3, #1]
 8001a86:	1c5a      	adds	r2, r3, #1
 8001a88:	b2d1      	uxtb	r1, r2
 8001a8a:	4a1a      	ldr	r2, [pc, #104]	@ (8001af4 <HAL_UART_RxCpltCallback+0x4ac>)
 8001a8c:	7051      	strb	r1, [r2, #1]
 8001a8e:	4619      	mov	r1, r3
 8001a90:	4b1a      	ldr	r3, [pc, #104]	@ (8001afc <HAL_UART_RxCpltCallback+0x4b4>)
 8001a92:	781a      	ldrb	r2, [r3, #0]
 8001a94:	4b17      	ldr	r3, [pc, #92]	@ (8001af4 <HAL_UART_RxCpltCallback+0x4ac>)
 8001a96:	440b      	add	r3, r1
 8001a98:	719a      	strb	r2, [r3, #6]
				ETHdata.Reserve = Uart1_RxBuff[0];
 8001a9a:	4b18      	ldr	r3, [pc, #96]	@ (8001afc <HAL_UART_RxCpltCallback+0x4b4>)
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	4b14      	ldr	r3, [pc, #80]	@ (8001af4 <HAL_UART_RxCpltCallback+0x4ac>)
 8001aa2:	f8a3 2212 	strh.w	r2, [r3, #530]	@ 0x212
				ETHdata.state++;
 8001aa6:	4b13      	ldr	r3, [pc, #76]	@ (8001af4 <HAL_UART_RxCpltCallback+0x4ac>)
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	3301      	adds	r3, #1
 8001aac:	b2da      	uxtb	r2, r3
 8001aae:	4b11      	ldr	r3, [pc, #68]	@ (8001af4 <HAL_UART_RxCpltCallback+0x4ac>)
 8001ab0:	701a      	strb	r2, [r3, #0]
				break;
 8001ab2:	e0b5      	b.n	8001c20 <HAL_UART_RxCpltCallback+0x5d8>
			case 14:
				ETHdata.databuf[ETHdata.headnum++] = Uart1_RxBuff[0];
 8001ab4:	4b0f      	ldr	r3, [pc, #60]	@ (8001af4 <HAL_UART_RxCpltCallback+0x4ac>)
 8001ab6:	785b      	ldrb	r3, [r3, #1]
 8001ab8:	1c5a      	adds	r2, r3, #1
 8001aba:	b2d1      	uxtb	r1, r2
 8001abc:	4a0d      	ldr	r2, [pc, #52]	@ (8001af4 <HAL_UART_RxCpltCallback+0x4ac>)
 8001abe:	7051      	strb	r1, [r2, #1]
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	4b0e      	ldr	r3, [pc, #56]	@ (8001afc <HAL_UART_RxCpltCallback+0x4b4>)
 8001ac4:	781a      	ldrb	r2, [r3, #0]
 8001ac6:	4b0b      	ldr	r3, [pc, #44]	@ (8001af4 <HAL_UART_RxCpltCallback+0x4ac>)
 8001ac8:	440b      	add	r3, r1
 8001aca:	719a      	strb	r2, [r3, #6]
				ETHdata.Reserve = (ETHdata.Reserve << 8) + Uart1_RxBuff[0];							//预留
 8001acc:	4b09      	ldr	r3, [pc, #36]	@ (8001af4 <HAL_UART_RxCpltCallback+0x4ac>)
 8001ace:	f8b3 3212 	ldrh.w	r3, [r3, #530]	@ 0x212
 8001ad2:	021b      	lsls	r3, r3, #8
 8001ad4:	b29b      	uxth	r3, r3
 8001ad6:	4a09      	ldr	r2, [pc, #36]	@ (8001afc <HAL_UART_RxCpltCallback+0x4b4>)
 8001ad8:	7812      	ldrb	r2, [r2, #0]
 8001ada:	4413      	add	r3, r2
 8001adc:	b29a      	uxth	r2, r3
 8001ade:	4b05      	ldr	r3, [pc, #20]	@ (8001af4 <HAL_UART_RxCpltCallback+0x4ac>)
 8001ae0:	f8a3 2212 	strh.w	r2, [r3, #530]	@ 0x212
				ETHdata.state++;
 8001ae4:	4b03      	ldr	r3, [pc, #12]	@ (8001af4 <HAL_UART_RxCpltCallback+0x4ac>)
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	3301      	adds	r3, #1
 8001aea:	b2da      	uxtb	r2, r3
 8001aec:	4b01      	ldr	r3, [pc, #4]	@ (8001af4 <HAL_UART_RxCpltCallback+0x4ac>)
 8001aee:	701a      	strb	r2, [r3, #0]
				break;
 8001af0:	e096      	b.n	8001c20 <HAL_UART_RxCpltCallback+0x5d8>
 8001af2:	bf00      	nop
 8001af4:	20000234 	.word	0x20000234
 8001af8:	20000656 	.word	0x20000656
 8001afc:	20000110 	.word	0x20000110
 8001b00:	20000657 	.word	0x20000657
 8001b04:	40010c00 	.word	0x40010c00
			case 15:
				if(ETHdata.Workmode == DEACTIVE)											//服务表反激活没有包体，只有包头
 8001b08:	4ba1      	ldr	r3, [pc, #644]	@ (8001d90 <HAL_UART_RxCpltCallback+0x748>)
 8001b0a:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 8001b0e:	2b04      	cmp	r3, #4
 8001b10:	d114      	bne.n	8001b3c <HAL_UART_RxCpltCallback+0x4f4>
				{
					ETHdata.databuf[ETHdata.headnum++] = Uart1_RxBuff[0];
 8001b12:	4b9f      	ldr	r3, [pc, #636]	@ (8001d90 <HAL_UART_RxCpltCallback+0x748>)
 8001b14:	785b      	ldrb	r3, [r3, #1]
 8001b16:	1c5a      	adds	r2, r3, #1
 8001b18:	b2d1      	uxtb	r1, r2
 8001b1a:	4a9d      	ldr	r2, [pc, #628]	@ (8001d90 <HAL_UART_RxCpltCallback+0x748>)
 8001b1c:	7051      	strb	r1, [r2, #1]
 8001b1e:	4619      	mov	r1, r3
 8001b20:	4b9c      	ldr	r3, [pc, #624]	@ (8001d94 <HAL_UART_RxCpltCallback+0x74c>)
 8001b22:	781a      	ldrb	r2, [r3, #0]
 8001b24:	4b9a      	ldr	r3, [pc, #616]	@ (8001d90 <HAL_UART_RxCpltCallback+0x748>)
 8001b26:	440b      	add	r3, r1
 8001b28:	719a      	strb	r2, [r3, #6]
					ETHdata.Checksum = Uart1_RxBuff[0];
 8001b2a:	4b9a      	ldr	r3, [pc, #616]	@ (8001d94 <HAL_UART_RxCpltCallback+0x74c>)
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	461a      	mov	r2, r3
 8001b30:	4b97      	ldr	r3, [pc, #604]	@ (8001d90 <HAL_UART_RxCpltCallback+0x748>)
 8001b32:	f8a3 2214 	strh.w	r2, [r3, #532]	@ 0x214
					ETHdata.state = 17;
 8001b36:	4b96      	ldr	r3, [pc, #600]	@ (8001d90 <HAL_UART_RxCpltCallback+0x748>)
 8001b38:	2211      	movs	r2, #17
 8001b3a:	701a      	strb	r2, [r3, #0]
				}
				ETHdata.databuf[ETHdata.headnum++] = Uart1_RxBuff[0];
 8001b3c:	4b94      	ldr	r3, [pc, #592]	@ (8001d90 <HAL_UART_RxCpltCallback+0x748>)
 8001b3e:	785b      	ldrb	r3, [r3, #1]
 8001b40:	1c5a      	adds	r2, r3, #1
 8001b42:	b2d1      	uxtb	r1, r2
 8001b44:	4a92      	ldr	r2, [pc, #584]	@ (8001d90 <HAL_UART_RxCpltCallback+0x748>)
 8001b46:	7051      	strb	r1, [r2, #1]
 8001b48:	4619      	mov	r1, r3
 8001b4a:	4b92      	ldr	r3, [pc, #584]	@ (8001d94 <HAL_UART_RxCpltCallback+0x74c>)
 8001b4c:	781a      	ldrb	r2, [r3, #0]
 8001b4e:	4b90      	ldr	r3, [pc, #576]	@ (8001d90 <HAL_UART_RxCpltCallback+0x748>)
 8001b50:	440b      	add	r3, r1
 8001b52:	719a      	strb	r2, [r3, #6]
				ETHdata.bodybuf[ETHdata.bodynum++] = Uart1_RxBuff[0];
 8001b54:	4b8e      	ldr	r3, [pc, #568]	@ (8001d90 <HAL_UART_RxCpltCallback+0x748>)
 8001b56:	789b      	ldrb	r3, [r3, #2]
 8001b58:	1c5a      	adds	r2, r3, #1
 8001b5a:	b2d1      	uxtb	r1, r2
 8001b5c:	4a8c      	ldr	r2, [pc, #560]	@ (8001d90 <HAL_UART_RxCpltCallback+0x748>)
 8001b5e:	7091      	strb	r1, [r2, #2]
 8001b60:	4619      	mov	r1, r3
 8001b62:	4b8c      	ldr	r3, [pc, #560]	@ (8001d94 <HAL_UART_RxCpltCallback+0x74c>)
 8001b64:	781a      	ldrb	r2, [r3, #0]
 8001b66:	4b8a      	ldr	r3, [pc, #552]	@ (8001d90 <HAL_UART_RxCpltCallback+0x748>)
 8001b68:	440b      	add	r3, r1
 8001b6a:	f883 2106 	strb.w	r2, [r3, #262]	@ 0x106
				if(ETHdata.bodynum >= ETHdata.datalen)
 8001b6e:	4b88      	ldr	r3, [pc, #544]	@ (8001d90 <HAL_UART_RxCpltCallback+0x748>)
 8001b70:	789b      	ldrb	r3, [r3, #2]
 8001b72:	461a      	mov	r2, r3
 8001b74:	4b86      	ldr	r3, [pc, #536]	@ (8001d90 <HAL_UART_RxCpltCallback+0x748>)
 8001b76:	f8b3 3206 	ldrh.w	r3, [r3, #518]	@ 0x206
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d34f      	bcc.n	8001c1e <HAL_UART_RxCpltCallback+0x5d6>
				{
					ETHdata.state++;
 8001b7e:	4b84      	ldr	r3, [pc, #528]	@ (8001d90 <HAL_UART_RxCpltCallback+0x748>)
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	3301      	adds	r3, #1
 8001b84:	b2da      	uxtb	r2, r3
 8001b86:	4b82      	ldr	r3, [pc, #520]	@ (8001d90 <HAL_UART_RxCpltCallback+0x748>)
 8001b88:	701a      	strb	r2, [r3, #0]
				}
				break;
 8001b8a:	e048      	b.n	8001c1e <HAL_UART_RxCpltCallback+0x5d6>
			case 16:
				ETHdata.databuf[ETHdata.headnum++] = Uart1_RxBuff[0];
 8001b8c:	4b80      	ldr	r3, [pc, #512]	@ (8001d90 <HAL_UART_RxCpltCallback+0x748>)
 8001b8e:	785b      	ldrb	r3, [r3, #1]
 8001b90:	1c5a      	adds	r2, r3, #1
 8001b92:	b2d1      	uxtb	r1, r2
 8001b94:	4a7e      	ldr	r2, [pc, #504]	@ (8001d90 <HAL_UART_RxCpltCallback+0x748>)
 8001b96:	7051      	strb	r1, [r2, #1]
 8001b98:	4619      	mov	r1, r3
 8001b9a:	4b7e      	ldr	r3, [pc, #504]	@ (8001d94 <HAL_UART_RxCpltCallback+0x74c>)
 8001b9c:	781a      	ldrb	r2, [r3, #0]
 8001b9e:	4b7c      	ldr	r3, [pc, #496]	@ (8001d90 <HAL_UART_RxCpltCallback+0x748>)
 8001ba0:	440b      	add	r3, r1
 8001ba2:	719a      	strb	r2, [r3, #6]
				ETHdata.Checksum = Uart1_RxBuff[0];
 8001ba4:	4b7b      	ldr	r3, [pc, #492]	@ (8001d94 <HAL_UART_RxCpltCallback+0x74c>)
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	461a      	mov	r2, r3
 8001baa:	4b79      	ldr	r3, [pc, #484]	@ (8001d90 <HAL_UART_RxCpltCallback+0x748>)
 8001bac:	f8a3 2214 	strh.w	r2, [r3, #532]	@ 0x214
				ETHdata.state++;
 8001bb0:	4b77      	ldr	r3, [pc, #476]	@ (8001d90 <HAL_UART_RxCpltCallback+0x748>)
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	b2da      	uxtb	r2, r3
 8001bb8:	4b75      	ldr	r3, [pc, #468]	@ (8001d90 <HAL_UART_RxCpltCallback+0x748>)
 8001bba:	701a      	strb	r2, [r3, #0]
				break;
 8001bbc:	e030      	b.n	8001c20 <HAL_UART_RxCpltCallback+0x5d8>
			case 17:
				ETHdata.databuf[ETHdata.headnum++] = Uart1_RxBuff[0];
 8001bbe:	4b74      	ldr	r3, [pc, #464]	@ (8001d90 <HAL_UART_RxCpltCallback+0x748>)
 8001bc0:	785b      	ldrb	r3, [r3, #1]
 8001bc2:	1c5a      	adds	r2, r3, #1
 8001bc4:	b2d1      	uxtb	r1, r2
 8001bc6:	4a72      	ldr	r2, [pc, #456]	@ (8001d90 <HAL_UART_RxCpltCallback+0x748>)
 8001bc8:	7051      	strb	r1, [r2, #1]
 8001bca:	4619      	mov	r1, r3
 8001bcc:	4b71      	ldr	r3, [pc, #452]	@ (8001d94 <HAL_UART_RxCpltCallback+0x74c>)
 8001bce:	781a      	ldrb	r2, [r3, #0]
 8001bd0:	4b6f      	ldr	r3, [pc, #444]	@ (8001d90 <HAL_UART_RxCpltCallback+0x748>)
 8001bd2:	440b      	add	r3, r1
 8001bd4:	719a      	strb	r2, [r3, #6]
				ETHdata.Checksum = (ETHdata.Checksum << 8) + Uart1_RxBuff[0];
 8001bd6:	4b6e      	ldr	r3, [pc, #440]	@ (8001d90 <HAL_UART_RxCpltCallback+0x748>)
 8001bd8:	f8b3 3214 	ldrh.w	r3, [r3, #532]	@ 0x214
 8001bdc:	021b      	lsls	r3, r3, #8
 8001bde:	b29b      	uxth	r3, r3
 8001be0:	4a6c      	ldr	r2, [pc, #432]	@ (8001d94 <HAL_UART_RxCpltCallback+0x74c>)
 8001be2:	7812      	ldrb	r2, [r2, #0]
 8001be4:	4413      	add	r3, r2
 8001be6:	b29a      	uxth	r2, r3
 8001be8:	4b69      	ldr	r3, [pc, #420]	@ (8001d90 <HAL_UART_RxCpltCallback+0x748>)
 8001bea:	f8a3 2214 	strh.w	r2, [r3, #532]	@ 0x214

				if(ETHdata.Checksum == Checksum_Reverse(ETHdata.bodybuf,ETHdata.datalen))
 8001bee:	4b68      	ldr	r3, [pc, #416]	@ (8001d90 <HAL_UART_RxCpltCallback+0x748>)
 8001bf0:	f8b3 4214 	ldrh.w	r4, [r3, #532]	@ 0x214
 8001bf4:	4b66      	ldr	r3, [pc, #408]	@ (8001d90 <HAL_UART_RxCpltCallback+0x748>)
 8001bf6:	f8b3 3206 	ldrh.w	r3, [r3, #518]	@ 0x206
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	4866      	ldr	r0, [pc, #408]	@ (8001d98 <HAL_UART_RxCpltCallback+0x750>)
 8001bfe:	f7ff f883 	bl	8000d08 <Checksum_Reverse>
 8001c02:	4603      	mov	r3, r0
 8001c04:	429c      	cmp	r4, r3
 8001c06:	d104      	bne.n	8001c12 <HAL_UART_RxCpltCallback+0x5ca>
				{
					ETHdata.overflag = 1;
 8001c08:	4b61      	ldr	r3, [pc, #388]	@ (8001d90 <HAL_UART_RxCpltCallback+0x748>)
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	f883 2216 	strb.w	r2, [r3, #534]	@ 0x216
				}
				else
				{
					Resetstate(ETHCMD);
				}
				break;
 8001c10:	e006      	b.n	8001c20 <HAL_UART_RxCpltCallback+0x5d8>
					Resetstate(ETHCMD);
 8001c12:	2001      	movs	r0, #1
 8001c14:	f000 fad4 	bl	80021c0 <Resetstate>
				break;
 8001c18:	e002      	b.n	8001c20 <HAL_UART_RxCpltCallback+0x5d8>
				break;
 8001c1a:	bf00      	nop
 8001c1c:	e000      	b.n	8001c20 <HAL_UART_RxCpltCallback+0x5d8>
				break;
 8001c1e:	bf00      	nop
		}
		HAL_UART_Receive_IT(&huart1,Uart1_RxBuff, 1);
 8001c20:	2201      	movs	r2, #1
 8001c22:	495c      	ldr	r1, [pc, #368]	@ (8001d94 <HAL_UART_RxCpltCallback+0x74c>)
 8001c24:	485d      	ldr	r0, [pc, #372]	@ (8001d9c <HAL_UART_RxCpltCallback+0x754>)
 8001c26:	f002 fc96 	bl	8004556 <HAL_UART_Receive_IT>
	}
	if(huart->Instance == UART5)				//如果产生中断的是串口5
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a5c      	ldr	r2, [pc, #368]	@ (8001da0 <HAL_UART_RxCpltCallback+0x758>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	f040 8139 	bne.w	8001ea8 <HAL_UART_RxCpltCallback+0x860>
	{
		//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
		Downdatatimeoutnum = 0;
 8001c36:	4b5b      	ldr	r3, [pc, #364]	@ (8001da4 <HAL_UART_RxCpltCallback+0x75c>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	801a      	strh	r2, [r3, #0]
		switch(DOWNdata.state)
 8001c3c:	4b5a      	ldr	r3, [pc, #360]	@ (8001da8 <HAL_UART_RxCpltCallback+0x760>)
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	2b07      	cmp	r3, #7
 8001c42:	f200 812c 	bhi.w	8001e9e <HAL_UART_RxCpltCallback+0x856>
 8001c46:	a201      	add	r2, pc, #4	@ (adr r2, 8001c4c <HAL_UART_RxCpltCallback+0x604>)
 8001c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c4c:	08001c6d 	.word	0x08001c6d
 8001c50:	08001ca3 	.word	0x08001ca3
 8001c54:	08001cd9 	.word	0x08001cd9
 8001c58:	08001d0d 	.word	0x08001d0d
 8001c5c:	08001d47 	.word	0x08001d47
 8001c60:	08001dbd 	.word	0x08001dbd
 8001c64:	08001e0f 	.word	0x08001e0f
 8001c68:	08001e43 	.word	0x08001e43
		{
			case 0:
				if(Uart5_RxBuff[0] == 0x66)
 8001c6c:	4b4f      	ldr	r3, [pc, #316]	@ (8001dac <HAL_UART_RxCpltCallback+0x764>)
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	2b66      	cmp	r3, #102	@ 0x66
 8001c72:	d112      	bne.n	8001c9a <HAL_UART_RxCpltCallback+0x652>
				{
					DOWNdata.databuf[DOWNdata.headnum++] = Uart5_RxBuff[0];
 8001c74:	4b4c      	ldr	r3, [pc, #304]	@ (8001da8 <HAL_UART_RxCpltCallback+0x760>)
 8001c76:	785b      	ldrb	r3, [r3, #1]
 8001c78:	1c5a      	adds	r2, r3, #1
 8001c7a:	b2d1      	uxtb	r1, r2
 8001c7c:	4a4a      	ldr	r2, [pc, #296]	@ (8001da8 <HAL_UART_RxCpltCallback+0x760>)
 8001c7e:	7051      	strb	r1, [r2, #1]
 8001c80:	4619      	mov	r1, r3
 8001c82:	4b4a      	ldr	r3, [pc, #296]	@ (8001dac <HAL_UART_RxCpltCallback+0x764>)
 8001c84:	781a      	ldrb	r2, [r3, #0]
 8001c86:	4b48      	ldr	r3, [pc, #288]	@ (8001da8 <HAL_UART_RxCpltCallback+0x760>)
 8001c88:	440b      	add	r3, r1
 8001c8a:	70da      	strb	r2, [r3, #3]
					DOWNdata.state++;
 8001c8c:	4b46      	ldr	r3, [pc, #280]	@ (8001da8 <HAL_UART_RxCpltCallback+0x760>)
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	3301      	adds	r3, #1
 8001c92:	b2da      	uxtb	r2, r3
 8001c94:	4b44      	ldr	r3, [pc, #272]	@ (8001da8 <HAL_UART_RxCpltCallback+0x760>)
 8001c96:	701a      	strb	r2, [r3, #0]
				}
				else
				{
					Resetstate(TOOLDATA);
				}
				break;
 8001c98:	e101      	b.n	8001e9e <HAL_UART_RxCpltCallback+0x856>
					Resetstate(TOOLDATA);
 8001c9a:	2002      	movs	r0, #2
 8001c9c:	f000 fa90 	bl	80021c0 <Resetstate>
				break;
 8001ca0:	e0fd      	b.n	8001e9e <HAL_UART_RxCpltCallback+0x856>
			case 1:
				if(Uart5_RxBuff[0] == 0xCC)
 8001ca2:	4b42      	ldr	r3, [pc, #264]	@ (8001dac <HAL_UART_RxCpltCallback+0x764>)
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	2bcc      	cmp	r3, #204	@ 0xcc
 8001ca8:	d112      	bne.n	8001cd0 <HAL_UART_RxCpltCallback+0x688>
				{
					DOWNdata.databuf[DOWNdata.headnum++] = Uart5_RxBuff[0];
 8001caa:	4b3f      	ldr	r3, [pc, #252]	@ (8001da8 <HAL_UART_RxCpltCallback+0x760>)
 8001cac:	785b      	ldrb	r3, [r3, #1]
 8001cae:	1c5a      	adds	r2, r3, #1
 8001cb0:	b2d1      	uxtb	r1, r2
 8001cb2:	4a3d      	ldr	r2, [pc, #244]	@ (8001da8 <HAL_UART_RxCpltCallback+0x760>)
 8001cb4:	7051      	strb	r1, [r2, #1]
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	4b3c      	ldr	r3, [pc, #240]	@ (8001dac <HAL_UART_RxCpltCallback+0x764>)
 8001cba:	781a      	ldrb	r2, [r3, #0]
 8001cbc:	4b3a      	ldr	r3, [pc, #232]	@ (8001da8 <HAL_UART_RxCpltCallback+0x760>)
 8001cbe:	440b      	add	r3, r1
 8001cc0:	70da      	strb	r2, [r3, #3]
					DOWNdata.state++;
 8001cc2:	4b39      	ldr	r3, [pc, #228]	@ (8001da8 <HAL_UART_RxCpltCallback+0x760>)
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	b2da      	uxtb	r2, r3
 8001cca:	4b37      	ldr	r3, [pc, #220]	@ (8001da8 <HAL_UART_RxCpltCallback+0x760>)
 8001ccc:	701a      	strb	r2, [r3, #0]
				}
				else
				{
					Resetstate(TOOLDATA);
				}
				break;
 8001cce:	e0e6      	b.n	8001e9e <HAL_UART_RxCpltCallback+0x856>
					Resetstate(TOOLDATA);
 8001cd0:	2002      	movs	r0, #2
 8001cd2:	f000 fa75 	bl	80021c0 <Resetstate>
				break;
 8001cd6:	e0e2      	b.n	8001e9e <HAL_UART_RxCpltCallback+0x856>
			case 2:
				DOWNdata.databuf[DOWNdata.headnum++] = Uart5_RxBuff[0];
 8001cd8:	4b33      	ldr	r3, [pc, #204]	@ (8001da8 <HAL_UART_RxCpltCallback+0x760>)
 8001cda:	785b      	ldrb	r3, [r3, #1]
 8001cdc:	1c5a      	adds	r2, r3, #1
 8001cde:	b2d1      	uxtb	r1, r2
 8001ce0:	4a31      	ldr	r2, [pc, #196]	@ (8001da8 <HAL_UART_RxCpltCallback+0x760>)
 8001ce2:	7051      	strb	r1, [r2, #1]
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	4b31      	ldr	r3, [pc, #196]	@ (8001dac <HAL_UART_RxCpltCallback+0x764>)
 8001ce8:	781a      	ldrb	r2, [r3, #0]
 8001cea:	4b2f      	ldr	r3, [pc, #188]	@ (8001da8 <HAL_UART_RxCpltCallback+0x760>)
 8001cec:	440b      	add	r3, r1
 8001cee:	70da      	strb	r2, [r3, #3]
				DOWNdata.datalen = Uart5_RxBuff[0]<<8;
 8001cf0:	4b2e      	ldr	r3, [pc, #184]	@ (8001dac <HAL_UART_RxCpltCallback+0x764>)
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	021b      	lsls	r3, r3, #8
 8001cf6:	b29a      	uxth	r2, r3
 8001cf8:	4b2b      	ldr	r3, [pc, #172]	@ (8001da8 <HAL_UART_RxCpltCallback+0x760>)
 8001cfa:	f8a3 2204 	strh.w	r2, [r3, #516]	@ 0x204
				DOWNdata.state++;
 8001cfe:	4b2a      	ldr	r3, [pc, #168]	@ (8001da8 <HAL_UART_RxCpltCallback+0x760>)
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	3301      	adds	r3, #1
 8001d04:	b2da      	uxtb	r2, r3
 8001d06:	4b28      	ldr	r3, [pc, #160]	@ (8001da8 <HAL_UART_RxCpltCallback+0x760>)
 8001d08:	701a      	strb	r2, [r3, #0]
				break;
 8001d0a:	e0c8      	b.n	8001e9e <HAL_UART_RxCpltCallback+0x856>
			case 3:
				DOWNdata.databuf[DOWNdata.headnum++] = Uart5_RxBuff[0];
 8001d0c:	4b26      	ldr	r3, [pc, #152]	@ (8001da8 <HAL_UART_RxCpltCallback+0x760>)
 8001d0e:	785b      	ldrb	r3, [r3, #1]
 8001d10:	1c5a      	adds	r2, r3, #1
 8001d12:	b2d1      	uxtb	r1, r2
 8001d14:	4a24      	ldr	r2, [pc, #144]	@ (8001da8 <HAL_UART_RxCpltCallback+0x760>)
 8001d16:	7051      	strb	r1, [r2, #1]
 8001d18:	4619      	mov	r1, r3
 8001d1a:	4b24      	ldr	r3, [pc, #144]	@ (8001dac <HAL_UART_RxCpltCallback+0x764>)
 8001d1c:	781a      	ldrb	r2, [r3, #0]
 8001d1e:	4b22      	ldr	r3, [pc, #136]	@ (8001da8 <HAL_UART_RxCpltCallback+0x760>)
 8001d20:	440b      	add	r3, r1
 8001d22:	70da      	strb	r2, [r3, #3]
				DOWNdata.datalen = DOWNdata.datalen + Uart5_RxBuff[0];
 8001d24:	4b20      	ldr	r3, [pc, #128]	@ (8001da8 <HAL_UART_RxCpltCallback+0x760>)
 8001d26:	f8b3 3204 	ldrh.w	r3, [r3, #516]	@ 0x204
 8001d2a:	4a20      	ldr	r2, [pc, #128]	@ (8001dac <HAL_UART_RxCpltCallback+0x764>)
 8001d2c:	7812      	ldrb	r2, [r2, #0]
 8001d2e:	4413      	add	r3, r2
 8001d30:	b29a      	uxth	r2, r3
 8001d32:	4b1d      	ldr	r3, [pc, #116]	@ (8001da8 <HAL_UART_RxCpltCallback+0x760>)
 8001d34:	f8a3 2204 	strh.w	r2, [r3, #516]	@ 0x204
				DOWNdata.state++;
 8001d38:	4b1b      	ldr	r3, [pc, #108]	@ (8001da8 <HAL_UART_RxCpltCallback+0x760>)
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	3301      	adds	r3, #1
 8001d3e:	b2da      	uxtb	r2, r3
 8001d40:	4b19      	ldr	r3, [pc, #100]	@ (8001da8 <HAL_UART_RxCpltCallback+0x760>)
 8001d42:	701a      	strb	r2, [r3, #0]
				break;
 8001d44:	e0ab      	b.n	8001e9e <HAL_UART_RxCpltCallback+0x856>
			case 4:
				DOWNdata.databuf[DOWNdata.headnum++] = Uart5_RxBuff[0];		//数据类型，井下上传只有服务表数据，应为0x01
 8001d46:	4b18      	ldr	r3, [pc, #96]	@ (8001da8 <HAL_UART_RxCpltCallback+0x760>)
 8001d48:	785b      	ldrb	r3, [r3, #1]
 8001d4a:	1c5a      	adds	r2, r3, #1
 8001d4c:	b2d1      	uxtb	r1, r2
 8001d4e:	4a16      	ldr	r2, [pc, #88]	@ (8001da8 <HAL_UART_RxCpltCallback+0x760>)
 8001d50:	7051      	strb	r1, [r2, #1]
 8001d52:	4619      	mov	r1, r3
 8001d54:	4b15      	ldr	r3, [pc, #84]	@ (8001dac <HAL_UART_RxCpltCallback+0x764>)
 8001d56:	781a      	ldrb	r2, [r3, #0]
 8001d58:	4b13      	ldr	r3, [pc, #76]	@ (8001da8 <HAL_UART_RxCpltCallback+0x760>)
 8001d5a:	440b      	add	r3, r1
 8001d5c:	70da      	strb	r2, [r3, #3]
				if(Uart5_RxBuff[0] == 0x01)
 8001d5e:	4b13      	ldr	r3, [pc, #76]	@ (8001dac <HAL_UART_RxCpltCallback+0x764>)
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d106      	bne.n	8001d74 <HAL_UART_RxCpltCallback+0x72c>
				{
					DOWNdata.state++;
 8001d66:	4b10      	ldr	r3, [pc, #64]	@ (8001da8 <HAL_UART_RxCpltCallback+0x760>)
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	b2da      	uxtb	r2, r3
 8001d6e:	4b0e      	ldr	r3, [pc, #56]	@ (8001da8 <HAL_UART_RxCpltCallback+0x760>)
 8001d70:	701a      	strb	r2, [r3, #0]
					Downtoolctrlcmdback = true;
					DOWNdata.state++;
				}
				else
					Resetstate(TOOLDATA);
				break;
 8001d72:	e094      	b.n	8001e9e <HAL_UART_RxCpltCallback+0x856>
				else if(Uart5_RxBuff[0] == 0x02)
 8001d74:	4b0d      	ldr	r3, [pc, #52]	@ (8001dac <HAL_UART_RxCpltCallback+0x764>)
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d11b      	bne.n	8001db4 <HAL_UART_RxCpltCallback+0x76c>
					Downtoolctrlcmdback = true;
 8001d7c:	4b0c      	ldr	r3, [pc, #48]	@ (8001db0 <HAL_UART_RxCpltCallback+0x768>)
 8001d7e:	2201      	movs	r2, #1
 8001d80:	701a      	strb	r2, [r3, #0]
					DOWNdata.state++;
 8001d82:	4b09      	ldr	r3, [pc, #36]	@ (8001da8 <HAL_UART_RxCpltCallback+0x760>)
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	3301      	adds	r3, #1
 8001d88:	b2da      	uxtb	r2, r3
 8001d8a:	4b07      	ldr	r3, [pc, #28]	@ (8001da8 <HAL_UART_RxCpltCallback+0x760>)
 8001d8c:	701a      	strb	r2, [r3, #0]
				break;
 8001d8e:	e086      	b.n	8001e9e <HAL_UART_RxCpltCallback+0x856>
 8001d90:	20000234 	.word	0x20000234
 8001d94:	20000110 	.word	0x20000110
 8001d98:	2000033a 	.word	0x2000033a
 8001d9c:	200001a8 	.word	0x200001a8
 8001da0:	40005000 	.word	0x40005000
 8001da4:	2000010c 	.word	0x2000010c
 8001da8:	2000044c 	.word	0x2000044c
 8001dac:	20000114 	.word	0x20000114
 8001db0:	20000658 	.word	0x20000658
					Resetstate(TOOLDATA);
 8001db4:	2002      	movs	r0, #2
 8001db6:	f000 fa03 	bl	80021c0 <Resetstate>
				break;
 8001dba:	e070      	b.n	8001e9e <HAL_UART_RxCpltCallback+0x856>
			case 5:
				DOWNdata.databuf[DOWNdata.headnum++] = Uart5_RxBuff[0];
 8001dbc:	4b3c      	ldr	r3, [pc, #240]	@ (8001eb0 <HAL_UART_RxCpltCallback+0x868>)
 8001dbe:	785b      	ldrb	r3, [r3, #1]
 8001dc0:	1c5a      	adds	r2, r3, #1
 8001dc2:	b2d1      	uxtb	r1, r2
 8001dc4:	4a3a      	ldr	r2, [pc, #232]	@ (8001eb0 <HAL_UART_RxCpltCallback+0x868>)
 8001dc6:	7051      	strb	r1, [r2, #1]
 8001dc8:	4619      	mov	r1, r3
 8001dca:	4b3a      	ldr	r3, [pc, #232]	@ (8001eb4 <HAL_UART_RxCpltCallback+0x86c>)
 8001dcc:	781a      	ldrb	r2, [r3, #0]
 8001dce:	4b38      	ldr	r3, [pc, #224]	@ (8001eb0 <HAL_UART_RxCpltCallback+0x868>)
 8001dd0:	440b      	add	r3, r1
 8001dd2:	70da      	strb	r2, [r3, #3]
				DOWNdata.bodybuf[DOWNdata.bodynum++] = Uart5_RxBuff[0];
 8001dd4:	4b36      	ldr	r3, [pc, #216]	@ (8001eb0 <HAL_UART_RxCpltCallback+0x868>)
 8001dd6:	789b      	ldrb	r3, [r3, #2]
 8001dd8:	1c5a      	adds	r2, r3, #1
 8001dda:	b2d1      	uxtb	r1, r2
 8001ddc:	4a34      	ldr	r2, [pc, #208]	@ (8001eb0 <HAL_UART_RxCpltCallback+0x868>)
 8001dde:	7091      	strb	r1, [r2, #2]
 8001de0:	4619      	mov	r1, r3
 8001de2:	4b34      	ldr	r3, [pc, #208]	@ (8001eb4 <HAL_UART_RxCpltCallback+0x86c>)
 8001de4:	781a      	ldrb	r2, [r3, #0]
 8001de6:	4b32      	ldr	r3, [pc, #200]	@ (8001eb0 <HAL_UART_RxCpltCallback+0x868>)
 8001de8:	440b      	add	r3, r1
 8001dea:	f883 2103 	strb.w	r2, [r3, #259]	@ 0x103
				if(DOWNdata.bodynum >= DOWNdata.datalen-1)
 8001dee:	4b30      	ldr	r3, [pc, #192]	@ (8001eb0 <HAL_UART_RxCpltCallback+0x868>)
 8001df0:	789b      	ldrb	r3, [r3, #2]
 8001df2:	461a      	mov	r2, r3
 8001df4:	4b2e      	ldr	r3, [pc, #184]	@ (8001eb0 <HAL_UART_RxCpltCallback+0x868>)
 8001df6:	f8b3 3204 	ldrh.w	r3, [r3, #516]	@ 0x204
 8001dfa:	3b01      	subs	r3, #1
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	db4d      	blt.n	8001e9c <HAL_UART_RxCpltCallback+0x854>
				{
					DOWNdata.state++;
 8001e00:	4b2b      	ldr	r3, [pc, #172]	@ (8001eb0 <HAL_UART_RxCpltCallback+0x868>)
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	3301      	adds	r3, #1
 8001e06:	b2da      	uxtb	r2, r3
 8001e08:	4b29      	ldr	r3, [pc, #164]	@ (8001eb0 <HAL_UART_RxCpltCallback+0x868>)
 8001e0a:	701a      	strb	r2, [r3, #0]
				}
				break;
 8001e0c:	e046      	b.n	8001e9c <HAL_UART_RxCpltCallback+0x854>
			case 6:
				DOWNdata.databuf[DOWNdata.headnum++] = Uart5_RxBuff[0];
 8001e0e:	4b28      	ldr	r3, [pc, #160]	@ (8001eb0 <HAL_UART_RxCpltCallback+0x868>)
 8001e10:	785b      	ldrb	r3, [r3, #1]
 8001e12:	1c5a      	adds	r2, r3, #1
 8001e14:	b2d1      	uxtb	r1, r2
 8001e16:	4a26      	ldr	r2, [pc, #152]	@ (8001eb0 <HAL_UART_RxCpltCallback+0x868>)
 8001e18:	7051      	strb	r1, [r2, #1]
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	4b25      	ldr	r3, [pc, #148]	@ (8001eb4 <HAL_UART_RxCpltCallback+0x86c>)
 8001e1e:	781a      	ldrb	r2, [r3, #0]
 8001e20:	4b23      	ldr	r3, [pc, #140]	@ (8001eb0 <HAL_UART_RxCpltCallback+0x868>)
 8001e22:	440b      	add	r3, r1
 8001e24:	70da      	strb	r2, [r3, #3]
				DOWNdata.Checksum = Uart5_RxBuff[0]<<8;
 8001e26:	4b23      	ldr	r3, [pc, #140]	@ (8001eb4 <HAL_UART_RxCpltCallback+0x86c>)
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	021b      	lsls	r3, r3, #8
 8001e2c:	b29a      	uxth	r2, r3
 8001e2e:	4b20      	ldr	r3, [pc, #128]	@ (8001eb0 <HAL_UART_RxCpltCallback+0x868>)
 8001e30:	f8a3 2206 	strh.w	r2, [r3, #518]	@ 0x206
				DOWNdata.state++;
 8001e34:	4b1e      	ldr	r3, [pc, #120]	@ (8001eb0 <HAL_UART_RxCpltCallback+0x868>)
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	3301      	adds	r3, #1
 8001e3a:	b2da      	uxtb	r2, r3
 8001e3c:	4b1c      	ldr	r3, [pc, #112]	@ (8001eb0 <HAL_UART_RxCpltCallback+0x868>)
 8001e3e:	701a      	strb	r2, [r3, #0]
				break;
 8001e40:	e02d      	b.n	8001e9e <HAL_UART_RxCpltCallback+0x856>
			case 7:
				DOWNdata.databuf[DOWNdata.headnum++] = Uart5_RxBuff[0];
 8001e42:	4b1b      	ldr	r3, [pc, #108]	@ (8001eb0 <HAL_UART_RxCpltCallback+0x868>)
 8001e44:	785b      	ldrb	r3, [r3, #1]
 8001e46:	1c5a      	adds	r2, r3, #1
 8001e48:	b2d1      	uxtb	r1, r2
 8001e4a:	4a19      	ldr	r2, [pc, #100]	@ (8001eb0 <HAL_UART_RxCpltCallback+0x868>)
 8001e4c:	7051      	strb	r1, [r2, #1]
 8001e4e:	4619      	mov	r1, r3
 8001e50:	4b18      	ldr	r3, [pc, #96]	@ (8001eb4 <HAL_UART_RxCpltCallback+0x86c>)
 8001e52:	781a      	ldrb	r2, [r3, #0]
 8001e54:	4b16      	ldr	r3, [pc, #88]	@ (8001eb0 <HAL_UART_RxCpltCallback+0x868>)
 8001e56:	440b      	add	r3, r1
 8001e58:	70da      	strb	r2, [r3, #3]
				DOWNdata.Checksum = DOWNdata.Checksum + Uart5_RxBuff[0];
 8001e5a:	4b15      	ldr	r3, [pc, #84]	@ (8001eb0 <HAL_UART_RxCpltCallback+0x868>)
 8001e5c:	f8b3 3206 	ldrh.w	r3, [r3, #518]	@ 0x206
 8001e60:	4a14      	ldr	r2, [pc, #80]	@ (8001eb4 <HAL_UART_RxCpltCallback+0x86c>)
 8001e62:	7812      	ldrb	r2, [r2, #0]
 8001e64:	4413      	add	r3, r2
 8001e66:	b29a      	uxth	r2, r3
 8001e68:	4b11      	ldr	r3, [pc, #68]	@ (8001eb0 <HAL_UART_RxCpltCallback+0x868>)
 8001e6a:	f8a3 2206 	strh.w	r2, [r3, #518]	@ 0x206
				if(DOWNdata.Checksum == Checksum_sum(DOWNdata.databuf,DOWNdata.headnum-2))
 8001e6e:	4b10      	ldr	r3, [pc, #64]	@ (8001eb0 <HAL_UART_RxCpltCallback+0x868>)
 8001e70:	f8b3 4206 	ldrh.w	r4, [r3, #518]	@ 0x206
 8001e74:	4b0e      	ldr	r3, [pc, #56]	@ (8001eb0 <HAL_UART_RxCpltCallback+0x868>)
 8001e76:	785b      	ldrb	r3, [r3, #1]
 8001e78:	3b02      	subs	r3, #2
 8001e7a:	b29b      	uxth	r3, r3
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	480e      	ldr	r0, [pc, #56]	@ (8001eb8 <HAL_UART_RxCpltCallback+0x870>)
 8001e80:	f7fe ff9e 	bl	8000dc0 <Checksum_sum>
 8001e84:	4603      	mov	r3, r0
 8001e86:	429c      	cmp	r4, r3
 8001e88:	d104      	bne.n	8001e94 <HAL_UART_RxCpltCallback+0x84c>
				{
					DOWNdata.overflag = 1;
 8001e8a:	4b09      	ldr	r3, [pc, #36]	@ (8001eb0 <HAL_UART_RxCpltCallback+0x868>)
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	f883 2208 	strb.w	r2, [r3, #520]	@ 0x208
				else
				{
					Resetstate(TOOLDATA);
				}

				break;
 8001e92:	e004      	b.n	8001e9e <HAL_UART_RxCpltCallback+0x856>
					Resetstate(TOOLDATA);
 8001e94:	2002      	movs	r0, #2
 8001e96:	f000 f993 	bl	80021c0 <Resetstate>
				break;
 8001e9a:	e000      	b.n	8001e9e <HAL_UART_RxCpltCallback+0x856>
				break;
 8001e9c:	bf00      	nop
		}
		HAL_UART_Receive_IT(&huart5,Uart5_RxBuff,1);
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	4904      	ldr	r1, [pc, #16]	@ (8001eb4 <HAL_UART_RxCpltCallback+0x86c>)
 8001ea2:	4806      	ldr	r0, [pc, #24]	@ (8001ebc <HAL_UART_RxCpltCallback+0x874>)
 8001ea4:	f002 fb57 	bl	8004556 <HAL_UART_Receive_IT>
	}
}
 8001ea8:	bf00      	nop
 8001eaa:	370c      	adds	r7, #12
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd90      	pop	{r4, r7, pc}
 8001eb0:	2000044c 	.word	0x2000044c
 8001eb4:	20000114 	.word	0x20000114
 8001eb8:	2000044f 	.word	0x2000044f
 8001ebc:	20000160 	.word	0x20000160

08001ec0 <DMA1_Channel4_IRQHandler>:
/* USER CODE BEGIN 1 */

void DMA1_Channel4_IRQHandler(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001ec4:	4802      	ldr	r0, [pc, #8]	@ (8001ed0 <DMA1_Channel4_IRQHandler+0x10>)
 8001ec6:	f000 fef9 	bl	8002cbc <HAL_DMA_IRQHandler>
}
 8001eca:	bf00      	nop
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	200001f0 	.word	0x200001f0

08001ed4 <Downcmdsend>:

unsigned char Sertableactbuf[50];
unsigned char Contralcmdbuf[50];

void Downcmdsend (uint8_t type)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	4603      	mov	r3, r0
 8001edc:	71fb      	strb	r3, [r7, #7]
	if(type == SERVICETABLE)
 8001ede:	79fb      	ldrb	r3, [r7, #7]
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d158      	bne.n	8001f96 <Downcmdsend+0xc2>
	{
		Downcmdbuf[0] = 0x55;  								//发送包头
 8001ee4:	4b62      	ldr	r3, [pc, #392]	@ (8002070 <Downcmdsend+0x19c>)
 8001ee6:	2255      	movs	r2, #85	@ 0x55
 8001ee8:	701a      	strb	r2, [r3, #0]
		Downcmdbuf[1] = 0xAA;
 8001eea:	4b61      	ldr	r3, [pc, #388]	@ (8002070 <Downcmdsend+0x19c>)
 8001eec:	22aa      	movs	r2, #170	@ 0xaa
 8001eee:	705a      	strb	r2, [r3, #1]
		Downcmdbuf[2] = (Sertableactlen+1)>>8;						//Sertableactlen+1:上位机数据体长度+Downcmdbuf[3]
 8001ef0:	4b60      	ldr	r3, [pc, #384]	@ (8002074 <Downcmdsend+0x1a0>)
 8001ef2:	881b      	ldrh	r3, [r3, #0]
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	121b      	asrs	r3, r3, #8
 8001ef8:	b2da      	uxtb	r2, r3
 8001efa:	4b5d      	ldr	r3, [pc, #372]	@ (8002070 <Downcmdsend+0x19c>)
 8001efc:	709a      	strb	r2, [r3, #2]
		Downcmdbuf[3] = Sertableactlen+1;
 8001efe:	4b5d      	ldr	r3, [pc, #372]	@ (8002074 <Downcmdsend+0x1a0>)
 8001f00:	881b      	ldrh	r3, [r3, #0]
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	3301      	adds	r3, #1
 8001f06:	b2da      	uxtb	r2, r3
 8001f08:	4b59      	ldr	r3, [pc, #356]	@ (8002070 <Downcmdsend+0x19c>)
 8001f0a:	70da      	strb	r2, [r3, #3]
		Downcmdbuf[4] = SERVICETABLE;						//数据类型，不属于上位机数据体
 8001f0c:	4b58      	ldr	r3, [pc, #352]	@ (8002070 <Downcmdsend+0x19c>)
 8001f0e:	2201      	movs	r2, #1
 8001f10:	711a      	strb	r2, [r3, #4]

		for(unsigned char i=0;i<Sertableactlen;i++)
 8001f12:	2300      	movs	r3, #0
 8001f14:	73fb      	strb	r3, [r7, #15]
 8001f16:	e009      	b.n	8001f2c <Downcmdsend+0x58>
		{
			Downcmdbuf[i+5] = Sertableactbuf[i];				//上位机数据体
 8001f18:	7bfa      	ldrb	r2, [r7, #15]
 8001f1a:	7bfb      	ldrb	r3, [r7, #15]
 8001f1c:	3305      	adds	r3, #5
 8001f1e:	4956      	ldr	r1, [pc, #344]	@ (8002078 <Downcmdsend+0x1a4>)
 8001f20:	5c89      	ldrb	r1, [r1, r2]
 8001f22:	4a53      	ldr	r2, [pc, #332]	@ (8002070 <Downcmdsend+0x19c>)
 8001f24:	54d1      	strb	r1, [r2, r3]
		for(unsigned char i=0;i<Sertableactlen;i++)
 8001f26:	7bfb      	ldrb	r3, [r7, #15]
 8001f28:	3301      	adds	r3, #1
 8001f2a:	73fb      	strb	r3, [r7, #15]
 8001f2c:	7bfb      	ldrb	r3, [r7, #15]
 8001f2e:	b29a      	uxth	r2, r3
 8001f30:	4b50      	ldr	r3, [pc, #320]	@ (8002074 <Downcmdsend+0x1a0>)
 8001f32:	881b      	ldrh	r3, [r3, #0]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d3ef      	bcc.n	8001f18 <Downcmdsend+0x44>
		}
		Downcmdbuf[Sertableactlen+5] = Checksum_sum(Downcmdbuf,Sertableactlen+5)>>8;
 8001f38:	4b4e      	ldr	r3, [pc, #312]	@ (8002074 <Downcmdsend+0x1a0>)
 8001f3a:	881b      	ldrh	r3, [r3, #0]
 8001f3c:	3305      	adds	r3, #5
 8001f3e:	b29b      	uxth	r3, r3
 8001f40:	4619      	mov	r1, r3
 8001f42:	484b      	ldr	r0, [pc, #300]	@ (8002070 <Downcmdsend+0x19c>)
 8001f44:	f7fe ff3c 	bl	8000dc0 <Checksum_sum>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	0a1b      	lsrs	r3, r3, #8
 8001f4c:	b29a      	uxth	r2, r3
 8001f4e:	4b49      	ldr	r3, [pc, #292]	@ (8002074 <Downcmdsend+0x1a0>)
 8001f50:	881b      	ldrh	r3, [r3, #0]
 8001f52:	3305      	adds	r3, #5
 8001f54:	b2d1      	uxtb	r1, r2
 8001f56:	4a46      	ldr	r2, [pc, #280]	@ (8002070 <Downcmdsend+0x19c>)
 8001f58:	54d1      	strb	r1, [r2, r3]
		Downcmdbuf[Sertableactlen+6] = Checksum_sum(Downcmdbuf,Sertableactlen+5);
 8001f5a:	4b46      	ldr	r3, [pc, #280]	@ (8002074 <Downcmdsend+0x1a0>)
 8001f5c:	881b      	ldrh	r3, [r3, #0]
 8001f5e:	3305      	adds	r3, #5
 8001f60:	b29b      	uxth	r3, r3
 8001f62:	4619      	mov	r1, r3
 8001f64:	4842      	ldr	r0, [pc, #264]	@ (8002070 <Downcmdsend+0x19c>)
 8001f66:	f7fe ff2b 	bl	8000dc0 <Checksum_sum>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	4b41      	ldr	r3, [pc, #260]	@ (8002074 <Downcmdsend+0x1a0>)
 8001f70:	881b      	ldrh	r3, [r3, #0]
 8001f72:	3306      	adds	r3, #6
 8001f74:	b2d1      	uxtb	r1, r2
 8001f76:	4a3e      	ldr	r2, [pc, #248]	@ (8002070 <Downcmdsend+0x19c>)
 8001f78:	54d1      	strb	r1, [r2, r3]
		ComSendBuf(COM5,Downcmdbuf,Sertableactlen+7);			//ETH_Datalen+6:上位机数据体+2byte帧头+2byte长度和数据类型+2byte校验和/0-ETH_Datalen+5
 8001f7a:	4b3e      	ldr	r3, [pc, #248]	@ (8002074 <Downcmdsend+0x1a0>)
 8001f7c:	881b      	ldrh	r3, [r3, #0]
 8001f7e:	3307      	adds	r3, #7
 8001f80:	b29b      	uxth	r3, r3
 8001f82:	461a      	mov	r2, r3
 8001f84:	493a      	ldr	r1, [pc, #232]	@ (8002070 <Downcmdsend+0x19c>)
 8001f86:	20ee      	movs	r0, #238	@ 0xee
 8001f88:	f7ff fb30 	bl	80015ec <ComSendBuf>
		ETHdata.Workmode = 0;
 8001f8c:	4b3b      	ldr	r3, [pc, #236]	@ (800207c <Downcmdsend+0x1a8>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	f883 2208 	strb.w	r2, [r3, #520]	@ 0x208

		//ComSendBuf(COM5,Downcmdbuf,ETH_Datalen+6);			//ETH_Datalen+6:上位机数据体+2byte帧头+2byte长度和数据类型+2byte校验和/0-ETH_Datalen+5
		Workmode = 0;
	}*/
	/***************************************************************************/
}
 8001f94:	e068      	b.n	8002068 <Downcmdsend+0x194>
	else if(type == CONTRALCMD)
 8001f96:	79fb      	ldrb	r3, [r7, #7]
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d165      	bne.n	8002068 <Downcmdsend+0x194>
		Downcmdbuf[0] = 0x55;  								//发送包头
 8001f9c:	4b34      	ldr	r3, [pc, #208]	@ (8002070 <Downcmdsend+0x19c>)
 8001f9e:	2255      	movs	r2, #85	@ 0x55
 8001fa0:	701a      	strb	r2, [r3, #0]
		Downcmdbuf[1] = 0xAA;
 8001fa2:	4b33      	ldr	r3, [pc, #204]	@ (8002070 <Downcmdsend+0x19c>)
 8001fa4:	22aa      	movs	r2, #170	@ 0xaa
 8001fa6:	705a      	strb	r2, [r3, #1]
		Downcmdbuf[2] = (Contralcmdlen+3)>>8;
 8001fa8:	4b35      	ldr	r3, [pc, #212]	@ (8002080 <Downcmdsend+0x1ac>)
 8001faa:	881b      	ldrh	r3, [r3, #0]
 8001fac:	3303      	adds	r3, #3
 8001fae:	121b      	asrs	r3, r3, #8
 8001fb0:	b2da      	uxtb	r2, r3
 8001fb2:	4b2f      	ldr	r3, [pc, #188]	@ (8002070 <Downcmdsend+0x19c>)
 8001fb4:	709a      	strb	r2, [r3, #2]
		Downcmdbuf[3] = Contralcmdlen+3;
 8001fb6:	4b32      	ldr	r3, [pc, #200]	@ (8002080 <Downcmdsend+0x1ac>)
 8001fb8:	881b      	ldrh	r3, [r3, #0]
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	3303      	adds	r3, #3
 8001fbe:	b2da      	uxtb	r2, r3
 8001fc0:	4b2b      	ldr	r3, [pc, #172]	@ (8002070 <Downcmdsend+0x19c>)
 8001fc2:	70da      	strb	r2, [r3, #3]
		Downcmdbuf[4] = CONTRALCMD;							//数据类型，不属于上位机数据体
 8001fc4:	4b2a      	ldr	r3, [pc, #168]	@ (8002070 <Downcmdsend+0x19c>)
 8001fc6:	2202      	movs	r2, #2
 8001fc8:	711a      	strb	r2, [r3, #4]
		Downcmdbuf[5] = ETHdata.Cmdword;						//命令字，切割仪器为5004
 8001fca:	4b2c      	ldr	r3, [pc, #176]	@ (800207c <Downcmdsend+0x1a8>)
 8001fcc:	f8b3 320a 	ldrh.w	r3, [r3, #522]	@ 0x20a
 8001fd0:	b2da      	uxtb	r2, r3
 8001fd2:	4b27      	ldr	r3, [pc, #156]	@ (8002070 <Downcmdsend+0x19c>)
 8001fd4:	715a      	strb	r2, [r3, #5]
		Downcmdbuf[6] = ETHdata.Cmdword>>8;
 8001fd6:	4b29      	ldr	r3, [pc, #164]	@ (800207c <Downcmdsend+0x1a8>)
 8001fd8:	f8b3 320a 	ldrh.w	r3, [r3, #522]	@ 0x20a
 8001fdc:	0a1b      	lsrs	r3, r3, #8
 8001fde:	b29b      	uxth	r3, r3
 8001fe0:	b2da      	uxtb	r2, r3
 8001fe2:	4b23      	ldr	r3, [pc, #140]	@ (8002070 <Downcmdsend+0x19c>)
 8001fe4:	719a      	strb	r2, [r3, #6]
		for(uint8_t i=0;i<Contralcmdlen;i++)
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	73bb      	strb	r3, [r7, #14]
 8001fea:	e009      	b.n	8002000 <Downcmdsend+0x12c>
			Downcmdbuf[i+7] = Contralcmdbuf[i];				//上位机数据体，切割仪器控制命令为8字节
 8001fec:	7bba      	ldrb	r2, [r7, #14]
 8001fee:	7bbb      	ldrb	r3, [r7, #14]
 8001ff0:	3307      	adds	r3, #7
 8001ff2:	4924      	ldr	r1, [pc, #144]	@ (8002084 <Downcmdsend+0x1b0>)
 8001ff4:	5c89      	ldrb	r1, [r1, r2]
 8001ff6:	4a1e      	ldr	r2, [pc, #120]	@ (8002070 <Downcmdsend+0x19c>)
 8001ff8:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i=0;i<Contralcmdlen;i++)
 8001ffa:	7bbb      	ldrb	r3, [r7, #14]
 8001ffc:	3301      	adds	r3, #1
 8001ffe:	73bb      	strb	r3, [r7, #14]
 8002000:	7bbb      	ldrb	r3, [r7, #14]
 8002002:	b29a      	uxth	r2, r3
 8002004:	4b1e      	ldr	r3, [pc, #120]	@ (8002080 <Downcmdsend+0x1ac>)
 8002006:	881b      	ldrh	r3, [r3, #0]
 8002008:	429a      	cmp	r2, r3
 800200a:	d3ef      	bcc.n	8001fec <Downcmdsend+0x118>
		Downcmdbuf[Contralcmdlen+7] = Checksum_sum(Downcmdbuf,Contralcmdlen+7)>>8;
 800200c:	4b1c      	ldr	r3, [pc, #112]	@ (8002080 <Downcmdsend+0x1ac>)
 800200e:	881b      	ldrh	r3, [r3, #0]
 8002010:	3307      	adds	r3, #7
 8002012:	b29b      	uxth	r3, r3
 8002014:	4619      	mov	r1, r3
 8002016:	4816      	ldr	r0, [pc, #88]	@ (8002070 <Downcmdsend+0x19c>)
 8002018:	f7fe fed2 	bl	8000dc0 <Checksum_sum>
 800201c:	4603      	mov	r3, r0
 800201e:	0a1b      	lsrs	r3, r3, #8
 8002020:	b29a      	uxth	r2, r3
 8002022:	4b17      	ldr	r3, [pc, #92]	@ (8002080 <Downcmdsend+0x1ac>)
 8002024:	881b      	ldrh	r3, [r3, #0]
 8002026:	3307      	adds	r3, #7
 8002028:	b2d1      	uxtb	r1, r2
 800202a:	4a11      	ldr	r2, [pc, #68]	@ (8002070 <Downcmdsend+0x19c>)
 800202c:	54d1      	strb	r1, [r2, r3]
		Downcmdbuf[Contralcmdlen+8] = Checksum_sum(Downcmdbuf,Contralcmdlen+7);
 800202e:	4b14      	ldr	r3, [pc, #80]	@ (8002080 <Downcmdsend+0x1ac>)
 8002030:	881b      	ldrh	r3, [r3, #0]
 8002032:	3307      	adds	r3, #7
 8002034:	b29b      	uxth	r3, r3
 8002036:	4619      	mov	r1, r3
 8002038:	480d      	ldr	r0, [pc, #52]	@ (8002070 <Downcmdsend+0x19c>)
 800203a:	f7fe fec1 	bl	8000dc0 <Checksum_sum>
 800203e:	4603      	mov	r3, r0
 8002040:	461a      	mov	r2, r3
 8002042:	4b0f      	ldr	r3, [pc, #60]	@ (8002080 <Downcmdsend+0x1ac>)
 8002044:	881b      	ldrh	r3, [r3, #0]
 8002046:	3308      	adds	r3, #8
 8002048:	b2d1      	uxtb	r1, r2
 800204a:	4a09      	ldr	r2, [pc, #36]	@ (8002070 <Downcmdsend+0x19c>)
 800204c:	54d1      	strb	r1, [r2, r3]
		ComSendBuf(COM5,Downcmdbuf,Contralcmdlen+9);			//ETH_Datalen+8:上位机数据体+2byte帧头+2byte长度和数据类型+2byte校验和+2byte命令字/0-ETH_Datalen+7
 800204e:	4b0c      	ldr	r3, [pc, #48]	@ (8002080 <Downcmdsend+0x1ac>)
 8002050:	881b      	ldrh	r3, [r3, #0]
 8002052:	3309      	adds	r3, #9
 8002054:	b29b      	uxth	r3, r3
 8002056:	461a      	mov	r2, r3
 8002058:	4905      	ldr	r1, [pc, #20]	@ (8002070 <Downcmdsend+0x19c>)
 800205a:	20ee      	movs	r0, #238	@ 0xee
 800205c:	f7ff fac6 	bl	80015ec <ComSendBuf>
		ETHdata.Workmode = 0;
 8002060:	4b06      	ldr	r3, [pc, #24]	@ (800207c <Downcmdsend+0x1a8>)
 8002062:	2200      	movs	r2, #0
 8002064:	f883 2208 	strb.w	r2, [r3, #520]	@ 0x208
}
 8002068:	bf00      	nop
 800206a:	3710      	adds	r7, #16
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	2000065c 	.word	0x2000065c
 8002074:	200000a8 	.word	0x200000a8
 8002078:	2000077c 	.word	0x2000077c
 800207c:	20000234 	.word	0x20000234
 8002080:	200000aa 	.word	0x200000aa
 8002084:	200007b0 	.word	0x200007b0

08002088 <Downdatasend>:


extern unsigned char Subsetnumber;
extern unsigned int Report_Timestamp;
void Downdatasend (unsigned char type)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	4603      	mov	r3, r0
 8002090:	71fb      	strb	r3, [r7, #7]
	Downdataloadbuf[0] = 0xFF;
 8002092:	4b46      	ldr	r3, [pc, #280]	@ (80021ac <Downdatasend+0x124>)
 8002094:	22ff      	movs	r2, #255	@ 0xff
 8002096:	701a      	strb	r2, [r3, #0]
	Downdataloadbuf[1] = 0x00;
 8002098:	4b44      	ldr	r3, [pc, #272]	@ (80021ac <Downdatasend+0x124>)
 800209a:	2200      	movs	r2, #0
 800209c:	705a      	strb	r2, [r3, #1]
	Downdataloadbuf[2] = 0x55;
 800209e:	4b43      	ldr	r3, [pc, #268]	@ (80021ac <Downdatasend+0x124>)
 80020a0:	2255      	movs	r2, #85	@ 0x55
 80020a2:	709a      	strb	r2, [r3, #2]
	Downdataloadbuf[3] = 0xAA;
 80020a4:	4b41      	ldr	r3, [pc, #260]	@ (80021ac <Downdatasend+0x124>)
 80020a6:	22aa      	movs	r2, #170	@ 0xaa
 80020a8:	70da      	strb	r2, [r3, #3]

	Downdataloadbuf[4] = DOWNdata.bodynum>>8;
 80020aa:	4b41      	ldr	r3, [pc, #260]	@ (80021b0 <Downdatasend+0x128>)
 80020ac:	789b      	ldrb	r3, [r3, #2]
 80020ae:	121b      	asrs	r3, r3, #8
 80020b0:	b2da      	uxtb	r2, r3
 80020b2:	4b3e      	ldr	r3, [pc, #248]	@ (80021ac <Downdatasend+0x124>)
 80020b4:	711a      	strb	r2, [r3, #4]
	Downdataloadbuf[5] = DOWNdata.bodynum;
 80020b6:	4b3e      	ldr	r3, [pc, #248]	@ (80021b0 <Downdatasend+0x128>)
 80020b8:	789a      	ldrb	r2, [r3, #2]
 80020ba:	4b3c      	ldr	r3, [pc, #240]	@ (80021ac <Downdatasend+0x124>)
 80020bc:	715a      	strb	r2, [r3, #5]
	Downdataloadbuf[6] = 0x22;									//从井下读数据：0x20000000，仪器采集数据上行：0x02000000
 80020be:	4b3b      	ldr	r3, [pc, #236]	@ (80021ac <Downdatasend+0x124>)
 80020c0:	2222      	movs	r2, #34	@ 0x22
 80020c2:	719a      	strb	r2, [r3, #6]
	Downdataloadbuf[7] = ETHdata.Tooladdress;
 80020c4:	4b3b      	ldr	r3, [pc, #236]	@ (80021b4 <Downdatasend+0x12c>)
 80020c6:	f893 2209 	ldrb.w	r2, [r3, #521]	@ 0x209
 80020ca:	4b38      	ldr	r3, [pc, #224]	@ (80021ac <Downdatasend+0x124>)
 80020cc:	71da      	strb	r2, [r3, #7]
	Downdataloadbuf[8] = Subsetnumber>>8;
 80020ce:	4b3a      	ldr	r3, [pc, #232]	@ (80021b8 <Downdatasend+0x130>)
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	121b      	asrs	r3, r3, #8
 80020d4:	b2da      	uxtb	r2, r3
 80020d6:	4b35      	ldr	r3, [pc, #212]	@ (80021ac <Downdatasend+0x124>)
 80020d8:	721a      	strb	r2, [r3, #8]
	Downdataloadbuf[9] = Subsetnumber;							//subset号，若为命令返回参数则为命令字
 80020da:	4b37      	ldr	r3, [pc, #220]	@ (80021b8 <Downdatasend+0x130>)
 80020dc:	781a      	ldrb	r2, [r3, #0]
 80020de:	4b33      	ldr	r3, [pc, #204]	@ (80021ac <Downdatasend+0x124>)
 80020e0:	725a      	strb	r2, [r3, #9]
	Downdataloadbuf[10] = Report_Timestamp;
 80020e2:	4b36      	ldr	r3, [pc, #216]	@ (80021bc <Downdatasend+0x134>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	b2da      	uxtb	r2, r3
 80020e8:	4b30      	ldr	r3, [pc, #192]	@ (80021ac <Downdatasend+0x124>)
 80020ea:	729a      	strb	r2, [r3, #10]
	Downdataloadbuf[11] = Report_Timestamp>>8;
 80020ec:	4b33      	ldr	r3, [pc, #204]	@ (80021bc <Downdatasend+0x134>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	0a1b      	lsrs	r3, r3, #8
 80020f2:	b2da      	uxtb	r2, r3
 80020f4:	4b2d      	ldr	r3, [pc, #180]	@ (80021ac <Downdatasend+0x124>)
 80020f6:	72da      	strb	r2, [r3, #11]
	Downdataloadbuf[12] = Report_Timestamp>>16;
 80020f8:	4b30      	ldr	r3, [pc, #192]	@ (80021bc <Downdatasend+0x134>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	0c1b      	lsrs	r3, r3, #16
 80020fe:	b2da      	uxtb	r2, r3
 8002100:	4b2a      	ldr	r3, [pc, #168]	@ (80021ac <Downdatasend+0x124>)
 8002102:	731a      	strb	r2, [r3, #12]
	Downdataloadbuf[13] = Report_Timestamp>>24;					//时间标
 8002104:	4b2d      	ldr	r3, [pc, #180]	@ (80021bc <Downdatasend+0x134>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	0e1b      	lsrs	r3, r3, #24
 800210a:	b2da      	uxtb	r2, r3
 800210c:	4b27      	ldr	r3, [pc, #156]	@ (80021ac <Downdatasend+0x124>)
 800210e:	735a      	strb	r2, [r3, #13]
	Downdataloadbuf[14] = 0x00;
 8002110:	4b26      	ldr	r3, [pc, #152]	@ (80021ac <Downdatasend+0x124>)
 8002112:	2200      	movs	r2, #0
 8002114:	739a      	strb	r2, [r3, #14]
	Downdataloadbuf[15] = 0x00;									//超时时间,井下仪器控制命令超时时间，暂时没有返回
 8002116:	4b25      	ldr	r3, [pc, #148]	@ (80021ac <Downdatasend+0x124>)
 8002118:	2200      	movs	r2, #0
 800211a:	73da      	strb	r2, [r3, #15]
	Downdataloadbuf[16] = type;									//超时or数据
 800211c:	4a23      	ldr	r2, [pc, #140]	@ (80021ac <Downdatasend+0x124>)
 800211e:	79fb      	ldrb	r3, [r7, #7]
 8002120:	7413      	strb	r3, [r2, #16]
	Downdataloadbuf[17] = 0x00;									//预留
 8002122:	4b22      	ldr	r3, [pc, #136]	@ (80021ac <Downdatasend+0x124>)
 8002124:	2200      	movs	r2, #0
 8002126:	745a      	strb	r2, [r3, #17]
	for(unsigned char i=0;i<DOWNdata.bodynum;i++)
 8002128:	2300      	movs	r3, #0
 800212a:	73fb      	strb	r3, [r7, #15]
 800212c:	e00b      	b.n	8002146 <Downdatasend+0xbe>
	{
		Downdataloadbuf[18+i] = DOWNdata.bodybuf[i];
 800212e:	7bfa      	ldrb	r2, [r7, #15]
 8002130:	7bfb      	ldrb	r3, [r7, #15]
 8002132:	3312      	adds	r3, #18
 8002134:	491e      	ldr	r1, [pc, #120]	@ (80021b0 <Downdatasend+0x128>)
 8002136:	440a      	add	r2, r1
 8002138:	f892 1103 	ldrb.w	r1, [r2, #259]	@ 0x103
 800213c:	4a1b      	ldr	r2, [pc, #108]	@ (80021ac <Downdatasend+0x124>)
 800213e:	54d1      	strb	r1, [r2, r3]
	for(unsigned char i=0;i<DOWNdata.bodynum;i++)
 8002140:	7bfb      	ldrb	r3, [r7, #15]
 8002142:	3301      	adds	r3, #1
 8002144:	73fb      	strb	r3, [r7, #15]
 8002146:	4b1a      	ldr	r3, [pc, #104]	@ (80021b0 <Downdatasend+0x128>)
 8002148:	789b      	ldrb	r3, [r3, #2]
 800214a:	7bfa      	ldrb	r2, [r7, #15]
 800214c:	429a      	cmp	r2, r3
 800214e:	d3ee      	bcc.n	800212e <Downdatasend+0xa6>
	}
	Downdataloadbuf[DOWNdata.bodynum+18] = Checksum_sum(Downdataloadbuf,DOWNdata.bodynum+18)>>8;
 8002150:	4b17      	ldr	r3, [pc, #92]	@ (80021b0 <Downdatasend+0x128>)
 8002152:	789b      	ldrb	r3, [r3, #2]
 8002154:	3312      	adds	r3, #18
 8002156:	b29b      	uxth	r3, r3
 8002158:	4619      	mov	r1, r3
 800215a:	4814      	ldr	r0, [pc, #80]	@ (80021ac <Downdatasend+0x124>)
 800215c:	f7fe fe30 	bl	8000dc0 <Checksum_sum>
 8002160:	4603      	mov	r3, r0
 8002162:	0a1b      	lsrs	r3, r3, #8
 8002164:	b29a      	uxth	r2, r3
 8002166:	4b12      	ldr	r3, [pc, #72]	@ (80021b0 <Downdatasend+0x128>)
 8002168:	789b      	ldrb	r3, [r3, #2]
 800216a:	3312      	adds	r3, #18
 800216c:	b2d1      	uxtb	r1, r2
 800216e:	4a0f      	ldr	r2, [pc, #60]	@ (80021ac <Downdatasend+0x124>)
 8002170:	54d1      	strb	r1, [r2, r3]
	Downdataloadbuf[DOWNdata.bodynum+19] = Checksum_sum(Downdataloadbuf,DOWNdata.bodynum+18);
 8002172:	4b0f      	ldr	r3, [pc, #60]	@ (80021b0 <Downdatasend+0x128>)
 8002174:	789b      	ldrb	r3, [r3, #2]
 8002176:	3312      	adds	r3, #18
 8002178:	b29b      	uxth	r3, r3
 800217a:	4619      	mov	r1, r3
 800217c:	480b      	ldr	r0, [pc, #44]	@ (80021ac <Downdatasend+0x124>)
 800217e:	f7fe fe1f 	bl	8000dc0 <Checksum_sum>
 8002182:	4603      	mov	r3, r0
 8002184:	461a      	mov	r2, r3
 8002186:	4b0a      	ldr	r3, [pc, #40]	@ (80021b0 <Downdatasend+0x128>)
 8002188:	789b      	ldrb	r3, [r3, #2]
 800218a:	3313      	adds	r3, #19
 800218c:	b2d1      	uxtb	r1, r2
 800218e:	4a07      	ldr	r2, [pc, #28]	@ (80021ac <Downdatasend+0x124>)
 8002190:	54d1      	strb	r1, [r2, r3]
	ComSendBuf(COM1,Downdataloadbuf,DOWNdata.bodynum+20);
 8002192:	4b07      	ldr	r3, [pc, #28]	@ (80021b0 <Downdatasend+0x128>)
 8002194:	789b      	ldrb	r3, [r3, #2]
 8002196:	3314      	adds	r3, #20
 8002198:	b29b      	uxth	r3, r3
 800219a:	461a      	mov	r2, r3
 800219c:	4903      	ldr	r1, [pc, #12]	@ (80021ac <Downdatasend+0x124>)
 800219e:	20dd      	movs	r0, #221	@ 0xdd
 80021a0:	f7ff fa24 	bl	80015ec <ComSendBuf>
}
 80021a4:	bf00      	nop
 80021a6:	3710      	adds	r7, #16
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	2000067c 	.word	0x2000067c
 80021b0:	2000044c 	.word	0x2000044c
 80021b4:	20000234 	.word	0x20000234
 80021b8:	200000a1 	.word	0x200000a1
 80021bc:	20000108 	.word	0x20000108

080021c0 <Resetstate>:
/* USER CODE END 1 */

void Resetstate(unsigned char tep)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	4603      	mov	r3, r0
 80021c8:	71fb      	strb	r3, [r7, #7]
	if(tep == ETHCMD)
 80021ca:	79fb      	ldrb	r3, [r7, #7]
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d10d      	bne.n	80021ec <Resetstate+0x2c>
	{
		ETHdata.bodynum = 0;
 80021d0:	4b11      	ldr	r3, [pc, #68]	@ (8002218 <Resetstate+0x58>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	709a      	strb	r2, [r3, #2]
		ETHdata.state = 0;
 80021d6:	4b10      	ldr	r3, [pc, #64]	@ (8002218 <Resetstate+0x58>)
 80021d8:	2200      	movs	r2, #0
 80021da:	701a      	strb	r2, [r3, #0]
		ETHdata.headnum = 0;
 80021dc:	4b0e      	ldr	r3, [pc, #56]	@ (8002218 <Resetstate+0x58>)
 80021de:	2200      	movs	r2, #0
 80021e0:	705a      	strb	r2, [r3, #1]
		ETHdata.overflag = 0;
 80021e2:	4b0d      	ldr	r3, [pc, #52]	@ (8002218 <Resetstate+0x58>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	f883 2216 	strb.w	r2, [r3, #534]	@ 0x216
		DOWNdata.overflag = 0;
		DOWNdata.state = 0;
		DOWNdata.headnum = 0;
		DOWNdata.bodynum = 0;
	}
}
 80021ea:	e00f      	b.n	800220c <Resetstate+0x4c>
	else if(tep == TOOLDATA)
 80021ec:	79fb      	ldrb	r3, [r7, #7]
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d10c      	bne.n	800220c <Resetstate+0x4c>
		DOWNdata.overflag = 0;
 80021f2:	4b0a      	ldr	r3, [pc, #40]	@ (800221c <Resetstate+0x5c>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	f883 2208 	strb.w	r2, [r3, #520]	@ 0x208
		DOWNdata.state = 0;
 80021fa:	4b08      	ldr	r3, [pc, #32]	@ (800221c <Resetstate+0x5c>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	701a      	strb	r2, [r3, #0]
		DOWNdata.headnum = 0;
 8002200:	4b06      	ldr	r3, [pc, #24]	@ (800221c <Resetstate+0x5c>)
 8002202:	2200      	movs	r2, #0
 8002204:	705a      	strb	r2, [r3, #1]
		DOWNdata.bodynum = 0;
 8002206:	4b05      	ldr	r3, [pc, #20]	@ (800221c <Resetstate+0x5c>)
 8002208:	2200      	movs	r2, #0
 800220a:	709a      	strb	r2, [r3, #2]
}
 800220c:	bf00      	nop
 800220e:	370c      	adds	r7, #12
 8002210:	46bd      	mov	sp, r7
 8002212:	bc80      	pop	{r7}
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	20000234 	.word	0x20000234
 800221c:	2000044c 	.word	0x2000044c

08002220 <main>:
  */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

int main(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0
  init();												//硬件初始化
 8002224:	f7fe fcec 	bl	8000c00 <init>

  while (1)
  {
	  ETH_CMDPOLL();									//ETH指令轮询
 8002228:	f7fe fe2c 	bl	8000e84 <ETH_CMDPOLL>
	  DOWN_DATAPOLL();									//DOWN数据轮询
 800222c:	f7fe ff34 	bl	8001098 <DOWN_DATAPOLL>
	  Sendtimestamp();									//时间深度同步
 8002230:	f7fe ff60 	bl	80010f4 <Sendtimestamp>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
 8002234:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002238:	4803      	ldr	r0, [pc, #12]	@ (8002248 <main+0x28>)
 800223a:	f001 f96c 	bl	8003516 <HAL_GPIO_TogglePin>

	  IWDG_FEED_DOG();									//喂狗，超过410ms未清看门狗，系统复位
 800223e:	f7fe fd59 	bl	8000cf4 <IWDG_FEED_DOG>
	  ETH_CMDPOLL();									//ETH指令轮询
 8002242:	bf00      	nop
 8002244:	e7f0      	b.n	8002228 <main+0x8>
 8002246:	bf00      	nop
 8002248:	40010c00 	.word	0x40010c00

0800224c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800224c:	f7fe f898 	bl	8000380 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002250:	480b      	ldr	r0, [pc, #44]	@ (8002280 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002252:	490c      	ldr	r1, [pc, #48]	@ (8002284 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002254:	4a0c      	ldr	r2, [pc, #48]	@ (8002288 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002256:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002258:	e002      	b.n	8002260 <LoopCopyDataInit>

0800225a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800225a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800225c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800225e:	3304      	adds	r3, #4

08002260 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002260:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002262:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002264:	d3f9      	bcc.n	800225a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002266:	4a09      	ldr	r2, [pc, #36]	@ (800228c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002268:	4c09      	ldr	r4, [pc, #36]	@ (8002290 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800226a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800226c:	e001      	b.n	8002272 <LoopFillZerobss>

0800226e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800226e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002270:	3204      	adds	r2, #4

08002272 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002272:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002274:	d3fb      	bcc.n	800226e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002276:	f003 f88b 	bl	8005390 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800227a:	f7ff ffd1 	bl	8002220 <main>
  bx lr
 800227e:	4770      	bx	lr
  ldr r0, =_sdata
 8002280:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002284:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8002288:	08006178 	.word	0x08006178
  ldr r2, =_sbss
 800228c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8002290:	20000de8 	.word	0x20000de8

08002294 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002294:	e7fe      	b.n	8002294 <ADC1_2_IRQHandler>
	...

08002298 <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
 800229e:	4b21      	ldr	r3, [pc, #132]	@ (8002324 <_DoInit+0x8c>)
 80022a0:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2203      	movs	r2, #3
 80022a6:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2203      	movs	r2, #3
 80022ac:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4a1d      	ldr	r2, [pc, #116]	@ (8002328 <_DoInit+0x90>)
 80022b2:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	4a1d      	ldr	r2, [pc, #116]	@ (800232c <_DoInit+0x94>)
 80022b8:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80022c0:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2200      	movs	r2, #0
 80022c6:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2200      	movs	r2, #0
 80022cc:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2200      	movs	r2, #0
 80022d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	4a14      	ldr	r2, [pc, #80]	@ (8002328 <_DoInit+0x90>)
 80022d8:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a14      	ldr	r2, [pc, #80]	@ (8002330 <_DoInit+0x98>)
 80022de:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2210      	movs	r2, #16
 80022e4:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2200      	movs	r2, #0
 80022ea:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2200      	movs	r2, #0
 80022f0:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2200      	movs	r2, #0
 80022f6:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	3307      	adds	r3, #7
 80022fc:	4a0d      	ldr	r2, [pc, #52]	@ (8002334 <_DoInit+0x9c>)
 80022fe:	6810      	ldr	r0, [r2, #0]
 8002300:	6018      	str	r0, [r3, #0]
  strcpy(&p->acID[0], "SEGGER");
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4a0c      	ldr	r2, [pc, #48]	@ (8002338 <_DoInit+0xa0>)
 8002306:	6810      	ldr	r0, [r2, #0]
 8002308:	6018      	str	r0, [r3, #0]
 800230a:	8891      	ldrh	r1, [r2, #4]
 800230c:	7992      	ldrb	r2, [r2, #6]
 800230e:	8099      	strh	r1, [r3, #4]
 8002310:	719a      	strb	r2, [r3, #6]
  p->acID[6] = ' ';
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2220      	movs	r2, #32
 8002316:	719a      	strb	r2, [r3, #6]
}
 8002318:	bf00      	nop
 800231a:	370c      	adds	r7, #12
 800231c:	46bd      	mov	sp, r7
 800231e:	bc80      	pop	{r7}
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	200007e4 	.word	0x200007e4
 8002328:	08005cfc 	.word	0x08005cfc
 800232c:	2000088c 	.word	0x2000088c
 8002330:	20000c8c 	.word	0x20000c8c
 8002334:	08005d08 	.word	0x08005d08
 8002338:	08005d0c 	.word	0x08005d0c

0800233c <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 800233c:	b580      	push	{r7, lr}
 800233e:	b088      	sub	sp, #32
 8002340:	af00      	add	r7, sp, #0
 8002342:	60f8      	str	r0, [r7, #12]
 8002344:	60b9      	str	r1, [r7, #8]
 8002346:	607a      	str	r2, [r7, #4]
  char*    pDst;
#endif
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8002348:	2300      	movs	r3, #0
 800234a:	61bb      	str	r3, [r7, #24]
  WrOff = pRing->WrOff;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	617b      	str	r3, [r7, #20]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	691b      	ldr	r3, [r3, #16]
 8002356:	613b      	str	r3, [r7, #16]
    if (RdOff > WrOff) {
 8002358:	693a      	ldr	r2, [r7, #16]
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	429a      	cmp	r2, r3
 800235e:	d905      	bls.n	800236c <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8002360:	693a      	ldr	r2, [r7, #16]
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	3b01      	subs	r3, #1
 8002368:	61fb      	str	r3, [r7, #28]
 800236a:	e007      	b.n	800237c <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	689a      	ldr	r2, [r3, #8]
 8002370:	6939      	ldr	r1, [r7, #16]
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	1acb      	subs	r3, r1, r3
 8002376:	4413      	add	r3, r2
 8002378:	3b01      	subs	r3, #1
 800237a:	61fb      	str	r3, [r7, #28]
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	689a      	ldr	r2, [r3, #8]
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	69fa      	ldr	r2, [r7, #28]
 8002386:	4293      	cmp	r3, r2
 8002388:	bf28      	it	cs
 800238a:	4613      	movcs	r3, r2
 800238c:	61fb      	str	r3, [r7, #28]
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 800238e:	69fa      	ldr	r2, [r7, #28]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	4293      	cmp	r3, r2
 8002394:	bf28      	it	cs
 8002396:	4613      	movcs	r3, r2
 8002398:	61fb      	str	r3, [r7, #28]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	685a      	ldr	r2, [r3, #4]
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	4413      	add	r3, r2
 80023a2:	69fa      	ldr	r2, [r7, #28]
 80023a4:	68b9      	ldr	r1, [r7, #8]
 80023a6:	4618      	mov	r0, r3
 80023a8:	f003 f818 	bl	80053dc <memcpy>
    NumBytesWritten += NumBytesToWrite;
 80023ac:	69ba      	ldr	r2, [r7, #24]
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	4413      	add	r3, r2
 80023b2:	61bb      	str	r3, [r7, #24]
    pBuffer         += NumBytesToWrite;
 80023b4:	68ba      	ldr	r2, [r7, #8]
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	4413      	add	r3, r2
 80023ba:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 80023bc:	687a      	ldr	r2, [r7, #4]
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 80023c4:	697a      	ldr	r2, [r7, #20]
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	4413      	add	r3, r2
 80023ca:	617b      	str	r3, [r7, #20]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	697a      	ldr	r2, [r7, #20]
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d101      	bne.n	80023da <_WriteBlocking+0x9e>
      WrOff = 0u;
 80023d6:	2300      	movs	r3, #0
 80023d8:	617b      	str	r3, [r7, #20]
    }
    pRing->WrOff = WrOff;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	697a      	ldr	r2, [r7, #20]
 80023de:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d1b5      	bne.n	8002352 <_WriteBlocking+0x16>
  //
  return NumBytesWritten;
 80023e6:	69bb      	ldr	r3, [r7, #24]
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3720      	adds	r7, #32
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}

080023f0 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b088      	sub	sp, #32
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	60f8      	str	r0, [r7, #12]
 80023f8:	60b9      	str	r1, [r7, #8]
 80023fa:	607a      	str	r2, [r7, #4]
  unsigned Rem;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  char*    pDst;
#endif

  WrOff = pRing->WrOff;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	689a      	ldr	r2, [r3, #8]
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 800240c:	69ba      	ldr	r2, [r7, #24]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	429a      	cmp	r2, r3
 8002412:	d90e      	bls.n	8002432 <_WriteNoCheck+0x42>
    while (NumBytes--) {
      *pDst++ = *pData++;
    };
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	685a      	ldr	r2, [r3, #4]
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	4413      	add	r3, r2
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	68b9      	ldr	r1, [r7, #8]
 8002420:	4618      	mov	r0, r3
 8002422:	f002 ffdb 	bl	80053dc <memcpy>
    pRing->WrOff = WrOff + NumBytes;
 8002426:	69fa      	ldr	r2, [r7, #28]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	441a      	add	r2, r3
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	60da      	str	r2, [r3, #12]
    NumBytesAtOnce = NumBytes - Rem;
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8002430:	e01a      	b.n	8002468 <_WriteNoCheck+0x78>
    NumBytesAtOnce = Rem;
 8002432:	69bb      	ldr	r3, [r7, #24]
 8002434:	617b      	str	r3, [r7, #20]
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	685a      	ldr	r2, [r3, #4]
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	4413      	add	r3, r2
 800243e:	697a      	ldr	r2, [r7, #20]
 8002440:	68b9      	ldr	r1, [r7, #8]
 8002442:	4618      	mov	r0, r3
 8002444:	f002 ffca 	bl	80053dc <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8002448:	687a      	ldr	r2, [r7, #4]
 800244a:	69bb      	ldr	r3, [r7, #24]
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	617b      	str	r3, [r7, #20]
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	6858      	ldr	r0, [r3, #4]
 8002454:	68ba      	ldr	r2, [r7, #8]
 8002456:	69bb      	ldr	r3, [r7, #24]
 8002458:	4413      	add	r3, r2
 800245a:	697a      	ldr	r2, [r7, #20]
 800245c:	4619      	mov	r1, r3
 800245e:	f002 ffbd 	bl	80053dc <memcpy>
    pRing->WrOff = NumBytesAtOnce;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	697a      	ldr	r2, [r7, #20]
 8002466:	60da      	str	r2, [r3, #12]
}
 8002468:	bf00      	nop
 800246a:	3720      	adds	r7, #32
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}

08002470 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8002470:	b480      	push	{r7}
 8002472:	b087      	sub	sp, #28
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	691b      	ldr	r3, [r3, #16]
 800247c:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	68db      	ldr	r3, [r3, #12]
 8002482:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8002484:	693a      	ldr	r2, [r7, #16]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	429a      	cmp	r2, r3
 800248a:	d808      	bhi.n	800249e <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	689a      	ldr	r2, [r3, #8]
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	1ad2      	subs	r2, r2, r3
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	4413      	add	r3, r2
 8002498:	3b01      	subs	r3, #1
 800249a:	617b      	str	r3, [r7, #20]
 800249c:	e004      	b.n	80024a8 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 800249e:	693a      	ldr	r2, [r7, #16]
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	3b01      	subs	r3, #1
 80024a6:	617b      	str	r3, [r7, #20]
  }
  return r;
 80024a8:	697b      	ldr	r3, [r7, #20]
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	371c      	adds	r7, #28
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bc80      	pop	{r7}
 80024b2:	4770      	bx	lr

080024b4 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b088      	sub	sp, #32
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	60f8      	str	r0, [r7, #12]
 80024bc:	60b9      	str	r1, [r7, #8]
 80024be:	607a      	str	r2, [r7, #4]
  unsigned              Status;
  unsigned              Avail;
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;

  pData = (const char *)pBuffer;
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	61bb      	str	r3, [r7, #24]
  //
  // Get "to-host" ring buffer.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	1c5a      	adds	r2, r3, #1
 80024c8:	4613      	mov	r3, r2
 80024ca:	005b      	lsls	r3, r3, #1
 80024cc:	4413      	add	r3, r2
 80024ce:	00db      	lsls	r3, r3, #3
 80024d0:	4a1f      	ldr	r2, [pc, #124]	@ (8002550 <SEGGER_RTT_WriteNoLock+0x9c>)
 80024d2:	4413      	add	r3, r2
 80024d4:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	695b      	ldr	r3, [r3, #20]
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d029      	beq.n	8002532 <SEGGER_RTT_WriteNoLock+0x7e>
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d82e      	bhi.n	8002540 <SEGGER_RTT_WriteNoLock+0x8c>
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d002      	beq.n	80024ec <SEGGER_RTT_WriteNoLock+0x38>
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d013      	beq.n	8002512 <SEGGER_RTT_WriteNoLock+0x5e>
 80024ea:	e029      	b.n	8002540 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80024ec:	6978      	ldr	r0, [r7, #20]
 80024ee:	f7ff ffbf 	bl	8002470 <_GetAvailWriteSpace>
 80024f2:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 80024f4:	693a      	ldr	r2, [r7, #16]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d202      	bcs.n	8002502 <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 80024fc:	2300      	movs	r3, #0
 80024fe:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8002500:	e021      	b.n	8002546 <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	69b9      	ldr	r1, [r7, #24]
 800250a:	6978      	ldr	r0, [r7, #20]
 800250c:	f7ff ff70 	bl	80023f0 <_WriteNoCheck>
    break;
 8002510:	e019      	b.n	8002546 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8002512:	6978      	ldr	r0, [r7, #20]
 8002514:	f7ff ffac 	bl	8002470 <_GetAvailWriteSpace>
 8002518:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	4293      	cmp	r3, r2
 8002520:	bf28      	it	cs
 8002522:	4613      	movcs	r3, r2
 8002524:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8002526:	69fa      	ldr	r2, [r7, #28]
 8002528:	69b9      	ldr	r1, [r7, #24]
 800252a:	6978      	ldr	r0, [r7, #20]
 800252c:	f7ff ff60 	bl	80023f0 <_WriteNoCheck>
    break;
 8002530:	e009      	b.n	8002546 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	69b9      	ldr	r1, [r7, #24]
 8002536:	6978      	ldr	r0, [r7, #20]
 8002538:	f7ff ff00 	bl	800233c <_WriteBlocking>
 800253c:	61f8      	str	r0, [r7, #28]
    break;
 800253e:	e002      	b.n	8002546 <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 8002540:	2300      	movs	r3, #0
 8002542:	61fb      	str	r3, [r7, #28]
    break;
 8002544:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8002546:	69fb      	ldr	r3, [r7, #28]
}
 8002548:	4618      	mov	r0, r3
 800254a:	3720      	adds	r7, #32
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}
 8002550:	200007e4 	.word	0x200007e4

08002554 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8002554:	b580      	push	{r7, lr}
 8002556:	b086      	sub	sp, #24
 8002558:	af00      	add	r7, sp, #0
 800255a:	60f8      	str	r0, [r7, #12]
 800255c:	60b9      	str	r1, [r7, #8]
 800255e:	607a      	str	r2, [r7, #4]
  unsigned Status;
  //
  INIT();
 8002560:	4b0d      	ldr	r3, [pc, #52]	@ (8002598 <SEGGER_RTT_Write+0x44>)
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d101      	bne.n	800256c <SEGGER_RTT_Write+0x18>
 8002568:	f7ff fe96 	bl	8002298 <_DoInit>
  SEGGER_RTT_LOCK();
 800256c:	f3ef 8311 	mrs	r3, BASEPRI
 8002570:	f04f 0120 	mov.w	r1, #32
 8002574:	f381 8811 	msr	BASEPRI, r1
 8002578:	617b      	str	r3, [r7, #20]
  //
  // Call the non-locking write function
  //
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	68b9      	ldr	r1, [r7, #8]
 800257e:	68f8      	ldr	r0, [r7, #12]
 8002580:	f7ff ff98 	bl	80024b4 <SEGGER_RTT_WriteNoLock>
 8002584:	6138      	str	r0, [r7, #16]
  //
  // Finish up.
  //
  SEGGER_RTT_UNLOCK();
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	f383 8811 	msr	BASEPRI, r3
  //
  return Status;
 800258c:	693b      	ldr	r3, [r7, #16]
}
 800258e:	4618      	mov	r0, r3
 8002590:	3718      	adds	r7, #24
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	200007e4 	.word	0x200007e4

0800259c <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
 800259c:	b580      	push	{r7, lr}
 800259e:	af00      	add	r7, sp, #0
  _DoInit();
 80025a0:	f7ff fe7a 	bl	8002298 <_DoInit>
}
 80025a4:	bf00      	nop
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025ac:	4b08      	ldr	r3, [pc, #32]	@ (80025d0 <HAL_Init+0x28>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a07      	ldr	r2, [pc, #28]	@ (80025d0 <HAL_Init+0x28>)
 80025b2:	f043 0310 	orr.w	r3, r3, #16
 80025b6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025b8:	2003      	movs	r0, #3
 80025ba:	f000 f923 	bl	8002804 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025be:	200f      	movs	r0, #15
 80025c0:	f000 f808 	bl	80025d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025c4:	f7fd fe2e 	bl	8000224 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025c8:	2300      	movs	r3, #0
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	40022000 	.word	0x40022000

080025d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80025dc:	4b12      	ldr	r3, [pc, #72]	@ (8002628 <HAL_InitTick+0x54>)
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	4b12      	ldr	r3, [pc, #72]	@ (800262c <HAL_InitTick+0x58>)
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	4619      	mov	r1, r3
 80025e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80025ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80025ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80025f2:	4618      	mov	r0, r3
 80025f4:	f000 f93b 	bl	800286e <HAL_SYSTICK_Config>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d001      	beq.n	8002602 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e00e      	b.n	8002620 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2b0f      	cmp	r3, #15
 8002606:	d80a      	bhi.n	800261e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002608:	2200      	movs	r2, #0
 800260a:	6879      	ldr	r1, [r7, #4]
 800260c:	f04f 30ff 	mov.w	r0, #4294967295
 8002610:	f000 f903 	bl	800281a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002614:	4a06      	ldr	r2, [pc, #24]	@ (8002630 <HAL_InitTick+0x5c>)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800261a:	2300      	movs	r3, #0
 800261c:	e000      	b.n	8002620 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
}
 8002620:	4618      	mov	r0, r3
 8002622:	3708      	adds	r7, #8
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}
 8002628:	20000000 	.word	0x20000000
 800262c:	2000000c 	.word	0x2000000c
 8002630:	20000008 	.word	0x20000008

08002634 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002634:	b480      	push	{r7}
 8002636:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002638:	4b05      	ldr	r3, [pc, #20]	@ (8002650 <HAL_IncTick+0x1c>)
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	461a      	mov	r2, r3
 800263e:	4b05      	ldr	r3, [pc, #20]	@ (8002654 <HAL_IncTick+0x20>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4413      	add	r3, r2
 8002644:	4a03      	ldr	r2, [pc, #12]	@ (8002654 <HAL_IncTick+0x20>)
 8002646:	6013      	str	r3, [r2, #0]
}
 8002648:	bf00      	nop
 800264a:	46bd      	mov	sp, r7
 800264c:	bc80      	pop	{r7}
 800264e:	4770      	bx	lr
 8002650:	2000000c 	.word	0x2000000c
 8002654:	20000c9c 	.word	0x20000c9c

08002658 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002658:	b480      	push	{r7}
 800265a:	af00      	add	r7, sp, #0
  return uwTick;
 800265c:	4b02      	ldr	r3, [pc, #8]	@ (8002668 <HAL_GetTick+0x10>)
 800265e:	681b      	ldr	r3, [r3, #0]
}
 8002660:	4618      	mov	r0, r3
 8002662:	46bd      	mov	sp, r7
 8002664:	bc80      	pop	{r7}
 8002666:	4770      	bx	lr
 8002668:	20000c9c 	.word	0x20000c9c

0800266c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800266c:	b480      	push	{r7}
 800266e:	b085      	sub	sp, #20
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f003 0307 	and.w	r3, r3, #7
 800267a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800267c:	4b0c      	ldr	r3, [pc, #48]	@ (80026b0 <__NVIC_SetPriorityGrouping+0x44>)
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002682:	68ba      	ldr	r2, [r7, #8]
 8002684:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002688:	4013      	ands	r3, r2
 800268a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002694:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002698:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800269c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800269e:	4a04      	ldr	r2, [pc, #16]	@ (80026b0 <__NVIC_SetPriorityGrouping+0x44>)
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	60d3      	str	r3, [r2, #12]
}
 80026a4:	bf00      	nop
 80026a6:	3714      	adds	r7, #20
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bc80      	pop	{r7}
 80026ac:	4770      	bx	lr
 80026ae:	bf00      	nop
 80026b0:	e000ed00 	.word	0xe000ed00

080026b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026b4:	b480      	push	{r7}
 80026b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026b8:	4b04      	ldr	r3, [pc, #16]	@ (80026cc <__NVIC_GetPriorityGrouping+0x18>)
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	0a1b      	lsrs	r3, r3, #8
 80026be:	f003 0307 	and.w	r3, r3, #7
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bc80      	pop	{r7}
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop
 80026cc:	e000ed00 	.word	0xe000ed00

080026d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	4603      	mov	r3, r0
 80026d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	db0b      	blt.n	80026fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026e2:	79fb      	ldrb	r3, [r7, #7]
 80026e4:	f003 021f 	and.w	r2, r3, #31
 80026e8:	4906      	ldr	r1, [pc, #24]	@ (8002704 <__NVIC_EnableIRQ+0x34>)
 80026ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ee:	095b      	lsrs	r3, r3, #5
 80026f0:	2001      	movs	r0, #1
 80026f2:	fa00 f202 	lsl.w	r2, r0, r2
 80026f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026fa:	bf00      	nop
 80026fc:	370c      	adds	r7, #12
 80026fe:	46bd      	mov	sp, r7
 8002700:	bc80      	pop	{r7}
 8002702:	4770      	bx	lr
 8002704:	e000e100 	.word	0xe000e100

08002708 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	4603      	mov	r3, r0
 8002710:	6039      	str	r1, [r7, #0]
 8002712:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002714:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002718:	2b00      	cmp	r3, #0
 800271a:	db0a      	blt.n	8002732 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	b2da      	uxtb	r2, r3
 8002720:	490c      	ldr	r1, [pc, #48]	@ (8002754 <__NVIC_SetPriority+0x4c>)
 8002722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002726:	0112      	lsls	r2, r2, #4
 8002728:	b2d2      	uxtb	r2, r2
 800272a:	440b      	add	r3, r1
 800272c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002730:	e00a      	b.n	8002748 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	b2da      	uxtb	r2, r3
 8002736:	4908      	ldr	r1, [pc, #32]	@ (8002758 <__NVIC_SetPriority+0x50>)
 8002738:	79fb      	ldrb	r3, [r7, #7]
 800273a:	f003 030f 	and.w	r3, r3, #15
 800273e:	3b04      	subs	r3, #4
 8002740:	0112      	lsls	r2, r2, #4
 8002742:	b2d2      	uxtb	r2, r2
 8002744:	440b      	add	r3, r1
 8002746:	761a      	strb	r2, [r3, #24]
}
 8002748:	bf00      	nop
 800274a:	370c      	adds	r7, #12
 800274c:	46bd      	mov	sp, r7
 800274e:	bc80      	pop	{r7}
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop
 8002754:	e000e100 	.word	0xe000e100
 8002758:	e000ed00 	.word	0xe000ed00

0800275c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800275c:	b480      	push	{r7}
 800275e:	b089      	sub	sp, #36	@ 0x24
 8002760:	af00      	add	r7, sp, #0
 8002762:	60f8      	str	r0, [r7, #12]
 8002764:	60b9      	str	r1, [r7, #8]
 8002766:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	f003 0307 	and.w	r3, r3, #7
 800276e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	f1c3 0307 	rsb	r3, r3, #7
 8002776:	2b04      	cmp	r3, #4
 8002778:	bf28      	it	cs
 800277a:	2304      	movcs	r3, #4
 800277c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	3304      	adds	r3, #4
 8002782:	2b06      	cmp	r3, #6
 8002784:	d902      	bls.n	800278c <NVIC_EncodePriority+0x30>
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	3b03      	subs	r3, #3
 800278a:	e000      	b.n	800278e <NVIC_EncodePriority+0x32>
 800278c:	2300      	movs	r3, #0
 800278e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002790:	f04f 32ff 	mov.w	r2, #4294967295
 8002794:	69bb      	ldr	r3, [r7, #24]
 8002796:	fa02 f303 	lsl.w	r3, r2, r3
 800279a:	43da      	mvns	r2, r3
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	401a      	ands	r2, r3
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027a4:	f04f 31ff 	mov.w	r1, #4294967295
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	fa01 f303 	lsl.w	r3, r1, r3
 80027ae:	43d9      	mvns	r1, r3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027b4:	4313      	orrs	r3, r2
         );
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3724      	adds	r7, #36	@ 0x24
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bc80      	pop	{r7}
 80027be:	4770      	bx	lr

080027c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	3b01      	subs	r3, #1
 80027cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80027d0:	d301      	bcc.n	80027d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027d2:	2301      	movs	r3, #1
 80027d4:	e00f      	b.n	80027f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027d6:	4a0a      	ldr	r2, [pc, #40]	@ (8002800 <SysTick_Config+0x40>)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	3b01      	subs	r3, #1
 80027dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027de:	210f      	movs	r1, #15
 80027e0:	f04f 30ff 	mov.w	r0, #4294967295
 80027e4:	f7ff ff90 	bl	8002708 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027e8:	4b05      	ldr	r3, [pc, #20]	@ (8002800 <SysTick_Config+0x40>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027ee:	4b04      	ldr	r3, [pc, #16]	@ (8002800 <SysTick_Config+0x40>)
 80027f0:	2207      	movs	r2, #7
 80027f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027f4:	2300      	movs	r3, #0
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3708      	adds	r7, #8
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	e000e010 	.word	0xe000e010

08002804 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f7ff ff2d 	bl	800266c <__NVIC_SetPriorityGrouping>
}
 8002812:	bf00      	nop
 8002814:	3708      	adds	r7, #8
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}

0800281a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800281a:	b580      	push	{r7, lr}
 800281c:	b086      	sub	sp, #24
 800281e:	af00      	add	r7, sp, #0
 8002820:	4603      	mov	r3, r0
 8002822:	60b9      	str	r1, [r7, #8]
 8002824:	607a      	str	r2, [r7, #4]
 8002826:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002828:	2300      	movs	r3, #0
 800282a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800282c:	f7ff ff42 	bl	80026b4 <__NVIC_GetPriorityGrouping>
 8002830:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	68b9      	ldr	r1, [r7, #8]
 8002836:	6978      	ldr	r0, [r7, #20]
 8002838:	f7ff ff90 	bl	800275c <NVIC_EncodePriority>
 800283c:	4602      	mov	r2, r0
 800283e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002842:	4611      	mov	r1, r2
 8002844:	4618      	mov	r0, r3
 8002846:	f7ff ff5f 	bl	8002708 <__NVIC_SetPriority>
}
 800284a:	bf00      	nop
 800284c:	3718      	adds	r7, #24
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}

08002852 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002852:	b580      	push	{r7, lr}
 8002854:	b082      	sub	sp, #8
 8002856:	af00      	add	r7, sp, #0
 8002858:	4603      	mov	r3, r0
 800285a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800285c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002860:	4618      	mov	r0, r3
 8002862:	f7ff ff35 	bl	80026d0 <__NVIC_EnableIRQ>
}
 8002866:	bf00      	nop
 8002868:	3708      	adds	r7, #8
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}

0800286e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800286e:	b580      	push	{r7, lr}
 8002870:	b082      	sub	sp, #8
 8002872:	af00      	add	r7, sp, #0
 8002874:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f7ff ffa2 	bl	80027c0 <SysTick_Config>
 800287c:	4603      	mov	r3, r0
}
 800287e:	4618      	mov	r0, r3
 8002880:	3708      	adds	r7, #8
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
	...

08002888 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002888:	b480      	push	{r7}
 800288a:	b085      	sub	sp, #20
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002890:	2300      	movs	r3, #0
 8002892:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d101      	bne.n	800289e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e059      	b.n	8002952 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	461a      	mov	r2, r3
 80028a4:	4b2d      	ldr	r3, [pc, #180]	@ (800295c <HAL_DMA_Init+0xd4>)
 80028a6:	429a      	cmp	r2, r3
 80028a8:	d80f      	bhi.n	80028ca <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	461a      	mov	r2, r3
 80028b0:	4b2b      	ldr	r3, [pc, #172]	@ (8002960 <HAL_DMA_Init+0xd8>)
 80028b2:	4413      	add	r3, r2
 80028b4:	4a2b      	ldr	r2, [pc, #172]	@ (8002964 <HAL_DMA_Init+0xdc>)
 80028b6:	fba2 2303 	umull	r2, r3, r2, r3
 80028ba:	091b      	lsrs	r3, r3, #4
 80028bc:	009a      	lsls	r2, r3, #2
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4a28      	ldr	r2, [pc, #160]	@ (8002968 <HAL_DMA_Init+0xe0>)
 80028c6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80028c8:	e00e      	b.n	80028e8 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	461a      	mov	r2, r3
 80028d0:	4b26      	ldr	r3, [pc, #152]	@ (800296c <HAL_DMA_Init+0xe4>)
 80028d2:	4413      	add	r3, r2
 80028d4:	4a23      	ldr	r2, [pc, #140]	@ (8002964 <HAL_DMA_Init+0xdc>)
 80028d6:	fba2 2303 	umull	r2, r3, r2, r3
 80028da:	091b      	lsrs	r3, r3, #4
 80028dc:	009a      	lsls	r2, r3, #2
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4a22      	ldr	r2, [pc, #136]	@ (8002970 <HAL_DMA_Init+0xe8>)
 80028e6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2202      	movs	r2, #2
 80028ec:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80028fe:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002902:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800290c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002918:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	695b      	ldr	r3, [r3, #20]
 800291e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002924:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	69db      	ldr	r3, [r3, #28]
 800292a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800292c:	68fa      	ldr	r2, [r7, #12]
 800292e:	4313      	orrs	r3, r2
 8002930:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	68fa      	ldr	r2, [r7, #12]
 8002938:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2200      	movs	r2, #0
 800293e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2200      	movs	r2, #0
 800294c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002950:	2300      	movs	r3, #0
}
 8002952:	4618      	mov	r0, r3
 8002954:	3714      	adds	r7, #20
 8002956:	46bd      	mov	sp, r7
 8002958:	bc80      	pop	{r7}
 800295a:	4770      	bx	lr
 800295c:	40020407 	.word	0x40020407
 8002960:	bffdfff8 	.word	0xbffdfff8
 8002964:	cccccccd 	.word	0xcccccccd
 8002968:	40020000 	.word	0x40020000
 800296c:	bffdfbf8 	.word	0xbffdfbf8
 8002970:	40020400 	.word	0x40020400

08002974 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b086      	sub	sp, #24
 8002978:	af00      	add	r7, sp, #0
 800297a:	60f8      	str	r0, [r7, #12]
 800297c:	60b9      	str	r1, [r7, #8]
 800297e:	607a      	str	r2, [r7, #4]
 8002980:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002982:	2300      	movs	r3, #0
 8002984:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	f893 3020 	ldrb.w	r3, [r3, #32]
 800298c:	2b01      	cmp	r3, #1
 800298e:	d101      	bne.n	8002994 <HAL_DMA_Start_IT+0x20>
 8002990:	2302      	movs	r3, #2
 8002992:	e04b      	b.n	8002a2c <HAL_DMA_Start_IT+0xb8>
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2201      	movs	r2, #1
 8002998:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d13a      	bne.n	8002a1e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2202      	movs	r2, #2
 80029ac:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2200      	movs	r2, #0
 80029b4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f022 0201 	bic.w	r2, r2, #1
 80029c4:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	687a      	ldr	r2, [r7, #4]
 80029ca:	68b9      	ldr	r1, [r7, #8]
 80029cc:	68f8      	ldr	r0, [r7, #12]
 80029ce:	f000 fbb1 	bl	8003134 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d008      	beq.n	80029ec <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f042 020e 	orr.w	r2, r2, #14
 80029e8:	601a      	str	r2, [r3, #0]
 80029ea:	e00f      	b.n	8002a0c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f022 0204 	bic.w	r2, r2, #4
 80029fa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f042 020a 	orr.w	r2, r2, #10
 8002a0a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f042 0201 	orr.w	r2, r2, #1
 8002a1a:	601a      	str	r2, [r3, #0]
 8002a1c:	e005      	b.n	8002a2a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2200      	movs	r2, #0
 8002a22:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002a26:	2302      	movs	r3, #2
 8002a28:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002a2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3718      	adds	r7, #24
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}

08002a34 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b085      	sub	sp, #20
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	2b02      	cmp	r3, #2
 8002a4a:	d008      	beq.n	8002a5e <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2204      	movs	r2, #4
 8002a50:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2200      	movs	r2, #0
 8002a56:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e020      	b.n	8002aa0 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f022 020e 	bic.w	r2, r2, #14
 8002a6c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f022 0201 	bic.w	r2, r2, #1
 8002a7c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a86:	2101      	movs	r1, #1
 8002a88:	fa01 f202 	lsl.w	r2, r1, r2
 8002a8c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2201      	movs	r2, #1
 8002a92:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002a9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3714      	adds	r7, #20
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bc80      	pop	{r7}
 8002aa8:	4770      	bx	lr
	...

08002aac <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b084      	sub	sp, #16
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	2b02      	cmp	r3, #2
 8002ac2:	d005      	beq.n	8002ad0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2204      	movs	r2, #4
 8002ac8:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	73fb      	strb	r3, [r7, #15]
 8002ace:	e0d6      	b.n	8002c7e <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f022 020e 	bic.w	r2, r2, #14
 8002ade:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f022 0201 	bic.w	r2, r2, #1
 8002aee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	461a      	mov	r2, r3
 8002af6:	4b64      	ldr	r3, [pc, #400]	@ (8002c88 <HAL_DMA_Abort_IT+0x1dc>)
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d958      	bls.n	8002bae <HAL_DMA_Abort_IT+0x102>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a62      	ldr	r2, [pc, #392]	@ (8002c8c <HAL_DMA_Abort_IT+0x1e0>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d04f      	beq.n	8002ba6 <HAL_DMA_Abort_IT+0xfa>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a61      	ldr	r2, [pc, #388]	@ (8002c90 <HAL_DMA_Abort_IT+0x1e4>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d048      	beq.n	8002ba2 <HAL_DMA_Abort_IT+0xf6>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a5f      	ldr	r2, [pc, #380]	@ (8002c94 <HAL_DMA_Abort_IT+0x1e8>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d040      	beq.n	8002b9c <HAL_DMA_Abort_IT+0xf0>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a5e      	ldr	r2, [pc, #376]	@ (8002c98 <HAL_DMA_Abort_IT+0x1ec>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d038      	beq.n	8002b96 <HAL_DMA_Abort_IT+0xea>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a5c      	ldr	r2, [pc, #368]	@ (8002c9c <HAL_DMA_Abort_IT+0x1f0>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d030      	beq.n	8002b90 <HAL_DMA_Abort_IT+0xe4>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a5b      	ldr	r2, [pc, #364]	@ (8002ca0 <HAL_DMA_Abort_IT+0x1f4>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d028      	beq.n	8002b8a <HAL_DMA_Abort_IT+0xde>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a52      	ldr	r2, [pc, #328]	@ (8002c88 <HAL_DMA_Abort_IT+0x1dc>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d020      	beq.n	8002b84 <HAL_DMA_Abort_IT+0xd8>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a57      	ldr	r2, [pc, #348]	@ (8002ca4 <HAL_DMA_Abort_IT+0x1f8>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d019      	beq.n	8002b80 <HAL_DMA_Abort_IT+0xd4>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a55      	ldr	r2, [pc, #340]	@ (8002ca8 <HAL_DMA_Abort_IT+0x1fc>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d012      	beq.n	8002b7c <HAL_DMA_Abort_IT+0xd0>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a54      	ldr	r2, [pc, #336]	@ (8002cac <HAL_DMA_Abort_IT+0x200>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d00a      	beq.n	8002b76 <HAL_DMA_Abort_IT+0xca>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a52      	ldr	r2, [pc, #328]	@ (8002cb0 <HAL_DMA_Abort_IT+0x204>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d102      	bne.n	8002b70 <HAL_DMA_Abort_IT+0xc4>
 8002b6a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002b6e:	e01b      	b.n	8002ba8 <HAL_DMA_Abort_IT+0xfc>
 8002b70:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002b74:	e018      	b.n	8002ba8 <HAL_DMA_Abort_IT+0xfc>
 8002b76:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002b7a:	e015      	b.n	8002ba8 <HAL_DMA_Abort_IT+0xfc>
 8002b7c:	2310      	movs	r3, #16
 8002b7e:	e013      	b.n	8002ba8 <HAL_DMA_Abort_IT+0xfc>
 8002b80:	2301      	movs	r3, #1
 8002b82:	e011      	b.n	8002ba8 <HAL_DMA_Abort_IT+0xfc>
 8002b84:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002b88:	e00e      	b.n	8002ba8 <HAL_DMA_Abort_IT+0xfc>
 8002b8a:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002b8e:	e00b      	b.n	8002ba8 <HAL_DMA_Abort_IT+0xfc>
 8002b90:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002b94:	e008      	b.n	8002ba8 <HAL_DMA_Abort_IT+0xfc>
 8002b96:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002b9a:	e005      	b.n	8002ba8 <HAL_DMA_Abort_IT+0xfc>
 8002b9c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002ba0:	e002      	b.n	8002ba8 <HAL_DMA_Abort_IT+0xfc>
 8002ba2:	2310      	movs	r3, #16
 8002ba4:	e000      	b.n	8002ba8 <HAL_DMA_Abort_IT+0xfc>
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	4a42      	ldr	r2, [pc, #264]	@ (8002cb4 <HAL_DMA_Abort_IT+0x208>)
 8002baa:	6053      	str	r3, [r2, #4]
 8002bac:	e057      	b.n	8002c5e <HAL_DMA_Abort_IT+0x1b2>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a36      	ldr	r2, [pc, #216]	@ (8002c8c <HAL_DMA_Abort_IT+0x1e0>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d04f      	beq.n	8002c58 <HAL_DMA_Abort_IT+0x1ac>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a34      	ldr	r2, [pc, #208]	@ (8002c90 <HAL_DMA_Abort_IT+0x1e4>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d048      	beq.n	8002c54 <HAL_DMA_Abort_IT+0x1a8>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a33      	ldr	r2, [pc, #204]	@ (8002c94 <HAL_DMA_Abort_IT+0x1e8>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d040      	beq.n	8002c4e <HAL_DMA_Abort_IT+0x1a2>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a31      	ldr	r2, [pc, #196]	@ (8002c98 <HAL_DMA_Abort_IT+0x1ec>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d038      	beq.n	8002c48 <HAL_DMA_Abort_IT+0x19c>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a30      	ldr	r2, [pc, #192]	@ (8002c9c <HAL_DMA_Abort_IT+0x1f0>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d030      	beq.n	8002c42 <HAL_DMA_Abort_IT+0x196>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a2e      	ldr	r2, [pc, #184]	@ (8002ca0 <HAL_DMA_Abort_IT+0x1f4>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d028      	beq.n	8002c3c <HAL_DMA_Abort_IT+0x190>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a26      	ldr	r2, [pc, #152]	@ (8002c88 <HAL_DMA_Abort_IT+0x1dc>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d020      	beq.n	8002c36 <HAL_DMA_Abort_IT+0x18a>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a2a      	ldr	r2, [pc, #168]	@ (8002ca4 <HAL_DMA_Abort_IT+0x1f8>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d019      	beq.n	8002c32 <HAL_DMA_Abort_IT+0x186>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a29      	ldr	r2, [pc, #164]	@ (8002ca8 <HAL_DMA_Abort_IT+0x1fc>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d012      	beq.n	8002c2e <HAL_DMA_Abort_IT+0x182>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a27      	ldr	r2, [pc, #156]	@ (8002cac <HAL_DMA_Abort_IT+0x200>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d00a      	beq.n	8002c28 <HAL_DMA_Abort_IT+0x17c>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a26      	ldr	r2, [pc, #152]	@ (8002cb0 <HAL_DMA_Abort_IT+0x204>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d102      	bne.n	8002c22 <HAL_DMA_Abort_IT+0x176>
 8002c1c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002c20:	e01b      	b.n	8002c5a <HAL_DMA_Abort_IT+0x1ae>
 8002c22:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002c26:	e018      	b.n	8002c5a <HAL_DMA_Abort_IT+0x1ae>
 8002c28:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002c2c:	e015      	b.n	8002c5a <HAL_DMA_Abort_IT+0x1ae>
 8002c2e:	2310      	movs	r3, #16
 8002c30:	e013      	b.n	8002c5a <HAL_DMA_Abort_IT+0x1ae>
 8002c32:	2301      	movs	r3, #1
 8002c34:	e011      	b.n	8002c5a <HAL_DMA_Abort_IT+0x1ae>
 8002c36:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002c3a:	e00e      	b.n	8002c5a <HAL_DMA_Abort_IT+0x1ae>
 8002c3c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002c40:	e00b      	b.n	8002c5a <HAL_DMA_Abort_IT+0x1ae>
 8002c42:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002c46:	e008      	b.n	8002c5a <HAL_DMA_Abort_IT+0x1ae>
 8002c48:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002c4c:	e005      	b.n	8002c5a <HAL_DMA_Abort_IT+0x1ae>
 8002c4e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002c52:	e002      	b.n	8002c5a <HAL_DMA_Abort_IT+0x1ae>
 8002c54:	2310      	movs	r3, #16
 8002c56:	e000      	b.n	8002c5a <HAL_DMA_Abort_IT+0x1ae>
 8002c58:	2301      	movs	r3, #1
 8002c5a:	4a17      	ldr	r2, [pc, #92]	@ (8002cb8 <HAL_DMA_Abort_IT+0x20c>)
 8002c5c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2201      	movs	r2, #1
 8002c62:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d003      	beq.n	8002c7e <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	4798      	blx	r3
    } 
  }
  return status;
 8002c7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3710      	adds	r7, #16
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	40020080 	.word	0x40020080
 8002c8c:	40020008 	.word	0x40020008
 8002c90:	4002001c 	.word	0x4002001c
 8002c94:	40020030 	.word	0x40020030
 8002c98:	40020044 	.word	0x40020044
 8002c9c:	40020058 	.word	0x40020058
 8002ca0:	4002006c 	.word	0x4002006c
 8002ca4:	40020408 	.word	0x40020408
 8002ca8:	4002041c 	.word	0x4002041c
 8002cac:	40020430 	.word	0x40020430
 8002cb0:	40020444 	.word	0x40020444
 8002cb4:	40020400 	.word	0x40020400
 8002cb8:	40020000 	.word	0x40020000

08002cbc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b084      	sub	sp, #16
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cd8:	2204      	movs	r2, #4
 8002cda:	409a      	lsls	r2, r3
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	4013      	ands	r3, r2
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	f000 80f1 	beq.w	8002ec8 <HAL_DMA_IRQHandler+0x20c>
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	f003 0304 	and.w	r3, r3, #4
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	f000 80eb 	beq.w	8002ec8 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0320 	and.w	r3, r3, #32
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d107      	bne.n	8002d10 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f022 0204 	bic.w	r2, r2, #4
 8002d0e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	461a      	mov	r2, r3
 8002d16:	4b5f      	ldr	r3, [pc, #380]	@ (8002e94 <HAL_DMA_IRQHandler+0x1d8>)
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d958      	bls.n	8002dce <HAL_DMA_IRQHandler+0x112>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a5d      	ldr	r2, [pc, #372]	@ (8002e98 <HAL_DMA_IRQHandler+0x1dc>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d04f      	beq.n	8002dc6 <HAL_DMA_IRQHandler+0x10a>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a5c      	ldr	r2, [pc, #368]	@ (8002e9c <HAL_DMA_IRQHandler+0x1e0>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d048      	beq.n	8002dc2 <HAL_DMA_IRQHandler+0x106>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a5a      	ldr	r2, [pc, #360]	@ (8002ea0 <HAL_DMA_IRQHandler+0x1e4>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d040      	beq.n	8002dbc <HAL_DMA_IRQHandler+0x100>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a59      	ldr	r2, [pc, #356]	@ (8002ea4 <HAL_DMA_IRQHandler+0x1e8>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d038      	beq.n	8002db6 <HAL_DMA_IRQHandler+0xfa>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a57      	ldr	r2, [pc, #348]	@ (8002ea8 <HAL_DMA_IRQHandler+0x1ec>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d030      	beq.n	8002db0 <HAL_DMA_IRQHandler+0xf4>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a56      	ldr	r2, [pc, #344]	@ (8002eac <HAL_DMA_IRQHandler+0x1f0>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d028      	beq.n	8002daa <HAL_DMA_IRQHandler+0xee>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a4d      	ldr	r2, [pc, #308]	@ (8002e94 <HAL_DMA_IRQHandler+0x1d8>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d020      	beq.n	8002da4 <HAL_DMA_IRQHandler+0xe8>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a52      	ldr	r2, [pc, #328]	@ (8002eb0 <HAL_DMA_IRQHandler+0x1f4>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d019      	beq.n	8002da0 <HAL_DMA_IRQHandler+0xe4>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a50      	ldr	r2, [pc, #320]	@ (8002eb4 <HAL_DMA_IRQHandler+0x1f8>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d012      	beq.n	8002d9c <HAL_DMA_IRQHandler+0xe0>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a4f      	ldr	r2, [pc, #316]	@ (8002eb8 <HAL_DMA_IRQHandler+0x1fc>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d00a      	beq.n	8002d96 <HAL_DMA_IRQHandler+0xda>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a4d      	ldr	r2, [pc, #308]	@ (8002ebc <HAL_DMA_IRQHandler+0x200>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d102      	bne.n	8002d90 <HAL_DMA_IRQHandler+0xd4>
 8002d8a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002d8e:	e01b      	b.n	8002dc8 <HAL_DMA_IRQHandler+0x10c>
 8002d90:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002d94:	e018      	b.n	8002dc8 <HAL_DMA_IRQHandler+0x10c>
 8002d96:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002d9a:	e015      	b.n	8002dc8 <HAL_DMA_IRQHandler+0x10c>
 8002d9c:	2340      	movs	r3, #64	@ 0x40
 8002d9e:	e013      	b.n	8002dc8 <HAL_DMA_IRQHandler+0x10c>
 8002da0:	2304      	movs	r3, #4
 8002da2:	e011      	b.n	8002dc8 <HAL_DMA_IRQHandler+0x10c>
 8002da4:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002da8:	e00e      	b.n	8002dc8 <HAL_DMA_IRQHandler+0x10c>
 8002daa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002dae:	e00b      	b.n	8002dc8 <HAL_DMA_IRQHandler+0x10c>
 8002db0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002db4:	e008      	b.n	8002dc8 <HAL_DMA_IRQHandler+0x10c>
 8002db6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002dba:	e005      	b.n	8002dc8 <HAL_DMA_IRQHandler+0x10c>
 8002dbc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002dc0:	e002      	b.n	8002dc8 <HAL_DMA_IRQHandler+0x10c>
 8002dc2:	2340      	movs	r3, #64	@ 0x40
 8002dc4:	e000      	b.n	8002dc8 <HAL_DMA_IRQHandler+0x10c>
 8002dc6:	2304      	movs	r3, #4
 8002dc8:	4a3d      	ldr	r2, [pc, #244]	@ (8002ec0 <HAL_DMA_IRQHandler+0x204>)
 8002dca:	6053      	str	r3, [r2, #4]
 8002dcc:	e057      	b.n	8002e7e <HAL_DMA_IRQHandler+0x1c2>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a31      	ldr	r2, [pc, #196]	@ (8002e98 <HAL_DMA_IRQHandler+0x1dc>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d04f      	beq.n	8002e78 <HAL_DMA_IRQHandler+0x1bc>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a2f      	ldr	r2, [pc, #188]	@ (8002e9c <HAL_DMA_IRQHandler+0x1e0>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d048      	beq.n	8002e74 <HAL_DMA_IRQHandler+0x1b8>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a2e      	ldr	r2, [pc, #184]	@ (8002ea0 <HAL_DMA_IRQHandler+0x1e4>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d040      	beq.n	8002e6e <HAL_DMA_IRQHandler+0x1b2>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a2c      	ldr	r2, [pc, #176]	@ (8002ea4 <HAL_DMA_IRQHandler+0x1e8>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d038      	beq.n	8002e68 <HAL_DMA_IRQHandler+0x1ac>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a2b      	ldr	r2, [pc, #172]	@ (8002ea8 <HAL_DMA_IRQHandler+0x1ec>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d030      	beq.n	8002e62 <HAL_DMA_IRQHandler+0x1a6>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a29      	ldr	r2, [pc, #164]	@ (8002eac <HAL_DMA_IRQHandler+0x1f0>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d028      	beq.n	8002e5c <HAL_DMA_IRQHandler+0x1a0>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a21      	ldr	r2, [pc, #132]	@ (8002e94 <HAL_DMA_IRQHandler+0x1d8>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d020      	beq.n	8002e56 <HAL_DMA_IRQHandler+0x19a>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a25      	ldr	r2, [pc, #148]	@ (8002eb0 <HAL_DMA_IRQHandler+0x1f4>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d019      	beq.n	8002e52 <HAL_DMA_IRQHandler+0x196>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a24      	ldr	r2, [pc, #144]	@ (8002eb4 <HAL_DMA_IRQHandler+0x1f8>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d012      	beq.n	8002e4e <HAL_DMA_IRQHandler+0x192>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a22      	ldr	r2, [pc, #136]	@ (8002eb8 <HAL_DMA_IRQHandler+0x1fc>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d00a      	beq.n	8002e48 <HAL_DMA_IRQHandler+0x18c>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a21      	ldr	r2, [pc, #132]	@ (8002ebc <HAL_DMA_IRQHandler+0x200>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d102      	bne.n	8002e42 <HAL_DMA_IRQHandler+0x186>
 8002e3c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002e40:	e01b      	b.n	8002e7a <HAL_DMA_IRQHandler+0x1be>
 8002e42:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002e46:	e018      	b.n	8002e7a <HAL_DMA_IRQHandler+0x1be>
 8002e48:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002e4c:	e015      	b.n	8002e7a <HAL_DMA_IRQHandler+0x1be>
 8002e4e:	2340      	movs	r3, #64	@ 0x40
 8002e50:	e013      	b.n	8002e7a <HAL_DMA_IRQHandler+0x1be>
 8002e52:	2304      	movs	r3, #4
 8002e54:	e011      	b.n	8002e7a <HAL_DMA_IRQHandler+0x1be>
 8002e56:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002e5a:	e00e      	b.n	8002e7a <HAL_DMA_IRQHandler+0x1be>
 8002e5c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002e60:	e00b      	b.n	8002e7a <HAL_DMA_IRQHandler+0x1be>
 8002e62:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002e66:	e008      	b.n	8002e7a <HAL_DMA_IRQHandler+0x1be>
 8002e68:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002e6c:	e005      	b.n	8002e7a <HAL_DMA_IRQHandler+0x1be>
 8002e6e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002e72:	e002      	b.n	8002e7a <HAL_DMA_IRQHandler+0x1be>
 8002e74:	2340      	movs	r3, #64	@ 0x40
 8002e76:	e000      	b.n	8002e7a <HAL_DMA_IRQHandler+0x1be>
 8002e78:	2304      	movs	r3, #4
 8002e7a:	4a12      	ldr	r2, [pc, #72]	@ (8002ec4 <HAL_DMA_IRQHandler+0x208>)
 8002e7c:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	f000 8136 	beq.w	80030f4 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002e90:	e130      	b.n	80030f4 <HAL_DMA_IRQHandler+0x438>
 8002e92:	bf00      	nop
 8002e94:	40020080 	.word	0x40020080
 8002e98:	40020008 	.word	0x40020008
 8002e9c:	4002001c 	.word	0x4002001c
 8002ea0:	40020030 	.word	0x40020030
 8002ea4:	40020044 	.word	0x40020044
 8002ea8:	40020058 	.word	0x40020058
 8002eac:	4002006c 	.word	0x4002006c
 8002eb0:	40020408 	.word	0x40020408
 8002eb4:	4002041c 	.word	0x4002041c
 8002eb8:	40020430 	.word	0x40020430
 8002ebc:	40020444 	.word	0x40020444
 8002ec0:	40020400 	.word	0x40020400
 8002ec4:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ecc:	2202      	movs	r2, #2
 8002ece:	409a      	lsls	r2, r3
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	f000 80dd 	beq.w	8003094 <HAL_DMA_IRQHandler+0x3d8>
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	f003 0302 	and.w	r3, r3, #2
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	f000 80d7 	beq.w	8003094 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0320 	and.w	r3, r3, #32
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d10b      	bne.n	8002f0c <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f022 020a 	bic.w	r2, r2, #10
 8002f02:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2201      	movs	r2, #1
 8002f08:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	461a      	mov	r2, r3
 8002f12:	4b7b      	ldr	r3, [pc, #492]	@ (8003100 <HAL_DMA_IRQHandler+0x444>)
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d958      	bls.n	8002fca <HAL_DMA_IRQHandler+0x30e>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a79      	ldr	r2, [pc, #484]	@ (8003104 <HAL_DMA_IRQHandler+0x448>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d04f      	beq.n	8002fc2 <HAL_DMA_IRQHandler+0x306>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a78      	ldr	r2, [pc, #480]	@ (8003108 <HAL_DMA_IRQHandler+0x44c>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d048      	beq.n	8002fbe <HAL_DMA_IRQHandler+0x302>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a76      	ldr	r2, [pc, #472]	@ (800310c <HAL_DMA_IRQHandler+0x450>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d040      	beq.n	8002fb8 <HAL_DMA_IRQHandler+0x2fc>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a75      	ldr	r2, [pc, #468]	@ (8003110 <HAL_DMA_IRQHandler+0x454>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d038      	beq.n	8002fb2 <HAL_DMA_IRQHandler+0x2f6>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a73      	ldr	r2, [pc, #460]	@ (8003114 <HAL_DMA_IRQHandler+0x458>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d030      	beq.n	8002fac <HAL_DMA_IRQHandler+0x2f0>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a72      	ldr	r2, [pc, #456]	@ (8003118 <HAL_DMA_IRQHandler+0x45c>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d028      	beq.n	8002fa6 <HAL_DMA_IRQHandler+0x2ea>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a69      	ldr	r2, [pc, #420]	@ (8003100 <HAL_DMA_IRQHandler+0x444>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d020      	beq.n	8002fa0 <HAL_DMA_IRQHandler+0x2e4>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a6e      	ldr	r2, [pc, #440]	@ (800311c <HAL_DMA_IRQHandler+0x460>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d019      	beq.n	8002f9c <HAL_DMA_IRQHandler+0x2e0>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a6c      	ldr	r2, [pc, #432]	@ (8003120 <HAL_DMA_IRQHandler+0x464>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d012      	beq.n	8002f98 <HAL_DMA_IRQHandler+0x2dc>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a6b      	ldr	r2, [pc, #428]	@ (8003124 <HAL_DMA_IRQHandler+0x468>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d00a      	beq.n	8002f92 <HAL_DMA_IRQHandler+0x2d6>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a69      	ldr	r2, [pc, #420]	@ (8003128 <HAL_DMA_IRQHandler+0x46c>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d102      	bne.n	8002f8c <HAL_DMA_IRQHandler+0x2d0>
 8002f86:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002f8a:	e01b      	b.n	8002fc4 <HAL_DMA_IRQHandler+0x308>
 8002f8c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002f90:	e018      	b.n	8002fc4 <HAL_DMA_IRQHandler+0x308>
 8002f92:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002f96:	e015      	b.n	8002fc4 <HAL_DMA_IRQHandler+0x308>
 8002f98:	2320      	movs	r3, #32
 8002f9a:	e013      	b.n	8002fc4 <HAL_DMA_IRQHandler+0x308>
 8002f9c:	2302      	movs	r3, #2
 8002f9e:	e011      	b.n	8002fc4 <HAL_DMA_IRQHandler+0x308>
 8002fa0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002fa4:	e00e      	b.n	8002fc4 <HAL_DMA_IRQHandler+0x308>
 8002fa6:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002faa:	e00b      	b.n	8002fc4 <HAL_DMA_IRQHandler+0x308>
 8002fac:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002fb0:	e008      	b.n	8002fc4 <HAL_DMA_IRQHandler+0x308>
 8002fb2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002fb6:	e005      	b.n	8002fc4 <HAL_DMA_IRQHandler+0x308>
 8002fb8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002fbc:	e002      	b.n	8002fc4 <HAL_DMA_IRQHandler+0x308>
 8002fbe:	2320      	movs	r3, #32
 8002fc0:	e000      	b.n	8002fc4 <HAL_DMA_IRQHandler+0x308>
 8002fc2:	2302      	movs	r3, #2
 8002fc4:	4a59      	ldr	r2, [pc, #356]	@ (800312c <HAL_DMA_IRQHandler+0x470>)
 8002fc6:	6053      	str	r3, [r2, #4]
 8002fc8:	e057      	b.n	800307a <HAL_DMA_IRQHandler+0x3be>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a4d      	ldr	r2, [pc, #308]	@ (8003104 <HAL_DMA_IRQHandler+0x448>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d04f      	beq.n	8003074 <HAL_DMA_IRQHandler+0x3b8>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a4b      	ldr	r2, [pc, #300]	@ (8003108 <HAL_DMA_IRQHandler+0x44c>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d048      	beq.n	8003070 <HAL_DMA_IRQHandler+0x3b4>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a4a      	ldr	r2, [pc, #296]	@ (800310c <HAL_DMA_IRQHandler+0x450>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d040      	beq.n	800306a <HAL_DMA_IRQHandler+0x3ae>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a48      	ldr	r2, [pc, #288]	@ (8003110 <HAL_DMA_IRQHandler+0x454>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d038      	beq.n	8003064 <HAL_DMA_IRQHandler+0x3a8>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a47      	ldr	r2, [pc, #284]	@ (8003114 <HAL_DMA_IRQHandler+0x458>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d030      	beq.n	800305e <HAL_DMA_IRQHandler+0x3a2>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a45      	ldr	r2, [pc, #276]	@ (8003118 <HAL_DMA_IRQHandler+0x45c>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d028      	beq.n	8003058 <HAL_DMA_IRQHandler+0x39c>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a3d      	ldr	r2, [pc, #244]	@ (8003100 <HAL_DMA_IRQHandler+0x444>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d020      	beq.n	8003052 <HAL_DMA_IRQHandler+0x396>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a41      	ldr	r2, [pc, #260]	@ (800311c <HAL_DMA_IRQHandler+0x460>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d019      	beq.n	800304e <HAL_DMA_IRQHandler+0x392>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a40      	ldr	r2, [pc, #256]	@ (8003120 <HAL_DMA_IRQHandler+0x464>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d012      	beq.n	800304a <HAL_DMA_IRQHandler+0x38e>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a3e      	ldr	r2, [pc, #248]	@ (8003124 <HAL_DMA_IRQHandler+0x468>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d00a      	beq.n	8003044 <HAL_DMA_IRQHandler+0x388>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a3d      	ldr	r2, [pc, #244]	@ (8003128 <HAL_DMA_IRQHandler+0x46c>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d102      	bne.n	800303e <HAL_DMA_IRQHandler+0x382>
 8003038:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800303c:	e01b      	b.n	8003076 <HAL_DMA_IRQHandler+0x3ba>
 800303e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003042:	e018      	b.n	8003076 <HAL_DMA_IRQHandler+0x3ba>
 8003044:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003048:	e015      	b.n	8003076 <HAL_DMA_IRQHandler+0x3ba>
 800304a:	2320      	movs	r3, #32
 800304c:	e013      	b.n	8003076 <HAL_DMA_IRQHandler+0x3ba>
 800304e:	2302      	movs	r3, #2
 8003050:	e011      	b.n	8003076 <HAL_DMA_IRQHandler+0x3ba>
 8003052:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003056:	e00e      	b.n	8003076 <HAL_DMA_IRQHandler+0x3ba>
 8003058:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800305c:	e00b      	b.n	8003076 <HAL_DMA_IRQHandler+0x3ba>
 800305e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003062:	e008      	b.n	8003076 <HAL_DMA_IRQHandler+0x3ba>
 8003064:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003068:	e005      	b.n	8003076 <HAL_DMA_IRQHandler+0x3ba>
 800306a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800306e:	e002      	b.n	8003076 <HAL_DMA_IRQHandler+0x3ba>
 8003070:	2320      	movs	r3, #32
 8003072:	e000      	b.n	8003076 <HAL_DMA_IRQHandler+0x3ba>
 8003074:	2302      	movs	r3, #2
 8003076:	4a2e      	ldr	r2, [pc, #184]	@ (8003130 <HAL_DMA_IRQHandler+0x474>)
 8003078:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2200      	movs	r2, #0
 800307e:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003086:	2b00      	cmp	r3, #0
 8003088:	d034      	beq.n	80030f4 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003092:	e02f      	b.n	80030f4 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003098:	2208      	movs	r2, #8
 800309a:	409a      	lsls	r2, r3
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	4013      	ands	r3, r2
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d028      	beq.n	80030f6 <HAL_DMA_IRQHandler+0x43a>
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	f003 0308 	and.w	r3, r3, #8
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d023      	beq.n	80030f6 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f022 020e 	bic.w	r2, r2, #14
 80030bc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030c6:	2101      	movs	r1, #1
 80030c8:	fa01 f202 	lsl.w	r2, r1, r2
 80030cc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2201      	movs	r2, #1
 80030d2:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2201      	movs	r2, #1
 80030d8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2200      	movs	r2, #0
 80030e0:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d004      	beq.n	80030f6 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	4798      	blx	r3
    }
  }
  return;
 80030f4:	bf00      	nop
 80030f6:	bf00      	nop
}
 80030f8:	3710      	adds	r7, #16
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	40020080 	.word	0x40020080
 8003104:	40020008 	.word	0x40020008
 8003108:	4002001c 	.word	0x4002001c
 800310c:	40020030 	.word	0x40020030
 8003110:	40020044 	.word	0x40020044
 8003114:	40020058 	.word	0x40020058
 8003118:	4002006c 	.word	0x4002006c
 800311c:	40020408 	.word	0x40020408
 8003120:	4002041c 	.word	0x4002041c
 8003124:	40020430 	.word	0x40020430
 8003128:	40020444 	.word	0x40020444
 800312c:	40020400 	.word	0x40020400
 8003130:	40020000 	.word	0x40020000

08003134 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003134:	b480      	push	{r7}
 8003136:	b085      	sub	sp, #20
 8003138:	af00      	add	r7, sp, #0
 800313a:	60f8      	str	r0, [r7, #12]
 800313c:	60b9      	str	r1, [r7, #8]
 800313e:	607a      	str	r2, [r7, #4]
 8003140:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800314a:	2101      	movs	r1, #1
 800314c:	fa01 f202 	lsl.w	r2, r1, r2
 8003150:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	683a      	ldr	r2, [r7, #0]
 8003158:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	2b10      	cmp	r3, #16
 8003160:	d108      	bne.n	8003174 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	687a      	ldr	r2, [r7, #4]
 8003168:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	68ba      	ldr	r2, [r7, #8]
 8003170:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003172:	e007      	b.n	8003184 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	68ba      	ldr	r2, [r7, #8]
 800317a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	687a      	ldr	r2, [r7, #4]
 8003182:	60da      	str	r2, [r3, #12]
}
 8003184:	bf00      	nop
 8003186:	3714      	adds	r7, #20
 8003188:	46bd      	mov	sp, r7
 800318a:	bc80      	pop	{r7}
 800318c:	4770      	bx	lr
	...

08003190 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003190:	b480      	push	{r7}
 8003192:	b08b      	sub	sp, #44	@ 0x2c
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
 8003198:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800319a:	2300      	movs	r3, #0
 800319c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800319e:	2300      	movs	r3, #0
 80031a0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031a2:	e179      	b.n	8003498 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80031a4:	2201      	movs	r2, #1
 80031a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031a8:	fa02 f303 	lsl.w	r3, r2, r3
 80031ac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	69fa      	ldr	r2, [r7, #28]
 80031b4:	4013      	ands	r3, r2
 80031b6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80031b8:	69ba      	ldr	r2, [r7, #24]
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	429a      	cmp	r2, r3
 80031be:	f040 8168 	bne.w	8003492 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	4a96      	ldr	r2, [pc, #600]	@ (8003420 <HAL_GPIO_Init+0x290>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d05e      	beq.n	800328a <HAL_GPIO_Init+0xfa>
 80031cc:	4a94      	ldr	r2, [pc, #592]	@ (8003420 <HAL_GPIO_Init+0x290>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d875      	bhi.n	80032be <HAL_GPIO_Init+0x12e>
 80031d2:	4a94      	ldr	r2, [pc, #592]	@ (8003424 <HAL_GPIO_Init+0x294>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d058      	beq.n	800328a <HAL_GPIO_Init+0xfa>
 80031d8:	4a92      	ldr	r2, [pc, #584]	@ (8003424 <HAL_GPIO_Init+0x294>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d86f      	bhi.n	80032be <HAL_GPIO_Init+0x12e>
 80031de:	4a92      	ldr	r2, [pc, #584]	@ (8003428 <HAL_GPIO_Init+0x298>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d052      	beq.n	800328a <HAL_GPIO_Init+0xfa>
 80031e4:	4a90      	ldr	r2, [pc, #576]	@ (8003428 <HAL_GPIO_Init+0x298>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d869      	bhi.n	80032be <HAL_GPIO_Init+0x12e>
 80031ea:	4a90      	ldr	r2, [pc, #576]	@ (800342c <HAL_GPIO_Init+0x29c>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d04c      	beq.n	800328a <HAL_GPIO_Init+0xfa>
 80031f0:	4a8e      	ldr	r2, [pc, #568]	@ (800342c <HAL_GPIO_Init+0x29c>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d863      	bhi.n	80032be <HAL_GPIO_Init+0x12e>
 80031f6:	4a8e      	ldr	r2, [pc, #568]	@ (8003430 <HAL_GPIO_Init+0x2a0>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d046      	beq.n	800328a <HAL_GPIO_Init+0xfa>
 80031fc:	4a8c      	ldr	r2, [pc, #560]	@ (8003430 <HAL_GPIO_Init+0x2a0>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d85d      	bhi.n	80032be <HAL_GPIO_Init+0x12e>
 8003202:	2b12      	cmp	r3, #18
 8003204:	d82a      	bhi.n	800325c <HAL_GPIO_Init+0xcc>
 8003206:	2b12      	cmp	r3, #18
 8003208:	d859      	bhi.n	80032be <HAL_GPIO_Init+0x12e>
 800320a:	a201      	add	r2, pc, #4	@ (adr r2, 8003210 <HAL_GPIO_Init+0x80>)
 800320c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003210:	0800328b 	.word	0x0800328b
 8003214:	08003265 	.word	0x08003265
 8003218:	08003277 	.word	0x08003277
 800321c:	080032b9 	.word	0x080032b9
 8003220:	080032bf 	.word	0x080032bf
 8003224:	080032bf 	.word	0x080032bf
 8003228:	080032bf 	.word	0x080032bf
 800322c:	080032bf 	.word	0x080032bf
 8003230:	080032bf 	.word	0x080032bf
 8003234:	080032bf 	.word	0x080032bf
 8003238:	080032bf 	.word	0x080032bf
 800323c:	080032bf 	.word	0x080032bf
 8003240:	080032bf 	.word	0x080032bf
 8003244:	080032bf 	.word	0x080032bf
 8003248:	080032bf 	.word	0x080032bf
 800324c:	080032bf 	.word	0x080032bf
 8003250:	080032bf 	.word	0x080032bf
 8003254:	0800326d 	.word	0x0800326d
 8003258:	08003281 	.word	0x08003281
 800325c:	4a75      	ldr	r2, [pc, #468]	@ (8003434 <HAL_GPIO_Init+0x2a4>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d013      	beq.n	800328a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003262:	e02c      	b.n	80032be <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	623b      	str	r3, [r7, #32]
          break;
 800326a:	e029      	b.n	80032c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	3304      	adds	r3, #4
 8003272:	623b      	str	r3, [r7, #32]
          break;
 8003274:	e024      	b.n	80032c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	68db      	ldr	r3, [r3, #12]
 800327a:	3308      	adds	r3, #8
 800327c:	623b      	str	r3, [r7, #32]
          break;
 800327e:	e01f      	b.n	80032c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	330c      	adds	r3, #12
 8003286:	623b      	str	r3, [r7, #32]
          break;
 8003288:	e01a      	b.n	80032c0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d102      	bne.n	8003298 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003292:	2304      	movs	r3, #4
 8003294:	623b      	str	r3, [r7, #32]
          break;
 8003296:	e013      	b.n	80032c0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	2b01      	cmp	r3, #1
 800329e:	d105      	bne.n	80032ac <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80032a0:	2308      	movs	r3, #8
 80032a2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	69fa      	ldr	r2, [r7, #28]
 80032a8:	611a      	str	r2, [r3, #16]
          break;
 80032aa:	e009      	b.n	80032c0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80032ac:	2308      	movs	r3, #8
 80032ae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	69fa      	ldr	r2, [r7, #28]
 80032b4:	615a      	str	r2, [r3, #20]
          break;
 80032b6:	e003      	b.n	80032c0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80032b8:	2300      	movs	r3, #0
 80032ba:	623b      	str	r3, [r7, #32]
          break;
 80032bc:	e000      	b.n	80032c0 <HAL_GPIO_Init+0x130>
          break;
 80032be:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80032c0:	69bb      	ldr	r3, [r7, #24]
 80032c2:	2bff      	cmp	r3, #255	@ 0xff
 80032c4:	d801      	bhi.n	80032ca <HAL_GPIO_Init+0x13a>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	e001      	b.n	80032ce <HAL_GPIO_Init+0x13e>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	3304      	adds	r3, #4
 80032ce:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80032d0:	69bb      	ldr	r3, [r7, #24]
 80032d2:	2bff      	cmp	r3, #255	@ 0xff
 80032d4:	d802      	bhi.n	80032dc <HAL_GPIO_Init+0x14c>
 80032d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	e002      	b.n	80032e2 <HAL_GPIO_Init+0x152>
 80032dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032de:	3b08      	subs	r3, #8
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	210f      	movs	r1, #15
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	fa01 f303 	lsl.w	r3, r1, r3
 80032f0:	43db      	mvns	r3, r3
 80032f2:	401a      	ands	r2, r3
 80032f4:	6a39      	ldr	r1, [r7, #32]
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	fa01 f303 	lsl.w	r3, r1, r3
 80032fc:	431a      	orrs	r2, r3
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800330a:	2b00      	cmp	r3, #0
 800330c:	f000 80c1 	beq.w	8003492 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003310:	4b49      	ldr	r3, [pc, #292]	@ (8003438 <HAL_GPIO_Init+0x2a8>)
 8003312:	699b      	ldr	r3, [r3, #24]
 8003314:	4a48      	ldr	r2, [pc, #288]	@ (8003438 <HAL_GPIO_Init+0x2a8>)
 8003316:	f043 0301 	orr.w	r3, r3, #1
 800331a:	6193      	str	r3, [r2, #24]
 800331c:	4b46      	ldr	r3, [pc, #280]	@ (8003438 <HAL_GPIO_Init+0x2a8>)
 800331e:	699b      	ldr	r3, [r3, #24]
 8003320:	f003 0301 	and.w	r3, r3, #1
 8003324:	60bb      	str	r3, [r7, #8]
 8003326:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003328:	4a44      	ldr	r2, [pc, #272]	@ (800343c <HAL_GPIO_Init+0x2ac>)
 800332a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800332c:	089b      	lsrs	r3, r3, #2
 800332e:	3302      	adds	r3, #2
 8003330:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003334:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003338:	f003 0303 	and.w	r3, r3, #3
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	220f      	movs	r2, #15
 8003340:	fa02 f303 	lsl.w	r3, r2, r3
 8003344:	43db      	mvns	r3, r3
 8003346:	68fa      	ldr	r2, [r7, #12]
 8003348:	4013      	ands	r3, r2
 800334a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	4a3c      	ldr	r2, [pc, #240]	@ (8003440 <HAL_GPIO_Init+0x2b0>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d01f      	beq.n	8003394 <HAL_GPIO_Init+0x204>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	4a3b      	ldr	r2, [pc, #236]	@ (8003444 <HAL_GPIO_Init+0x2b4>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d019      	beq.n	8003390 <HAL_GPIO_Init+0x200>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	4a3a      	ldr	r2, [pc, #232]	@ (8003448 <HAL_GPIO_Init+0x2b8>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d013      	beq.n	800338c <HAL_GPIO_Init+0x1fc>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	4a39      	ldr	r2, [pc, #228]	@ (800344c <HAL_GPIO_Init+0x2bc>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d00d      	beq.n	8003388 <HAL_GPIO_Init+0x1f8>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	4a38      	ldr	r2, [pc, #224]	@ (8003450 <HAL_GPIO_Init+0x2c0>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d007      	beq.n	8003384 <HAL_GPIO_Init+0x1f4>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	4a37      	ldr	r2, [pc, #220]	@ (8003454 <HAL_GPIO_Init+0x2c4>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d101      	bne.n	8003380 <HAL_GPIO_Init+0x1f0>
 800337c:	2305      	movs	r3, #5
 800337e:	e00a      	b.n	8003396 <HAL_GPIO_Init+0x206>
 8003380:	2306      	movs	r3, #6
 8003382:	e008      	b.n	8003396 <HAL_GPIO_Init+0x206>
 8003384:	2304      	movs	r3, #4
 8003386:	e006      	b.n	8003396 <HAL_GPIO_Init+0x206>
 8003388:	2303      	movs	r3, #3
 800338a:	e004      	b.n	8003396 <HAL_GPIO_Init+0x206>
 800338c:	2302      	movs	r3, #2
 800338e:	e002      	b.n	8003396 <HAL_GPIO_Init+0x206>
 8003390:	2301      	movs	r3, #1
 8003392:	e000      	b.n	8003396 <HAL_GPIO_Init+0x206>
 8003394:	2300      	movs	r3, #0
 8003396:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003398:	f002 0203 	and.w	r2, r2, #3
 800339c:	0092      	lsls	r2, r2, #2
 800339e:	4093      	lsls	r3, r2
 80033a0:	68fa      	ldr	r2, [r7, #12]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80033a6:	4925      	ldr	r1, [pc, #148]	@ (800343c <HAL_GPIO_Init+0x2ac>)
 80033a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033aa:	089b      	lsrs	r3, r3, #2
 80033ac:	3302      	adds	r3, #2
 80033ae:	68fa      	ldr	r2, [r7, #12]
 80033b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d006      	beq.n	80033ce <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80033c0:	4b25      	ldr	r3, [pc, #148]	@ (8003458 <HAL_GPIO_Init+0x2c8>)
 80033c2:	689a      	ldr	r2, [r3, #8]
 80033c4:	4924      	ldr	r1, [pc, #144]	@ (8003458 <HAL_GPIO_Init+0x2c8>)
 80033c6:	69bb      	ldr	r3, [r7, #24]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	608b      	str	r3, [r1, #8]
 80033cc:	e006      	b.n	80033dc <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80033ce:	4b22      	ldr	r3, [pc, #136]	@ (8003458 <HAL_GPIO_Init+0x2c8>)
 80033d0:	689a      	ldr	r2, [r3, #8]
 80033d2:	69bb      	ldr	r3, [r7, #24]
 80033d4:	43db      	mvns	r3, r3
 80033d6:	4920      	ldr	r1, [pc, #128]	@ (8003458 <HAL_GPIO_Init+0x2c8>)
 80033d8:	4013      	ands	r3, r2
 80033da:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d006      	beq.n	80033f6 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80033e8:	4b1b      	ldr	r3, [pc, #108]	@ (8003458 <HAL_GPIO_Init+0x2c8>)
 80033ea:	68da      	ldr	r2, [r3, #12]
 80033ec:	491a      	ldr	r1, [pc, #104]	@ (8003458 <HAL_GPIO_Init+0x2c8>)
 80033ee:	69bb      	ldr	r3, [r7, #24]
 80033f0:	4313      	orrs	r3, r2
 80033f2:	60cb      	str	r3, [r1, #12]
 80033f4:	e006      	b.n	8003404 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80033f6:	4b18      	ldr	r3, [pc, #96]	@ (8003458 <HAL_GPIO_Init+0x2c8>)
 80033f8:	68da      	ldr	r2, [r3, #12]
 80033fa:	69bb      	ldr	r3, [r7, #24]
 80033fc:	43db      	mvns	r3, r3
 80033fe:	4916      	ldr	r1, [pc, #88]	@ (8003458 <HAL_GPIO_Init+0x2c8>)
 8003400:	4013      	ands	r3, r2
 8003402:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800340c:	2b00      	cmp	r3, #0
 800340e:	d025      	beq.n	800345c <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003410:	4b11      	ldr	r3, [pc, #68]	@ (8003458 <HAL_GPIO_Init+0x2c8>)
 8003412:	685a      	ldr	r2, [r3, #4]
 8003414:	4910      	ldr	r1, [pc, #64]	@ (8003458 <HAL_GPIO_Init+0x2c8>)
 8003416:	69bb      	ldr	r3, [r7, #24]
 8003418:	4313      	orrs	r3, r2
 800341a:	604b      	str	r3, [r1, #4]
 800341c:	e025      	b.n	800346a <HAL_GPIO_Init+0x2da>
 800341e:	bf00      	nop
 8003420:	10320000 	.word	0x10320000
 8003424:	10310000 	.word	0x10310000
 8003428:	10220000 	.word	0x10220000
 800342c:	10210000 	.word	0x10210000
 8003430:	10120000 	.word	0x10120000
 8003434:	10110000 	.word	0x10110000
 8003438:	40021000 	.word	0x40021000
 800343c:	40010000 	.word	0x40010000
 8003440:	40010800 	.word	0x40010800
 8003444:	40010c00 	.word	0x40010c00
 8003448:	40011000 	.word	0x40011000
 800344c:	40011400 	.word	0x40011400
 8003450:	40011800 	.word	0x40011800
 8003454:	40011c00 	.word	0x40011c00
 8003458:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800345c:	4b15      	ldr	r3, [pc, #84]	@ (80034b4 <HAL_GPIO_Init+0x324>)
 800345e:	685a      	ldr	r2, [r3, #4]
 8003460:	69bb      	ldr	r3, [r7, #24]
 8003462:	43db      	mvns	r3, r3
 8003464:	4913      	ldr	r1, [pc, #76]	@ (80034b4 <HAL_GPIO_Init+0x324>)
 8003466:	4013      	ands	r3, r2
 8003468:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d006      	beq.n	8003484 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003476:	4b0f      	ldr	r3, [pc, #60]	@ (80034b4 <HAL_GPIO_Init+0x324>)
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	490e      	ldr	r1, [pc, #56]	@ (80034b4 <HAL_GPIO_Init+0x324>)
 800347c:	69bb      	ldr	r3, [r7, #24]
 800347e:	4313      	orrs	r3, r2
 8003480:	600b      	str	r3, [r1, #0]
 8003482:	e006      	b.n	8003492 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003484:	4b0b      	ldr	r3, [pc, #44]	@ (80034b4 <HAL_GPIO_Init+0x324>)
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	69bb      	ldr	r3, [r7, #24]
 800348a:	43db      	mvns	r3, r3
 800348c:	4909      	ldr	r1, [pc, #36]	@ (80034b4 <HAL_GPIO_Init+0x324>)
 800348e:	4013      	ands	r3, r2
 8003490:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003494:	3301      	adds	r3, #1
 8003496:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800349e:	fa22 f303 	lsr.w	r3, r2, r3
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	f47f ae7e 	bne.w	80031a4 <HAL_GPIO_Init+0x14>
  }
}
 80034a8:	bf00      	nop
 80034aa:	bf00      	nop
 80034ac:	372c      	adds	r7, #44	@ 0x2c
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bc80      	pop	{r7}
 80034b2:	4770      	bx	lr
 80034b4:	40010400 	.word	0x40010400

080034b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b085      	sub	sp, #20
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	460b      	mov	r3, r1
 80034c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	689a      	ldr	r2, [r3, #8]
 80034c8:	887b      	ldrh	r3, [r7, #2]
 80034ca:	4013      	ands	r3, r2
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d002      	beq.n	80034d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80034d0:	2301      	movs	r3, #1
 80034d2:	73fb      	strb	r3, [r7, #15]
 80034d4:	e001      	b.n	80034da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80034d6:	2300      	movs	r3, #0
 80034d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80034da:	7bfb      	ldrb	r3, [r7, #15]
}
 80034dc:	4618      	mov	r0, r3
 80034de:	3714      	adds	r7, #20
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bc80      	pop	{r7}
 80034e4:	4770      	bx	lr

080034e6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034e6:	b480      	push	{r7}
 80034e8:	b083      	sub	sp, #12
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	6078      	str	r0, [r7, #4]
 80034ee:	460b      	mov	r3, r1
 80034f0:	807b      	strh	r3, [r7, #2]
 80034f2:	4613      	mov	r3, r2
 80034f4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80034f6:	787b      	ldrb	r3, [r7, #1]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d003      	beq.n	8003504 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80034fc:	887a      	ldrh	r2, [r7, #2]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003502:	e003      	b.n	800350c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003504:	887b      	ldrh	r3, [r7, #2]
 8003506:	041a      	lsls	r2, r3, #16
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	611a      	str	r2, [r3, #16]
}
 800350c:	bf00      	nop
 800350e:	370c      	adds	r7, #12
 8003510:	46bd      	mov	sp, r7
 8003512:	bc80      	pop	{r7}
 8003514:	4770      	bx	lr

08003516 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003516:	b480      	push	{r7}
 8003518:	b085      	sub	sp, #20
 800351a:	af00      	add	r7, sp, #0
 800351c:	6078      	str	r0, [r7, #4]
 800351e:	460b      	mov	r3, r1
 8003520:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	68db      	ldr	r3, [r3, #12]
 8003526:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003528:	887a      	ldrh	r2, [r7, #2]
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	4013      	ands	r3, r2
 800352e:	041a      	lsls	r2, r3, #16
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	43d9      	mvns	r1, r3
 8003534:	887b      	ldrh	r3, [r7, #2]
 8003536:	400b      	ands	r3, r1
 8003538:	431a      	orrs	r2, r3
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	611a      	str	r2, [r3, #16]
}
 800353e:	bf00      	nop
 8003540:	3714      	adds	r7, #20
 8003542:	46bd      	mov	sp, r7
 8003544:	bc80      	pop	{r7}
 8003546:	4770      	bx	lr

08003548 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b084      	sub	sp, #16
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d101      	bne.n	800355a <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e036      	b.n	80035c8 <HAL_IWDG_Init+0x80>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 8003562:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f245 5255 	movw	r2, #21845	@ 0x5555
 800356c:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	6852      	ldr	r2, [r2, #4]
 8003576:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	687a      	ldr	r2, [r7, #4]
 800357e:	6892      	ldr	r2, [r2, #8]
 8003580:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8003582:	f7ff f869 	bl	8002658 <HAL_GetTick>
 8003586:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003588:	e011      	b.n	80035ae <HAL_IWDG_Init+0x66>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800358a:	f7ff f865 	bl	8002658 <HAL_GetTick>
 800358e:	4602      	mov	r2, r0
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	1ad3      	subs	r3, r2, r3
 8003594:	f241 323c 	movw	r2, #4924	@ 0x133c
 8003598:	4293      	cmp	r3, r2
 800359a:	d908      	bls.n	80035ae <HAL_IWDG_Init+0x66>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	68db      	ldr	r3, [r3, #12]
 80035a2:	f003 0303 	and.w	r3, r3, #3
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d001      	beq.n	80035ae <HAL_IWDG_Init+0x66>
      {
        return HAL_TIMEOUT;
 80035aa:	2303      	movs	r3, #3
 80035ac:	e00c      	b.n	80035c8 <HAL_IWDG_Init+0x80>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	f003 0303 	and.w	r3, r3, #3
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d1e6      	bne.n	800358a <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 80035c4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80035c6:	2300      	movs	r3, #0
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3710      	adds	r7, #16
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}

080035d0 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b083      	sub	sp, #12
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 80035e0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80035e2:	2300      	movs	r3, #0
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	370c      	adds	r7, #12
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bc80      	pop	{r7}
 80035ec:	4770      	bx	lr
	...

080035f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b086      	sub	sp, #24
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d101      	bne.n	8003602 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e272      	b.n	8003ae8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 0301 	and.w	r3, r3, #1
 800360a:	2b00      	cmp	r3, #0
 800360c:	f000 8087 	beq.w	800371e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003610:	4b92      	ldr	r3, [pc, #584]	@ (800385c <HAL_RCC_OscConfig+0x26c>)
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	f003 030c 	and.w	r3, r3, #12
 8003618:	2b04      	cmp	r3, #4
 800361a:	d00c      	beq.n	8003636 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800361c:	4b8f      	ldr	r3, [pc, #572]	@ (800385c <HAL_RCC_OscConfig+0x26c>)
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	f003 030c 	and.w	r3, r3, #12
 8003624:	2b08      	cmp	r3, #8
 8003626:	d112      	bne.n	800364e <HAL_RCC_OscConfig+0x5e>
 8003628:	4b8c      	ldr	r3, [pc, #560]	@ (800385c <HAL_RCC_OscConfig+0x26c>)
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003630:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003634:	d10b      	bne.n	800364e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003636:	4b89      	ldr	r3, [pc, #548]	@ (800385c <HAL_RCC_OscConfig+0x26c>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d06c      	beq.n	800371c <HAL_RCC_OscConfig+0x12c>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d168      	bne.n	800371c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e24c      	b.n	8003ae8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003656:	d106      	bne.n	8003666 <HAL_RCC_OscConfig+0x76>
 8003658:	4b80      	ldr	r3, [pc, #512]	@ (800385c <HAL_RCC_OscConfig+0x26c>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a7f      	ldr	r2, [pc, #508]	@ (800385c <HAL_RCC_OscConfig+0x26c>)
 800365e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003662:	6013      	str	r3, [r2, #0]
 8003664:	e02e      	b.n	80036c4 <HAL_RCC_OscConfig+0xd4>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d10c      	bne.n	8003688 <HAL_RCC_OscConfig+0x98>
 800366e:	4b7b      	ldr	r3, [pc, #492]	@ (800385c <HAL_RCC_OscConfig+0x26c>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a7a      	ldr	r2, [pc, #488]	@ (800385c <HAL_RCC_OscConfig+0x26c>)
 8003674:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003678:	6013      	str	r3, [r2, #0]
 800367a:	4b78      	ldr	r3, [pc, #480]	@ (800385c <HAL_RCC_OscConfig+0x26c>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a77      	ldr	r2, [pc, #476]	@ (800385c <HAL_RCC_OscConfig+0x26c>)
 8003680:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003684:	6013      	str	r3, [r2, #0]
 8003686:	e01d      	b.n	80036c4 <HAL_RCC_OscConfig+0xd4>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003690:	d10c      	bne.n	80036ac <HAL_RCC_OscConfig+0xbc>
 8003692:	4b72      	ldr	r3, [pc, #456]	@ (800385c <HAL_RCC_OscConfig+0x26c>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a71      	ldr	r2, [pc, #452]	@ (800385c <HAL_RCC_OscConfig+0x26c>)
 8003698:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800369c:	6013      	str	r3, [r2, #0]
 800369e:	4b6f      	ldr	r3, [pc, #444]	@ (800385c <HAL_RCC_OscConfig+0x26c>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a6e      	ldr	r2, [pc, #440]	@ (800385c <HAL_RCC_OscConfig+0x26c>)
 80036a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036a8:	6013      	str	r3, [r2, #0]
 80036aa:	e00b      	b.n	80036c4 <HAL_RCC_OscConfig+0xd4>
 80036ac:	4b6b      	ldr	r3, [pc, #428]	@ (800385c <HAL_RCC_OscConfig+0x26c>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a6a      	ldr	r2, [pc, #424]	@ (800385c <HAL_RCC_OscConfig+0x26c>)
 80036b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036b6:	6013      	str	r3, [r2, #0]
 80036b8:	4b68      	ldr	r3, [pc, #416]	@ (800385c <HAL_RCC_OscConfig+0x26c>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a67      	ldr	r2, [pc, #412]	@ (800385c <HAL_RCC_OscConfig+0x26c>)
 80036be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80036c2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d013      	beq.n	80036f4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036cc:	f7fe ffc4 	bl	8002658 <HAL_GetTick>
 80036d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036d2:	e008      	b.n	80036e6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036d4:	f7fe ffc0 	bl	8002658 <HAL_GetTick>
 80036d8:	4602      	mov	r2, r0
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	2b64      	cmp	r3, #100	@ 0x64
 80036e0:	d901      	bls.n	80036e6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	e200      	b.n	8003ae8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036e6:	4b5d      	ldr	r3, [pc, #372]	@ (800385c <HAL_RCC_OscConfig+0x26c>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d0f0      	beq.n	80036d4 <HAL_RCC_OscConfig+0xe4>
 80036f2:	e014      	b.n	800371e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036f4:	f7fe ffb0 	bl	8002658 <HAL_GetTick>
 80036f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036fa:	e008      	b.n	800370e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036fc:	f7fe ffac 	bl	8002658 <HAL_GetTick>
 8003700:	4602      	mov	r2, r0
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	2b64      	cmp	r3, #100	@ 0x64
 8003708:	d901      	bls.n	800370e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800370a:	2303      	movs	r3, #3
 800370c:	e1ec      	b.n	8003ae8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800370e:	4b53      	ldr	r3, [pc, #332]	@ (800385c <HAL_RCC_OscConfig+0x26c>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003716:	2b00      	cmp	r3, #0
 8003718:	d1f0      	bne.n	80036fc <HAL_RCC_OscConfig+0x10c>
 800371a:	e000      	b.n	800371e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800371c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 0302 	and.w	r3, r3, #2
 8003726:	2b00      	cmp	r3, #0
 8003728:	d063      	beq.n	80037f2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800372a:	4b4c      	ldr	r3, [pc, #304]	@ (800385c <HAL_RCC_OscConfig+0x26c>)
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	f003 030c 	and.w	r3, r3, #12
 8003732:	2b00      	cmp	r3, #0
 8003734:	d00b      	beq.n	800374e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003736:	4b49      	ldr	r3, [pc, #292]	@ (800385c <HAL_RCC_OscConfig+0x26c>)
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	f003 030c 	and.w	r3, r3, #12
 800373e:	2b08      	cmp	r3, #8
 8003740:	d11c      	bne.n	800377c <HAL_RCC_OscConfig+0x18c>
 8003742:	4b46      	ldr	r3, [pc, #280]	@ (800385c <HAL_RCC_OscConfig+0x26c>)
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d116      	bne.n	800377c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800374e:	4b43      	ldr	r3, [pc, #268]	@ (800385c <HAL_RCC_OscConfig+0x26c>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0302 	and.w	r3, r3, #2
 8003756:	2b00      	cmp	r3, #0
 8003758:	d005      	beq.n	8003766 <HAL_RCC_OscConfig+0x176>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	691b      	ldr	r3, [r3, #16]
 800375e:	2b01      	cmp	r3, #1
 8003760:	d001      	beq.n	8003766 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e1c0      	b.n	8003ae8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003766:	4b3d      	ldr	r3, [pc, #244]	@ (800385c <HAL_RCC_OscConfig+0x26c>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	695b      	ldr	r3, [r3, #20]
 8003772:	00db      	lsls	r3, r3, #3
 8003774:	4939      	ldr	r1, [pc, #228]	@ (800385c <HAL_RCC_OscConfig+0x26c>)
 8003776:	4313      	orrs	r3, r2
 8003778:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800377a:	e03a      	b.n	80037f2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	691b      	ldr	r3, [r3, #16]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d020      	beq.n	80037c6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003784:	4b36      	ldr	r3, [pc, #216]	@ (8003860 <HAL_RCC_OscConfig+0x270>)
 8003786:	2201      	movs	r2, #1
 8003788:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800378a:	f7fe ff65 	bl	8002658 <HAL_GetTick>
 800378e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003790:	e008      	b.n	80037a4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003792:	f7fe ff61 	bl	8002658 <HAL_GetTick>
 8003796:	4602      	mov	r2, r0
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	1ad3      	subs	r3, r2, r3
 800379c:	2b02      	cmp	r3, #2
 800379e:	d901      	bls.n	80037a4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80037a0:	2303      	movs	r3, #3
 80037a2:	e1a1      	b.n	8003ae8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037a4:	4b2d      	ldr	r3, [pc, #180]	@ (800385c <HAL_RCC_OscConfig+0x26c>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 0302 	and.w	r3, r3, #2
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d0f0      	beq.n	8003792 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037b0:	4b2a      	ldr	r3, [pc, #168]	@ (800385c <HAL_RCC_OscConfig+0x26c>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	695b      	ldr	r3, [r3, #20]
 80037bc:	00db      	lsls	r3, r3, #3
 80037be:	4927      	ldr	r1, [pc, #156]	@ (800385c <HAL_RCC_OscConfig+0x26c>)
 80037c0:	4313      	orrs	r3, r2
 80037c2:	600b      	str	r3, [r1, #0]
 80037c4:	e015      	b.n	80037f2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037c6:	4b26      	ldr	r3, [pc, #152]	@ (8003860 <HAL_RCC_OscConfig+0x270>)
 80037c8:	2200      	movs	r2, #0
 80037ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037cc:	f7fe ff44 	bl	8002658 <HAL_GetTick>
 80037d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037d2:	e008      	b.n	80037e6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037d4:	f7fe ff40 	bl	8002658 <HAL_GetTick>
 80037d8:	4602      	mov	r2, r0
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	2b02      	cmp	r3, #2
 80037e0:	d901      	bls.n	80037e6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80037e2:	2303      	movs	r3, #3
 80037e4:	e180      	b.n	8003ae8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037e6:	4b1d      	ldr	r3, [pc, #116]	@ (800385c <HAL_RCC_OscConfig+0x26c>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 0302 	and.w	r3, r3, #2
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d1f0      	bne.n	80037d4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 0308 	and.w	r3, r3, #8
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d03a      	beq.n	8003874 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	699b      	ldr	r3, [r3, #24]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d019      	beq.n	800383a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003806:	4b17      	ldr	r3, [pc, #92]	@ (8003864 <HAL_RCC_OscConfig+0x274>)
 8003808:	2201      	movs	r2, #1
 800380a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800380c:	f7fe ff24 	bl	8002658 <HAL_GetTick>
 8003810:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003812:	e008      	b.n	8003826 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003814:	f7fe ff20 	bl	8002658 <HAL_GetTick>
 8003818:	4602      	mov	r2, r0
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	2b02      	cmp	r3, #2
 8003820:	d901      	bls.n	8003826 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	e160      	b.n	8003ae8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003826:	4b0d      	ldr	r3, [pc, #52]	@ (800385c <HAL_RCC_OscConfig+0x26c>)
 8003828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800382a:	f003 0302 	and.w	r3, r3, #2
 800382e:	2b00      	cmp	r3, #0
 8003830:	d0f0      	beq.n	8003814 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003832:	2001      	movs	r0, #1
 8003834:	f000 face 	bl	8003dd4 <RCC_Delay>
 8003838:	e01c      	b.n	8003874 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800383a:	4b0a      	ldr	r3, [pc, #40]	@ (8003864 <HAL_RCC_OscConfig+0x274>)
 800383c:	2200      	movs	r2, #0
 800383e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003840:	f7fe ff0a 	bl	8002658 <HAL_GetTick>
 8003844:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003846:	e00f      	b.n	8003868 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003848:	f7fe ff06 	bl	8002658 <HAL_GetTick>
 800384c:	4602      	mov	r2, r0
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	2b02      	cmp	r3, #2
 8003854:	d908      	bls.n	8003868 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	e146      	b.n	8003ae8 <HAL_RCC_OscConfig+0x4f8>
 800385a:	bf00      	nop
 800385c:	40021000 	.word	0x40021000
 8003860:	42420000 	.word	0x42420000
 8003864:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003868:	4b92      	ldr	r3, [pc, #584]	@ (8003ab4 <HAL_RCC_OscConfig+0x4c4>)
 800386a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800386c:	f003 0302 	and.w	r3, r3, #2
 8003870:	2b00      	cmp	r3, #0
 8003872:	d1e9      	bne.n	8003848 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 0304 	and.w	r3, r3, #4
 800387c:	2b00      	cmp	r3, #0
 800387e:	f000 80a6 	beq.w	80039ce <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003882:	2300      	movs	r3, #0
 8003884:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003886:	4b8b      	ldr	r3, [pc, #556]	@ (8003ab4 <HAL_RCC_OscConfig+0x4c4>)
 8003888:	69db      	ldr	r3, [r3, #28]
 800388a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800388e:	2b00      	cmp	r3, #0
 8003890:	d10d      	bne.n	80038ae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003892:	4b88      	ldr	r3, [pc, #544]	@ (8003ab4 <HAL_RCC_OscConfig+0x4c4>)
 8003894:	69db      	ldr	r3, [r3, #28]
 8003896:	4a87      	ldr	r2, [pc, #540]	@ (8003ab4 <HAL_RCC_OscConfig+0x4c4>)
 8003898:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800389c:	61d3      	str	r3, [r2, #28]
 800389e:	4b85      	ldr	r3, [pc, #532]	@ (8003ab4 <HAL_RCC_OscConfig+0x4c4>)
 80038a0:	69db      	ldr	r3, [r3, #28]
 80038a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038a6:	60bb      	str	r3, [r7, #8]
 80038a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038aa:	2301      	movs	r3, #1
 80038ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038ae:	4b82      	ldr	r3, [pc, #520]	@ (8003ab8 <HAL_RCC_OscConfig+0x4c8>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d118      	bne.n	80038ec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038ba:	4b7f      	ldr	r3, [pc, #508]	@ (8003ab8 <HAL_RCC_OscConfig+0x4c8>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a7e      	ldr	r2, [pc, #504]	@ (8003ab8 <HAL_RCC_OscConfig+0x4c8>)
 80038c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038c6:	f7fe fec7 	bl	8002658 <HAL_GetTick>
 80038ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038cc:	e008      	b.n	80038e0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038ce:	f7fe fec3 	bl	8002658 <HAL_GetTick>
 80038d2:	4602      	mov	r2, r0
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	1ad3      	subs	r3, r2, r3
 80038d8:	2b64      	cmp	r3, #100	@ 0x64
 80038da:	d901      	bls.n	80038e0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80038dc:	2303      	movs	r3, #3
 80038de:	e103      	b.n	8003ae8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038e0:	4b75      	ldr	r3, [pc, #468]	@ (8003ab8 <HAL_RCC_OscConfig+0x4c8>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d0f0      	beq.n	80038ce <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d106      	bne.n	8003902 <HAL_RCC_OscConfig+0x312>
 80038f4:	4b6f      	ldr	r3, [pc, #444]	@ (8003ab4 <HAL_RCC_OscConfig+0x4c4>)
 80038f6:	6a1b      	ldr	r3, [r3, #32]
 80038f8:	4a6e      	ldr	r2, [pc, #440]	@ (8003ab4 <HAL_RCC_OscConfig+0x4c4>)
 80038fa:	f043 0301 	orr.w	r3, r3, #1
 80038fe:	6213      	str	r3, [r2, #32]
 8003900:	e02d      	b.n	800395e <HAL_RCC_OscConfig+0x36e>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	68db      	ldr	r3, [r3, #12]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d10c      	bne.n	8003924 <HAL_RCC_OscConfig+0x334>
 800390a:	4b6a      	ldr	r3, [pc, #424]	@ (8003ab4 <HAL_RCC_OscConfig+0x4c4>)
 800390c:	6a1b      	ldr	r3, [r3, #32]
 800390e:	4a69      	ldr	r2, [pc, #420]	@ (8003ab4 <HAL_RCC_OscConfig+0x4c4>)
 8003910:	f023 0301 	bic.w	r3, r3, #1
 8003914:	6213      	str	r3, [r2, #32]
 8003916:	4b67      	ldr	r3, [pc, #412]	@ (8003ab4 <HAL_RCC_OscConfig+0x4c4>)
 8003918:	6a1b      	ldr	r3, [r3, #32]
 800391a:	4a66      	ldr	r2, [pc, #408]	@ (8003ab4 <HAL_RCC_OscConfig+0x4c4>)
 800391c:	f023 0304 	bic.w	r3, r3, #4
 8003920:	6213      	str	r3, [r2, #32]
 8003922:	e01c      	b.n	800395e <HAL_RCC_OscConfig+0x36e>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	68db      	ldr	r3, [r3, #12]
 8003928:	2b05      	cmp	r3, #5
 800392a:	d10c      	bne.n	8003946 <HAL_RCC_OscConfig+0x356>
 800392c:	4b61      	ldr	r3, [pc, #388]	@ (8003ab4 <HAL_RCC_OscConfig+0x4c4>)
 800392e:	6a1b      	ldr	r3, [r3, #32]
 8003930:	4a60      	ldr	r2, [pc, #384]	@ (8003ab4 <HAL_RCC_OscConfig+0x4c4>)
 8003932:	f043 0304 	orr.w	r3, r3, #4
 8003936:	6213      	str	r3, [r2, #32]
 8003938:	4b5e      	ldr	r3, [pc, #376]	@ (8003ab4 <HAL_RCC_OscConfig+0x4c4>)
 800393a:	6a1b      	ldr	r3, [r3, #32]
 800393c:	4a5d      	ldr	r2, [pc, #372]	@ (8003ab4 <HAL_RCC_OscConfig+0x4c4>)
 800393e:	f043 0301 	orr.w	r3, r3, #1
 8003942:	6213      	str	r3, [r2, #32]
 8003944:	e00b      	b.n	800395e <HAL_RCC_OscConfig+0x36e>
 8003946:	4b5b      	ldr	r3, [pc, #364]	@ (8003ab4 <HAL_RCC_OscConfig+0x4c4>)
 8003948:	6a1b      	ldr	r3, [r3, #32]
 800394a:	4a5a      	ldr	r2, [pc, #360]	@ (8003ab4 <HAL_RCC_OscConfig+0x4c4>)
 800394c:	f023 0301 	bic.w	r3, r3, #1
 8003950:	6213      	str	r3, [r2, #32]
 8003952:	4b58      	ldr	r3, [pc, #352]	@ (8003ab4 <HAL_RCC_OscConfig+0x4c4>)
 8003954:	6a1b      	ldr	r3, [r3, #32]
 8003956:	4a57      	ldr	r2, [pc, #348]	@ (8003ab4 <HAL_RCC_OscConfig+0x4c4>)
 8003958:	f023 0304 	bic.w	r3, r3, #4
 800395c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	68db      	ldr	r3, [r3, #12]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d015      	beq.n	8003992 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003966:	f7fe fe77 	bl	8002658 <HAL_GetTick>
 800396a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800396c:	e00a      	b.n	8003984 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800396e:	f7fe fe73 	bl	8002658 <HAL_GetTick>
 8003972:	4602      	mov	r2, r0
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	1ad3      	subs	r3, r2, r3
 8003978:	f241 3288 	movw	r2, #5000	@ 0x1388
 800397c:	4293      	cmp	r3, r2
 800397e:	d901      	bls.n	8003984 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003980:	2303      	movs	r3, #3
 8003982:	e0b1      	b.n	8003ae8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003984:	4b4b      	ldr	r3, [pc, #300]	@ (8003ab4 <HAL_RCC_OscConfig+0x4c4>)
 8003986:	6a1b      	ldr	r3, [r3, #32]
 8003988:	f003 0302 	and.w	r3, r3, #2
 800398c:	2b00      	cmp	r3, #0
 800398e:	d0ee      	beq.n	800396e <HAL_RCC_OscConfig+0x37e>
 8003990:	e014      	b.n	80039bc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003992:	f7fe fe61 	bl	8002658 <HAL_GetTick>
 8003996:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003998:	e00a      	b.n	80039b0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800399a:	f7fe fe5d 	bl	8002658 <HAL_GetTick>
 800399e:	4602      	mov	r2, r0
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	1ad3      	subs	r3, r2, r3
 80039a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d901      	bls.n	80039b0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80039ac:	2303      	movs	r3, #3
 80039ae:	e09b      	b.n	8003ae8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039b0:	4b40      	ldr	r3, [pc, #256]	@ (8003ab4 <HAL_RCC_OscConfig+0x4c4>)
 80039b2:	6a1b      	ldr	r3, [r3, #32]
 80039b4:	f003 0302 	and.w	r3, r3, #2
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d1ee      	bne.n	800399a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80039bc:	7dfb      	ldrb	r3, [r7, #23]
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d105      	bne.n	80039ce <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039c2:	4b3c      	ldr	r3, [pc, #240]	@ (8003ab4 <HAL_RCC_OscConfig+0x4c4>)
 80039c4:	69db      	ldr	r3, [r3, #28]
 80039c6:	4a3b      	ldr	r2, [pc, #236]	@ (8003ab4 <HAL_RCC_OscConfig+0x4c4>)
 80039c8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80039cc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	69db      	ldr	r3, [r3, #28]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	f000 8087 	beq.w	8003ae6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80039d8:	4b36      	ldr	r3, [pc, #216]	@ (8003ab4 <HAL_RCC_OscConfig+0x4c4>)
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	f003 030c 	and.w	r3, r3, #12
 80039e0:	2b08      	cmp	r3, #8
 80039e2:	d061      	beq.n	8003aa8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	69db      	ldr	r3, [r3, #28]
 80039e8:	2b02      	cmp	r3, #2
 80039ea:	d146      	bne.n	8003a7a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039ec:	4b33      	ldr	r3, [pc, #204]	@ (8003abc <HAL_RCC_OscConfig+0x4cc>)
 80039ee:	2200      	movs	r2, #0
 80039f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039f2:	f7fe fe31 	bl	8002658 <HAL_GetTick>
 80039f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039f8:	e008      	b.n	8003a0c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039fa:	f7fe fe2d 	bl	8002658 <HAL_GetTick>
 80039fe:	4602      	mov	r2, r0
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	1ad3      	subs	r3, r2, r3
 8003a04:	2b02      	cmp	r3, #2
 8003a06:	d901      	bls.n	8003a0c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003a08:	2303      	movs	r3, #3
 8003a0a:	e06d      	b.n	8003ae8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a0c:	4b29      	ldr	r3, [pc, #164]	@ (8003ab4 <HAL_RCC_OscConfig+0x4c4>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d1f0      	bne.n	80039fa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6a1b      	ldr	r3, [r3, #32]
 8003a1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a20:	d108      	bne.n	8003a34 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003a22:	4b24      	ldr	r3, [pc, #144]	@ (8003ab4 <HAL_RCC_OscConfig+0x4c4>)
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	4921      	ldr	r1, [pc, #132]	@ (8003ab4 <HAL_RCC_OscConfig+0x4c4>)
 8003a30:	4313      	orrs	r3, r2
 8003a32:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a34:	4b1f      	ldr	r3, [pc, #124]	@ (8003ab4 <HAL_RCC_OscConfig+0x4c4>)
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6a19      	ldr	r1, [r3, #32]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a44:	430b      	orrs	r3, r1
 8003a46:	491b      	ldr	r1, [pc, #108]	@ (8003ab4 <HAL_RCC_OscConfig+0x4c4>)
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a4c:	4b1b      	ldr	r3, [pc, #108]	@ (8003abc <HAL_RCC_OscConfig+0x4cc>)
 8003a4e:	2201      	movs	r2, #1
 8003a50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a52:	f7fe fe01 	bl	8002658 <HAL_GetTick>
 8003a56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a58:	e008      	b.n	8003a6c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a5a:	f7fe fdfd 	bl	8002658 <HAL_GetTick>
 8003a5e:	4602      	mov	r2, r0
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	1ad3      	subs	r3, r2, r3
 8003a64:	2b02      	cmp	r3, #2
 8003a66:	d901      	bls.n	8003a6c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003a68:	2303      	movs	r3, #3
 8003a6a:	e03d      	b.n	8003ae8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a6c:	4b11      	ldr	r3, [pc, #68]	@ (8003ab4 <HAL_RCC_OscConfig+0x4c4>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d0f0      	beq.n	8003a5a <HAL_RCC_OscConfig+0x46a>
 8003a78:	e035      	b.n	8003ae6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a7a:	4b10      	ldr	r3, [pc, #64]	@ (8003abc <HAL_RCC_OscConfig+0x4cc>)
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a80:	f7fe fdea 	bl	8002658 <HAL_GetTick>
 8003a84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a86:	e008      	b.n	8003a9a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a88:	f7fe fde6 	bl	8002658 <HAL_GetTick>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	2b02      	cmp	r3, #2
 8003a94:	d901      	bls.n	8003a9a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	e026      	b.n	8003ae8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a9a:	4b06      	ldr	r3, [pc, #24]	@ (8003ab4 <HAL_RCC_OscConfig+0x4c4>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d1f0      	bne.n	8003a88 <HAL_RCC_OscConfig+0x498>
 8003aa6:	e01e      	b.n	8003ae6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	69db      	ldr	r3, [r3, #28]
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d107      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e019      	b.n	8003ae8 <HAL_RCC_OscConfig+0x4f8>
 8003ab4:	40021000 	.word	0x40021000
 8003ab8:	40007000 	.word	0x40007000
 8003abc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003ac0:	4b0b      	ldr	r3, [pc, #44]	@ (8003af0 <HAL_RCC_OscConfig+0x500>)
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6a1b      	ldr	r3, [r3, #32]
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d106      	bne.n	8003ae2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d001      	beq.n	8003ae6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e000      	b.n	8003ae8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003ae6:	2300      	movs	r3, #0
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	3718      	adds	r7, #24
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}
 8003af0:	40021000 	.word	0x40021000

08003af4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b084      	sub	sp, #16
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
 8003afc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d101      	bne.n	8003b08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	e0d0      	b.n	8003caa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b08:	4b6a      	ldr	r3, [pc, #424]	@ (8003cb4 <HAL_RCC_ClockConfig+0x1c0>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 0307 	and.w	r3, r3, #7
 8003b10:	683a      	ldr	r2, [r7, #0]
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d910      	bls.n	8003b38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b16:	4b67      	ldr	r3, [pc, #412]	@ (8003cb4 <HAL_RCC_ClockConfig+0x1c0>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f023 0207 	bic.w	r2, r3, #7
 8003b1e:	4965      	ldr	r1, [pc, #404]	@ (8003cb4 <HAL_RCC_ClockConfig+0x1c0>)
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	4313      	orrs	r3, r2
 8003b24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b26:	4b63      	ldr	r3, [pc, #396]	@ (8003cb4 <HAL_RCC_ClockConfig+0x1c0>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0307 	and.w	r3, r3, #7
 8003b2e:	683a      	ldr	r2, [r7, #0]
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d001      	beq.n	8003b38 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	e0b8      	b.n	8003caa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f003 0302 	and.w	r3, r3, #2
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d020      	beq.n	8003b86 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 0304 	and.w	r3, r3, #4
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d005      	beq.n	8003b5c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b50:	4b59      	ldr	r3, [pc, #356]	@ (8003cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	4a58      	ldr	r2, [pc, #352]	@ (8003cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b56:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003b5a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 0308 	and.w	r3, r3, #8
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d005      	beq.n	8003b74 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b68:	4b53      	ldr	r3, [pc, #332]	@ (8003cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	4a52      	ldr	r2, [pc, #328]	@ (8003cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b6e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003b72:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b74:	4b50      	ldr	r3, [pc, #320]	@ (8003cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	494d      	ldr	r1, [pc, #308]	@ (8003cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b82:	4313      	orrs	r3, r2
 8003b84:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 0301 	and.w	r3, r3, #1
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d040      	beq.n	8003c14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d107      	bne.n	8003baa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b9a:	4b47      	ldr	r3, [pc, #284]	@ (8003cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d115      	bne.n	8003bd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e07f      	b.n	8003caa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	2b02      	cmp	r3, #2
 8003bb0:	d107      	bne.n	8003bc2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bb2:	4b41      	ldr	r3, [pc, #260]	@ (8003cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d109      	bne.n	8003bd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e073      	b.n	8003caa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bc2:	4b3d      	ldr	r3, [pc, #244]	@ (8003cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 0302 	and.w	r3, r3, #2
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d101      	bne.n	8003bd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e06b      	b.n	8003caa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003bd2:	4b39      	ldr	r3, [pc, #228]	@ (8003cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	f023 0203 	bic.w	r2, r3, #3
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	4936      	ldr	r1, [pc, #216]	@ (8003cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8003be0:	4313      	orrs	r3, r2
 8003be2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003be4:	f7fe fd38 	bl	8002658 <HAL_GetTick>
 8003be8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bea:	e00a      	b.n	8003c02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bec:	f7fe fd34 	bl	8002658 <HAL_GetTick>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d901      	bls.n	8003c02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	e053      	b.n	8003caa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c02:	4b2d      	ldr	r3, [pc, #180]	@ (8003cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	f003 020c 	and.w	r2, r3, #12
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d1eb      	bne.n	8003bec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c14:	4b27      	ldr	r3, [pc, #156]	@ (8003cb4 <HAL_RCC_ClockConfig+0x1c0>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 0307 	and.w	r3, r3, #7
 8003c1c:	683a      	ldr	r2, [r7, #0]
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	d210      	bcs.n	8003c44 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c22:	4b24      	ldr	r3, [pc, #144]	@ (8003cb4 <HAL_RCC_ClockConfig+0x1c0>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f023 0207 	bic.w	r2, r3, #7
 8003c2a:	4922      	ldr	r1, [pc, #136]	@ (8003cb4 <HAL_RCC_ClockConfig+0x1c0>)
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c32:	4b20      	ldr	r3, [pc, #128]	@ (8003cb4 <HAL_RCC_ClockConfig+0x1c0>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 0307 	and.w	r3, r3, #7
 8003c3a:	683a      	ldr	r2, [r7, #0]
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d001      	beq.n	8003c44 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	e032      	b.n	8003caa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f003 0304 	and.w	r3, r3, #4
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d008      	beq.n	8003c62 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c50:	4b19      	ldr	r3, [pc, #100]	@ (8003cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	4916      	ldr	r1, [pc, #88]	@ (8003cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 0308 	and.w	r3, r3, #8
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d009      	beq.n	8003c82 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003c6e:	4b12      	ldr	r3, [pc, #72]	@ (8003cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	691b      	ldr	r3, [r3, #16]
 8003c7a:	00db      	lsls	r3, r3, #3
 8003c7c:	490e      	ldr	r1, [pc, #56]	@ (8003cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003c82:	f000 f821 	bl	8003cc8 <HAL_RCC_GetSysClockFreq>
 8003c86:	4602      	mov	r2, r0
 8003c88:	4b0b      	ldr	r3, [pc, #44]	@ (8003cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	091b      	lsrs	r3, r3, #4
 8003c8e:	f003 030f 	and.w	r3, r3, #15
 8003c92:	490a      	ldr	r1, [pc, #40]	@ (8003cbc <HAL_RCC_ClockConfig+0x1c8>)
 8003c94:	5ccb      	ldrb	r3, [r1, r3]
 8003c96:	fa22 f303 	lsr.w	r3, r2, r3
 8003c9a:	4a09      	ldr	r2, [pc, #36]	@ (8003cc0 <HAL_RCC_ClockConfig+0x1cc>)
 8003c9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003c9e:	4b09      	ldr	r3, [pc, #36]	@ (8003cc4 <HAL_RCC_ClockConfig+0x1d0>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f7fe fc96 	bl	80025d4 <HAL_InitTick>

  return HAL_OK;
 8003ca8:	2300      	movs	r3, #0
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3710      	adds	r7, #16
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	40022000 	.word	0x40022000
 8003cb8:	40021000 	.word	0x40021000
 8003cbc:	08005d14 	.word	0x08005d14
 8003cc0:	20000000 	.word	0x20000000
 8003cc4:	20000008 	.word	0x20000008

08003cc8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b087      	sub	sp, #28
 8003ccc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	60fb      	str	r3, [r7, #12]
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	60bb      	str	r3, [r7, #8]
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	617b      	str	r3, [r7, #20]
 8003cda:	2300      	movs	r3, #0
 8003cdc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003ce2:	4b1e      	ldr	r3, [pc, #120]	@ (8003d5c <HAL_RCC_GetSysClockFreq+0x94>)
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f003 030c 	and.w	r3, r3, #12
 8003cee:	2b04      	cmp	r3, #4
 8003cf0:	d002      	beq.n	8003cf8 <HAL_RCC_GetSysClockFreq+0x30>
 8003cf2:	2b08      	cmp	r3, #8
 8003cf4:	d003      	beq.n	8003cfe <HAL_RCC_GetSysClockFreq+0x36>
 8003cf6:	e027      	b.n	8003d48 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003cf8:	4b19      	ldr	r3, [pc, #100]	@ (8003d60 <HAL_RCC_GetSysClockFreq+0x98>)
 8003cfa:	613b      	str	r3, [r7, #16]
      break;
 8003cfc:	e027      	b.n	8003d4e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	0c9b      	lsrs	r3, r3, #18
 8003d02:	f003 030f 	and.w	r3, r3, #15
 8003d06:	4a17      	ldr	r2, [pc, #92]	@ (8003d64 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003d08:	5cd3      	ldrb	r3, [r2, r3]
 8003d0a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d010      	beq.n	8003d38 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003d16:	4b11      	ldr	r3, [pc, #68]	@ (8003d5c <HAL_RCC_GetSysClockFreq+0x94>)
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	0c5b      	lsrs	r3, r3, #17
 8003d1c:	f003 0301 	and.w	r3, r3, #1
 8003d20:	4a11      	ldr	r2, [pc, #68]	@ (8003d68 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003d22:	5cd3      	ldrb	r3, [r2, r3]
 8003d24:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4a0d      	ldr	r2, [pc, #52]	@ (8003d60 <HAL_RCC_GetSysClockFreq+0x98>)
 8003d2a:	fb03 f202 	mul.w	r2, r3, r2
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d34:	617b      	str	r3, [r7, #20]
 8003d36:	e004      	b.n	8003d42 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	4a0c      	ldr	r2, [pc, #48]	@ (8003d6c <HAL_RCC_GetSysClockFreq+0xa4>)
 8003d3c:	fb02 f303 	mul.w	r3, r2, r3
 8003d40:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	613b      	str	r3, [r7, #16]
      break;
 8003d46:	e002      	b.n	8003d4e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003d48:	4b05      	ldr	r3, [pc, #20]	@ (8003d60 <HAL_RCC_GetSysClockFreq+0x98>)
 8003d4a:	613b      	str	r3, [r7, #16]
      break;
 8003d4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d4e:	693b      	ldr	r3, [r7, #16]
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	371c      	adds	r7, #28
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bc80      	pop	{r7}
 8003d58:	4770      	bx	lr
 8003d5a:	bf00      	nop
 8003d5c:	40021000 	.word	0x40021000
 8003d60:	007a1200 	.word	0x007a1200
 8003d64:	08006128 	.word	0x08006128
 8003d68:	08006138 	.word	0x08006138
 8003d6c:	003d0900 	.word	0x003d0900

08003d70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d70:	b480      	push	{r7}
 8003d72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d74:	4b02      	ldr	r3, [pc, #8]	@ (8003d80 <HAL_RCC_GetHCLKFreq+0x10>)
 8003d76:	681b      	ldr	r3, [r3, #0]
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bc80      	pop	{r7}
 8003d7e:	4770      	bx	lr
 8003d80:	20000000 	.word	0x20000000

08003d84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003d88:	f7ff fff2 	bl	8003d70 <HAL_RCC_GetHCLKFreq>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	4b05      	ldr	r3, [pc, #20]	@ (8003da4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	0a1b      	lsrs	r3, r3, #8
 8003d94:	f003 0307 	and.w	r3, r3, #7
 8003d98:	4903      	ldr	r1, [pc, #12]	@ (8003da8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d9a:	5ccb      	ldrb	r3, [r1, r3]
 8003d9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	bd80      	pop	{r7, pc}
 8003da4:	40021000 	.word	0x40021000
 8003da8:	08005d24 	.word	0x08005d24

08003dac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003db0:	f7ff ffde 	bl	8003d70 <HAL_RCC_GetHCLKFreq>
 8003db4:	4602      	mov	r2, r0
 8003db6:	4b05      	ldr	r3, [pc, #20]	@ (8003dcc <HAL_RCC_GetPCLK2Freq+0x20>)
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	0adb      	lsrs	r3, r3, #11
 8003dbc:	f003 0307 	and.w	r3, r3, #7
 8003dc0:	4903      	ldr	r1, [pc, #12]	@ (8003dd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003dc2:	5ccb      	ldrb	r3, [r1, r3]
 8003dc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	bd80      	pop	{r7, pc}
 8003dcc:	40021000 	.word	0x40021000
 8003dd0:	08005d24 	.word	0x08005d24

08003dd4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b085      	sub	sp, #20
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003ddc:	4b0a      	ldr	r3, [pc, #40]	@ (8003e08 <RCC_Delay+0x34>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a0a      	ldr	r2, [pc, #40]	@ (8003e0c <RCC_Delay+0x38>)
 8003de2:	fba2 2303 	umull	r2, r3, r2, r3
 8003de6:	0a5b      	lsrs	r3, r3, #9
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	fb02 f303 	mul.w	r3, r2, r3
 8003dee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003df0:	bf00      	nop
  }
  while (Delay --);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	1e5a      	subs	r2, r3, #1
 8003df6:	60fa      	str	r2, [r7, #12]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d1f9      	bne.n	8003df0 <RCC_Delay+0x1c>
}
 8003dfc:	bf00      	nop
 8003dfe:	bf00      	nop
 8003e00:	3714      	adds	r7, #20
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bc80      	pop	{r7}
 8003e06:	4770      	bx	lr
 8003e08:	20000000 	.word	0x20000000
 8003e0c:	10624dd3 	.word	0x10624dd3

08003e10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b082      	sub	sp, #8
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d101      	bne.n	8003e22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e041      	b.n	8003ea6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d106      	bne.n	8003e3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2200      	movs	r2, #0
 8003e32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f7fd f9d4 	bl	80011e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2202      	movs	r2, #2
 8003e40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	3304      	adds	r3, #4
 8003e4c:	4619      	mov	r1, r3
 8003e4e:	4610      	mov	r0, r2
 8003e50:	f000 f9a2 	bl	8004198 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2201      	movs	r2, #1
 8003e58:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2201      	movs	r2, #1
 8003e68:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2201      	movs	r2, #1
 8003e88:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2201      	movs	r2, #1
 8003e98:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003ea4:	2300      	movs	r3, #0
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3708      	adds	r7, #8
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}
	...

08003eb0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b085      	sub	sp, #20
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d001      	beq.n	8003ec8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	e044      	b.n	8003f52 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2202      	movs	r2, #2
 8003ecc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	68da      	ldr	r2, [r3, #12]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f042 0201 	orr.w	r2, r2, #1
 8003ede:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a1d      	ldr	r2, [pc, #116]	@ (8003f5c <HAL_TIM_Base_Start_IT+0xac>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d018      	beq.n	8003f1c <HAL_TIM_Base_Start_IT+0x6c>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a1c      	ldr	r2, [pc, #112]	@ (8003f60 <HAL_TIM_Base_Start_IT+0xb0>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d013      	beq.n	8003f1c <HAL_TIM_Base_Start_IT+0x6c>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003efc:	d00e      	beq.n	8003f1c <HAL_TIM_Base_Start_IT+0x6c>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a18      	ldr	r2, [pc, #96]	@ (8003f64 <HAL_TIM_Base_Start_IT+0xb4>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d009      	beq.n	8003f1c <HAL_TIM_Base_Start_IT+0x6c>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a16      	ldr	r2, [pc, #88]	@ (8003f68 <HAL_TIM_Base_Start_IT+0xb8>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d004      	beq.n	8003f1c <HAL_TIM_Base_Start_IT+0x6c>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a15      	ldr	r2, [pc, #84]	@ (8003f6c <HAL_TIM_Base_Start_IT+0xbc>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d111      	bne.n	8003f40 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	f003 0307 	and.w	r3, r3, #7
 8003f26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2b06      	cmp	r3, #6
 8003f2c:	d010      	beq.n	8003f50 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f042 0201 	orr.w	r2, r2, #1
 8003f3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f3e:	e007      	b.n	8003f50 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f042 0201 	orr.w	r2, r2, #1
 8003f4e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f50:	2300      	movs	r3, #0
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3714      	adds	r7, #20
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bc80      	pop	{r7}
 8003f5a:	4770      	bx	lr
 8003f5c:	40012c00 	.word	0x40012c00
 8003f60:	40013400 	.word	0x40013400
 8003f64:	40000400 	.word	0x40000400
 8003f68:	40000800 	.word	0x40000800
 8003f6c:	40000c00 	.word	0x40000c00

08003f70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b084      	sub	sp, #16
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	68db      	ldr	r3, [r3, #12]
 8003f7e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	691b      	ldr	r3, [r3, #16]
 8003f86:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	f003 0302 	and.w	r3, r3, #2
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d020      	beq.n	8003fd4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	f003 0302 	and.w	r3, r3, #2
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d01b      	beq.n	8003fd4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f06f 0202 	mvn.w	r2, #2
 8003fa4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2201      	movs	r2, #1
 8003faa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	699b      	ldr	r3, [r3, #24]
 8003fb2:	f003 0303 	and.w	r3, r3, #3
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d003      	beq.n	8003fc2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f000 f8d1 	bl	8004162 <HAL_TIM_IC_CaptureCallback>
 8003fc0:	e005      	b.n	8003fce <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f000 f8c4 	bl	8004150 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	f000 f8d3 	bl	8004174 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	f003 0304 	and.w	r3, r3, #4
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d020      	beq.n	8004020 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	f003 0304 	and.w	r3, r3, #4
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d01b      	beq.n	8004020 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f06f 0204 	mvn.w	r2, #4
 8003ff0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2202      	movs	r2, #2
 8003ff6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	699b      	ldr	r3, [r3, #24]
 8003ffe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004002:	2b00      	cmp	r3, #0
 8004004:	d003      	beq.n	800400e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f000 f8ab 	bl	8004162 <HAL_TIM_IC_CaptureCallback>
 800400c:	e005      	b.n	800401a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f000 f89e 	bl	8004150 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004014:	6878      	ldr	r0, [r7, #4]
 8004016:	f000 f8ad 	bl	8004174 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2200      	movs	r2, #0
 800401e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	f003 0308 	and.w	r3, r3, #8
 8004026:	2b00      	cmp	r3, #0
 8004028:	d020      	beq.n	800406c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	f003 0308 	and.w	r3, r3, #8
 8004030:	2b00      	cmp	r3, #0
 8004032:	d01b      	beq.n	800406c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f06f 0208 	mvn.w	r2, #8
 800403c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2204      	movs	r2, #4
 8004042:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	69db      	ldr	r3, [r3, #28]
 800404a:	f003 0303 	and.w	r3, r3, #3
 800404e:	2b00      	cmp	r3, #0
 8004050:	d003      	beq.n	800405a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f000 f885 	bl	8004162 <HAL_TIM_IC_CaptureCallback>
 8004058:	e005      	b.n	8004066 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f000 f878 	bl	8004150 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004060:	6878      	ldr	r0, [r7, #4]
 8004062:	f000 f887 	bl	8004174 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2200      	movs	r2, #0
 800406a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	f003 0310 	and.w	r3, r3, #16
 8004072:	2b00      	cmp	r3, #0
 8004074:	d020      	beq.n	80040b8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	f003 0310 	and.w	r3, r3, #16
 800407c:	2b00      	cmp	r3, #0
 800407e:	d01b      	beq.n	80040b8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f06f 0210 	mvn.w	r2, #16
 8004088:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2208      	movs	r2, #8
 800408e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	69db      	ldr	r3, [r3, #28]
 8004096:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800409a:	2b00      	cmp	r3, #0
 800409c:	d003      	beq.n	80040a6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f000 f85f 	bl	8004162 <HAL_TIM_IC_CaptureCallback>
 80040a4:	e005      	b.n	80040b2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f000 f852 	bl	8004150 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	f000 f861 	bl	8004174 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2200      	movs	r2, #0
 80040b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	f003 0301 	and.w	r3, r3, #1
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d00c      	beq.n	80040dc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	f003 0301 	and.w	r3, r3, #1
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d007      	beq.n	80040dc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f06f 0201 	mvn.w	r2, #1
 80040d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f7fd f8aa 	bl	8001230 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d00c      	beq.n	8004100 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d007      	beq.n	8004100 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80040f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f000 f947 	bl	800438e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004106:	2b00      	cmp	r3, #0
 8004108:	d00c      	beq.n	8004124 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004110:	2b00      	cmp	r3, #0
 8004112:	d007      	beq.n	8004124 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800411c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f000 f831 	bl	8004186 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	f003 0320 	and.w	r3, r3, #32
 800412a:	2b00      	cmp	r3, #0
 800412c:	d00c      	beq.n	8004148 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	f003 0320 	and.w	r3, r3, #32
 8004134:	2b00      	cmp	r3, #0
 8004136:	d007      	beq.n	8004148 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f06f 0220 	mvn.w	r2, #32
 8004140:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f000 f91a 	bl	800437c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004148:	bf00      	nop
 800414a:	3710      	adds	r7, #16
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}

08004150 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004150:	b480      	push	{r7}
 8004152:	b083      	sub	sp, #12
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004158:	bf00      	nop
 800415a:	370c      	adds	r7, #12
 800415c:	46bd      	mov	sp, r7
 800415e:	bc80      	pop	{r7}
 8004160:	4770      	bx	lr

08004162 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004162:	b480      	push	{r7}
 8004164:	b083      	sub	sp, #12
 8004166:	af00      	add	r7, sp, #0
 8004168:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800416a:	bf00      	nop
 800416c:	370c      	adds	r7, #12
 800416e:	46bd      	mov	sp, r7
 8004170:	bc80      	pop	{r7}
 8004172:	4770      	bx	lr

08004174 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004174:	b480      	push	{r7}
 8004176:	b083      	sub	sp, #12
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800417c:	bf00      	nop
 800417e:	370c      	adds	r7, #12
 8004180:	46bd      	mov	sp, r7
 8004182:	bc80      	pop	{r7}
 8004184:	4770      	bx	lr

08004186 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004186:	b480      	push	{r7}
 8004188:	b083      	sub	sp, #12
 800418a:	af00      	add	r7, sp, #0
 800418c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800418e:	bf00      	nop
 8004190:	370c      	adds	r7, #12
 8004192:	46bd      	mov	sp, r7
 8004194:	bc80      	pop	{r7}
 8004196:	4770      	bx	lr

08004198 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004198:	b480      	push	{r7}
 800419a:	b085      	sub	sp, #20
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
 80041a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	4a39      	ldr	r2, [pc, #228]	@ (8004290 <TIM_Base_SetConfig+0xf8>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d013      	beq.n	80041d8 <TIM_Base_SetConfig+0x40>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	4a38      	ldr	r2, [pc, #224]	@ (8004294 <TIM_Base_SetConfig+0xfc>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d00f      	beq.n	80041d8 <TIM_Base_SetConfig+0x40>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041be:	d00b      	beq.n	80041d8 <TIM_Base_SetConfig+0x40>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	4a35      	ldr	r2, [pc, #212]	@ (8004298 <TIM_Base_SetConfig+0x100>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d007      	beq.n	80041d8 <TIM_Base_SetConfig+0x40>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	4a34      	ldr	r2, [pc, #208]	@ (800429c <TIM_Base_SetConfig+0x104>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d003      	beq.n	80041d8 <TIM_Base_SetConfig+0x40>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	4a33      	ldr	r2, [pc, #204]	@ (80042a0 <TIM_Base_SetConfig+0x108>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d108      	bne.n	80041ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	68fa      	ldr	r2, [r7, #12]
 80041e6:	4313      	orrs	r3, r2
 80041e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	4a28      	ldr	r2, [pc, #160]	@ (8004290 <TIM_Base_SetConfig+0xf8>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d013      	beq.n	800421a <TIM_Base_SetConfig+0x82>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	4a27      	ldr	r2, [pc, #156]	@ (8004294 <TIM_Base_SetConfig+0xfc>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d00f      	beq.n	800421a <TIM_Base_SetConfig+0x82>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004200:	d00b      	beq.n	800421a <TIM_Base_SetConfig+0x82>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	4a24      	ldr	r2, [pc, #144]	@ (8004298 <TIM_Base_SetConfig+0x100>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d007      	beq.n	800421a <TIM_Base_SetConfig+0x82>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	4a23      	ldr	r2, [pc, #140]	@ (800429c <TIM_Base_SetConfig+0x104>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d003      	beq.n	800421a <TIM_Base_SetConfig+0x82>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	4a22      	ldr	r2, [pc, #136]	@ (80042a0 <TIM_Base_SetConfig+0x108>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d108      	bne.n	800422c <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004220:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	68db      	ldr	r3, [r3, #12]
 8004226:	68fa      	ldr	r2, [r7, #12]
 8004228:	4313      	orrs	r3, r2
 800422a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	695b      	ldr	r3, [r3, #20]
 8004236:	4313      	orrs	r3, r2
 8004238:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	68fa      	ldr	r2, [r7, #12]
 800423e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	689a      	ldr	r2, [r3, #8]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	4a0f      	ldr	r2, [pc, #60]	@ (8004290 <TIM_Base_SetConfig+0xf8>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d003      	beq.n	8004260 <TIM_Base_SetConfig+0xc8>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	4a0e      	ldr	r2, [pc, #56]	@ (8004294 <TIM_Base_SetConfig+0xfc>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d103      	bne.n	8004268 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	691a      	ldr	r2, [r3, #16]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2201      	movs	r2, #1
 800426c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	691b      	ldr	r3, [r3, #16]
 8004272:	f003 0301 	and.w	r3, r3, #1
 8004276:	2b00      	cmp	r3, #0
 8004278:	d005      	beq.n	8004286 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	691b      	ldr	r3, [r3, #16]
 800427e:	f023 0201 	bic.w	r2, r3, #1
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	611a      	str	r2, [r3, #16]
  }
}
 8004286:	bf00      	nop
 8004288:	3714      	adds	r7, #20
 800428a:	46bd      	mov	sp, r7
 800428c:	bc80      	pop	{r7}
 800428e:	4770      	bx	lr
 8004290:	40012c00 	.word	0x40012c00
 8004294:	40013400 	.word	0x40013400
 8004298:	40000400 	.word	0x40000400
 800429c:	40000800 	.word	0x40000800
 80042a0:	40000c00 	.word	0x40000c00

080042a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b085      	sub	sp, #20
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
 80042ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d101      	bne.n	80042bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80042b8:	2302      	movs	r3, #2
 80042ba:	e050      	b.n	800435e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2201      	movs	r2, #1
 80042c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2202      	movs	r2, #2
 80042c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	68fa      	ldr	r2, [r7, #12]
 80042ea:	4313      	orrs	r3, r2
 80042ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	68fa      	ldr	r2, [r7, #12]
 80042f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a1b      	ldr	r2, [pc, #108]	@ (8004368 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d018      	beq.n	8004332 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a19      	ldr	r2, [pc, #100]	@ (800436c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d013      	beq.n	8004332 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004312:	d00e      	beq.n	8004332 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a15      	ldr	r2, [pc, #84]	@ (8004370 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d009      	beq.n	8004332 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a14      	ldr	r2, [pc, #80]	@ (8004374 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d004      	beq.n	8004332 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a12      	ldr	r2, [pc, #72]	@ (8004378 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d10c      	bne.n	800434c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004338:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	68ba      	ldr	r2, [r7, #8]
 8004340:	4313      	orrs	r3, r2
 8004342:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	68ba      	ldr	r2, [r7, #8]
 800434a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2201      	movs	r2, #1
 8004350:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2200      	movs	r2, #0
 8004358:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800435c:	2300      	movs	r3, #0
}
 800435e:	4618      	mov	r0, r3
 8004360:	3714      	adds	r7, #20
 8004362:	46bd      	mov	sp, r7
 8004364:	bc80      	pop	{r7}
 8004366:	4770      	bx	lr
 8004368:	40012c00 	.word	0x40012c00
 800436c:	40013400 	.word	0x40013400
 8004370:	40000400 	.word	0x40000400
 8004374:	40000800 	.word	0x40000800
 8004378:	40000c00 	.word	0x40000c00

0800437c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800437c:	b480      	push	{r7}
 800437e:	b083      	sub	sp, #12
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004384:	bf00      	nop
 8004386:	370c      	adds	r7, #12
 8004388:	46bd      	mov	sp, r7
 800438a:	bc80      	pop	{r7}
 800438c:	4770      	bx	lr

0800438e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800438e:	b480      	push	{r7}
 8004390:	b083      	sub	sp, #12
 8004392:	af00      	add	r7, sp, #0
 8004394:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004396:	bf00      	nop
 8004398:	370c      	adds	r7, #12
 800439a:	46bd      	mov	sp, r7
 800439c:	bc80      	pop	{r7}
 800439e:	4770      	bx	lr

080043a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b082      	sub	sp, #8
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d101      	bne.n	80043b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e042      	b.n	8004438 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d106      	bne.n	80043cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2200      	movs	r2, #0
 80043c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f7fc fffe 	bl	80013c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2224      	movs	r2, #36	@ 0x24
 80043d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	68da      	ldr	r2, [r3, #12]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80043e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	f000 fefd 	bl	80051e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	691a      	ldr	r2, [r3, #16]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80043f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	695a      	ldr	r2, [r3, #20]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004408:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	68da      	ldr	r2, [r3, #12]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004418:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2200      	movs	r2, #0
 800441e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2220      	movs	r2, #32
 8004424:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2220      	movs	r2, #32
 800442c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2200      	movs	r2, #0
 8004434:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004436:	2300      	movs	r3, #0
}
 8004438:	4618      	mov	r0, r3
 800443a:	3708      	adds	r7, #8
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}

08004440 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b08a      	sub	sp, #40	@ 0x28
 8004444:	af02      	add	r7, sp, #8
 8004446:	60f8      	str	r0, [r7, #12]
 8004448:	60b9      	str	r1, [r7, #8]
 800444a:	603b      	str	r3, [r7, #0]
 800444c:	4613      	mov	r3, r2
 800444e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004450:	2300      	movs	r3, #0
 8004452:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800445a:	b2db      	uxtb	r3, r3
 800445c:	2b20      	cmp	r3, #32
 800445e:	d175      	bne.n	800454c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d002      	beq.n	800446c <HAL_UART_Transmit+0x2c>
 8004466:	88fb      	ldrh	r3, [r7, #6]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d101      	bne.n	8004470 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	e06e      	b.n	800454e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2200      	movs	r2, #0
 8004474:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2221      	movs	r2, #33	@ 0x21
 800447a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800447e:	f7fe f8eb 	bl	8002658 <HAL_GetTick>
 8004482:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	88fa      	ldrh	r2, [r7, #6]
 8004488:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	88fa      	ldrh	r2, [r7, #6]
 800448e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004498:	d108      	bne.n	80044ac <HAL_UART_Transmit+0x6c>
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	691b      	ldr	r3, [r3, #16]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d104      	bne.n	80044ac <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80044a2:	2300      	movs	r3, #0
 80044a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	61bb      	str	r3, [r7, #24]
 80044aa:	e003      	b.n	80044b4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80044b0:	2300      	movs	r3, #0
 80044b2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80044b4:	e02e      	b.n	8004514 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	9300      	str	r3, [sp, #0]
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	2200      	movs	r2, #0
 80044be:	2180      	movs	r1, #128	@ 0x80
 80044c0:	68f8      	ldr	r0, [r7, #12]
 80044c2:	f000 fc3a 	bl	8004d3a <UART_WaitOnFlagUntilTimeout>
 80044c6:	4603      	mov	r3, r0
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d005      	beq.n	80044d8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2220      	movs	r2, #32
 80044d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80044d4:	2303      	movs	r3, #3
 80044d6:	e03a      	b.n	800454e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80044d8:	69fb      	ldr	r3, [r7, #28]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d10b      	bne.n	80044f6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80044de:	69bb      	ldr	r3, [r7, #24]
 80044e0:	881b      	ldrh	r3, [r3, #0]
 80044e2:	461a      	mov	r2, r3
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044ec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80044ee:	69bb      	ldr	r3, [r7, #24]
 80044f0:	3302      	adds	r3, #2
 80044f2:	61bb      	str	r3, [r7, #24]
 80044f4:	e007      	b.n	8004506 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80044f6:	69fb      	ldr	r3, [r7, #28]
 80044f8:	781a      	ldrb	r2, [r3, #0]
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004500:	69fb      	ldr	r3, [r7, #28]
 8004502:	3301      	adds	r3, #1
 8004504:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800450a:	b29b      	uxth	r3, r3
 800450c:	3b01      	subs	r3, #1
 800450e:	b29a      	uxth	r2, r3
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004518:	b29b      	uxth	r3, r3
 800451a:	2b00      	cmp	r3, #0
 800451c:	d1cb      	bne.n	80044b6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	9300      	str	r3, [sp, #0]
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	2200      	movs	r2, #0
 8004526:	2140      	movs	r1, #64	@ 0x40
 8004528:	68f8      	ldr	r0, [r7, #12]
 800452a:	f000 fc06 	bl	8004d3a <UART_WaitOnFlagUntilTimeout>
 800452e:	4603      	mov	r3, r0
 8004530:	2b00      	cmp	r3, #0
 8004532:	d005      	beq.n	8004540 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2220      	movs	r2, #32
 8004538:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800453c:	2303      	movs	r3, #3
 800453e:	e006      	b.n	800454e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2220      	movs	r2, #32
 8004544:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004548:	2300      	movs	r3, #0
 800454a:	e000      	b.n	800454e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800454c:	2302      	movs	r3, #2
  }
}
 800454e:	4618      	mov	r0, r3
 8004550:	3720      	adds	r7, #32
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}

08004556 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004556:	b580      	push	{r7, lr}
 8004558:	b084      	sub	sp, #16
 800455a:	af00      	add	r7, sp, #0
 800455c:	60f8      	str	r0, [r7, #12]
 800455e:	60b9      	str	r1, [r7, #8]
 8004560:	4613      	mov	r3, r2
 8004562:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800456a:	b2db      	uxtb	r3, r3
 800456c:	2b20      	cmp	r3, #32
 800456e:	d112      	bne.n	8004596 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d002      	beq.n	800457c <HAL_UART_Receive_IT+0x26>
 8004576:	88fb      	ldrh	r3, [r7, #6]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d101      	bne.n	8004580 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	e00b      	b.n	8004598 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2200      	movs	r2, #0
 8004584:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004586:	88fb      	ldrh	r3, [r7, #6]
 8004588:	461a      	mov	r2, r3
 800458a:	68b9      	ldr	r1, [r7, #8]
 800458c:	68f8      	ldr	r0, [r7, #12]
 800458e:	f000 fc2d 	bl	8004dec <UART_Start_Receive_IT>
 8004592:	4603      	mov	r3, r0
 8004594:	e000      	b.n	8004598 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004596:	2302      	movs	r3, #2
  }
}
 8004598:	4618      	mov	r0, r3
 800459a:	3710      	adds	r7, #16
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}

080045a0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b08c      	sub	sp, #48	@ 0x30
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	60f8      	str	r0, [r7, #12]
 80045a8:	60b9      	str	r1, [r7, #8]
 80045aa:	4613      	mov	r3, r2
 80045ac:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	2b20      	cmp	r3, #32
 80045b8:	d156      	bne.n	8004668 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d002      	beq.n	80045c6 <HAL_UART_Transmit_DMA+0x26>
 80045c0:	88fb      	ldrh	r3, [r7, #6]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d101      	bne.n	80045ca <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	e04f      	b.n	800466a <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 80045ca:	68ba      	ldr	r2, [r7, #8]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	88fa      	ldrh	r2, [r7, #6]
 80045d4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	88fa      	ldrh	r2, [r7, #6]
 80045da:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2200      	movs	r2, #0
 80045e0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2221      	movs	r2, #33	@ 0x21
 80045e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045ee:	4a21      	ldr	r2, [pc, #132]	@ (8004674 <HAL_UART_Transmit_DMA+0xd4>)
 80045f0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045f6:	4a20      	ldr	r2, [pc, #128]	@ (8004678 <HAL_UART_Transmit_DMA+0xd8>)
 80045f8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045fe:	4a1f      	ldr	r2, [pc, #124]	@ (800467c <HAL_UART_Transmit_DMA+0xdc>)
 8004600:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004606:	2200      	movs	r2, #0
 8004608:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 800460a:	f107 0308 	add.w	r3, r7, #8
 800460e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8004614:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004616:	6819      	ldr	r1, [r3, #0]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	3304      	adds	r3, #4
 800461e:	461a      	mov	r2, r3
 8004620:	88fb      	ldrh	r3, [r7, #6]
 8004622:	f7fe f9a7 	bl	8002974 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800462e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	3314      	adds	r3, #20
 8004636:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004638:	69bb      	ldr	r3, [r7, #24]
 800463a:	e853 3f00 	ldrex	r3, [r3]
 800463e:	617b      	str	r3, [r7, #20]
   return(result);
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004646:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	3314      	adds	r3, #20
 800464e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004650:	627a      	str	r2, [r7, #36]	@ 0x24
 8004652:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004654:	6a39      	ldr	r1, [r7, #32]
 8004656:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004658:	e841 2300 	strex	r3, r2, [r1]
 800465c:	61fb      	str	r3, [r7, #28]
   return(result);
 800465e:	69fb      	ldr	r3, [r7, #28]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d1e5      	bne.n	8004630 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8004664:	2300      	movs	r3, #0
 8004666:	e000      	b.n	800466a <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8004668:	2302      	movs	r3, #2
  }
}
 800466a:	4618      	mov	r0, r3
 800466c:	3730      	adds	r7, #48	@ 0x30
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}
 8004672:	bf00      	nop
 8004674:	08004bf1 	.word	0x08004bf1
 8004678:	08004c8b 	.word	0x08004c8b
 800467c:	08004ca7 	.word	0x08004ca7

08004680 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b0ba      	sub	sp, #232	@ 0xe8
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	695b      	ldr	r3, [r3, #20]
 80046a2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80046a6:	2300      	movs	r3, #0
 80046a8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80046ac:	2300      	movs	r3, #0
 80046ae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80046b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046b6:	f003 030f 	and.w	r3, r3, #15
 80046ba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80046be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d10f      	bne.n	80046e6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80046c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046ca:	f003 0320 	and.w	r3, r3, #32
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d009      	beq.n	80046e6 <HAL_UART_IRQHandler+0x66>
 80046d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046d6:	f003 0320 	and.w	r3, r3, #32
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d003      	beq.n	80046e6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f000 fcc1 	bl	8005066 <UART_Receive_IT>
      return;
 80046e4:	e25b      	b.n	8004b9e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80046e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	f000 80de 	beq.w	80048ac <HAL_UART_IRQHandler+0x22c>
 80046f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80046f4:	f003 0301 	and.w	r3, r3, #1
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d106      	bne.n	800470a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80046fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004700:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004704:	2b00      	cmp	r3, #0
 8004706:	f000 80d1 	beq.w	80048ac <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800470a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800470e:	f003 0301 	and.w	r3, r3, #1
 8004712:	2b00      	cmp	r3, #0
 8004714:	d00b      	beq.n	800472e <HAL_UART_IRQHandler+0xae>
 8004716:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800471a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800471e:	2b00      	cmp	r3, #0
 8004720:	d005      	beq.n	800472e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004726:	f043 0201 	orr.w	r2, r3, #1
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800472e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004732:	f003 0304 	and.w	r3, r3, #4
 8004736:	2b00      	cmp	r3, #0
 8004738:	d00b      	beq.n	8004752 <HAL_UART_IRQHandler+0xd2>
 800473a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800473e:	f003 0301 	and.w	r3, r3, #1
 8004742:	2b00      	cmp	r3, #0
 8004744:	d005      	beq.n	8004752 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800474a:	f043 0202 	orr.w	r2, r3, #2
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004752:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004756:	f003 0302 	and.w	r3, r3, #2
 800475a:	2b00      	cmp	r3, #0
 800475c:	d00b      	beq.n	8004776 <HAL_UART_IRQHandler+0xf6>
 800475e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004762:	f003 0301 	and.w	r3, r3, #1
 8004766:	2b00      	cmp	r3, #0
 8004768:	d005      	beq.n	8004776 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800476e:	f043 0204 	orr.w	r2, r3, #4
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004776:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800477a:	f003 0308 	and.w	r3, r3, #8
 800477e:	2b00      	cmp	r3, #0
 8004780:	d011      	beq.n	80047a6 <HAL_UART_IRQHandler+0x126>
 8004782:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004786:	f003 0320 	and.w	r3, r3, #32
 800478a:	2b00      	cmp	r3, #0
 800478c:	d105      	bne.n	800479a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800478e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004792:	f003 0301 	and.w	r3, r3, #1
 8004796:	2b00      	cmp	r3, #0
 8004798:	d005      	beq.n	80047a6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800479e:	f043 0208 	orr.w	r2, r3, #8
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	f000 81f2 	beq.w	8004b94 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80047b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047b4:	f003 0320 	and.w	r3, r3, #32
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d008      	beq.n	80047ce <HAL_UART_IRQHandler+0x14e>
 80047bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80047c0:	f003 0320 	and.w	r3, r3, #32
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d002      	beq.n	80047ce <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80047c8:	6878      	ldr	r0, [r7, #4]
 80047ca:	f000 fc4c 	bl	8005066 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	695b      	ldr	r3, [r3, #20]
 80047d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047d8:	2b00      	cmp	r3, #0
 80047da:	bf14      	ite	ne
 80047dc:	2301      	movne	r3, #1
 80047de:	2300      	moveq	r3, #0
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047ea:	f003 0308 	and.w	r3, r3, #8
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d103      	bne.n	80047fa <HAL_UART_IRQHandler+0x17a>
 80047f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d04f      	beq.n	800489a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f000 fb56 	bl	8004eac <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	695b      	ldr	r3, [r3, #20]
 8004806:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800480a:	2b00      	cmp	r3, #0
 800480c:	d041      	beq.n	8004892 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	3314      	adds	r3, #20
 8004814:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004818:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800481c:	e853 3f00 	ldrex	r3, [r3]
 8004820:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004824:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004828:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800482c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	3314      	adds	r3, #20
 8004836:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800483a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800483e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004842:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004846:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800484a:	e841 2300 	strex	r3, r2, [r1]
 800484e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004852:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004856:	2b00      	cmp	r3, #0
 8004858:	d1d9      	bne.n	800480e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800485e:	2b00      	cmp	r3, #0
 8004860:	d013      	beq.n	800488a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004866:	4a7e      	ldr	r2, [pc, #504]	@ (8004a60 <HAL_UART_IRQHandler+0x3e0>)
 8004868:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800486e:	4618      	mov	r0, r3
 8004870:	f7fe f91c 	bl	8002aac <HAL_DMA_Abort_IT>
 8004874:	4603      	mov	r3, r0
 8004876:	2b00      	cmp	r3, #0
 8004878:	d016      	beq.n	80048a8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800487e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004880:	687a      	ldr	r2, [r7, #4]
 8004882:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004884:	4610      	mov	r0, r2
 8004886:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004888:	e00e      	b.n	80048a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f000 f99c 	bl	8004bc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004890:	e00a      	b.n	80048a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f000 f998 	bl	8004bc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004898:	e006      	b.n	80048a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f000 f994 	bl	8004bc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2200      	movs	r2, #0
 80048a4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80048a6:	e175      	b.n	8004b94 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048a8:	bf00      	nop
    return;
 80048aa:	e173      	b.n	8004b94 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	f040 814f 	bne.w	8004b54 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80048b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048ba:	f003 0310 	and.w	r3, r3, #16
 80048be:	2b00      	cmp	r3, #0
 80048c0:	f000 8148 	beq.w	8004b54 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80048c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048c8:	f003 0310 	and.w	r3, r3, #16
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	f000 8141 	beq.w	8004b54 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80048d2:	2300      	movs	r3, #0
 80048d4:	60bb      	str	r3, [r7, #8]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	60bb      	str	r3, [r7, #8]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	60bb      	str	r3, [r7, #8]
 80048e6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	695b      	ldr	r3, [r3, #20]
 80048ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	f000 80b6 	beq.w	8004a64 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004904:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004908:	2b00      	cmp	r3, #0
 800490a:	f000 8145 	beq.w	8004b98 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004912:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004916:	429a      	cmp	r2, r3
 8004918:	f080 813e 	bcs.w	8004b98 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004922:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004928:	699b      	ldr	r3, [r3, #24]
 800492a:	2b20      	cmp	r3, #32
 800492c:	f000 8088 	beq.w	8004a40 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	330c      	adds	r3, #12
 8004936:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800493a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800493e:	e853 3f00 	ldrex	r3, [r3]
 8004942:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004946:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800494a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800494e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	330c      	adds	r3, #12
 8004958:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800495c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004960:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004964:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004968:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800496c:	e841 2300 	strex	r3, r2, [r1]
 8004970:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004974:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004978:	2b00      	cmp	r3, #0
 800497a:	d1d9      	bne.n	8004930 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	3314      	adds	r3, #20
 8004982:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004984:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004986:	e853 3f00 	ldrex	r3, [r3]
 800498a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800498c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800498e:	f023 0301 	bic.w	r3, r3, #1
 8004992:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	3314      	adds	r3, #20
 800499c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80049a0:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80049a4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049a6:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80049a8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80049ac:	e841 2300 	strex	r3, r2, [r1]
 80049b0:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80049b2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d1e1      	bne.n	800497c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	3314      	adds	r3, #20
 80049be:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049c0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80049c2:	e853 3f00 	ldrex	r3, [r3]
 80049c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80049c8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80049ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80049ce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	3314      	adds	r3, #20
 80049d8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80049dc:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80049de:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049e0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80049e2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80049e4:	e841 2300 	strex	r3, r2, [r1]
 80049e8:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80049ea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d1e3      	bne.n	80049b8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2220      	movs	r2, #32
 80049f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2200      	movs	r2, #0
 80049fc:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	330c      	adds	r3, #12
 8004a04:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a08:	e853 3f00 	ldrex	r3, [r3]
 8004a0c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004a0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a10:	f023 0310 	bic.w	r3, r3, #16
 8004a14:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	330c      	adds	r3, #12
 8004a1e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004a22:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004a24:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a26:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004a28:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004a2a:	e841 2300 	strex	r3, r2, [r1]
 8004a2e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004a30:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d1e3      	bne.n	80049fe <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f7fd fffa 	bl	8002a34 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2202      	movs	r2, #2
 8004a44:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	1ad3      	subs	r3, r2, r3
 8004a52:	b29b      	uxth	r3, r3
 8004a54:	4619      	mov	r1, r3
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f000 f8bf 	bl	8004bda <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004a5c:	e09c      	b.n	8004b98 <HAL_UART_IRQHandler+0x518>
 8004a5e:	bf00      	nop
 8004a60:	08004f71 	.word	0x08004f71
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004a6c:	b29b      	uxth	r3, r3
 8004a6e:	1ad3      	subs	r3, r2, r3
 8004a70:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004a78:	b29b      	uxth	r3, r3
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	f000 808e 	beq.w	8004b9c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004a80:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	f000 8089 	beq.w	8004b9c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	330c      	adds	r3, #12
 8004a90:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a94:	e853 3f00 	ldrex	r3, [r3]
 8004a98:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004a9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a9c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004aa0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	330c      	adds	r3, #12
 8004aaa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004aae:	647a      	str	r2, [r7, #68]	@ 0x44
 8004ab0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ab2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004ab4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004ab6:	e841 2300 	strex	r3, r2, [r1]
 8004aba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004abc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d1e3      	bne.n	8004a8a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	3314      	adds	r3, #20
 8004ac8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004acc:	e853 3f00 	ldrex	r3, [r3]
 8004ad0:	623b      	str	r3, [r7, #32]
   return(result);
 8004ad2:	6a3b      	ldr	r3, [r7, #32]
 8004ad4:	f023 0301 	bic.w	r3, r3, #1
 8004ad8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	3314      	adds	r3, #20
 8004ae2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004ae6:	633a      	str	r2, [r7, #48]	@ 0x30
 8004ae8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004aec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004aee:	e841 2300 	strex	r3, r2, [r1]
 8004af2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004af4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d1e3      	bne.n	8004ac2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2220      	movs	r2, #32
 8004afe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2200      	movs	r2, #0
 8004b06:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	330c      	adds	r3, #12
 8004b0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	e853 3f00 	ldrex	r3, [r3]
 8004b16:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f023 0310 	bic.w	r3, r3, #16
 8004b1e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	330c      	adds	r3, #12
 8004b28:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004b2c:	61fa      	str	r2, [r7, #28]
 8004b2e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b30:	69b9      	ldr	r1, [r7, #24]
 8004b32:	69fa      	ldr	r2, [r7, #28]
 8004b34:	e841 2300 	strex	r3, r2, [r1]
 8004b38:	617b      	str	r3, [r7, #20]
   return(result);
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d1e3      	bne.n	8004b08 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2202      	movs	r2, #2
 8004b44:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004b46:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004b4a:	4619      	mov	r1, r3
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	f000 f844 	bl	8004bda <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004b52:	e023      	b.n	8004b9c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004b54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d009      	beq.n	8004b74 <HAL_UART_IRQHandler+0x4f4>
 8004b60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d003      	beq.n	8004b74 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004b6c:	6878      	ldr	r0, [r7, #4]
 8004b6e:	f000 fa13 	bl	8004f98 <UART_Transmit_IT>
    return;
 8004b72:	e014      	b.n	8004b9e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004b74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d00e      	beq.n	8004b9e <HAL_UART_IRQHandler+0x51e>
 8004b80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d008      	beq.n	8004b9e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	f000 fa52 	bl	8005036 <UART_EndTransmit_IT>
    return;
 8004b92:	e004      	b.n	8004b9e <HAL_UART_IRQHandler+0x51e>
    return;
 8004b94:	bf00      	nop
 8004b96:	e002      	b.n	8004b9e <HAL_UART_IRQHandler+0x51e>
      return;
 8004b98:	bf00      	nop
 8004b9a:	e000      	b.n	8004b9e <HAL_UART_IRQHandler+0x51e>
      return;
 8004b9c:	bf00      	nop
  }
}
 8004b9e:	37e8      	adds	r7, #232	@ 0xe8
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}

08004ba4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b083      	sub	sp, #12
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004bac:	bf00      	nop
 8004bae:	370c      	adds	r7, #12
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bc80      	pop	{r7}
 8004bb4:	4770      	bx	lr

08004bb6 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004bb6:	b480      	push	{r7}
 8004bb8:	b083      	sub	sp, #12
 8004bba:	af00      	add	r7, sp, #0
 8004bbc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8004bbe:	bf00      	nop
 8004bc0:	370c      	adds	r7, #12
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bc80      	pop	{r7}
 8004bc6:	4770      	bx	lr

08004bc8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b083      	sub	sp, #12
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004bd0:	bf00      	nop
 8004bd2:	370c      	adds	r7, #12
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bc80      	pop	{r7}
 8004bd8:	4770      	bx	lr

08004bda <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004bda:	b480      	push	{r7}
 8004bdc:	b083      	sub	sp, #12
 8004bde:	af00      	add	r7, sp, #0
 8004be0:	6078      	str	r0, [r7, #4]
 8004be2:	460b      	mov	r3, r1
 8004be4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004be6:	bf00      	nop
 8004be8:	370c      	adds	r7, #12
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bc80      	pop	{r7}
 8004bee:	4770      	bx	lr

08004bf0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b090      	sub	sp, #64	@ 0x40
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f003 0320 	and.w	r3, r3, #32
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d137      	bne.n	8004c7c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8004c0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c0e:	2200      	movs	r2, #0
 8004c10:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004c12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	3314      	adds	r3, #20
 8004c18:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c1c:	e853 3f00 	ldrex	r3, [r3]
 8004c20:	623b      	str	r3, [r7, #32]
   return(result);
 8004c22:	6a3b      	ldr	r3, [r7, #32]
 8004c24:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c28:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004c2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	3314      	adds	r3, #20
 8004c30:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004c32:	633a      	str	r2, [r7, #48]	@ 0x30
 8004c34:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c36:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004c38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c3a:	e841 2300 	strex	r3, r2, [r1]
 8004c3e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004c40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d1e5      	bne.n	8004c12 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004c46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	330c      	adds	r3, #12
 8004c4c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	e853 3f00 	ldrex	r3, [r3]
 8004c54:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004c5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	330c      	adds	r3, #12
 8004c64:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004c66:	61fa      	str	r2, [r7, #28]
 8004c68:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c6a:	69b9      	ldr	r1, [r7, #24]
 8004c6c:	69fa      	ldr	r2, [r7, #28]
 8004c6e:	e841 2300 	strex	r3, r2, [r1]
 8004c72:	617b      	str	r3, [r7, #20]
   return(result);
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d1e5      	bne.n	8004c46 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004c7a:	e002      	b.n	8004c82 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8004c7c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8004c7e:	f7ff ff91 	bl	8004ba4 <HAL_UART_TxCpltCallback>
}
 8004c82:	bf00      	nop
 8004c84:	3740      	adds	r7, #64	@ 0x40
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}

08004c8a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004c8a:	b580      	push	{r7, lr}
 8004c8c:	b084      	sub	sp, #16
 8004c8e:	af00      	add	r7, sp, #0
 8004c90:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c96:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004c98:	68f8      	ldr	r0, [r7, #12]
 8004c9a:	f7ff ff8c 	bl	8004bb6 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c9e:	bf00      	nop
 8004ca0:	3710      	adds	r7, #16
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}

08004ca6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004ca6:	b580      	push	{r7, lr}
 8004ca8:	b084      	sub	sp, #16
 8004caa:	af00      	add	r7, sp, #0
 8004cac:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cb6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	695b      	ldr	r3, [r3, #20]
 8004cbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	bf14      	ite	ne
 8004cc6:	2301      	movne	r3, #1
 8004cc8:	2300      	moveq	r3, #0
 8004cca:	b2db      	uxtb	r3, r3
 8004ccc:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004cd4:	b2db      	uxtb	r3, r3
 8004cd6:	2b21      	cmp	r3, #33	@ 0x21
 8004cd8:	d108      	bne.n	8004cec <UART_DMAError+0x46>
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d005      	beq.n	8004cec <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8004ce6:	68b8      	ldr	r0, [r7, #8]
 8004ce8:	f000 f8b9 	bl	8004e5e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	695b      	ldr	r3, [r3, #20]
 8004cf2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	bf14      	ite	ne
 8004cfa:	2301      	movne	r3, #1
 8004cfc:	2300      	moveq	r3, #0
 8004cfe:	b2db      	uxtb	r3, r3
 8004d00:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	2b22      	cmp	r3, #34	@ 0x22
 8004d0c:	d108      	bne.n	8004d20 <UART_DMAError+0x7a>
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d005      	beq.n	8004d20 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	2200      	movs	r2, #0
 8004d18:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8004d1a:	68b8      	ldr	r0, [r7, #8]
 8004d1c:	f000 f8c6 	bl	8004eac <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d24:	f043 0210 	orr.w	r2, r3, #16
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004d2c:	68b8      	ldr	r0, [r7, #8]
 8004d2e:	f7ff ff4b 	bl	8004bc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d32:	bf00      	nop
 8004d34:	3710      	adds	r7, #16
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}

08004d3a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004d3a:	b580      	push	{r7, lr}
 8004d3c:	b086      	sub	sp, #24
 8004d3e:	af00      	add	r7, sp, #0
 8004d40:	60f8      	str	r0, [r7, #12]
 8004d42:	60b9      	str	r1, [r7, #8]
 8004d44:	603b      	str	r3, [r7, #0]
 8004d46:	4613      	mov	r3, r2
 8004d48:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d4a:	e03b      	b.n	8004dc4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d4c:	6a3b      	ldr	r3, [r7, #32]
 8004d4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d52:	d037      	beq.n	8004dc4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d54:	f7fd fc80 	bl	8002658 <HAL_GetTick>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	1ad3      	subs	r3, r2, r3
 8004d5e:	6a3a      	ldr	r2, [r7, #32]
 8004d60:	429a      	cmp	r2, r3
 8004d62:	d302      	bcc.n	8004d6a <UART_WaitOnFlagUntilTimeout+0x30>
 8004d64:	6a3b      	ldr	r3, [r7, #32]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d101      	bne.n	8004d6e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004d6a:	2303      	movs	r3, #3
 8004d6c:	e03a      	b.n	8004de4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	68db      	ldr	r3, [r3, #12]
 8004d74:	f003 0304 	and.w	r3, r3, #4
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d023      	beq.n	8004dc4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	2b80      	cmp	r3, #128	@ 0x80
 8004d80:	d020      	beq.n	8004dc4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	2b40      	cmp	r3, #64	@ 0x40
 8004d86:	d01d      	beq.n	8004dc4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f003 0308 	and.w	r3, r3, #8
 8004d92:	2b08      	cmp	r3, #8
 8004d94:	d116      	bne.n	8004dc4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004d96:	2300      	movs	r3, #0
 8004d98:	617b      	str	r3, [r7, #20]
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	617b      	str	r3, [r7, #20]
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	617b      	str	r3, [r7, #20]
 8004daa:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004dac:	68f8      	ldr	r0, [r7, #12]
 8004dae:	f000 f87d 	bl	8004eac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2208      	movs	r2, #8
 8004db6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	e00f      	b.n	8004de4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	4013      	ands	r3, r2
 8004dce:	68ba      	ldr	r2, [r7, #8]
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	bf0c      	ite	eq
 8004dd4:	2301      	moveq	r3, #1
 8004dd6:	2300      	movne	r3, #0
 8004dd8:	b2db      	uxtb	r3, r3
 8004dda:	461a      	mov	r2, r3
 8004ddc:	79fb      	ldrb	r3, [r7, #7]
 8004dde:	429a      	cmp	r2, r3
 8004de0:	d0b4      	beq.n	8004d4c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004de2:	2300      	movs	r3, #0
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	3718      	adds	r7, #24
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}

08004dec <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b085      	sub	sp, #20
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	60f8      	str	r0, [r7, #12]
 8004df4:	60b9      	str	r1, [r7, #8]
 8004df6:	4613      	mov	r3, r2
 8004df8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	68ba      	ldr	r2, [r7, #8]
 8004dfe:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	88fa      	ldrh	r2, [r7, #6]
 8004e04:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	88fa      	ldrh	r2, [r7, #6]
 8004e0a:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2222      	movs	r2, #34	@ 0x22
 8004e16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	691b      	ldr	r3, [r3, #16]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d007      	beq.n	8004e32 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	68da      	ldr	r2, [r3, #12]
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004e30:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	695a      	ldr	r2, [r3, #20]
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f042 0201 	orr.w	r2, r2, #1
 8004e40:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	68da      	ldr	r2, [r3, #12]
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f042 0220 	orr.w	r2, r2, #32
 8004e50:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004e52:	2300      	movs	r3, #0
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	3714      	adds	r7, #20
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bc80      	pop	{r7}
 8004e5c:	4770      	bx	lr

08004e5e <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004e5e:	b480      	push	{r7}
 8004e60:	b089      	sub	sp, #36	@ 0x24
 8004e62:	af00      	add	r7, sp, #0
 8004e64:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	330c      	adds	r3, #12
 8004e6c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	e853 3f00 	ldrex	r3, [r3]
 8004e74:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004e7c:	61fb      	str	r3, [r7, #28]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	330c      	adds	r3, #12
 8004e84:	69fa      	ldr	r2, [r7, #28]
 8004e86:	61ba      	str	r2, [r7, #24]
 8004e88:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e8a:	6979      	ldr	r1, [r7, #20]
 8004e8c:	69ba      	ldr	r2, [r7, #24]
 8004e8e:	e841 2300 	strex	r3, r2, [r1]
 8004e92:	613b      	str	r3, [r7, #16]
   return(result);
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d1e5      	bne.n	8004e66 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2220      	movs	r2, #32
 8004e9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8004ea2:	bf00      	nop
 8004ea4:	3724      	adds	r7, #36	@ 0x24
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bc80      	pop	{r7}
 8004eaa:	4770      	bx	lr

08004eac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b095      	sub	sp, #84	@ 0x54
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	330c      	adds	r3, #12
 8004eba:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ebc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ebe:	e853 3f00 	ldrex	r3, [r3]
 8004ec2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004ec4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ec6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004eca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	330c      	adds	r3, #12
 8004ed2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004ed4:	643a      	str	r2, [r7, #64]	@ 0x40
 8004ed6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ed8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004eda:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004edc:	e841 2300 	strex	r3, r2, [r1]
 8004ee0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004ee2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d1e5      	bne.n	8004eb4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	3314      	adds	r3, #20
 8004eee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ef0:	6a3b      	ldr	r3, [r7, #32]
 8004ef2:	e853 3f00 	ldrex	r3, [r3]
 8004ef6:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ef8:	69fb      	ldr	r3, [r7, #28]
 8004efa:	f023 0301 	bic.w	r3, r3, #1
 8004efe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	3314      	adds	r3, #20
 8004f06:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004f08:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004f0a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f0c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004f0e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f10:	e841 2300 	strex	r3, r2, [r1]
 8004f14:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d1e5      	bne.n	8004ee8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d119      	bne.n	8004f58 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	330c      	adds	r3, #12
 8004f2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	e853 3f00 	ldrex	r3, [r3]
 8004f32:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	f023 0310 	bic.w	r3, r3, #16
 8004f3a:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	330c      	adds	r3, #12
 8004f42:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004f44:	61ba      	str	r2, [r7, #24]
 8004f46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f48:	6979      	ldr	r1, [r7, #20]
 8004f4a:	69ba      	ldr	r2, [r7, #24]
 8004f4c:	e841 2300 	strex	r3, r2, [r1]
 8004f50:	613b      	str	r3, [r7, #16]
   return(result);
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d1e5      	bne.n	8004f24 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2220      	movs	r2, #32
 8004f5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2200      	movs	r2, #0
 8004f64:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004f66:	bf00      	nop
 8004f68:	3754      	adds	r7, #84	@ 0x54
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bc80      	pop	{r7}
 8004f6e:	4770      	bx	lr

08004f70 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b084      	sub	sp, #16
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f7c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2200      	movs	r2, #0
 8004f82:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2200      	movs	r2, #0
 8004f88:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004f8a:	68f8      	ldr	r0, [r7, #12]
 8004f8c:	f7ff fe1c 	bl	8004bc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f90:	bf00      	nop
 8004f92:	3710      	adds	r7, #16
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}

08004f98 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b085      	sub	sp, #20
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004fa6:	b2db      	uxtb	r3, r3
 8004fa8:	2b21      	cmp	r3, #33	@ 0x21
 8004faa:	d13e      	bne.n	800502a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004fb4:	d114      	bne.n	8004fe0 <UART_Transmit_IT+0x48>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	691b      	ldr	r3, [r3, #16]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d110      	bne.n	8004fe0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6a1b      	ldr	r3, [r3, #32]
 8004fc2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	881b      	ldrh	r3, [r3, #0]
 8004fc8:	461a      	mov	r2, r3
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004fd2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6a1b      	ldr	r3, [r3, #32]
 8004fd8:	1c9a      	adds	r2, r3, #2
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	621a      	str	r2, [r3, #32]
 8004fde:	e008      	b.n	8004ff2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6a1b      	ldr	r3, [r3, #32]
 8004fe4:	1c59      	adds	r1, r3, #1
 8004fe6:	687a      	ldr	r2, [r7, #4]
 8004fe8:	6211      	str	r1, [r2, #32]
 8004fea:	781a      	ldrb	r2, [r3, #0]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004ff6:	b29b      	uxth	r3, r3
 8004ff8:	3b01      	subs	r3, #1
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	687a      	ldr	r2, [r7, #4]
 8004ffe:	4619      	mov	r1, r3
 8005000:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005002:	2b00      	cmp	r3, #0
 8005004:	d10f      	bne.n	8005026 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	68da      	ldr	r2, [r3, #12]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005014:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	68da      	ldr	r2, [r3, #12]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005024:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005026:	2300      	movs	r3, #0
 8005028:	e000      	b.n	800502c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800502a:	2302      	movs	r3, #2
  }
}
 800502c:	4618      	mov	r0, r3
 800502e:	3714      	adds	r7, #20
 8005030:	46bd      	mov	sp, r7
 8005032:	bc80      	pop	{r7}
 8005034:	4770      	bx	lr

08005036 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005036:	b580      	push	{r7, lr}
 8005038:	b082      	sub	sp, #8
 800503a:	af00      	add	r7, sp, #0
 800503c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	68da      	ldr	r2, [r3, #12]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800504c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2220      	movs	r2, #32
 8005052:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f7ff fda4 	bl	8004ba4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800505c:	2300      	movs	r3, #0
}
 800505e:	4618      	mov	r0, r3
 8005060:	3708      	adds	r7, #8
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}

08005066 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005066:	b580      	push	{r7, lr}
 8005068:	b08c      	sub	sp, #48	@ 0x30
 800506a:	af00      	add	r7, sp, #0
 800506c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005074:	b2db      	uxtb	r3, r3
 8005076:	2b22      	cmp	r3, #34	@ 0x22
 8005078:	f040 80ae 	bne.w	80051d8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005084:	d117      	bne.n	80050b6 <UART_Receive_IT+0x50>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	691b      	ldr	r3, [r3, #16]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d113      	bne.n	80050b6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800508e:	2300      	movs	r3, #0
 8005090:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005096:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	b29b      	uxth	r3, r3
 80050a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050a4:	b29a      	uxth	r2, r3
 80050a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050a8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050ae:	1c9a      	adds	r2, r3, #2
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	629a      	str	r2, [r3, #40]	@ 0x28
 80050b4:	e026      	b.n	8005104 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80050bc:	2300      	movs	r3, #0
 80050be:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050c8:	d007      	beq.n	80050da <UART_Receive_IT+0x74>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d10a      	bne.n	80050e8 <UART_Receive_IT+0x82>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	691b      	ldr	r3, [r3, #16]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d106      	bne.n	80050e8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	b2da      	uxtb	r2, r3
 80050e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050e4:	701a      	strb	r2, [r3, #0]
 80050e6:	e008      	b.n	80050fa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	b2db      	uxtb	r3, r3
 80050f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80050f4:	b2da      	uxtb	r2, r3
 80050f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050f8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050fe:	1c5a      	adds	r2, r3, #1
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005108:	b29b      	uxth	r3, r3
 800510a:	3b01      	subs	r3, #1
 800510c:	b29b      	uxth	r3, r3
 800510e:	687a      	ldr	r2, [r7, #4]
 8005110:	4619      	mov	r1, r3
 8005112:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005114:	2b00      	cmp	r3, #0
 8005116:	d15d      	bne.n	80051d4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	68da      	ldr	r2, [r3, #12]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f022 0220 	bic.w	r2, r2, #32
 8005126:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	68da      	ldr	r2, [r3, #12]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005136:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	695a      	ldr	r2, [r3, #20]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f022 0201 	bic.w	r2, r2, #1
 8005146:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2220      	movs	r2, #32
 800514c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2200      	movs	r2, #0
 8005154:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800515a:	2b01      	cmp	r3, #1
 800515c:	d135      	bne.n	80051ca <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2200      	movs	r2, #0
 8005162:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	330c      	adds	r3, #12
 800516a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	e853 3f00 	ldrex	r3, [r3]
 8005172:	613b      	str	r3, [r7, #16]
   return(result);
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	f023 0310 	bic.w	r3, r3, #16
 800517a:	627b      	str	r3, [r7, #36]	@ 0x24
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	330c      	adds	r3, #12
 8005182:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005184:	623a      	str	r2, [r7, #32]
 8005186:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005188:	69f9      	ldr	r1, [r7, #28]
 800518a:	6a3a      	ldr	r2, [r7, #32]
 800518c:	e841 2300 	strex	r3, r2, [r1]
 8005190:	61bb      	str	r3, [r7, #24]
   return(result);
 8005192:	69bb      	ldr	r3, [r7, #24]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d1e5      	bne.n	8005164 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f003 0310 	and.w	r3, r3, #16
 80051a2:	2b10      	cmp	r3, #16
 80051a4:	d10a      	bne.n	80051bc <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80051a6:	2300      	movs	r3, #0
 80051a8:	60fb      	str	r3, [r7, #12]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	60fb      	str	r3, [r7, #12]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	60fb      	str	r3, [r7, #12]
 80051ba:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80051c0:	4619      	mov	r1, r3
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f7ff fd09 	bl	8004bda <HAL_UARTEx_RxEventCallback>
 80051c8:	e002      	b.n	80051d0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f7fc fa3c 	bl	8001648 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80051d0:	2300      	movs	r3, #0
 80051d2:	e002      	b.n	80051da <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80051d4:	2300      	movs	r3, #0
 80051d6:	e000      	b.n	80051da <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80051d8:	2302      	movs	r3, #2
  }
}
 80051da:	4618      	mov	r0, r3
 80051dc:	3730      	adds	r7, #48	@ 0x30
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}
	...

080051e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b084      	sub	sp, #16
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	691b      	ldr	r3, [r3, #16]
 80051f2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	68da      	ldr	r2, [r3, #12]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	430a      	orrs	r2, r1
 8005200:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	689a      	ldr	r2, [r3, #8]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	691b      	ldr	r3, [r3, #16]
 800520a:	431a      	orrs	r2, r3
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	695b      	ldr	r3, [r3, #20]
 8005210:	4313      	orrs	r3, r2
 8005212:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	68db      	ldr	r3, [r3, #12]
 800521a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800521e:	f023 030c 	bic.w	r3, r3, #12
 8005222:	687a      	ldr	r2, [r7, #4]
 8005224:	6812      	ldr	r2, [r2, #0]
 8005226:	68b9      	ldr	r1, [r7, #8]
 8005228:	430b      	orrs	r3, r1
 800522a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	695b      	ldr	r3, [r3, #20]
 8005232:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	699a      	ldr	r2, [r3, #24]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	430a      	orrs	r2, r1
 8005240:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a2c      	ldr	r2, [pc, #176]	@ (80052f8 <UART_SetConfig+0x114>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d103      	bne.n	8005254 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800524c:	f7fe fdae 	bl	8003dac <HAL_RCC_GetPCLK2Freq>
 8005250:	60f8      	str	r0, [r7, #12]
 8005252:	e002      	b.n	800525a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005254:	f7fe fd96 	bl	8003d84 <HAL_RCC_GetPCLK1Freq>
 8005258:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800525a:	68fa      	ldr	r2, [r7, #12]
 800525c:	4613      	mov	r3, r2
 800525e:	009b      	lsls	r3, r3, #2
 8005260:	4413      	add	r3, r2
 8005262:	009a      	lsls	r2, r3, #2
 8005264:	441a      	add	r2, r3
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	009b      	lsls	r3, r3, #2
 800526c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005270:	4a22      	ldr	r2, [pc, #136]	@ (80052fc <UART_SetConfig+0x118>)
 8005272:	fba2 2303 	umull	r2, r3, r2, r3
 8005276:	095b      	lsrs	r3, r3, #5
 8005278:	0119      	lsls	r1, r3, #4
 800527a:	68fa      	ldr	r2, [r7, #12]
 800527c:	4613      	mov	r3, r2
 800527e:	009b      	lsls	r3, r3, #2
 8005280:	4413      	add	r3, r2
 8005282:	009a      	lsls	r2, r3, #2
 8005284:	441a      	add	r2, r3
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	009b      	lsls	r3, r3, #2
 800528c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005290:	4b1a      	ldr	r3, [pc, #104]	@ (80052fc <UART_SetConfig+0x118>)
 8005292:	fba3 0302 	umull	r0, r3, r3, r2
 8005296:	095b      	lsrs	r3, r3, #5
 8005298:	2064      	movs	r0, #100	@ 0x64
 800529a:	fb00 f303 	mul.w	r3, r0, r3
 800529e:	1ad3      	subs	r3, r2, r3
 80052a0:	011b      	lsls	r3, r3, #4
 80052a2:	3332      	adds	r3, #50	@ 0x32
 80052a4:	4a15      	ldr	r2, [pc, #84]	@ (80052fc <UART_SetConfig+0x118>)
 80052a6:	fba2 2303 	umull	r2, r3, r2, r3
 80052aa:	095b      	lsrs	r3, r3, #5
 80052ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80052b0:	4419      	add	r1, r3
 80052b2:	68fa      	ldr	r2, [r7, #12]
 80052b4:	4613      	mov	r3, r2
 80052b6:	009b      	lsls	r3, r3, #2
 80052b8:	4413      	add	r3, r2
 80052ba:	009a      	lsls	r2, r3, #2
 80052bc:	441a      	add	r2, r3
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	009b      	lsls	r3, r3, #2
 80052c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80052c8:	4b0c      	ldr	r3, [pc, #48]	@ (80052fc <UART_SetConfig+0x118>)
 80052ca:	fba3 0302 	umull	r0, r3, r3, r2
 80052ce:	095b      	lsrs	r3, r3, #5
 80052d0:	2064      	movs	r0, #100	@ 0x64
 80052d2:	fb00 f303 	mul.w	r3, r0, r3
 80052d6:	1ad3      	subs	r3, r2, r3
 80052d8:	011b      	lsls	r3, r3, #4
 80052da:	3332      	adds	r3, #50	@ 0x32
 80052dc:	4a07      	ldr	r2, [pc, #28]	@ (80052fc <UART_SetConfig+0x118>)
 80052de:	fba2 2303 	umull	r2, r3, r2, r3
 80052e2:	095b      	lsrs	r3, r3, #5
 80052e4:	f003 020f 	and.w	r2, r3, #15
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	440a      	add	r2, r1
 80052ee:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80052f0:	bf00      	nop
 80052f2:	3710      	adds	r7, #16
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}
 80052f8:	40013800 	.word	0x40013800
 80052fc:	51eb851f 	.word	0x51eb851f

08005300 <_vsniprintf_r>:
 8005300:	b530      	push	{r4, r5, lr}
 8005302:	4614      	mov	r4, r2
 8005304:	2c00      	cmp	r4, #0
 8005306:	4605      	mov	r5, r0
 8005308:	461a      	mov	r2, r3
 800530a:	b09b      	sub	sp, #108	@ 0x6c
 800530c:	da05      	bge.n	800531a <_vsniprintf_r+0x1a>
 800530e:	238b      	movs	r3, #139	@ 0x8b
 8005310:	6003      	str	r3, [r0, #0]
 8005312:	f04f 30ff 	mov.w	r0, #4294967295
 8005316:	b01b      	add	sp, #108	@ 0x6c
 8005318:	bd30      	pop	{r4, r5, pc}
 800531a:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800531e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8005322:	bf0c      	ite	eq
 8005324:	4623      	moveq	r3, r4
 8005326:	f104 33ff 	addne.w	r3, r4, #4294967295
 800532a:	9302      	str	r3, [sp, #8]
 800532c:	9305      	str	r3, [sp, #20]
 800532e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005332:	9100      	str	r1, [sp, #0]
 8005334:	9104      	str	r1, [sp, #16]
 8005336:	f8ad 300e 	strh.w	r3, [sp, #14]
 800533a:	4669      	mov	r1, sp
 800533c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800533e:	f000 f9ad 	bl	800569c <_svfiprintf_r>
 8005342:	1c43      	adds	r3, r0, #1
 8005344:	bfbc      	itt	lt
 8005346:	238b      	movlt	r3, #139	@ 0x8b
 8005348:	602b      	strlt	r3, [r5, #0]
 800534a:	2c00      	cmp	r4, #0
 800534c:	d0e3      	beq.n	8005316 <_vsniprintf_r+0x16>
 800534e:	2200      	movs	r2, #0
 8005350:	9b00      	ldr	r3, [sp, #0]
 8005352:	701a      	strb	r2, [r3, #0]
 8005354:	e7df      	b.n	8005316 <_vsniprintf_r+0x16>
	...

08005358 <vsniprintf>:
 8005358:	b507      	push	{r0, r1, r2, lr}
 800535a:	9300      	str	r3, [sp, #0]
 800535c:	4613      	mov	r3, r2
 800535e:	460a      	mov	r2, r1
 8005360:	4601      	mov	r1, r0
 8005362:	4803      	ldr	r0, [pc, #12]	@ (8005370 <vsniprintf+0x18>)
 8005364:	6800      	ldr	r0, [r0, #0]
 8005366:	f7ff ffcb 	bl	8005300 <_vsniprintf_r>
 800536a:	b003      	add	sp, #12
 800536c:	f85d fb04 	ldr.w	pc, [sp], #4
 8005370:	20000010 	.word	0x20000010

08005374 <memset>:
 8005374:	4603      	mov	r3, r0
 8005376:	4402      	add	r2, r0
 8005378:	4293      	cmp	r3, r2
 800537a:	d100      	bne.n	800537e <memset+0xa>
 800537c:	4770      	bx	lr
 800537e:	f803 1b01 	strb.w	r1, [r3], #1
 8005382:	e7f9      	b.n	8005378 <memset+0x4>

08005384 <__errno>:
 8005384:	4b01      	ldr	r3, [pc, #4]	@ (800538c <__errno+0x8>)
 8005386:	6818      	ldr	r0, [r3, #0]
 8005388:	4770      	bx	lr
 800538a:	bf00      	nop
 800538c:	20000010 	.word	0x20000010

08005390 <__libc_init_array>:
 8005390:	b570      	push	{r4, r5, r6, lr}
 8005392:	2600      	movs	r6, #0
 8005394:	4d0c      	ldr	r5, [pc, #48]	@ (80053c8 <__libc_init_array+0x38>)
 8005396:	4c0d      	ldr	r4, [pc, #52]	@ (80053cc <__libc_init_array+0x3c>)
 8005398:	1b64      	subs	r4, r4, r5
 800539a:	10a4      	asrs	r4, r4, #2
 800539c:	42a6      	cmp	r6, r4
 800539e:	d109      	bne.n	80053b4 <__libc_init_array+0x24>
 80053a0:	f000 fc78 	bl	8005c94 <_init>
 80053a4:	2600      	movs	r6, #0
 80053a6:	4d0a      	ldr	r5, [pc, #40]	@ (80053d0 <__libc_init_array+0x40>)
 80053a8:	4c0a      	ldr	r4, [pc, #40]	@ (80053d4 <__libc_init_array+0x44>)
 80053aa:	1b64      	subs	r4, r4, r5
 80053ac:	10a4      	asrs	r4, r4, #2
 80053ae:	42a6      	cmp	r6, r4
 80053b0:	d105      	bne.n	80053be <__libc_init_array+0x2e>
 80053b2:	bd70      	pop	{r4, r5, r6, pc}
 80053b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80053b8:	4798      	blx	r3
 80053ba:	3601      	adds	r6, #1
 80053bc:	e7ee      	b.n	800539c <__libc_init_array+0xc>
 80053be:	f855 3b04 	ldr.w	r3, [r5], #4
 80053c2:	4798      	blx	r3
 80053c4:	3601      	adds	r6, #1
 80053c6:	e7f2      	b.n	80053ae <__libc_init_array+0x1e>
 80053c8:	08006170 	.word	0x08006170
 80053cc:	08006170 	.word	0x08006170
 80053d0:	08006170 	.word	0x08006170
 80053d4:	08006174 	.word	0x08006174

080053d8 <__retarget_lock_acquire_recursive>:
 80053d8:	4770      	bx	lr

080053da <__retarget_lock_release_recursive>:
 80053da:	4770      	bx	lr

080053dc <memcpy>:
 80053dc:	440a      	add	r2, r1
 80053de:	4291      	cmp	r1, r2
 80053e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80053e4:	d100      	bne.n	80053e8 <memcpy+0xc>
 80053e6:	4770      	bx	lr
 80053e8:	b510      	push	{r4, lr}
 80053ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80053ee:	4291      	cmp	r1, r2
 80053f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80053f4:	d1f9      	bne.n	80053ea <memcpy+0xe>
 80053f6:	bd10      	pop	{r4, pc}

080053f8 <_free_r>:
 80053f8:	b538      	push	{r3, r4, r5, lr}
 80053fa:	4605      	mov	r5, r0
 80053fc:	2900      	cmp	r1, #0
 80053fe:	d040      	beq.n	8005482 <_free_r+0x8a>
 8005400:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005404:	1f0c      	subs	r4, r1, #4
 8005406:	2b00      	cmp	r3, #0
 8005408:	bfb8      	it	lt
 800540a:	18e4      	addlt	r4, r4, r3
 800540c:	f000 f8de 	bl	80055cc <__malloc_lock>
 8005410:	4a1c      	ldr	r2, [pc, #112]	@ (8005484 <_free_r+0x8c>)
 8005412:	6813      	ldr	r3, [r2, #0]
 8005414:	b933      	cbnz	r3, 8005424 <_free_r+0x2c>
 8005416:	6063      	str	r3, [r4, #4]
 8005418:	6014      	str	r4, [r2, #0]
 800541a:	4628      	mov	r0, r5
 800541c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005420:	f000 b8da 	b.w	80055d8 <__malloc_unlock>
 8005424:	42a3      	cmp	r3, r4
 8005426:	d908      	bls.n	800543a <_free_r+0x42>
 8005428:	6820      	ldr	r0, [r4, #0]
 800542a:	1821      	adds	r1, r4, r0
 800542c:	428b      	cmp	r3, r1
 800542e:	bf01      	itttt	eq
 8005430:	6819      	ldreq	r1, [r3, #0]
 8005432:	685b      	ldreq	r3, [r3, #4]
 8005434:	1809      	addeq	r1, r1, r0
 8005436:	6021      	streq	r1, [r4, #0]
 8005438:	e7ed      	b.n	8005416 <_free_r+0x1e>
 800543a:	461a      	mov	r2, r3
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	b10b      	cbz	r3, 8005444 <_free_r+0x4c>
 8005440:	42a3      	cmp	r3, r4
 8005442:	d9fa      	bls.n	800543a <_free_r+0x42>
 8005444:	6811      	ldr	r1, [r2, #0]
 8005446:	1850      	adds	r0, r2, r1
 8005448:	42a0      	cmp	r0, r4
 800544a:	d10b      	bne.n	8005464 <_free_r+0x6c>
 800544c:	6820      	ldr	r0, [r4, #0]
 800544e:	4401      	add	r1, r0
 8005450:	1850      	adds	r0, r2, r1
 8005452:	4283      	cmp	r3, r0
 8005454:	6011      	str	r1, [r2, #0]
 8005456:	d1e0      	bne.n	800541a <_free_r+0x22>
 8005458:	6818      	ldr	r0, [r3, #0]
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	4408      	add	r0, r1
 800545e:	6010      	str	r0, [r2, #0]
 8005460:	6053      	str	r3, [r2, #4]
 8005462:	e7da      	b.n	800541a <_free_r+0x22>
 8005464:	d902      	bls.n	800546c <_free_r+0x74>
 8005466:	230c      	movs	r3, #12
 8005468:	602b      	str	r3, [r5, #0]
 800546a:	e7d6      	b.n	800541a <_free_r+0x22>
 800546c:	6820      	ldr	r0, [r4, #0]
 800546e:	1821      	adds	r1, r4, r0
 8005470:	428b      	cmp	r3, r1
 8005472:	bf01      	itttt	eq
 8005474:	6819      	ldreq	r1, [r3, #0]
 8005476:	685b      	ldreq	r3, [r3, #4]
 8005478:	1809      	addeq	r1, r1, r0
 800547a:	6021      	streq	r1, [r4, #0]
 800547c:	6063      	str	r3, [r4, #4]
 800547e:	6054      	str	r4, [r2, #4]
 8005480:	e7cb      	b.n	800541a <_free_r+0x22>
 8005482:	bd38      	pop	{r3, r4, r5, pc}
 8005484:	20000de4 	.word	0x20000de4

08005488 <sbrk_aligned>:
 8005488:	b570      	push	{r4, r5, r6, lr}
 800548a:	4e0f      	ldr	r6, [pc, #60]	@ (80054c8 <sbrk_aligned+0x40>)
 800548c:	460c      	mov	r4, r1
 800548e:	6831      	ldr	r1, [r6, #0]
 8005490:	4605      	mov	r5, r0
 8005492:	b911      	cbnz	r1, 800549a <sbrk_aligned+0x12>
 8005494:	f000 fbaa 	bl	8005bec <_sbrk_r>
 8005498:	6030      	str	r0, [r6, #0]
 800549a:	4621      	mov	r1, r4
 800549c:	4628      	mov	r0, r5
 800549e:	f000 fba5 	bl	8005bec <_sbrk_r>
 80054a2:	1c43      	adds	r3, r0, #1
 80054a4:	d103      	bne.n	80054ae <sbrk_aligned+0x26>
 80054a6:	f04f 34ff 	mov.w	r4, #4294967295
 80054aa:	4620      	mov	r0, r4
 80054ac:	bd70      	pop	{r4, r5, r6, pc}
 80054ae:	1cc4      	adds	r4, r0, #3
 80054b0:	f024 0403 	bic.w	r4, r4, #3
 80054b4:	42a0      	cmp	r0, r4
 80054b6:	d0f8      	beq.n	80054aa <sbrk_aligned+0x22>
 80054b8:	1a21      	subs	r1, r4, r0
 80054ba:	4628      	mov	r0, r5
 80054bc:	f000 fb96 	bl	8005bec <_sbrk_r>
 80054c0:	3001      	adds	r0, #1
 80054c2:	d1f2      	bne.n	80054aa <sbrk_aligned+0x22>
 80054c4:	e7ef      	b.n	80054a6 <sbrk_aligned+0x1e>
 80054c6:	bf00      	nop
 80054c8:	20000de0 	.word	0x20000de0

080054cc <_malloc_r>:
 80054cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80054d0:	1ccd      	adds	r5, r1, #3
 80054d2:	f025 0503 	bic.w	r5, r5, #3
 80054d6:	3508      	adds	r5, #8
 80054d8:	2d0c      	cmp	r5, #12
 80054da:	bf38      	it	cc
 80054dc:	250c      	movcc	r5, #12
 80054de:	2d00      	cmp	r5, #0
 80054e0:	4606      	mov	r6, r0
 80054e2:	db01      	blt.n	80054e8 <_malloc_r+0x1c>
 80054e4:	42a9      	cmp	r1, r5
 80054e6:	d904      	bls.n	80054f2 <_malloc_r+0x26>
 80054e8:	230c      	movs	r3, #12
 80054ea:	6033      	str	r3, [r6, #0]
 80054ec:	2000      	movs	r0, #0
 80054ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80054f2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80055c8 <_malloc_r+0xfc>
 80054f6:	f000 f869 	bl	80055cc <__malloc_lock>
 80054fa:	f8d8 3000 	ldr.w	r3, [r8]
 80054fe:	461c      	mov	r4, r3
 8005500:	bb44      	cbnz	r4, 8005554 <_malloc_r+0x88>
 8005502:	4629      	mov	r1, r5
 8005504:	4630      	mov	r0, r6
 8005506:	f7ff ffbf 	bl	8005488 <sbrk_aligned>
 800550a:	1c43      	adds	r3, r0, #1
 800550c:	4604      	mov	r4, r0
 800550e:	d158      	bne.n	80055c2 <_malloc_r+0xf6>
 8005510:	f8d8 4000 	ldr.w	r4, [r8]
 8005514:	4627      	mov	r7, r4
 8005516:	2f00      	cmp	r7, #0
 8005518:	d143      	bne.n	80055a2 <_malloc_r+0xd6>
 800551a:	2c00      	cmp	r4, #0
 800551c:	d04b      	beq.n	80055b6 <_malloc_r+0xea>
 800551e:	6823      	ldr	r3, [r4, #0]
 8005520:	4639      	mov	r1, r7
 8005522:	4630      	mov	r0, r6
 8005524:	eb04 0903 	add.w	r9, r4, r3
 8005528:	f000 fb60 	bl	8005bec <_sbrk_r>
 800552c:	4581      	cmp	r9, r0
 800552e:	d142      	bne.n	80055b6 <_malloc_r+0xea>
 8005530:	6821      	ldr	r1, [r4, #0]
 8005532:	4630      	mov	r0, r6
 8005534:	1a6d      	subs	r5, r5, r1
 8005536:	4629      	mov	r1, r5
 8005538:	f7ff ffa6 	bl	8005488 <sbrk_aligned>
 800553c:	3001      	adds	r0, #1
 800553e:	d03a      	beq.n	80055b6 <_malloc_r+0xea>
 8005540:	6823      	ldr	r3, [r4, #0]
 8005542:	442b      	add	r3, r5
 8005544:	6023      	str	r3, [r4, #0]
 8005546:	f8d8 3000 	ldr.w	r3, [r8]
 800554a:	685a      	ldr	r2, [r3, #4]
 800554c:	bb62      	cbnz	r2, 80055a8 <_malloc_r+0xdc>
 800554e:	f8c8 7000 	str.w	r7, [r8]
 8005552:	e00f      	b.n	8005574 <_malloc_r+0xa8>
 8005554:	6822      	ldr	r2, [r4, #0]
 8005556:	1b52      	subs	r2, r2, r5
 8005558:	d420      	bmi.n	800559c <_malloc_r+0xd0>
 800555a:	2a0b      	cmp	r2, #11
 800555c:	d917      	bls.n	800558e <_malloc_r+0xc2>
 800555e:	1961      	adds	r1, r4, r5
 8005560:	42a3      	cmp	r3, r4
 8005562:	6025      	str	r5, [r4, #0]
 8005564:	bf18      	it	ne
 8005566:	6059      	strne	r1, [r3, #4]
 8005568:	6863      	ldr	r3, [r4, #4]
 800556a:	bf08      	it	eq
 800556c:	f8c8 1000 	streq.w	r1, [r8]
 8005570:	5162      	str	r2, [r4, r5]
 8005572:	604b      	str	r3, [r1, #4]
 8005574:	4630      	mov	r0, r6
 8005576:	f000 f82f 	bl	80055d8 <__malloc_unlock>
 800557a:	f104 000b 	add.w	r0, r4, #11
 800557e:	1d23      	adds	r3, r4, #4
 8005580:	f020 0007 	bic.w	r0, r0, #7
 8005584:	1ac2      	subs	r2, r0, r3
 8005586:	bf1c      	itt	ne
 8005588:	1a1b      	subne	r3, r3, r0
 800558a:	50a3      	strne	r3, [r4, r2]
 800558c:	e7af      	b.n	80054ee <_malloc_r+0x22>
 800558e:	6862      	ldr	r2, [r4, #4]
 8005590:	42a3      	cmp	r3, r4
 8005592:	bf0c      	ite	eq
 8005594:	f8c8 2000 	streq.w	r2, [r8]
 8005598:	605a      	strne	r2, [r3, #4]
 800559a:	e7eb      	b.n	8005574 <_malloc_r+0xa8>
 800559c:	4623      	mov	r3, r4
 800559e:	6864      	ldr	r4, [r4, #4]
 80055a0:	e7ae      	b.n	8005500 <_malloc_r+0x34>
 80055a2:	463c      	mov	r4, r7
 80055a4:	687f      	ldr	r7, [r7, #4]
 80055a6:	e7b6      	b.n	8005516 <_malloc_r+0x4a>
 80055a8:	461a      	mov	r2, r3
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	42a3      	cmp	r3, r4
 80055ae:	d1fb      	bne.n	80055a8 <_malloc_r+0xdc>
 80055b0:	2300      	movs	r3, #0
 80055b2:	6053      	str	r3, [r2, #4]
 80055b4:	e7de      	b.n	8005574 <_malloc_r+0xa8>
 80055b6:	230c      	movs	r3, #12
 80055b8:	4630      	mov	r0, r6
 80055ba:	6033      	str	r3, [r6, #0]
 80055bc:	f000 f80c 	bl	80055d8 <__malloc_unlock>
 80055c0:	e794      	b.n	80054ec <_malloc_r+0x20>
 80055c2:	6005      	str	r5, [r0, #0]
 80055c4:	e7d6      	b.n	8005574 <_malloc_r+0xa8>
 80055c6:	bf00      	nop
 80055c8:	20000de4 	.word	0x20000de4

080055cc <__malloc_lock>:
 80055cc:	4801      	ldr	r0, [pc, #4]	@ (80055d4 <__malloc_lock+0x8>)
 80055ce:	f7ff bf03 	b.w	80053d8 <__retarget_lock_acquire_recursive>
 80055d2:	bf00      	nop
 80055d4:	20000ddc 	.word	0x20000ddc

080055d8 <__malloc_unlock>:
 80055d8:	4801      	ldr	r0, [pc, #4]	@ (80055e0 <__malloc_unlock+0x8>)
 80055da:	f7ff befe 	b.w	80053da <__retarget_lock_release_recursive>
 80055de:	bf00      	nop
 80055e0:	20000ddc 	.word	0x20000ddc

080055e4 <__ssputs_r>:
 80055e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055e8:	461f      	mov	r7, r3
 80055ea:	688e      	ldr	r6, [r1, #8]
 80055ec:	4682      	mov	sl, r0
 80055ee:	42be      	cmp	r6, r7
 80055f0:	460c      	mov	r4, r1
 80055f2:	4690      	mov	r8, r2
 80055f4:	680b      	ldr	r3, [r1, #0]
 80055f6:	d82d      	bhi.n	8005654 <__ssputs_r+0x70>
 80055f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80055fc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005600:	d026      	beq.n	8005650 <__ssputs_r+0x6c>
 8005602:	6965      	ldr	r5, [r4, #20]
 8005604:	6909      	ldr	r1, [r1, #16]
 8005606:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800560a:	eba3 0901 	sub.w	r9, r3, r1
 800560e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005612:	1c7b      	adds	r3, r7, #1
 8005614:	444b      	add	r3, r9
 8005616:	106d      	asrs	r5, r5, #1
 8005618:	429d      	cmp	r5, r3
 800561a:	bf38      	it	cc
 800561c:	461d      	movcc	r5, r3
 800561e:	0553      	lsls	r3, r2, #21
 8005620:	d527      	bpl.n	8005672 <__ssputs_r+0x8e>
 8005622:	4629      	mov	r1, r5
 8005624:	f7ff ff52 	bl	80054cc <_malloc_r>
 8005628:	4606      	mov	r6, r0
 800562a:	b360      	cbz	r0, 8005686 <__ssputs_r+0xa2>
 800562c:	464a      	mov	r2, r9
 800562e:	6921      	ldr	r1, [r4, #16]
 8005630:	f7ff fed4 	bl	80053dc <memcpy>
 8005634:	89a3      	ldrh	r3, [r4, #12]
 8005636:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800563a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800563e:	81a3      	strh	r3, [r4, #12]
 8005640:	6126      	str	r6, [r4, #16]
 8005642:	444e      	add	r6, r9
 8005644:	6026      	str	r6, [r4, #0]
 8005646:	463e      	mov	r6, r7
 8005648:	6165      	str	r5, [r4, #20]
 800564a:	eba5 0509 	sub.w	r5, r5, r9
 800564e:	60a5      	str	r5, [r4, #8]
 8005650:	42be      	cmp	r6, r7
 8005652:	d900      	bls.n	8005656 <__ssputs_r+0x72>
 8005654:	463e      	mov	r6, r7
 8005656:	4632      	mov	r2, r6
 8005658:	4641      	mov	r1, r8
 800565a:	6820      	ldr	r0, [r4, #0]
 800565c:	f000 faac 	bl	8005bb8 <memmove>
 8005660:	2000      	movs	r0, #0
 8005662:	68a3      	ldr	r3, [r4, #8]
 8005664:	1b9b      	subs	r3, r3, r6
 8005666:	60a3      	str	r3, [r4, #8]
 8005668:	6823      	ldr	r3, [r4, #0]
 800566a:	4433      	add	r3, r6
 800566c:	6023      	str	r3, [r4, #0]
 800566e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005672:	462a      	mov	r2, r5
 8005674:	f000 fad8 	bl	8005c28 <_realloc_r>
 8005678:	4606      	mov	r6, r0
 800567a:	2800      	cmp	r0, #0
 800567c:	d1e0      	bne.n	8005640 <__ssputs_r+0x5c>
 800567e:	4650      	mov	r0, sl
 8005680:	6921      	ldr	r1, [r4, #16]
 8005682:	f7ff feb9 	bl	80053f8 <_free_r>
 8005686:	230c      	movs	r3, #12
 8005688:	f8ca 3000 	str.w	r3, [sl]
 800568c:	89a3      	ldrh	r3, [r4, #12]
 800568e:	f04f 30ff 	mov.w	r0, #4294967295
 8005692:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005696:	81a3      	strh	r3, [r4, #12]
 8005698:	e7e9      	b.n	800566e <__ssputs_r+0x8a>
	...

0800569c <_svfiprintf_r>:
 800569c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056a0:	4698      	mov	r8, r3
 80056a2:	898b      	ldrh	r3, [r1, #12]
 80056a4:	4607      	mov	r7, r0
 80056a6:	061b      	lsls	r3, r3, #24
 80056a8:	460d      	mov	r5, r1
 80056aa:	4614      	mov	r4, r2
 80056ac:	b09d      	sub	sp, #116	@ 0x74
 80056ae:	d510      	bpl.n	80056d2 <_svfiprintf_r+0x36>
 80056b0:	690b      	ldr	r3, [r1, #16]
 80056b2:	b973      	cbnz	r3, 80056d2 <_svfiprintf_r+0x36>
 80056b4:	2140      	movs	r1, #64	@ 0x40
 80056b6:	f7ff ff09 	bl	80054cc <_malloc_r>
 80056ba:	6028      	str	r0, [r5, #0]
 80056bc:	6128      	str	r0, [r5, #16]
 80056be:	b930      	cbnz	r0, 80056ce <_svfiprintf_r+0x32>
 80056c0:	230c      	movs	r3, #12
 80056c2:	603b      	str	r3, [r7, #0]
 80056c4:	f04f 30ff 	mov.w	r0, #4294967295
 80056c8:	b01d      	add	sp, #116	@ 0x74
 80056ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056ce:	2340      	movs	r3, #64	@ 0x40
 80056d0:	616b      	str	r3, [r5, #20]
 80056d2:	2300      	movs	r3, #0
 80056d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80056d6:	2320      	movs	r3, #32
 80056d8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80056dc:	2330      	movs	r3, #48	@ 0x30
 80056de:	f04f 0901 	mov.w	r9, #1
 80056e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80056e6:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8005880 <_svfiprintf_r+0x1e4>
 80056ea:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80056ee:	4623      	mov	r3, r4
 80056f0:	469a      	mov	sl, r3
 80056f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80056f6:	b10a      	cbz	r2, 80056fc <_svfiprintf_r+0x60>
 80056f8:	2a25      	cmp	r2, #37	@ 0x25
 80056fa:	d1f9      	bne.n	80056f0 <_svfiprintf_r+0x54>
 80056fc:	ebba 0b04 	subs.w	fp, sl, r4
 8005700:	d00b      	beq.n	800571a <_svfiprintf_r+0x7e>
 8005702:	465b      	mov	r3, fp
 8005704:	4622      	mov	r2, r4
 8005706:	4629      	mov	r1, r5
 8005708:	4638      	mov	r0, r7
 800570a:	f7ff ff6b 	bl	80055e4 <__ssputs_r>
 800570e:	3001      	adds	r0, #1
 8005710:	f000 80a7 	beq.w	8005862 <_svfiprintf_r+0x1c6>
 8005714:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005716:	445a      	add	r2, fp
 8005718:	9209      	str	r2, [sp, #36]	@ 0x24
 800571a:	f89a 3000 	ldrb.w	r3, [sl]
 800571e:	2b00      	cmp	r3, #0
 8005720:	f000 809f 	beq.w	8005862 <_svfiprintf_r+0x1c6>
 8005724:	2300      	movs	r3, #0
 8005726:	f04f 32ff 	mov.w	r2, #4294967295
 800572a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800572e:	f10a 0a01 	add.w	sl, sl, #1
 8005732:	9304      	str	r3, [sp, #16]
 8005734:	9307      	str	r3, [sp, #28]
 8005736:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800573a:	931a      	str	r3, [sp, #104]	@ 0x68
 800573c:	4654      	mov	r4, sl
 800573e:	2205      	movs	r2, #5
 8005740:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005744:	484e      	ldr	r0, [pc, #312]	@ (8005880 <_svfiprintf_r+0x1e4>)
 8005746:	f000 fa61 	bl	8005c0c <memchr>
 800574a:	9a04      	ldr	r2, [sp, #16]
 800574c:	b9d8      	cbnz	r0, 8005786 <_svfiprintf_r+0xea>
 800574e:	06d0      	lsls	r0, r2, #27
 8005750:	bf44      	itt	mi
 8005752:	2320      	movmi	r3, #32
 8005754:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005758:	0711      	lsls	r1, r2, #28
 800575a:	bf44      	itt	mi
 800575c:	232b      	movmi	r3, #43	@ 0x2b
 800575e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005762:	f89a 3000 	ldrb.w	r3, [sl]
 8005766:	2b2a      	cmp	r3, #42	@ 0x2a
 8005768:	d015      	beq.n	8005796 <_svfiprintf_r+0xfa>
 800576a:	4654      	mov	r4, sl
 800576c:	2000      	movs	r0, #0
 800576e:	f04f 0c0a 	mov.w	ip, #10
 8005772:	9a07      	ldr	r2, [sp, #28]
 8005774:	4621      	mov	r1, r4
 8005776:	f811 3b01 	ldrb.w	r3, [r1], #1
 800577a:	3b30      	subs	r3, #48	@ 0x30
 800577c:	2b09      	cmp	r3, #9
 800577e:	d94b      	bls.n	8005818 <_svfiprintf_r+0x17c>
 8005780:	b1b0      	cbz	r0, 80057b0 <_svfiprintf_r+0x114>
 8005782:	9207      	str	r2, [sp, #28]
 8005784:	e014      	b.n	80057b0 <_svfiprintf_r+0x114>
 8005786:	eba0 0308 	sub.w	r3, r0, r8
 800578a:	fa09 f303 	lsl.w	r3, r9, r3
 800578e:	4313      	orrs	r3, r2
 8005790:	46a2      	mov	sl, r4
 8005792:	9304      	str	r3, [sp, #16]
 8005794:	e7d2      	b.n	800573c <_svfiprintf_r+0xa0>
 8005796:	9b03      	ldr	r3, [sp, #12]
 8005798:	1d19      	adds	r1, r3, #4
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	9103      	str	r1, [sp, #12]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	bfbb      	ittet	lt
 80057a2:	425b      	neglt	r3, r3
 80057a4:	f042 0202 	orrlt.w	r2, r2, #2
 80057a8:	9307      	strge	r3, [sp, #28]
 80057aa:	9307      	strlt	r3, [sp, #28]
 80057ac:	bfb8      	it	lt
 80057ae:	9204      	strlt	r2, [sp, #16]
 80057b0:	7823      	ldrb	r3, [r4, #0]
 80057b2:	2b2e      	cmp	r3, #46	@ 0x2e
 80057b4:	d10a      	bne.n	80057cc <_svfiprintf_r+0x130>
 80057b6:	7863      	ldrb	r3, [r4, #1]
 80057b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80057ba:	d132      	bne.n	8005822 <_svfiprintf_r+0x186>
 80057bc:	9b03      	ldr	r3, [sp, #12]
 80057be:	3402      	adds	r4, #2
 80057c0:	1d1a      	adds	r2, r3, #4
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	9203      	str	r2, [sp, #12]
 80057c6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80057ca:	9305      	str	r3, [sp, #20]
 80057cc:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8005884 <_svfiprintf_r+0x1e8>
 80057d0:	2203      	movs	r2, #3
 80057d2:	4650      	mov	r0, sl
 80057d4:	7821      	ldrb	r1, [r4, #0]
 80057d6:	f000 fa19 	bl	8005c0c <memchr>
 80057da:	b138      	cbz	r0, 80057ec <_svfiprintf_r+0x150>
 80057dc:	2240      	movs	r2, #64	@ 0x40
 80057de:	9b04      	ldr	r3, [sp, #16]
 80057e0:	eba0 000a 	sub.w	r0, r0, sl
 80057e4:	4082      	lsls	r2, r0
 80057e6:	4313      	orrs	r3, r2
 80057e8:	3401      	adds	r4, #1
 80057ea:	9304      	str	r3, [sp, #16]
 80057ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057f0:	2206      	movs	r2, #6
 80057f2:	4825      	ldr	r0, [pc, #148]	@ (8005888 <_svfiprintf_r+0x1ec>)
 80057f4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80057f8:	f000 fa08 	bl	8005c0c <memchr>
 80057fc:	2800      	cmp	r0, #0
 80057fe:	d036      	beq.n	800586e <_svfiprintf_r+0x1d2>
 8005800:	4b22      	ldr	r3, [pc, #136]	@ (800588c <_svfiprintf_r+0x1f0>)
 8005802:	bb1b      	cbnz	r3, 800584c <_svfiprintf_r+0x1b0>
 8005804:	9b03      	ldr	r3, [sp, #12]
 8005806:	3307      	adds	r3, #7
 8005808:	f023 0307 	bic.w	r3, r3, #7
 800580c:	3308      	adds	r3, #8
 800580e:	9303      	str	r3, [sp, #12]
 8005810:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005812:	4433      	add	r3, r6
 8005814:	9309      	str	r3, [sp, #36]	@ 0x24
 8005816:	e76a      	b.n	80056ee <_svfiprintf_r+0x52>
 8005818:	460c      	mov	r4, r1
 800581a:	2001      	movs	r0, #1
 800581c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005820:	e7a8      	b.n	8005774 <_svfiprintf_r+0xd8>
 8005822:	2300      	movs	r3, #0
 8005824:	f04f 0c0a 	mov.w	ip, #10
 8005828:	4619      	mov	r1, r3
 800582a:	3401      	adds	r4, #1
 800582c:	9305      	str	r3, [sp, #20]
 800582e:	4620      	mov	r0, r4
 8005830:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005834:	3a30      	subs	r2, #48	@ 0x30
 8005836:	2a09      	cmp	r2, #9
 8005838:	d903      	bls.n	8005842 <_svfiprintf_r+0x1a6>
 800583a:	2b00      	cmp	r3, #0
 800583c:	d0c6      	beq.n	80057cc <_svfiprintf_r+0x130>
 800583e:	9105      	str	r1, [sp, #20]
 8005840:	e7c4      	b.n	80057cc <_svfiprintf_r+0x130>
 8005842:	4604      	mov	r4, r0
 8005844:	2301      	movs	r3, #1
 8005846:	fb0c 2101 	mla	r1, ip, r1, r2
 800584a:	e7f0      	b.n	800582e <_svfiprintf_r+0x192>
 800584c:	ab03      	add	r3, sp, #12
 800584e:	9300      	str	r3, [sp, #0]
 8005850:	462a      	mov	r2, r5
 8005852:	4638      	mov	r0, r7
 8005854:	4b0e      	ldr	r3, [pc, #56]	@ (8005890 <_svfiprintf_r+0x1f4>)
 8005856:	a904      	add	r1, sp, #16
 8005858:	f3af 8000 	nop.w
 800585c:	1c42      	adds	r2, r0, #1
 800585e:	4606      	mov	r6, r0
 8005860:	d1d6      	bne.n	8005810 <_svfiprintf_r+0x174>
 8005862:	89ab      	ldrh	r3, [r5, #12]
 8005864:	065b      	lsls	r3, r3, #25
 8005866:	f53f af2d 	bmi.w	80056c4 <_svfiprintf_r+0x28>
 800586a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800586c:	e72c      	b.n	80056c8 <_svfiprintf_r+0x2c>
 800586e:	ab03      	add	r3, sp, #12
 8005870:	9300      	str	r3, [sp, #0]
 8005872:	462a      	mov	r2, r5
 8005874:	4638      	mov	r0, r7
 8005876:	4b06      	ldr	r3, [pc, #24]	@ (8005890 <_svfiprintf_r+0x1f4>)
 8005878:	a904      	add	r1, sp, #16
 800587a:	f000 f87d 	bl	8005978 <_printf_i>
 800587e:	e7ed      	b.n	800585c <_svfiprintf_r+0x1c0>
 8005880:	0800613a 	.word	0x0800613a
 8005884:	08006140 	.word	0x08006140
 8005888:	08006144 	.word	0x08006144
 800588c:	00000000 	.word	0x00000000
 8005890:	080055e5 	.word	0x080055e5

08005894 <_printf_common>:
 8005894:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005898:	4616      	mov	r6, r2
 800589a:	4698      	mov	r8, r3
 800589c:	688a      	ldr	r2, [r1, #8]
 800589e:	690b      	ldr	r3, [r1, #16]
 80058a0:	4607      	mov	r7, r0
 80058a2:	4293      	cmp	r3, r2
 80058a4:	bfb8      	it	lt
 80058a6:	4613      	movlt	r3, r2
 80058a8:	6033      	str	r3, [r6, #0]
 80058aa:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80058ae:	460c      	mov	r4, r1
 80058b0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80058b4:	b10a      	cbz	r2, 80058ba <_printf_common+0x26>
 80058b6:	3301      	adds	r3, #1
 80058b8:	6033      	str	r3, [r6, #0]
 80058ba:	6823      	ldr	r3, [r4, #0]
 80058bc:	0699      	lsls	r1, r3, #26
 80058be:	bf42      	ittt	mi
 80058c0:	6833      	ldrmi	r3, [r6, #0]
 80058c2:	3302      	addmi	r3, #2
 80058c4:	6033      	strmi	r3, [r6, #0]
 80058c6:	6825      	ldr	r5, [r4, #0]
 80058c8:	f015 0506 	ands.w	r5, r5, #6
 80058cc:	d106      	bne.n	80058dc <_printf_common+0x48>
 80058ce:	f104 0a19 	add.w	sl, r4, #25
 80058d2:	68e3      	ldr	r3, [r4, #12]
 80058d4:	6832      	ldr	r2, [r6, #0]
 80058d6:	1a9b      	subs	r3, r3, r2
 80058d8:	42ab      	cmp	r3, r5
 80058da:	dc2b      	bgt.n	8005934 <_printf_common+0xa0>
 80058dc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80058e0:	6822      	ldr	r2, [r4, #0]
 80058e2:	3b00      	subs	r3, #0
 80058e4:	bf18      	it	ne
 80058e6:	2301      	movne	r3, #1
 80058e8:	0692      	lsls	r2, r2, #26
 80058ea:	d430      	bmi.n	800594e <_printf_common+0xba>
 80058ec:	4641      	mov	r1, r8
 80058ee:	4638      	mov	r0, r7
 80058f0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80058f4:	47c8      	blx	r9
 80058f6:	3001      	adds	r0, #1
 80058f8:	d023      	beq.n	8005942 <_printf_common+0xae>
 80058fa:	6823      	ldr	r3, [r4, #0]
 80058fc:	6922      	ldr	r2, [r4, #16]
 80058fe:	f003 0306 	and.w	r3, r3, #6
 8005902:	2b04      	cmp	r3, #4
 8005904:	bf14      	ite	ne
 8005906:	2500      	movne	r5, #0
 8005908:	6833      	ldreq	r3, [r6, #0]
 800590a:	f04f 0600 	mov.w	r6, #0
 800590e:	bf08      	it	eq
 8005910:	68e5      	ldreq	r5, [r4, #12]
 8005912:	f104 041a 	add.w	r4, r4, #26
 8005916:	bf08      	it	eq
 8005918:	1aed      	subeq	r5, r5, r3
 800591a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800591e:	bf08      	it	eq
 8005920:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005924:	4293      	cmp	r3, r2
 8005926:	bfc4      	itt	gt
 8005928:	1a9b      	subgt	r3, r3, r2
 800592a:	18ed      	addgt	r5, r5, r3
 800592c:	42b5      	cmp	r5, r6
 800592e:	d11a      	bne.n	8005966 <_printf_common+0xd2>
 8005930:	2000      	movs	r0, #0
 8005932:	e008      	b.n	8005946 <_printf_common+0xb2>
 8005934:	2301      	movs	r3, #1
 8005936:	4652      	mov	r2, sl
 8005938:	4641      	mov	r1, r8
 800593a:	4638      	mov	r0, r7
 800593c:	47c8      	blx	r9
 800593e:	3001      	adds	r0, #1
 8005940:	d103      	bne.n	800594a <_printf_common+0xb6>
 8005942:	f04f 30ff 	mov.w	r0, #4294967295
 8005946:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800594a:	3501      	adds	r5, #1
 800594c:	e7c1      	b.n	80058d2 <_printf_common+0x3e>
 800594e:	2030      	movs	r0, #48	@ 0x30
 8005950:	18e1      	adds	r1, r4, r3
 8005952:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005956:	1c5a      	adds	r2, r3, #1
 8005958:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800595c:	4422      	add	r2, r4
 800595e:	3302      	adds	r3, #2
 8005960:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005964:	e7c2      	b.n	80058ec <_printf_common+0x58>
 8005966:	2301      	movs	r3, #1
 8005968:	4622      	mov	r2, r4
 800596a:	4641      	mov	r1, r8
 800596c:	4638      	mov	r0, r7
 800596e:	47c8      	blx	r9
 8005970:	3001      	adds	r0, #1
 8005972:	d0e6      	beq.n	8005942 <_printf_common+0xae>
 8005974:	3601      	adds	r6, #1
 8005976:	e7d9      	b.n	800592c <_printf_common+0x98>

08005978 <_printf_i>:
 8005978:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800597c:	7e0f      	ldrb	r7, [r1, #24]
 800597e:	4691      	mov	r9, r2
 8005980:	2f78      	cmp	r7, #120	@ 0x78
 8005982:	4680      	mov	r8, r0
 8005984:	460c      	mov	r4, r1
 8005986:	469a      	mov	sl, r3
 8005988:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800598a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800598e:	d807      	bhi.n	80059a0 <_printf_i+0x28>
 8005990:	2f62      	cmp	r7, #98	@ 0x62
 8005992:	d80a      	bhi.n	80059aa <_printf_i+0x32>
 8005994:	2f00      	cmp	r7, #0
 8005996:	f000 80d3 	beq.w	8005b40 <_printf_i+0x1c8>
 800599a:	2f58      	cmp	r7, #88	@ 0x58
 800599c:	f000 80ba 	beq.w	8005b14 <_printf_i+0x19c>
 80059a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80059a4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80059a8:	e03a      	b.n	8005a20 <_printf_i+0xa8>
 80059aa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80059ae:	2b15      	cmp	r3, #21
 80059b0:	d8f6      	bhi.n	80059a0 <_printf_i+0x28>
 80059b2:	a101      	add	r1, pc, #4	@ (adr r1, 80059b8 <_printf_i+0x40>)
 80059b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80059b8:	08005a11 	.word	0x08005a11
 80059bc:	08005a25 	.word	0x08005a25
 80059c0:	080059a1 	.word	0x080059a1
 80059c4:	080059a1 	.word	0x080059a1
 80059c8:	080059a1 	.word	0x080059a1
 80059cc:	080059a1 	.word	0x080059a1
 80059d0:	08005a25 	.word	0x08005a25
 80059d4:	080059a1 	.word	0x080059a1
 80059d8:	080059a1 	.word	0x080059a1
 80059dc:	080059a1 	.word	0x080059a1
 80059e0:	080059a1 	.word	0x080059a1
 80059e4:	08005b27 	.word	0x08005b27
 80059e8:	08005a4f 	.word	0x08005a4f
 80059ec:	08005ae1 	.word	0x08005ae1
 80059f0:	080059a1 	.word	0x080059a1
 80059f4:	080059a1 	.word	0x080059a1
 80059f8:	08005b49 	.word	0x08005b49
 80059fc:	080059a1 	.word	0x080059a1
 8005a00:	08005a4f 	.word	0x08005a4f
 8005a04:	080059a1 	.word	0x080059a1
 8005a08:	080059a1 	.word	0x080059a1
 8005a0c:	08005ae9 	.word	0x08005ae9
 8005a10:	6833      	ldr	r3, [r6, #0]
 8005a12:	1d1a      	adds	r2, r3, #4
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	6032      	str	r2, [r6, #0]
 8005a18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005a1c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005a20:	2301      	movs	r3, #1
 8005a22:	e09e      	b.n	8005b62 <_printf_i+0x1ea>
 8005a24:	6833      	ldr	r3, [r6, #0]
 8005a26:	6820      	ldr	r0, [r4, #0]
 8005a28:	1d19      	adds	r1, r3, #4
 8005a2a:	6031      	str	r1, [r6, #0]
 8005a2c:	0606      	lsls	r6, r0, #24
 8005a2e:	d501      	bpl.n	8005a34 <_printf_i+0xbc>
 8005a30:	681d      	ldr	r5, [r3, #0]
 8005a32:	e003      	b.n	8005a3c <_printf_i+0xc4>
 8005a34:	0645      	lsls	r5, r0, #25
 8005a36:	d5fb      	bpl.n	8005a30 <_printf_i+0xb8>
 8005a38:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005a3c:	2d00      	cmp	r5, #0
 8005a3e:	da03      	bge.n	8005a48 <_printf_i+0xd0>
 8005a40:	232d      	movs	r3, #45	@ 0x2d
 8005a42:	426d      	negs	r5, r5
 8005a44:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005a48:	230a      	movs	r3, #10
 8005a4a:	4859      	ldr	r0, [pc, #356]	@ (8005bb0 <_printf_i+0x238>)
 8005a4c:	e011      	b.n	8005a72 <_printf_i+0xfa>
 8005a4e:	6821      	ldr	r1, [r4, #0]
 8005a50:	6833      	ldr	r3, [r6, #0]
 8005a52:	0608      	lsls	r0, r1, #24
 8005a54:	f853 5b04 	ldr.w	r5, [r3], #4
 8005a58:	d402      	bmi.n	8005a60 <_printf_i+0xe8>
 8005a5a:	0649      	lsls	r1, r1, #25
 8005a5c:	bf48      	it	mi
 8005a5e:	b2ad      	uxthmi	r5, r5
 8005a60:	2f6f      	cmp	r7, #111	@ 0x6f
 8005a62:	6033      	str	r3, [r6, #0]
 8005a64:	bf14      	ite	ne
 8005a66:	230a      	movne	r3, #10
 8005a68:	2308      	moveq	r3, #8
 8005a6a:	4851      	ldr	r0, [pc, #324]	@ (8005bb0 <_printf_i+0x238>)
 8005a6c:	2100      	movs	r1, #0
 8005a6e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005a72:	6866      	ldr	r6, [r4, #4]
 8005a74:	2e00      	cmp	r6, #0
 8005a76:	bfa8      	it	ge
 8005a78:	6821      	ldrge	r1, [r4, #0]
 8005a7a:	60a6      	str	r6, [r4, #8]
 8005a7c:	bfa4      	itt	ge
 8005a7e:	f021 0104 	bicge.w	r1, r1, #4
 8005a82:	6021      	strge	r1, [r4, #0]
 8005a84:	b90d      	cbnz	r5, 8005a8a <_printf_i+0x112>
 8005a86:	2e00      	cmp	r6, #0
 8005a88:	d04b      	beq.n	8005b22 <_printf_i+0x1aa>
 8005a8a:	4616      	mov	r6, r2
 8005a8c:	fbb5 f1f3 	udiv	r1, r5, r3
 8005a90:	fb03 5711 	mls	r7, r3, r1, r5
 8005a94:	5dc7      	ldrb	r7, [r0, r7]
 8005a96:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005a9a:	462f      	mov	r7, r5
 8005a9c:	42bb      	cmp	r3, r7
 8005a9e:	460d      	mov	r5, r1
 8005aa0:	d9f4      	bls.n	8005a8c <_printf_i+0x114>
 8005aa2:	2b08      	cmp	r3, #8
 8005aa4:	d10b      	bne.n	8005abe <_printf_i+0x146>
 8005aa6:	6823      	ldr	r3, [r4, #0]
 8005aa8:	07df      	lsls	r7, r3, #31
 8005aaa:	d508      	bpl.n	8005abe <_printf_i+0x146>
 8005aac:	6923      	ldr	r3, [r4, #16]
 8005aae:	6861      	ldr	r1, [r4, #4]
 8005ab0:	4299      	cmp	r1, r3
 8005ab2:	bfde      	ittt	le
 8005ab4:	2330      	movle	r3, #48	@ 0x30
 8005ab6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005aba:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005abe:	1b92      	subs	r2, r2, r6
 8005ac0:	6122      	str	r2, [r4, #16]
 8005ac2:	464b      	mov	r3, r9
 8005ac4:	4621      	mov	r1, r4
 8005ac6:	4640      	mov	r0, r8
 8005ac8:	f8cd a000 	str.w	sl, [sp]
 8005acc:	aa03      	add	r2, sp, #12
 8005ace:	f7ff fee1 	bl	8005894 <_printf_common>
 8005ad2:	3001      	adds	r0, #1
 8005ad4:	d14a      	bne.n	8005b6c <_printf_i+0x1f4>
 8005ad6:	f04f 30ff 	mov.w	r0, #4294967295
 8005ada:	b004      	add	sp, #16
 8005adc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ae0:	6823      	ldr	r3, [r4, #0]
 8005ae2:	f043 0320 	orr.w	r3, r3, #32
 8005ae6:	6023      	str	r3, [r4, #0]
 8005ae8:	2778      	movs	r7, #120	@ 0x78
 8005aea:	4832      	ldr	r0, [pc, #200]	@ (8005bb4 <_printf_i+0x23c>)
 8005aec:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005af0:	6823      	ldr	r3, [r4, #0]
 8005af2:	6831      	ldr	r1, [r6, #0]
 8005af4:	061f      	lsls	r7, r3, #24
 8005af6:	f851 5b04 	ldr.w	r5, [r1], #4
 8005afa:	d402      	bmi.n	8005b02 <_printf_i+0x18a>
 8005afc:	065f      	lsls	r7, r3, #25
 8005afe:	bf48      	it	mi
 8005b00:	b2ad      	uxthmi	r5, r5
 8005b02:	6031      	str	r1, [r6, #0]
 8005b04:	07d9      	lsls	r1, r3, #31
 8005b06:	bf44      	itt	mi
 8005b08:	f043 0320 	orrmi.w	r3, r3, #32
 8005b0c:	6023      	strmi	r3, [r4, #0]
 8005b0e:	b11d      	cbz	r5, 8005b18 <_printf_i+0x1a0>
 8005b10:	2310      	movs	r3, #16
 8005b12:	e7ab      	b.n	8005a6c <_printf_i+0xf4>
 8005b14:	4826      	ldr	r0, [pc, #152]	@ (8005bb0 <_printf_i+0x238>)
 8005b16:	e7e9      	b.n	8005aec <_printf_i+0x174>
 8005b18:	6823      	ldr	r3, [r4, #0]
 8005b1a:	f023 0320 	bic.w	r3, r3, #32
 8005b1e:	6023      	str	r3, [r4, #0]
 8005b20:	e7f6      	b.n	8005b10 <_printf_i+0x198>
 8005b22:	4616      	mov	r6, r2
 8005b24:	e7bd      	b.n	8005aa2 <_printf_i+0x12a>
 8005b26:	6833      	ldr	r3, [r6, #0]
 8005b28:	6825      	ldr	r5, [r4, #0]
 8005b2a:	1d18      	adds	r0, r3, #4
 8005b2c:	6961      	ldr	r1, [r4, #20]
 8005b2e:	6030      	str	r0, [r6, #0]
 8005b30:	062e      	lsls	r6, r5, #24
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	d501      	bpl.n	8005b3a <_printf_i+0x1c2>
 8005b36:	6019      	str	r1, [r3, #0]
 8005b38:	e002      	b.n	8005b40 <_printf_i+0x1c8>
 8005b3a:	0668      	lsls	r0, r5, #25
 8005b3c:	d5fb      	bpl.n	8005b36 <_printf_i+0x1be>
 8005b3e:	8019      	strh	r1, [r3, #0]
 8005b40:	2300      	movs	r3, #0
 8005b42:	4616      	mov	r6, r2
 8005b44:	6123      	str	r3, [r4, #16]
 8005b46:	e7bc      	b.n	8005ac2 <_printf_i+0x14a>
 8005b48:	6833      	ldr	r3, [r6, #0]
 8005b4a:	2100      	movs	r1, #0
 8005b4c:	1d1a      	adds	r2, r3, #4
 8005b4e:	6032      	str	r2, [r6, #0]
 8005b50:	681e      	ldr	r6, [r3, #0]
 8005b52:	6862      	ldr	r2, [r4, #4]
 8005b54:	4630      	mov	r0, r6
 8005b56:	f000 f859 	bl	8005c0c <memchr>
 8005b5a:	b108      	cbz	r0, 8005b60 <_printf_i+0x1e8>
 8005b5c:	1b80      	subs	r0, r0, r6
 8005b5e:	6060      	str	r0, [r4, #4]
 8005b60:	6863      	ldr	r3, [r4, #4]
 8005b62:	6123      	str	r3, [r4, #16]
 8005b64:	2300      	movs	r3, #0
 8005b66:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005b6a:	e7aa      	b.n	8005ac2 <_printf_i+0x14a>
 8005b6c:	4632      	mov	r2, r6
 8005b6e:	4649      	mov	r1, r9
 8005b70:	4640      	mov	r0, r8
 8005b72:	6923      	ldr	r3, [r4, #16]
 8005b74:	47d0      	blx	sl
 8005b76:	3001      	adds	r0, #1
 8005b78:	d0ad      	beq.n	8005ad6 <_printf_i+0x15e>
 8005b7a:	6823      	ldr	r3, [r4, #0]
 8005b7c:	079b      	lsls	r3, r3, #30
 8005b7e:	d413      	bmi.n	8005ba8 <_printf_i+0x230>
 8005b80:	68e0      	ldr	r0, [r4, #12]
 8005b82:	9b03      	ldr	r3, [sp, #12]
 8005b84:	4298      	cmp	r0, r3
 8005b86:	bfb8      	it	lt
 8005b88:	4618      	movlt	r0, r3
 8005b8a:	e7a6      	b.n	8005ada <_printf_i+0x162>
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	4632      	mov	r2, r6
 8005b90:	4649      	mov	r1, r9
 8005b92:	4640      	mov	r0, r8
 8005b94:	47d0      	blx	sl
 8005b96:	3001      	adds	r0, #1
 8005b98:	d09d      	beq.n	8005ad6 <_printf_i+0x15e>
 8005b9a:	3501      	adds	r5, #1
 8005b9c:	68e3      	ldr	r3, [r4, #12]
 8005b9e:	9903      	ldr	r1, [sp, #12]
 8005ba0:	1a5b      	subs	r3, r3, r1
 8005ba2:	42ab      	cmp	r3, r5
 8005ba4:	dcf2      	bgt.n	8005b8c <_printf_i+0x214>
 8005ba6:	e7eb      	b.n	8005b80 <_printf_i+0x208>
 8005ba8:	2500      	movs	r5, #0
 8005baa:	f104 0619 	add.w	r6, r4, #25
 8005bae:	e7f5      	b.n	8005b9c <_printf_i+0x224>
 8005bb0:	0800614b 	.word	0x0800614b
 8005bb4:	0800615c 	.word	0x0800615c

08005bb8 <memmove>:
 8005bb8:	4288      	cmp	r0, r1
 8005bba:	b510      	push	{r4, lr}
 8005bbc:	eb01 0402 	add.w	r4, r1, r2
 8005bc0:	d902      	bls.n	8005bc8 <memmove+0x10>
 8005bc2:	4284      	cmp	r4, r0
 8005bc4:	4623      	mov	r3, r4
 8005bc6:	d807      	bhi.n	8005bd8 <memmove+0x20>
 8005bc8:	1e43      	subs	r3, r0, #1
 8005bca:	42a1      	cmp	r1, r4
 8005bcc:	d008      	beq.n	8005be0 <memmove+0x28>
 8005bce:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005bd2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005bd6:	e7f8      	b.n	8005bca <memmove+0x12>
 8005bd8:	4601      	mov	r1, r0
 8005bda:	4402      	add	r2, r0
 8005bdc:	428a      	cmp	r2, r1
 8005bde:	d100      	bne.n	8005be2 <memmove+0x2a>
 8005be0:	bd10      	pop	{r4, pc}
 8005be2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005be6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005bea:	e7f7      	b.n	8005bdc <memmove+0x24>

08005bec <_sbrk_r>:
 8005bec:	b538      	push	{r3, r4, r5, lr}
 8005bee:	2300      	movs	r3, #0
 8005bf0:	4d05      	ldr	r5, [pc, #20]	@ (8005c08 <_sbrk_r+0x1c>)
 8005bf2:	4604      	mov	r4, r0
 8005bf4:	4608      	mov	r0, r1
 8005bf6:	602b      	str	r3, [r5, #0]
 8005bf8:	f7fa fb8c 	bl	8000314 <_sbrk>
 8005bfc:	1c43      	adds	r3, r0, #1
 8005bfe:	d102      	bne.n	8005c06 <_sbrk_r+0x1a>
 8005c00:	682b      	ldr	r3, [r5, #0]
 8005c02:	b103      	cbz	r3, 8005c06 <_sbrk_r+0x1a>
 8005c04:	6023      	str	r3, [r4, #0]
 8005c06:	bd38      	pop	{r3, r4, r5, pc}
 8005c08:	20000dd8 	.word	0x20000dd8

08005c0c <memchr>:
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	b510      	push	{r4, lr}
 8005c10:	b2c9      	uxtb	r1, r1
 8005c12:	4402      	add	r2, r0
 8005c14:	4293      	cmp	r3, r2
 8005c16:	4618      	mov	r0, r3
 8005c18:	d101      	bne.n	8005c1e <memchr+0x12>
 8005c1a:	2000      	movs	r0, #0
 8005c1c:	e003      	b.n	8005c26 <memchr+0x1a>
 8005c1e:	7804      	ldrb	r4, [r0, #0]
 8005c20:	3301      	adds	r3, #1
 8005c22:	428c      	cmp	r4, r1
 8005c24:	d1f6      	bne.n	8005c14 <memchr+0x8>
 8005c26:	bd10      	pop	{r4, pc}

08005c28 <_realloc_r>:
 8005c28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c2c:	4680      	mov	r8, r0
 8005c2e:	4615      	mov	r5, r2
 8005c30:	460c      	mov	r4, r1
 8005c32:	b921      	cbnz	r1, 8005c3e <_realloc_r+0x16>
 8005c34:	4611      	mov	r1, r2
 8005c36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c3a:	f7ff bc47 	b.w	80054cc <_malloc_r>
 8005c3e:	b92a      	cbnz	r2, 8005c4c <_realloc_r+0x24>
 8005c40:	f7ff fbda 	bl	80053f8 <_free_r>
 8005c44:	2400      	movs	r4, #0
 8005c46:	4620      	mov	r0, r4
 8005c48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c4c:	f000 f81a 	bl	8005c84 <_malloc_usable_size_r>
 8005c50:	4285      	cmp	r5, r0
 8005c52:	4606      	mov	r6, r0
 8005c54:	d802      	bhi.n	8005c5c <_realloc_r+0x34>
 8005c56:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005c5a:	d8f4      	bhi.n	8005c46 <_realloc_r+0x1e>
 8005c5c:	4629      	mov	r1, r5
 8005c5e:	4640      	mov	r0, r8
 8005c60:	f7ff fc34 	bl	80054cc <_malloc_r>
 8005c64:	4607      	mov	r7, r0
 8005c66:	2800      	cmp	r0, #0
 8005c68:	d0ec      	beq.n	8005c44 <_realloc_r+0x1c>
 8005c6a:	42b5      	cmp	r5, r6
 8005c6c:	462a      	mov	r2, r5
 8005c6e:	4621      	mov	r1, r4
 8005c70:	bf28      	it	cs
 8005c72:	4632      	movcs	r2, r6
 8005c74:	f7ff fbb2 	bl	80053dc <memcpy>
 8005c78:	4621      	mov	r1, r4
 8005c7a:	4640      	mov	r0, r8
 8005c7c:	f7ff fbbc 	bl	80053f8 <_free_r>
 8005c80:	463c      	mov	r4, r7
 8005c82:	e7e0      	b.n	8005c46 <_realloc_r+0x1e>

08005c84 <_malloc_usable_size_r>:
 8005c84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c88:	1f18      	subs	r0, r3, #4
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	bfbc      	itt	lt
 8005c8e:	580b      	ldrlt	r3, [r1, r0]
 8005c90:	18c0      	addlt	r0, r0, r3
 8005c92:	4770      	bx	lr

08005c94 <_init>:
 8005c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c96:	bf00      	nop
 8005c98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c9a:	bc08      	pop	{r3}
 8005c9c:	469e      	mov	lr, r3
 8005c9e:	4770      	bx	lr

08005ca0 <_fini>:
 8005ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ca2:	bf00      	nop
 8005ca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ca6:	bc08      	pop	{r3}
 8005ca8:	469e      	mov	lr, r3
 8005caa:	4770      	bx	lr
