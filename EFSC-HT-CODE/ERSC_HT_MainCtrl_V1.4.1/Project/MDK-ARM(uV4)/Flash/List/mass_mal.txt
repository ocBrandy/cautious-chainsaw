; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\obj\mass_mal.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\mass_mal.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\Libraries\CMSIS\Include -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User\app\inc -I..\..\User\FatFS\src -I..\..\User\Mass_Storage\inc -I..\..\User\LCD_Driver -I..\..\User\SYSTEM\sys -I..\..\User\Debugprintf -I..\..\User\LogDebug -I..\..\User\app\inc -I..\..\User\app\src -I..\..\User\bsp\inc -I..\..\User\bsp\src -I.\RTE\_Flash -ID:\Keil_v5\ARM\Packs\ARM\CMSIS\5.5.1\CMSIS\Core\Include -ID:\Keil_v5\ARM\Packs\Keil\STM32F1xx_DFP\2.1.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=527 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\flash\obj\mass_mal.crf ..\..\User\Mass_Storage\src\mass_mal.c]
                          THUMB

                          AREA ||i.MAL_GetStatus||, CODE, READONLY, ALIGN=2

                  MAL_GetStatus PROC
;;;140    *******************************************************************************/
;;;141    uint16_t MAL_GetStatus (uint8_t lun)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;142    {
000004  4606              MOV      r6,r0
;;;143    	uint32_t DeviceSizeMul = 0, NumberOfBlocks = 0;
000006  2700              MOVS     r7,#0
000008  46b8              MOV      r8,r7
;;;144    
;;;145    
;;;146    	if (lun == 0)
00000a  2e00              CMP      r6,#0
00000c  d165              BNE      |L1.218|
;;;147    	{
;;;148    		if (SD_Init() == SD_OK)
00000e  f7fffffe          BL       SD_Init
000012  2800              CMP      r0,#0
000014  d161              BNE      |L1.218|
;;;149    		{
;;;150    			SD_GetCardInfo(&SDCardInfo);
000016  4832              LDR      r0,|L1.224|
000018  f7fffffe          BL       SD_GetCardInfo
;;;151    			SD_SelectDeselect((uint32_t) (SDCardInfo.RCA << 16));
00001c  4830              LDR      r0,|L1.224|
00001e  f8b00054          LDRH     r0,[r0,#0x54]  ; SDCardInfo
000022  0402              LSLS     r2,r0,#16
000024  4610              MOV      r0,r2
000026  2100              MOVS     r1,#0
000028  f7fffffe          BL       SD_SelectDeselect
;;;152    			DeviceSizeMul = (SDCardInfo.SD_csd.DeviceSizeMul + 2);
00002c  482c              LDR      r0,|L1.224|
00002e  7f00              LDRB     r0,[r0,#0x1c]  ; SDCardInfo
000030  1c87              ADDS     r7,r0,#2
;;;153    
;;;154    			if(SDCardInfo.CardType == SDIO_HIGH_CAPACITY_SD_CARD)
000032  482b              LDR      r0,|L1.224|
000034  f8900056          LDRB     r0,[r0,#0x56]  ; SDCardInfo
000038  2802              CMP      r0,#2
00003a  d10a              BNE      |L1.82|
;;;155    			{
;;;156    				Mass_Block_Count[0] = (SDCardInfo.SD_csd.DeviceSize + 1) * 1024;
00003c  4828              LDR      r0,|L1.224|
00003e  6901              LDR      r1,[r0,#0x10]  ; SDCardInfo
000040  6940              LDR      r0,[r0,#0x14]  ; SDCardInfo
000042  1c49              ADDS     r1,r1,#1
000044  f44f6080          MOV      r0,#0x400
000048  fba10100          UMULL    r0,r1,r1,r0
00004c  4925              LDR      r1,|L1.228|
00004e  6008              STR      r0,[r1,#0]  ; Mass_Block_Count
000050  e020              B        |L1.148|
                  |L1.82|
;;;157    			}
;;;158    			else
;;;159    			{
;;;160    				NumberOfBlocks  = ((1 << (SDCardInfo.SD_csd.RdBlockLen)) / 512);
000052  4923              LDR      r1,|L1.224|
000054  7a0a              LDRB     r2,[r1,#8]  ; SDCardInfo
000056  2101              MOVS     r1,#1
000058  fa01f002          LSL      r0,r1,r2
00005c  17c1              ASRS     r1,r0,#31
00005e  eb0051d1          ADD      r1,r0,r1,LSR #23
000062  ea4f2861          ASR      r8,r1,#9
;;;161    				Mass_Block_Count[0] = ((SDCardInfo.SD_csd.DeviceSize + 1) * (1 << DeviceSizeMul) << (NumberOfBlocks/2));
000066  481e              LDR      r0,|L1.224|
000068  6903              LDR      r3,[r0,#0x10]  ; SDCardInfo
00006a  6941              LDR      r1,[r0,#0x14]  ; SDCardInfo
00006c  1c5b              ADDS     r3,r3,#1
00006e  f1410100          ADC      r1,r1,#0
000072  2001              MOVS     r0,#1
000074  40b8              LSLS     r0,r0,r7
000076  17c2              ASRS     r2,r0,#31
000078  fba34c00          UMULL    r4,r12,r3,r0
00007c  fb01c000          MLA      r0,r1,r0,r12
000080  fb030502          MLA      r5,r3,r2,r0
000084  ea4f0258          LSR      r2,r8,#1
000088  4620              MOV      r0,r4
00008a  4629              MOV      r1,r5
00008c  f7fffffe          BL       __aeabi_llsl
000090  4914              LDR      r1,|L1.228|
000092  6008              STR      r0,[r1,#0]  ; Mass_Block_Count
                  |L1.148|
;;;162    			}
;;;163    			Mass_Block_Size[0]  = 512;
000094  f44f7000          MOV      r0,#0x200
000098  4913              LDR      r1,|L1.232|
00009a  6008              STR      r0,[r1,#0]  ; Mass_Block_Size
;;;164    
;;;165    			Status = SD_SelectDeselect((uint32_t) (SDCardInfo.RCA << 16)); 
00009c  4810              LDR      r0,|L1.224|
00009e  f8b00054          LDRH     r0,[r0,#0x54]  ; SDCardInfo
0000a2  0402              LSLS     r2,r0,#16
0000a4  4610              MOV      r0,r2
0000a6  2100              MOVS     r1,#0
0000a8  f7fffffe          BL       SD_SelectDeselect
0000ac  490f              LDR      r1,|L1.236|
0000ae  6008              STR      r0,[r1,#0]  ; Status
;;;166    			Status = SD_EnableWideBusOperation(SDIO_BusWide_4b); 
0000b0  f44f6000          MOV      r0,#0x800
0000b4  f7fffffe          BL       SD_EnableWideBusOperation
0000b8  490c              LDR      r1,|L1.236|
0000ba  6008              STR      r0,[r1,#0]  ; Status
;;;167    			if ( Status != SD_OK )
0000bc  4608              MOV      r0,r1
0000be  6800              LDR      r0,[r0,#0]  ; Status
0000c0  b110              CBZ      r0,|L1.200|
;;;168    			{
;;;169    				return MAL_FAIL;
0000c2  2001              MOVS     r0,#1
                  |L1.196|
;;;170    			}	      
;;;171    
;;;172    			Mass_Memory_Size[0] = Mass_Block_Count[0] * Mass_Block_Size[0];
;;;173    			return MAL_OK;
;;;174    		}
;;;175    	}
;;;176    
;;;177    	return MAL_FAIL;
;;;178    }
0000c4  e8bd81f0          POP      {r4-r8,pc}
                  |L1.200|
0000c8  4806              LDR      r0,|L1.228|
0000ca  6800              LDR      r0,[r0,#0]            ;172  ; Mass_Block_Count
0000cc  4906              LDR      r1,|L1.232|
0000ce  6809              LDR      r1,[r1,#0]            ;172  ; Mass_Block_Size
0000d0  4348              MULS     r0,r1,r0              ;172
0000d2  4907              LDR      r1,|L1.240|
0000d4  6008              STR      r0,[r1,#0]            ;172  ; Mass_Memory_Size
0000d6  2000              MOVS     r0,#0                 ;173
0000d8  e7f4              B        |L1.196|
                  |L1.218|
0000da  2001              MOVS     r0,#1                 ;177
0000dc  e7f2              B        |L1.196|
;;;179    
                          ENDP

0000de  0000              DCW      0x0000
                  |L1.224|
                          DCD      SDCardInfo
                  |L1.228|
                          DCD      Mass_Block_Count
                  |L1.232|
                          DCD      Mass_Block_Size
                  |L1.236|
                          DCD      Status
                  |L1.240|
                          DCD      Mass_Memory_Size

                          AREA ||i.MAL_Init||, CODE, READONLY, ALIGN=2

                  MAL_Init PROC
;;;55     *******************************************************************************/
;;;56     uint16_t MAL_Init(uint8_t lun)
000000  b570              PUSH     {r4-r6,lr}
;;;57     {
000002  4604              MOV      r4,r0
;;;58     	uint16_t status = MAL_OK;
000004  2500              MOVS     r5,#0
;;;59     
;;;60     	switch (lun)
000006  b924              CBNZ     r4,|L2.18|
;;;61     	{
;;;62     		case 0:
;;;63     			Status = SD_Init();
000008  f7fffffe          BL       SD_Init
00000c  4903              LDR      r1,|L2.28|
00000e  6008              STR      r0,[r1,#0]  ; Status
;;;64     			break;
000010  e001              B        |L2.22|
                  |L2.18|
;;;65     
;;;66     		default:
;;;67     			return MAL_FAIL;
000012  2001              MOVS     r0,#1
                  |L2.20|
;;;68     	}
;;;69     	return status;
;;;70     }
000014  bd70              POP      {r4-r6,pc}
                  |L2.22|
000016  bf00              NOP                            ;64
000018  4628              MOV      r0,r5                 ;69
00001a  e7fb              B        |L2.20|
;;;71     /*******************************************************************************
                          ENDP

                  |L2.28|
                          DCD      Status

                          AREA ||i.MAL_Read||, CODE, READONLY, ALIGN=2

                  MAL_Read PROC
;;;106    *******************************************************************************/
;;;107    uint16_t MAL_Read(uint8_t lun, uint32_t Memory_Offset, uint32_t *Readbuff, uint16_t Transfer_Length)
000000  b5f8              PUSH     {r3-r7,lr}
;;;108    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
000006  4616              MOV      r6,r2
000008  461f              MOV      r7,r3
;;;109    
;;;110    	switch (lun)
00000a  b9a5              CBNZ     r5,|L3.54|
;;;111    	{
;;;112    		case 0:
;;;113         // SD_ReadMultiBlocks((uint8_t*)Readbuff, Memory_Offset, Transfer_Length, 1);
;;;114    			SD_ReadBlock((uint8_t*)Readbuff, Memory_Offset, Transfer_Length);
00000c  4622              MOV      r2,r4
00000e  2300              MOVS     r3,#0
000010  4630              MOV      r0,r6
000012  9700              STR      r7,[sp,#0]
000014  f7fffffe          BL       SD_ReadBlock
;;;115    			Status = SD_WaitReadOperation();
000018  f7fffffe          BL       SD_WaitReadOperation
00001c  4908              LDR      r1,|L3.64|
00001e  6008              STR      r0,[r1,#0]  ; Status
;;;116    			while(SD_GetStatus() != SD_TRANSFER_OK)
000020  bf00              NOP      
                  |L3.34|
000022  f7fffffe          BL       SD_GetStatus
000026  2800              CMP      r0,#0
000028  d1fb              BNE      |L3.34|
;;;117    			{
;;;118    			}
;;;119    //    Status = SD_WaitWriteOperation();
;;;120    //    while(SD_GetStatus() != SD_TRANSFER_OK);
;;;121          
;;;122    			if ( Status != SD_OK )
00002a  4805              LDR      r0,|L3.64|
00002c  6800              LDR      r0,[r0,#0]  ; Status
00002e  b108              CBZ      r0,|L3.52|
;;;123    			{
;;;124    				return MAL_FAIL;
000030  2001              MOVS     r0,#1
                  |L3.50|
;;;125    			}
;;;126    			break;
;;;127    
;;;128    		default:
;;;129    			return MAL_FAIL;
;;;130    	}
;;;131    	return MAL_OK;
;;;132    }
000032  bdf8              POP      {r3-r7,pc}
                  |L3.52|
000034  e001              B        |L3.58|
                  |L3.54|
000036  2001              MOVS     r0,#1                 ;129
000038  e7fb              B        |L3.50|
                  |L3.58|
00003a  bf00              NOP                            ;126
00003c  2000              MOVS     r0,#0                 ;131
00003e  e7f8              B        |L3.50|
;;;133    
                          ENDP

                  |L3.64|
                          DCD      Status

                          AREA ||i.MAL_Write||, CODE, READONLY, ALIGN=2

                  MAL_Write PROC
;;;77     *******************************************************************************/
;;;78     uint16_t MAL_Write(uint8_t lun, uint32_t Memory_Offset, uint32_t *Writebuff, uint16_t Transfer_Length)
000000  b5f8              PUSH     {r3-r7,lr}
;;;79     {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
000006  4616              MOV      r6,r2
000008  461f              MOV      r7,r3
;;;80     
;;;81     	switch (lun)
00000a  b9b5              CBNZ     r5,|L4.58|
;;;82     	{
;;;83     		case 0:
;;;84        // Status = SD_WriteMultiBlocks((uint8_t*)Writebuff, Memory_Offset, Transfer_Length,1);
;;;85     			Status =	SD_WriteBlock((uint8_t*)Writebuff, Memory_Offset, Transfer_Length);
00000c  4622              MOV      r2,r4
00000e  2300              MOVS     r3,#0
000010  4630              MOV      r0,r6
000012  9700              STR      r7,[sp,#0]
000014  f7fffffe          BL       SD_WriteBlock
000018  490a              LDR      r1,|L4.68|
00001a  6008              STR      r0,[r1,#0]  ; Status
;;;86     			Status = SD_WaitWriteOperation();  
00001c  f7fffffe          BL       SD_WaitWriteOperation
000020  4908              LDR      r1,|L4.68|
000022  6008              STR      r0,[r1,#0]  ; Status
;;;87     			while(SD_GetStatus() != SD_TRANSFER_OK);
000024  bf00              NOP      
                  |L4.38|
000026  f7fffffe          BL       SD_GetStatus
00002a  2800              CMP      r0,#0
00002c  d1fb              BNE      |L4.38|
;;;88     			if ( Status != SD_OK )
00002e  4805              LDR      r0,|L4.68|
000030  6800              LDR      r0,[r0,#0]  ; Status
000032  b108              CBZ      r0,|L4.56|
;;;89     			{
;;;90     				return MAL_FAIL;
000034  2001              MOVS     r0,#1
                  |L4.54|
;;;91     			}      
;;;92     			break;
;;;93     
;;;94     		default:
;;;95     			return MAL_FAIL;
;;;96     	}
;;;97     	return MAL_OK;
;;;98     }
000036  bdf8              POP      {r3-r7,pc}
                  |L4.56|
000038  e001              B        |L4.62|
                  |L4.58|
00003a  2001              MOVS     r0,#1                 ;95
00003c  e7fb              B        |L4.54|
                  |L4.62|
00003e  bf00              NOP                            ;92
000040  2000              MOVS     r0,#0                 ;97
000042  e7f8              B        |L4.54|
;;;99     
                          ENDP

                  |L4.68|
                          DCD      Status

                          AREA ||.data||, DATA, ALIGN=2

                  Mass_Memory_Size
                          %        8
                  Mass_Block_Size
                          %        8
                  Mass_Block_Count
                          %        8
                  Status
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\Mass_Storage\\src\\mass_mal.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___10_mass_mal_c_Status____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___10_mass_mal_c_Status____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___10_mass_mal_c_Status____REVSH|
#line 128
|__asm___10_mass_mal_c_Status____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
