; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\obj\bsp_spi_flash.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\bsp_spi_flash.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\Libraries\CMSIS\Include -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User\app\inc -I..\..\User\FatFS\src -I..\..\User\Mass_Storage\inc -I..\..\User\LCD_Driver -I..\..\User\SYSTEM\sys -I..\..\User\Debugprintf -I..\..\User\LogDebug -I..\..\User\app\inc -I..\..\User\app\src -I..\..\User\bsp\inc -I..\..\User\bsp\src -I.\RTE\_Flash -ID:\Keil_v5\ARM\Packs\ARM\CMSIS\5.5.1\CMSIS\Core\Include -ID:\Keil_v5\ARM\Packs\Keil\STM32F1xx_DFP\2.1.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=527 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\flash\obj\bsp_spi_flash.crf ..\..\User\bsp\src\bsp_spi_flash.c]
                          THUMB

                          AREA ||i.bsp_InitSFlash||, CODE, READONLY, ALIGN=1

                  bsp_InitSFlash PROC
;;;169    */
;;;170    void bsp_InitSFlash(void)
000000  b510              PUSH     {r4,lr}
;;;171    {
;;;172    	sf_ConfigGPIO();			/* 配置GPIO */
000002  f7fffffe          BL       sf_ConfigGPIO
;;;173    	
;;;174    	sf_CfgSpiHard();			/* 配置SPI参数，第二个上升沿采样 */
000006  f7fffffe          BL       sf_CfgSpiHard
;;;175    
;;;176    	sf_ReadInfo();				/* 自动识别芯片型号 */
00000a  f7fffffe          BL       sf_ReadInfo
;;;177    
;;;178    	sf_SetCS(0);				/* 软件方式，使能串行Flash片选 */
00000e  2000              MOVS     r0,#0
000010  f7fffffe          BL       sf_SetCS
;;;179    	bsp_spiWrite1(CMD_DISWR);	/* 发送禁止写入的命令,即使能软件写保护 */
000014  2004              MOVS     r0,#4
000016  f7fffffe          BL       bsp_spiWrite1
;;;180    	sf_SetCS(1);				/* 软件方式，禁能串行Flash片选 */
00001a  2001              MOVS     r0,#1
00001c  f7fffffe          BL       sf_SetCS
;;;181    
;;;182    	sf_WaitForWriteEnd();		/* 等待串行Flash内部操作完成 */
000020  f7fffffe          BL       sf_WaitForWriteEnd
;;;183    
;;;184    	sf_WriteStatus(0);			/* 解除所有BLOCK的写保护 */
000024  2000              MOVS     r0,#0
000026  f7fffffe          BL       sf_WriteStatus
;;;185    }
00002a  bd10              POP      {r4,pc}
;;;186    
                          ENDP


                          AREA ||i.sf_AutoWritePage||, CODE, READONLY, ALIGN=2

                  sf_AutoWritePage PROC
;;;447    */
;;;448    static uint8_t sf_AutoWritePage(uint8_t *_ucpSrc, uint32_t _uiWrAddr, uint16_t _usWrLen)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;449    {
000004  b081              SUB      sp,sp,#4
000006  f5ad5d80          SUB      sp,sp,#0x1000
00000a  4607              MOV      r7,r0
00000c  460d              MOV      r5,r1
00000e  4616              MOV      r6,r2
;;;450    	uint16_t i;
;;;451    	uint16_t j;					/* 用于延时 */
;;;452    	uint32_t uiFirstAddr;		/* 扇区首址 */
;;;453    	uint8_t ucNeedErase;		/* 1表示需要擦除 */
;;;454    	uint8_t cRet;
;;;455    	uint8_t s_spiBuf[4*1024];	/* 用于写函数，先读出整个子扇区，修改缓冲区后，再整个子扇区回写 */	
;;;456    
;;;457    	/* 长度为0时不继续操作,直接认为成功 */
;;;458    	if (_usWrLen == 0)
000010  b92e              CBNZ     r6,|L2.30|
;;;459    	{
;;;460    		return 1;
000012  2001              MOVS     r0,#1
                  |L2.20|
;;;461    	}
;;;462    
;;;463    	/* 如果偏移地址超过芯片容量则退出 */
;;;464    	if (_uiWrAddr >= g_tSF.TotalSize)
;;;465    	{
;;;466    		return 0;
;;;467    	}
;;;468    
;;;469    	/* 如果数据长度大于扇区容量，则退出 */
;;;470    	if (_usWrLen > g_tSF.PageSize)
;;;471    	{
;;;472    		return 0;
;;;473    	}
;;;474    
;;;475    	/* 如果FLASH中的数据没有变化,则不写FLASH */
;;;476    	sf_ReadBuffer(s_spiBuf, _uiWrAddr, _usWrLen);
;;;477    	if (memcmp(s_spiBuf, _ucpSrc, _usWrLen) == 0)
;;;478    	{
;;;479    		return 1;
;;;480    	}
;;;481    
;;;482    	/* 判断是否需要先擦除扇区 */
;;;483    	/* 如果旧数据修改为新数据，所有位均是 1->0 或者 0->0, 则无需擦除,提高Flash寿命 */
;;;484    	ucNeedErase = 0;
;;;485    	if (sf_NeedErase(s_spiBuf, _ucpSrc, _usWrLen))
;;;486    	{
;;;487    		ucNeedErase = 1;
;;;488    	}
;;;489    
;;;490    	uiFirstAddr = _uiWrAddr & (~(g_tSF.PageSize - 1));
;;;491    
;;;492    	if (_usWrLen == g_tSF.PageSize)		/* 整个扇区都改写 */
;;;493    	{
;;;494    		for	(i = 0; i < g_tSF.PageSize; i++)
;;;495    		{
;;;496    			s_spiBuf[i] = _ucpSrc[i];
;;;497    		}
;;;498    	}
;;;499    	else						/* 改写部分数据 */
;;;500    	{
;;;501    		/* 先将整个扇区的数据读出 */
;;;502    		sf_ReadBuffer(s_spiBuf, uiFirstAddr, g_tSF.PageSize);
;;;503    
;;;504    		/* 再用新数据覆盖 */
;;;505    		i = _uiWrAddr & (g_tSF.PageSize - 1);
;;;506    		memcpy(&s_spiBuf[i], _ucpSrc, _usWrLen);
;;;507    	}
;;;508    
;;;509    	/* 写完之后进行校验，如果不正确则重写，最多3次 */
;;;510    	cRet = 0;
;;;511    	for (i = 0; i < 3; i++)
;;;512    	{
;;;513    
;;;514    		/* 如果旧数据修改为新数据，所有位均是 1->0 或者 0->0, 则无需擦除,提高Flash寿命 */
;;;515    		if (ucNeedErase == 1)
;;;516    		{
;;;517    			sf_EraseSubSector(uiFirstAddr);		/* 擦除1个子扇区 */
;;;518    		}
;;;519    
;;;520    		/* 编程一个PAGE */
;;;521    		sf_PageWrite(s_spiBuf, uiFirstAddr, g_tSF.PageSize);
;;;522    
;;;523    		if (sf_CmpData(_uiWrAddr, _ucpSrc, _usWrLen) == 0)
;;;524    		{
;;;525    			cRet = 1;
;;;526    			break;
;;;527    		}
;;;528    		else
;;;529    		{
;;;530    			if (sf_CmpData(_uiWrAddr, _ucpSrc, _usWrLen) == 0)
;;;531    			{
;;;532    				cRet = 1;
;;;533    				break;
;;;534    			}
;;;535    
;;;536    			/* 失败后延迟一段时间再重试 */
;;;537    			for (j = 0; j < 10000; j++);
;;;538    		}
;;;539    	}
;;;540    
;;;541    	return cRet;
;;;542    }
000014  b001              ADD      sp,sp,#4
000016  f50d5d80          ADD      sp,sp,#0x1000
00001a  e8bd8ff0          POP      {r4-r11,pc}
                  |L2.30|
00001e  483e              LDR      r0,|L2.280|
000020  6940              LDR      r0,[r0,#0x14]         ;464  ; g_tSF
000022  42a8              CMP      r0,r5                 ;464
000024  d801              BHI      |L2.42|
000026  2000              MOVS     r0,#0                 ;466
000028  e7f4              B        |L2.20|
                  |L2.42|
00002a  483b              LDR      r0,|L2.280|
00002c  8b00              LDRH     r0,[r0,#0x18]         ;470  ; g_tSF
00002e  42b0              CMP      r0,r6                 ;470
000030  da01              BGE      |L2.54|
000032  2000              MOVS     r0,#0                 ;472
000034  e7ee              B        |L2.20|
                  |L2.54|
000036  4632              MOV      r2,r6                 ;476
000038  4629              MOV      r1,r5                 ;476
00003a  a801              ADD      r0,sp,#4              ;476
00003c  f7fffffe          BL       sf_ReadBuffer
000040  4632              MOV      r2,r6                 ;477
000042  4639              MOV      r1,r7                 ;477
000044  a801              ADD      r0,sp,#4              ;477
000046  f7fffffe          BL       memcmp
00004a  b908              CBNZ     r0,|L2.80|
00004c  2001              MOVS     r0,#1                 ;479
00004e  e7e1              B        |L2.20|
                  |L2.80|
000050  f04f0a00          MOV      r10,#0                ;484
000054  4632              MOV      r2,r6                 ;485
000056  4639              MOV      r1,r7                 ;485
000058  a801              ADD      r0,sp,#4              ;485
00005a  f7fffffe          BL       sf_NeedErase
00005e  b108              CBZ      r0,|L2.100|
000060  f04f0a01          MOV      r10,#1                ;487
                  |L2.100|
000064  482c              LDR      r0,|L2.280|
000066  8b00              LDRH     r0,[r0,#0x18]         ;490  ; g_tSF
000068  1e40              SUBS     r0,r0,#1              ;490
00006a  ea250800          BIC      r8,r5,r0              ;490
00006e  482a              LDR      r0,|L2.280|
000070  8b00              LDRH     r0,[r0,#0x18]         ;492  ; g_tSF
000072  42b0              CMP      r0,r6                 ;492
000074  d10b              BNE      |L2.142|
000076  2400              MOVS     r4,#0                 ;494
000078  e004              B        |L2.132|
                  |L2.122|
00007a  5d38              LDRB     r0,[r7,r4]            ;496
00007c  a901              ADD      r1,sp,#4              ;496
00007e  5508              STRB     r0,[r1,r4]            ;496
000080  1c60              ADDS     r0,r4,#1              ;494
000082  b284              UXTH     r4,r0                 ;494
                  |L2.132|
000084  4824              LDR      r0,|L2.280|
000086  8b00              LDRH     r0,[r0,#0x18]         ;494  ; g_tSF
000088  42a0              CMP      r0,r4                 ;494
00008a  dcf6              BGT      |L2.122|
00008c  e010              B        |L2.176|
                  |L2.142|
00008e  4822              LDR      r0,|L2.280|
000090  8b02              LDRH     r2,[r0,#0x18]         ;502  ; g_tSF
000092  4641              MOV      r1,r8                 ;502
000094  a801              ADD      r0,sp,#4              ;502
000096  f7fffffe          BL       sf_ReadBuffer
00009a  481f              LDR      r0,|L2.280|
00009c  8b00              LDRH     r0,[r0,#0x18]         ;505  ; g_tSF
00009e  1e40              SUBS     r0,r0,#1              ;505
0000a0  4028              ANDS     r0,r0,r5              ;505
0000a2  b284              UXTH     r4,r0                 ;505
0000a4  a901              ADD      r1,sp,#4              ;506
0000a6  1908              ADDS     r0,r1,r4              ;506
0000a8  4632              MOV      r2,r6                 ;506
0000aa  4639              MOV      r1,r7                 ;506
0000ac  f7fffffe          BL       __aeabi_memcpy
                  |L2.176|
0000b0  f04f0b00          MOV      r11,#0                ;510
0000b4  2400              MOVS     r4,#0                 ;511
0000b6  e02a              B        |L2.270|
                  |L2.184|
0000b8  f1ba0f01          CMP      r10,#1                ;515
0000bc  d102              BNE      |L2.196|
0000be  4640              MOV      r0,r8                 ;517
0000c0  f7fffffe          BL       sf_EraseSubSector
                  |L2.196|
0000c4  4814              LDR      r0,|L2.280|
0000c6  8b02              LDRH     r2,[r0,#0x18]         ;521  ; g_tSF
0000c8  4641              MOV      r1,r8                 ;521
0000ca  a801              ADD      r0,sp,#4              ;521
0000cc  f7fffffe          BL       sf_PageWrite
0000d0  4632              MOV      r2,r6                 ;523
0000d2  4639              MOV      r1,r7                 ;523
0000d4  4628              MOV      r0,r5                 ;523
0000d6  f7fffffe          BL       sf_CmpData
0000da  b910              CBNZ     r0,|L2.226|
0000dc  f04f0b01          MOV      r11,#1                ;525
0000e0  e017              B        |L2.274|
                  |L2.226|
0000e2  4632              MOV      r2,r6                 ;530
0000e4  4639              MOV      r1,r7                 ;530
0000e6  4628              MOV      r0,r5                 ;530
0000e8  f7fffffe          BL       sf_CmpData
0000ec  b910              CBNZ     r0,|L2.244|
0000ee  f04f0b01          MOV      r11,#1                ;532
0000f2  e00e              B        |L2.274|
                  |L2.244|
0000f4  f04f0900          MOV      r9,#0                 ;537
0000f8  e003              B        |L2.258|
                  |L2.250|
0000fa  f1090001          ADD      r0,r9,#1              ;537
0000fe  fa1ff980          UXTH     r9,r0                 ;537
                  |L2.258|
000102  f2427010          MOV      r0,#0x2710            ;537
000106  4581              CMP      r9,r0                 ;537
000108  dbf7              BLT      |L2.250|
00010a  1c60              ADDS     r0,r4,#1              ;511
00010c  b284              UXTH     r4,r0                 ;511
                  |L2.270|
00010e  2c03              CMP      r4,#3                 ;511
000110  dbd2              BLT      |L2.184|
                  |L2.274|
000112  bf00              NOP                            ;526
000114  4658              MOV      r0,r11                ;541
000116  e77d              B        |L2.20|
;;;543    
                          ENDP

                  |L2.280|
                          DCD      g_tSF

                          AREA ||i.sf_CfgSpiHard||, CODE, READONLY, ALIGN=2

                  sf_CfgSpiHard PROC
;;;101    */
;;;102    void sf_CfgSpiHard(void)
000000  b500              PUSH     {lr}
;;;103    {
000002  b085              SUB      sp,sp,#0x14
;;;104    	SPI_InitTypeDef  SPI_InitStructure;
;;;105    
;;;106    	/* 配置SPI硬件参数 */
;;;107    	SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;	/* 数据方向：2线全双工 */
000004  2000              MOVS     r0,#0
000006  f8ad0000          STRH     r0,[sp,#0]
;;;108    	SPI_InitStructure.SPI_Mode = SPI_Mode_Master;		/* STM32的SPI工作模式 ：主机模式 */
00000a  f44f7082          MOV      r0,#0x104
00000e  f8ad0002          STRH     r0,[sp,#2]
;;;109    	SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;	/* 数据位长度 ： 8位 */
000012  2000              MOVS     r0,#0
000014  f8ad0004          STRH     r0,[sp,#4]
;;;110    	/* SPI_CPOL和SPI_CPHA结合使用决定时钟和数据采样点的相位关系、
;;;111    	   本例配置: 总线空闲是高电平,第2个边沿（上升沿采样数据)
;;;112    	*/
;;;113    	SPI_InitStructure.SPI_CPOL = SPI_CPOL_High;			/* 时钟上升沿采样数据 */
000018  2002              MOVS     r0,#2
00001a  f8ad0006          STRH     r0,[sp,#6]
;;;114    	SPI_InitStructure.SPI_CPHA = SPI_CPHA_2Edge;		/* 时钟的第2个边沿采样数据 */
00001e  2001              MOVS     r0,#1
000020  f8ad0008          STRH     r0,[sp,#8]
;;;115    	SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;			/* 片选控制方式：软件控制 */
000024  0240              LSLS     r0,r0,#9
000026  f8ad000a          STRH     r0,[sp,#0xa]
;;;116    
;;;117    	/* 设置波特率预分频系数 SPI_BaudRatePrescaler_8 ，实测SCK周期 96ns, 10.4MHz */
;;;118    	SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_8;
00002a  2010              MOVS     r0,#0x10
00002c  f8ad000c          STRH     r0,[sp,#0xc]
;;;119    
;;;120    	SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;	/* 数据位传输次序：高位先传 */
000030  2000              MOVS     r0,#0
000032  f8ad000e          STRH     r0,[sp,#0xe]
;;;121    	SPI_InitStructure.SPI_CRCPolynomial = 7;			/* CRC多项式寄存器，复位后为7。本例程不用 */
000036  2007              MOVS     r0,#7
000038  f8ad0010          STRH     r0,[sp,#0x10]
;;;122    	SPI_Init(SPI1, &SPI_InitStructure);
00003c  4669              MOV      r1,sp
00003e  4804              LDR      r0,|L3.80|
000040  f7fffffe          BL       SPI_Init
;;;123    
;;;124    	SPI_Cmd(SPI1, ENABLE);				/* 使能SPI  */
000044  2101              MOVS     r1,#1
000046  4802              LDR      r0,|L3.80|
000048  f7fffffe          BL       SPI_Cmd
;;;125    }
00004c  b005              ADD      sp,sp,#0x14
00004e  bd00              POP      {pc}
;;;126    
                          ENDP

                  |L3.80|
                          DCD      0x40013000

                          AREA ||i.sf_CmpData||, CODE, READONLY, ALIGN=2

                  sf_CmpData PROC
;;;359    */
;;;360    static uint8_t sf_CmpData(uint32_t _uiSrcAddr, uint8_t *_ucpTar, uint32_t _uiSize)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;361    {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4615              MOV      r5,r2
;;;362    	uint8_t ucValue;
;;;363    
;;;364    	/* 如果读取的数据长度为0或者超出串行Flash地址空间，则直接返回 */
;;;365    	if ((_uiSrcAddr + _uiSize) > g_tSF.TotalSize)
00000a  1960              ADDS     r0,r4,r5
00000c  4918              LDR      r1,|L4.112|
00000e  6949              LDR      r1,[r1,#0x14]  ; g_tSF
000010  4288              CMP      r0,r1
000012  d902              BLS      |L4.26|
;;;366    	{
;;;367    		return 1;
000014  2001              MOVS     r0,#1
                  |L4.22|
;;;368    	}
;;;369    
;;;370    	if (_uiSize == 0)
;;;371    	{
;;;372    		return 0;
;;;373    	}
;;;374    
;;;375    	sf_SetCS(0);										/* 使能片选 */
;;;376    	bsp_spiWrite1(CMD_READ);							/* 发送读命令 */
;;;377    	bsp_spiWrite1((_uiSrcAddr & 0xFF0000) >> 16);		/* 发送扇区地址的高8bit */
;;;378    	bsp_spiWrite1((_uiSrcAddr & 0xFF00) >> 8);			/* 发送扇区地址中间8bit */
;;;379    	bsp_spiWrite1(_uiSrcAddr & 0xFF);					/* 发送扇区地址低8bit */
;;;380    	while (_uiSize--)
;;;381    	{
;;;382    		/* 读一个字节 */
;;;383    		ucValue = bsp_spiRead1();
;;;384    		if (*_ucpTar++ != ucValue)
;;;385    		{
;;;386    			sf_SetCS(1);
;;;387    			return 1;
;;;388    		}
;;;389    	}
;;;390    	sf_SetCS(1);
;;;391    	return 0;
;;;392    }
000016  e8bd81f0          POP      {r4-r8,pc}
                  |L4.26|
00001a  b90d              CBNZ     r5,|L4.32|
00001c  2000              MOVS     r0,#0                 ;372
00001e  e7fa              B        |L4.22|
                  |L4.32|
000020  2000              MOVS     r0,#0                 ;375
000022  f7fffffe          BL       sf_SetCS
000026  2003              MOVS     r0,#3                 ;376
000028  f7fffffe          BL       bsp_spiWrite1
00002c  f3c44007          UBFX     r0,r4,#16,#8          ;377
000030  f7fffffe          BL       bsp_spiWrite1
000034  f3c42007          UBFX     r0,r4,#8,#8           ;378
000038  f7fffffe          BL       bsp_spiWrite1
00003c  b2e0              UXTB     r0,r4                 ;379
00003e  f7fffffe          BL       bsp_spiWrite1
000042  e00b              B        |L4.92|
                  |L4.68|
000044  f7fffffe          BL       bsp_spiRead1
000048  4607              MOV      r7,r0                 ;383
00004a  f8161b01          LDRB     r1,[r6],#1            ;384
00004e  42b9              CMP      r1,r7                 ;384
000050  d004              BEQ      |L4.92|
000052  2001              MOVS     r0,#1                 ;386
000054  f7fffffe          BL       sf_SetCS
000058  2001              MOVS     r0,#1                 ;387
00005a  e7dc              B        |L4.22|
                  |L4.92|
00005c  1e28              SUBS     r0,r5,#0              ;380
00005e  f1a50501          SUB      r5,r5,#1              ;380
000062  d1ef              BNE      |L4.68|
000064  2001              MOVS     r0,#1                 ;390
000066  f7fffffe          BL       sf_SetCS
00006a  2000              MOVS     r0,#0                 ;391
00006c  e7d3              B        |L4.22|
;;;393    
                          ENDP

00006e  0000              DCW      0x0000
                  |L4.112|
                          DCD      g_tSF

                          AREA ||i.sf_ConfigGPIO||, CODE, READONLY, ALIGN=2

                  sf_ConfigGPIO PROC
;;;74     */
;;;75     static void sf_ConfigGPIO(void)
000000  b508              PUSH     {r3,lr}
;;;76     {
;;;77     	/*
;;;78     		核心主控板spi_Flash型号为 N25Q128A (108MHz)
;;;79     		PA4/SF_CS
;;;80     	*/
;;;81     	GPIO_InitTypeDef GPIO_InitStructure;
;;;82     
;;;83     	/* 使能GPIO 时钟 */
;;;84     	RCC_APB2PeriphClockCmd(SF_RCC_CS, ENABLE);
000002  2101              MOVS     r1,#1
000004  2004              MOVS     r0,#4
000006  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;85     
;;;86     	/* 配置片选口线为推挽输出模式 */
;;;87     	sf_SetCS(1);		/* 片选置高，不选中 */
00000a  2001              MOVS     r0,#1
00000c  f7fffffe          BL       sf_SetCS
;;;88     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
000010  2010              MOVS     r0,#0x10
000012  f88d0003          STRB     r0,[sp,#3]
;;;89     	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000016  2003              MOVS     r0,#3
000018  f88d0002          STRB     r0,[sp,#2]
;;;90     	GPIO_InitStructure.GPIO_Pin = SF_PIN_CS;
00001c  2010              MOVS     r0,#0x10
00001e  f8ad0000          STRH     r0,[sp,#0]
;;;91     	GPIO_Init(SF_PORT_CS, &GPIO_InitStructure);
000022  4669              MOV      r1,sp
000024  4801              LDR      r0,|L5.44|
000026  f7fffffe          BL       GPIO_Init
;;;92     }
00002a  bd08              POP      {r3,pc}
;;;93     
                          ENDP

                  |L5.44|
                          DCD      0x40010800

                          AREA ||i.sf_EraseChip||, CODE, READONLY, ALIGN=1

                  sf_EraseChip PROC
;;;217    */
;;;218    void sf_EraseChip(void)
000000  b510              PUSH     {r4,lr}
;;;219    {
;;;220    	sf_WriteEnable();								/* 发送写使能命令 */
000002  f7fffffe          BL       sf_WriteEnable
;;;221    
;;;222    	/* 擦除整块flash操作 */
;;;223    	sf_SetCS(0);									/* 使能片选 */
000006  2000              MOVS     r0,#0
000008  f7fffffe          BL       sf_SetCS
;;;224    	bsp_spiWrite1(CMD_BE);							/* 发送整片擦除命令 */
00000c  20c7              MOVS     r0,#0xc7
00000e  f7fffffe          BL       bsp_spiWrite1
;;;225    	sf_SetCS(1);									/* 禁能片选 */
000012  2001              MOVS     r0,#1
000014  f7fffffe          BL       sf_SetCS
;;;226    
;;;227    	sf_WaitForWriteEnd();							/* 等待串行Flash内部写操作完成 */
000018  f7fffffe          BL       sf_WaitForWriteEnd
;;;228    }
00001c  bd10              POP      {r4,pc}
;;;229    
                          ENDP


                          AREA ||i.sf_EraseSubSector||, CODE, READONLY, ALIGN=1

                  sf_EraseSubSector PROC
;;;194    */
;;;195    void sf_EraseSubSector(uint32_t _uiSectorAddr)
000000  b510              PUSH     {r4,lr}
;;;196    {
000002  4604              MOV      r4,r0
;;;197    	sf_WriteEnable();								/* 发送写使能命令 */
000004  f7fffffe          BL       sf_WriteEnable
;;;198    
;;;199    	/* 擦除扇区操作 */
;;;200    	sf_SetCS(0);									/* 使能片选 */
000008  2000              MOVS     r0,#0
00000a  f7fffffe          BL       sf_SetCS
;;;201    	bsp_spiWrite1(CMD_SUBSE);							/* 发送擦除命令 */
00000e  2020              MOVS     r0,#0x20
000010  f7fffffe          BL       bsp_spiWrite1
;;;202    	bsp_spiWrite1((_uiSectorAddr & 0xFF0000) >> 16);	/* 发送扇区地址的高8bit */
000014  f3c44007          UBFX     r0,r4,#16,#8
000018  f7fffffe          BL       bsp_spiWrite1
;;;203    	bsp_spiWrite1((_uiSectorAddr & 0xFF00) >> 8);		/* 发送扇区地址中间8bit */
00001c  f3c42007          UBFX     r0,r4,#8,#8
000020  f7fffffe          BL       bsp_spiWrite1
;;;204    	bsp_spiWrite1(_uiSectorAddr & 0xFF);				/* 发送扇区地址低8bit */
000024  b2e0              UXTB     r0,r4
000026  f7fffffe          BL       bsp_spiWrite1
;;;205    	sf_SetCS(1);									/* 禁能片选 */
00002a  2001              MOVS     r0,#1
00002c  f7fffffe          BL       sf_SetCS
;;;206    
;;;207    	sf_WaitForWriteEnd();							/* 等待串行Flash内部写操作完成 */
000030  f7fffffe          BL       sf_WaitForWriteEnd
;;;208    }
000034  bd10              POP      {r4,pc}
;;;209    
                          ENDP


                          AREA ||i.sf_NeedErase||, CODE, READONLY, ALIGN=1

                  sf_NeedErase PROC
;;;403    */
;;;404    static uint8_t sf_NeedErase(uint8_t * _ucpOldBuf, uint8_t *_ucpNewBuf, uint16_t _usLen)
000000  b570              PUSH     {r4-r6,lr}
;;;405    {
000002  4603              MOV      r3,r0
;;;406    	uint16_t i;
;;;407    	uint8_t ucOld;
;;;408    
;;;409    	/*
;;;410    	算法第1步：old 求反, new 不变
;;;411    	      old    new
;;;412    		  1101   0101
;;;413    	~     1111
;;;414    		= 0010   0101
;;;415    
;;;416    	算法第2步: old 求反的结果与 new 位与
;;;417    		  0010   old
;;;418    	&	  0101   new
;;;419    		 =0000
;;;420    
;;;421    	算法第3步: 结果为0,则表示无需擦除. 否则表示需要擦除
;;;422    	*/
;;;423    
;;;424    	for (i = 0; i < _usLen; i++)
000004  2400              MOVS     r4,#0
000006  e00b              B        |L8.32|
                  |L8.8|
;;;425    	{
;;;426    		ucOld = *_ucpOldBuf++;
000008  f8135b01          LDRB     r5,[r3],#1
;;;427    		ucOld = ~ucOld;
00000c  43e8              MVNS     r0,r5
00000e  b2c5              UXTB     r5,r0
;;;428    
;;;429    		/* 注意错误的写法: if (ucOld & (*_ucpNewBuf++) != 0) */
;;;430    		if ((ucOld & (*_ucpNewBuf++)) != 0)
000010  f8110b01          LDRB     r0,[r1],#1
000014  4028              ANDS     r0,r0,r5
000016  b108              CBZ      r0,|L8.28|
;;;431    		{
;;;432    			return 1;
000018  2001              MOVS     r0,#1
                  |L8.26|
;;;433    		}
;;;434    	}
;;;435    	return 0;
;;;436    }
00001a  bd70              POP      {r4-r6,pc}
                  |L8.28|
00001c  1c60              ADDS     r0,r4,#1              ;424
00001e  b284              UXTH     r4,r0                 ;424
                  |L8.32|
000020  4294              CMP      r4,r2                 ;424
000022  dbf1              BLT      |L8.8|
000024  2000              MOVS     r0,#0                 ;435
000026  e7f8              B        |L8.26|
;;;437    
                          ENDP


                          AREA ||i.sf_PageWrite||, CODE, READONLY, ALIGN=2

                  sf_PageWrite PROC
;;;239    */
;;;240    void sf_PageWrite(uint8_t * _pBuf, uint32_t _uiWriteAddr, uint16_t _usSize)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;241    {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4615              MOV      r5,r2
;;;242    	uint32_t i, j;
;;;243    
;;;244    	if (g_tSF.ChipID == SST25VF016B_ID)
00000a  484a              LDR      r0,|L9.308|
00000c  6800              LDR      r0,[r0,#0]  ; g_tSF
00000e  494a              LDR      r1,|L9.312|
000010  4288              CMP      r0,r1
000012  d153              BNE      |L9.188|
;;;245    	{
;;;246    		/* AAI指令要求传入的数据个数是偶数 */
;;;247    		if ((_usSize < 2) && (_usSize % 2))
000014  2d02              CMP      r5,#2
000016  da08              BGE      |L9.42|
000018  4628              MOV      r0,r5
00001a  eb0571d0          ADD      r1,r5,r0,LSR #31
00001e  1049              ASRS     r1,r1,#1
000020  eba50141          SUB      r1,r5,r1,LSL #1
000024  b109              CBZ      r1,|L9.42|
                  |L9.38|
;;;248    		{
;;;249    			return ;
;;;250    		}
;;;251    
;;;252    		sf_WriteEnable();								/* 发送写使能命令 */
;;;253    
;;;254    		sf_SetCS(0);									/* 使能片选 */
;;;255    		bsp_spiWrite1(CMD_AAI);							/* 发送AAI命令(地址自动增加编程) */
;;;256    		bsp_spiWrite1((_uiWriteAddr & 0xFF0000) >> 16);	/* 发送扇区地址的高8bit */
;;;257    		bsp_spiWrite1((_uiWriteAddr & 0xFF00) >> 8);	/* 发送扇区地址中间8bit */
;;;258    		bsp_spiWrite1(_uiWriteAddr & 0xFF);				/* 发送扇区地址低8bit */
;;;259    		bsp_spiWrite1(*_pBuf++);							/* 发送第1个数据 */
;;;260    		bsp_spiWrite1(*_pBuf++);							/* 发送第2个数据 */
;;;261    		sf_SetCS(1);									/* 禁能片选 */
;;;262    
;;;263    		sf_WaitForWriteEnd();							/* 等待串行Flash内部写操作完成 */
;;;264    
;;;265    		_usSize -= 2;									/* 计算剩余字节数 */
;;;266    
;;;267    		for (i = 0; i < _usSize / 2; i++)
;;;268    		{
;;;269    			sf_SetCS(0);								/* 使能片选 */
;;;270    			bsp_spiWrite1(CMD_AAI);						/* 发送AAI命令(地址自动增加编程) */
;;;271    			bsp_spiWrite1(*_pBuf++);						/* 发送数据 */
;;;272    			bsp_spiWrite1(*_pBuf++);						/* 发送数据 */
;;;273    			sf_SetCS(1);								/* 禁能片选 */
;;;274    			sf_WaitForWriteEnd();						/* 等待串行Flash内部写操作完成 */
;;;275    		}
;;;276    
;;;277    		/* 进入写保护状态 */
;;;278    		sf_SetCS(0);
;;;279    		bsp_spiWrite1(CMD_DISWR);
;;;280    		sf_SetCS(1);
;;;281    
;;;282    		sf_WaitForWriteEnd();							/* 等待串行Flash内部写操作完成 */
;;;283    	}
;;;284    	else	/* for MX25L1606E 、 W25Q64BV、N25Q128A */
;;;285    	{
;;;286    		for (j = 0; j < _usSize / 256; j++)
;;;287    		{
;;;288    			sf_WriteEnable();								/* 发送写使能命令 */
;;;289    
;;;290    			sf_SetCS(0);									/* 使能片选 */
;;;291    			bsp_spiWrite1(CMD_PACKWR);						/* 发送AAI命令(地址自动增加编程) */
;;;292    			bsp_spiWrite1((_uiWriteAddr & 0xFF0000) >> 16);	/* 发送扇区地址的高8bit */
;;;293    			bsp_spiWrite1((_uiWriteAddr & 0xFF00) >> 8);	/* 发送扇区地址中间8bit */
;;;294    			bsp_spiWrite1(_uiWriteAddr & 0xFF);				/* 发送扇区地址低8bit */
;;;295    
;;;296    			for (i = 0; i < 256; i++)
;;;297    			{
;;;298    				bsp_spiWrite1(*_pBuf++);					/* 发送数据 */
;;;299    			}
;;;300    
;;;301    			sf_SetCS(1);								/* 禁止片选 */
;;;302    
;;;303    			sf_WaitForWriteEnd();						/* 等待串行Flash内部写操作完成 */
;;;304    
;;;305    			_uiWriteAddr += 256;
;;;306    		}
;;;307    
;;;308    		/* 进入写保护状态 */
;;;309    		sf_SetCS(0);
;;;310    		bsp_spiWrite1(CMD_DISWR);
;;;311    		sf_SetCS(1);
;;;312    
;;;313    		sf_WaitForWriteEnd();							/* 等待串行Flash内部写操作完成 */
;;;314    	}
;;;315    }
000026  e8bd81f0          POP      {r4-r8,pc}
                  |L9.42|
00002a  f7fffffe          BL       sf_WriteEnable
00002e  2000              MOVS     r0,#0                 ;254
000030  f7fffffe          BL       sf_SetCS
000034  20ad              MOVS     r0,#0xad              ;255
000036  f7fffffe          BL       bsp_spiWrite1
00003a  f3c64007          UBFX     r0,r6,#16,#8          ;256
00003e  f7fffffe          BL       bsp_spiWrite1
000042  f3c62007          UBFX     r0,r6,#8,#8           ;257
000046  f7fffffe          BL       bsp_spiWrite1
00004a  b2f0              UXTB     r0,r6                 ;258
00004c  f7fffffe          BL       bsp_spiWrite1
000050  f8140b01          LDRB     r0,[r4],#1            ;259
000054  f7fffffe          BL       bsp_spiWrite1
000058  f8140b01          LDRB     r0,[r4],#1            ;260
00005c  f7fffffe          BL       bsp_spiWrite1
000060  2001              MOVS     r0,#1                 ;261
000062  f7fffffe          BL       sf_SetCS
000066  f7fffffe          BL       sf_WaitForWriteEnd
00006a  1ea8              SUBS     r0,r5,#2              ;265
00006c  b285              UXTH     r5,r0                 ;265
00006e  2700              MOVS     r7,#0                 ;267
000070  e013              B        |L9.154|
                  |L9.114|
000072  2000              MOVS     r0,#0                 ;269
000074  f7fffffe          BL       sf_SetCS
000078  20ad              MOVS     r0,#0xad              ;270
00007a  f7fffffe          BL       bsp_spiWrite1
00007e  f8140b01          LDRB     r0,[r4],#1            ;271
000082  f7fffffe          BL       bsp_spiWrite1
000086  f8140b01          LDRB     r0,[r4],#1            ;272
00008a  f7fffffe          BL       bsp_spiWrite1
00008e  2001              MOVS     r0,#1                 ;273
000090  f7fffffe          BL       sf_SetCS
000094  f7fffffe          BL       sf_WaitForWriteEnd
000098  1c7f              ADDS     r7,r7,#1              ;267
                  |L9.154|
00009a  eb0571d5          ADD      r1,r5,r5,LSR #31      ;267
00009e  ebb70f61          CMP      r7,r1,ASR #1          ;267
0000a2  d3e6              BCC      |L9.114|
0000a4  2000              MOVS     r0,#0                 ;278
0000a6  f7fffffe          BL       sf_SetCS
0000aa  2004              MOVS     r0,#4                 ;279
0000ac  f7fffffe          BL       bsp_spiWrite1
0000b0  2001              MOVS     r0,#1                 ;280
0000b2  f7fffffe          BL       sf_SetCS
0000b6  f7fffffe          BL       sf_WaitForWriteEnd
0000ba  e038              B        |L9.302|
                  |L9.188|
0000bc  f04f0800          MOV      r8,#0                 ;286
0000c0  e024              B        |L9.268|
                  |L9.194|
0000c2  f7fffffe          BL       sf_WriteEnable
0000c6  2000              MOVS     r0,#0                 ;290
0000c8  f7fffffe          BL       sf_SetCS
0000cc  2002              MOVS     r0,#2                 ;291
0000ce  f7fffffe          BL       bsp_spiWrite1
0000d2  f3c64007          UBFX     r0,r6,#16,#8          ;292
0000d6  f7fffffe          BL       bsp_spiWrite1
0000da  f3c62007          UBFX     r0,r6,#8,#8           ;293
0000de  f7fffffe          BL       bsp_spiWrite1
0000e2  b2f0              UXTB     r0,r6                 ;294
0000e4  f7fffffe          BL       bsp_spiWrite1
0000e8  2700              MOVS     r7,#0                 ;296
0000ea  e004              B        |L9.246|
                  |L9.236|
0000ec  f8140b01          LDRB     r0,[r4],#1            ;298
0000f0  f7fffffe          BL       bsp_spiWrite1
0000f4  1c7f              ADDS     r7,r7,#1              ;296
                  |L9.246|
0000f6  2fff              CMP      r7,#0xff              ;296
0000f8  d9f8              BLS      |L9.236|
0000fa  2001              MOVS     r0,#1                 ;301
0000fc  f7fffffe          BL       sf_SetCS
000100  f7fffffe          BL       sf_WaitForWriteEnd
000104  f5067680          ADD      r6,r6,#0x100          ;305
000108  f1080801          ADD      r8,r8,#1              ;286
                  |L9.268|
00010c  17e9              ASRS     r1,r5,#31             ;286
00010e  eb056111          ADD      r1,r5,r1,LSR #24      ;286
000112  ebb82f21          CMP      r8,r1,ASR #8          ;286
000116  d3d4              BCC      |L9.194|
000118  2000              MOVS     r0,#0                 ;309
00011a  f7fffffe          BL       sf_SetCS
00011e  2004              MOVS     r0,#4                 ;310
000120  f7fffffe          BL       bsp_spiWrite1
000124  2001              MOVS     r0,#1                 ;311
000126  f7fffffe          BL       sf_SetCS
00012a  f7fffffe          BL       sf_WaitForWriteEnd
                  |L9.302|
00012e  bf00              NOP      
000130  e779              B        |L9.38|
;;;316    
                          ENDP

000132  0000              DCW      0x0000
                  |L9.308|
                          DCD      g_tSF
                  |L9.312|
                          DCD      0x00bf2541

                          AREA ||i.sf_ReadBuffer||, CODE, READONLY, ALIGN=2

                  sf_ReadBuffer PROC
;;;326    */
;;;327    uint8_t sf_ReadBuffer(uint8_t * _pBuf, uint32_t _uiReadAddr, uint32_t _uiSize)
000000  b570              PUSH     {r4-r6,lr}
;;;328    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
000006  4615              MOV      r5,r2
;;;329    	/* 如果读取的数据长度为0或者超出串行Flash地址空间，则直接返回 */
;;;330    	if ((_uiSize == 0) ||(_uiReadAddr + _uiSize) > g_tSF.TotalSize)
000008  b125              CBZ      r5,|L10.20|
00000a  1960              ADDS     r0,r4,r5
00000c  4912              LDR      r1,|L10.88|
00000e  6949              LDR      r1,[r1,#0x14]  ; g_tSF
000010  4288              CMP      r0,r1
000012  d901              BLS      |L10.24|
                  |L10.20|
;;;331    	{
;;;332    		return 0;
000014  2000              MOVS     r0,#0
                  |L10.22|
;;;333    	}
;;;334    
;;;335    	/* 读操作 */
;;;336    	sf_SetCS(0);									/* 使能片选 */
;;;337    	bsp_spiWrite1(CMD_READ);						/* 发送读命令 */
;;;338    	bsp_spiWrite1((_uiReadAddr & 0xFF0000) >> 16);	/* 发送扇区地址的高8bit */
;;;339    	bsp_spiWrite1((_uiReadAddr & 0xFF00) >> 8);		/* 发送扇区地址中间8bit */
;;;340    	bsp_spiWrite1(_uiReadAddr & 0xFF);				/* 发送扇区地址低8bit */
;;;341    	while (_uiSize--)
;;;342    	{
;;;343    		*_pBuf++ = bsp_spiRead1();					/* 读一个字节并存储到pBuf，读完后指针自加1 */
;;;344    	}
;;;345    	sf_SetCS(1);									/* 禁能片选 */
;;;346    	
;;;347    	return 1;
;;;348    }
000016  bd70              POP      {r4-r6,pc}
                  |L10.24|
000018  2000              MOVS     r0,#0                 ;336
00001a  f7fffffe          BL       sf_SetCS
00001e  2003              MOVS     r0,#3                 ;337
000020  f7fffffe          BL       bsp_spiWrite1
000024  f3c44007          UBFX     r0,r4,#16,#8          ;338
000028  f7fffffe          BL       bsp_spiWrite1
00002c  f3c42007          UBFX     r0,r4,#8,#8           ;339
000030  f7fffffe          BL       bsp_spiWrite1
000034  b2e0              UXTB     r0,r4                 ;340
000036  f7fffffe          BL       bsp_spiWrite1
00003a  e003              B        |L10.68|
                  |L10.60|
00003c  f7fffffe          BL       bsp_spiRead1
000040  f8060b01          STRB     r0,[r6],#1            ;343
                  |L10.68|
000044  1e28              SUBS     r0,r5,#0              ;341
000046  f1a50501          SUB      r5,r5,#1              ;341
00004a  d1f7              BNE      |L10.60|
00004c  2001              MOVS     r0,#1                 ;345
00004e  f7fffffe          BL       sf_SetCS
000052  2001              MOVS     r0,#1                 ;347
000054  e7df              B        |L10.22|
;;;349    
                          ENDP

000056  0000              DCW      0x0000
                  |L10.88|
                          DCD      g_tSF

                          AREA ||i.sf_ReadID||, CODE, READONLY, ALIGN=1

                  sf_ReadID PROC
;;;661    */
;;;662    uint32_t sf_ReadID(void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;663    {
;;;664    	uint32_t uiID;
;;;665    	uint8_t id1, id2, id3;
;;;666    
;;;667    	sf_SetCS(0);							/* 使能片选 */
000004  2000              MOVS     r0,#0
000006  f7fffffe          BL       sf_SetCS
;;;668    	bsp_spiWrite1(CMD_RDID);				/* 发送读ID命令 */
00000a  209f              MOVS     r0,#0x9f
00000c  f7fffffe          BL       bsp_spiWrite1
;;;669    	id1 = bsp_spiRead1();					/* 读ID的第1个字节 */
000010  f7fffffe          BL       bsp_spiRead1
000014  4605              MOV      r5,r0
;;;670    	id2 = bsp_spiRead1();					/* 读ID的第2个字节 */
000016  f7fffffe          BL       bsp_spiRead1
00001a  4606              MOV      r6,r0
;;;671    	id3 = bsp_spiRead1();					/* 读ID的第3个字节 */
00001c  f7fffffe          BL       bsp_spiRead1
000020  4607              MOV      r7,r0
;;;672    	sf_SetCS(1);							/* 禁能片选 */
000022  2001              MOVS     r0,#1
000024  f7fffffe          BL       sf_SetCS
;;;673    
;;;674    	uiID = ((uint32_t)id1 << 16) | ((uint32_t)id2 << 8) | id3;
000028  0428              LSLS     r0,r5,#16
00002a  ea402006          ORR      r0,r0,r6,LSL #8
00002e  ea400407          ORR      r4,r0,r7
;;;675    
;;;676    	return uiID;
000032  4620              MOV      r0,r4
;;;677    }
000034  e8bd81f0          POP      {r4-r8,pc}
;;;678    
                          ENDP


                          AREA ||i.sf_ReadInfo||, CODE, READONLY, ALIGN=2

                  sf_ReadInfo PROC
;;;686    */
;;;687    void sf_ReadInfo(void)
000000  b510              PUSH     {r4,lr}
;;;688    {
;;;689    	/* 自动识别串行Flash型号 */
;;;690    	{
;;;691    		g_tSF.ChipID = sf_ReadID();	/* 芯片ID */
000002  f7fffffe          BL       sf_ReadID
000006  4931              LDR      r1,|L12.204|
000008  6008              STR      r0,[r1,#0]  ; g_tSF
;;;692    
;;;693    		switch (g_tSF.ChipID)
00000a  4608              MOV      r0,r1
00000c  6800              LDR      r0,[r0,#0]  ; g_tSF
00000e  4a30              LDR      r2,|L12.208|
000010  1a81              SUBS     r1,r0,r2
000012  4290              CMP      r0,r2
000014  d01b              BEQ      |L12.78|
000016  dc08              BGT      |L12.42|
000018  492e              LDR      r1,|L12.212|
00001a  4408              ADD      r0,r0,r1
00001c  2800              CMP      r0,#0
00001e  d03a              BEQ      |L12.150|
000020  492d              LDR      r1,|L12.216|
000022  4408              ADD      r0,r0,r1
000024  2800              CMP      r0,#0
000026  d142              BNE      |L12.174|
000028  e005              B        |L12.54|
                  |L12.42|
00002a  482c              LDR      r0,|L12.220|
00002c  4408              ADD      r0,r0,r1
00002e  b1d0              CBZ      r0,|L12.102|
000030  2801              CMP      r0,#1
000032  d13c              BNE      |L12.174|
000034  e023              B        |L12.126|
                  |L12.54|
;;;694    		{
;;;695    			case SST25VF016B_ID:
;;;696    				strcpy(g_tSF.ChipName, "SST25VF016B");//字符串复制（后者复制到前者）用作显示
000036  a12a              ADR      r1,|L12.224|
000038  4824              LDR      r0,|L12.204|
00003a  1d00              ADDS     r0,r0,#4
00003c  f7fffffe          BL       strcpy
;;;697    				g_tSF.TotalSize = 2 * 1024 * 1024;	/* 总容量 = 2M */
000040  f44f1000          MOV      r0,#0x200000
000044  4921              LDR      r1,|L12.204|
000046  6148              STR      r0,[r1,#0x14]  ; g_tSF
;;;698    				g_tSF.PageSize = 4 * 1024;			/* 页面大小 = 4K */
000048  1240              ASRS     r0,r0,#9
00004a  8308              STRH     r0,[r1,#0x18]
;;;699    				break;
00004c  e03b              B        |L12.198|
                  |L12.78|
;;;700    
;;;701    			case MX25L1606E_ID:
;;;702    				strcpy(g_tSF.ChipName, "MX25L1606E");
00004e  a127              ADR      r1,|L12.236|
000050  481e              LDR      r0,|L12.204|
000052  1d00              ADDS     r0,r0,#4
000054  f7fffffe          BL       strcpy
;;;703    				g_tSF.TotalSize = 2 * 1024 * 1024;	/* 总容量 = 2M */
000058  f44f1000          MOV      r0,#0x200000
00005c  491b              LDR      r1,|L12.204|
00005e  6148              STR      r0,[r1,#0x14]  ; g_tSF
;;;704    				g_tSF.PageSize = 4 * 1024;			/* 页面大小 = 4K */
000060  1240              ASRS     r0,r0,#9
000062  8308              STRH     r0,[r1,#0x18]
;;;705    				break;
000064  e02f              B        |L12.198|
                  |L12.102|
;;;706    
;;;707    			case W25Q64_ID:
;;;708    				strcpy(g_tSF.ChipName, "W25Q64");
000066  a124              ADR      r1,|L12.248|
000068  4818              LDR      r0,|L12.204|
00006a  1d00              ADDS     r0,r0,#4
00006c  f7fffffe          BL       strcpy
;;;709    				g_tSF.TotalSize = 8 * 1024 * 1024;	/* 总容量 = 8M */
000070  f44f0000          MOV      r0,#0x800000
000074  4915              LDR      r1,|L12.204|
000076  6148              STR      r0,[r1,#0x14]  ; g_tSF
;;;710    				g_tSF.PageSize = 4 * 1024;			/* 页面大小 = 4K */
000078  12c0              ASRS     r0,r0,#11
00007a  8308              STRH     r0,[r1,#0x18]
;;;711    				break;
00007c  e023              B        |L12.198|
                  |L12.126|
;;;712    
;;;713    
;;;714    			case W25Q128_ID:
;;;715    				strcpy(g_tSF.ChipName, "W25Q128");
00007e  a120              ADR      r1,|L12.256|
000080  4812              LDR      r0,|L12.204|
000082  1d00              ADDS     r0,r0,#4
000084  f7fffffe          BL       strcpy
;;;716    				g_tSF.TotalSize = 16 * 1024 * 1024;	/* 总容量 = 16M */
000088  f04f7080          MOV      r0,#0x1000000
00008c  490f              LDR      r1,|L12.204|
00008e  6148              STR      r0,[r1,#0x14]  ; g_tSF
;;;717    				g_tSF.PageSize = 4 * 1024;			/* 页面大小 = 4K */
000090  1300              ASRS     r0,r0,#12
000092  8308              STRH     r0,[r1,#0x18]
;;;718    				break;		
000094  e017              B        |L12.198|
                  |L12.150|
;;;719    
;;;720    			case N25Q128A_ID:
;;;721    				strcpy(g_tSF.ChipName, "N25Q128A");
000096  a11c              ADR      r1,|L12.264|
000098  480c              LDR      r0,|L12.204|
00009a  1d00              ADDS     r0,r0,#4
00009c  f7fffffe          BL       strcpy
;;;722    				g_tSF.TotalSize = 16 * 1024 * 1024;	/* 总容量 = 16M */
0000a0  f04f7080          MOV      r0,#0x1000000
0000a4  4909              LDR      r1,|L12.204|
0000a6  6148              STR      r0,[r1,#0x14]  ; g_tSF
;;;723    				g_tSF.PageSize = 4 * 1024;			/* 子扇区大小 = 4K */
0000a8  1300              ASRS     r0,r0,#12
0000aa  8308              STRH     r0,[r1,#0x18]
;;;724    				break;
0000ac  e00b              B        |L12.198|
                  |L12.174|
;;;725    
;;;726    			default:
;;;727    				strcpy(g_tSF.ChipName, "Unknow Flash");
0000ae  a119              ADR      r1,|L12.276|
0000b0  4806              LDR      r0,|L12.204|
0000b2  1d00              ADDS     r0,r0,#4
0000b4  f7fffffe          BL       strcpy
;;;728    				g_tSF.TotalSize = 2 * 1024 * 1024;
0000b8  f44f1000          MOV      r0,#0x200000
0000bc  4903              LDR      r1,|L12.204|
0000be  6148              STR      r0,[r1,#0x14]  ; g_tSF
;;;729    				g_tSF.PageSize = 4 * 1024;
0000c0  1240              ASRS     r0,r0,#9
0000c2  8308              STRH     r0,[r1,#0x18]
;;;730    				break;
0000c4  bf00              NOP      
                  |L12.198|
0000c6  bf00              NOP                            ;699
;;;731    		}
;;;732    	}
;;;733    }
0000c8  bd10              POP      {r4,pc}
;;;734    
                          ENDP

0000ca  0000              DCW      0x0000
                  |L12.204|
                          DCD      g_tSF
                  |L12.208|
                          DCD      0x00c22015
                  |L12.212|
                          DCD      0xffdf45e8
                  |L12.216|
                          DCD      0xff6194d7
                  |L12.220|
                          DCD      0xffd2dffe
                  |L12.224|
0000e0  53535432          DCB      "SST25VF016B",0
0000e4  35564630
0000e8  31364200
                  |L12.236|
0000ec  4d583235          DCB      "MX25L1606E",0
0000f0  4c313630
0000f4  364500  
0000f7  00                DCB      0
                  |L12.248|
0000f8  57323551          DCB      "W25Q64",0
0000fc  363400  
0000ff  00                DCB      0
                  |L12.256|
000100  57323551          DCB      "W25Q128",0
000104  31323800
                  |L12.264|
000108  4e323551          DCB      "N25Q128A",0
00010c  31323841
000110  00      
000111  00                DCB      0
000112  00                DCB      0
000113  00                DCB      0
                  |L12.276|
000114  556e6b6e          DCB      "Unknow Flash",0
000118  6f772046
00011c  6c617368
000120  00      
000121  00                DCB      0
000122  00                DCB      0
000123  00                DCB      0

                          AREA ||i.sf_SetCS||, CODE, READONLY, ALIGN=2

                  sf_SetCS PROC
;;;134    */
;;;135    static void sf_SetCS(uint8_t _level)
000000  b510              PUSH     {r4,lr}
;;;136    {
000002  4604              MOV      r4,r0
;;;137    	if (_level == 0)
000004  b944              CBNZ     r4,|L13.24|
;;;138    	{
;;;139    		bsp_SpiBusEnter();	/* 占用SPI总线， 用于总线共享 */
000006  f7fffffe          BL       bsp_SpiBusEnter
;;;140    
;;;141    		#ifdef SOFT_SPI		/* 软件SPI */
;;;142    			bsp_SetSpiSck(1);
00000a  2001              MOVS     r0,#1
00000c  f7fffffe          BL       bsp_SetSpiSck
;;;143    			SF_CS_0();
000010  2010              MOVS     r0,#0x10
000012  4905              LDR      r1,|L13.40|
000014  6008              STR      r0,[r1,#0]
000016  e005              B        |L13.36|
                  |L13.24|
;;;144    		#endif
;;;145    
;;;146    		#ifdef HARD_SPI		/* 硬件SPI */
;;;147    
;;;148    			bsp_SPI_Init(SPI_Direction_2Lines_FullDuplex | SPI_Mode_Master | SPI_DataSize_8b
;;;149    				| SPI_CPOL_High | SPI_CPHA_2Edge | SPI_NSS_Soft | SPI_BaudRatePrescaler_8 | SPI_FirstBit_MSB);
;;;150    
;;;151    			SF_CS_0();
;;;152    		#endif
;;;153    	}
;;;154    	else
;;;155    	{
;;;156    		SF_CS_1();
000018  2010              MOVS     r0,#0x10
00001a  4903              LDR      r1,|L13.40|
00001c  1f09              SUBS     r1,r1,#4
00001e  6008              STR      r0,[r1,#0]
;;;157    
;;;158    		bsp_SpiBusExit();	/* 释放SPI总线， 用于总线共享 */
000020  f7fffffe          BL       bsp_SpiBusExit
                  |L13.36|
;;;159    	}
;;;160    }
000024  bd10              POP      {r4,pc}
;;;161    
                          ENDP

000026  0000              DCW      0x0000
                  |L13.40|
                          DCD      0x40010814

                          AREA ||i.sf_WaitForWriteEnd||, CODE, READONLY, ALIGN=1

                  sf_WaitForWriteEnd PROC
;;;790    */
;;;791    static void sf_WaitForWriteEnd(void)
000000  b510              PUSH     {r4,lr}
;;;792    {
;;;793    	sf_SetCS(0);									/* 使能片选 */
000002  2000              MOVS     r0,#0
000004  f7fffffe          BL       sf_SetCS
;;;794    	bsp_spiWrite1(CMD_RDSR);						/* 发送命令， 读状态寄存器 */
000008  2005              MOVS     r0,#5
00000a  f7fffffe          BL       bsp_spiWrite1
;;;795    	while((bsp_spiRead1() & WIP_FLAG) == SET);		/* 判断状态寄存器的忙标志位 */
00000e  bf00              NOP      
                  |L14.16|
000010  f7fffffe          BL       bsp_spiRead1
000014  f0000001          AND      r0,r0,#1
000018  2800              CMP      r0,#0
00001a  d1f9              BNE      |L14.16|
;;;796    	sf_SetCS(1);									/* 禁能片选 */
00001c  2001              MOVS     r0,#1
00001e  f7fffffe          BL       sf_SetCS
;;;797    }
000022  bd10              POP      {r4,pc}
;;;798    
                          ENDP


                          AREA ||i.sf_WriteBuffer||, CODE, READONLY, ALIGN=2

                  sf_WriteBuffer PROC
;;;553    */
;;;554    uint8_t sf_WriteBuffer(uint8_t* _pBuf, uint32_t _uiWriteAddr, uint16_t _usWriteSize)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;555    {
000004  4607              MOV      r7,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
;;;556    	uint16_t NumOfPage = 0, NumOfSingle = 0, Addr = 0, count = 0, temp = 0;
00000a  f04f0800          MOV      r8,#0
00000e  46c1              MOV      r9,r8
000010  46c2              MOV      r10,r8
000012  2400              MOVS     r4,#0
000014  46a3              MOV      r11,r4
;;;557    
;;;558    	Addr = _uiWriteAddr % g_tSF.PageSize;			
000016  4856              LDR      r0,|L15.368|
000018  8b00              LDRH     r0,[r0,#0x18]  ; g_tSF
00001a  fbb5f1f0          UDIV     r1,r5,r0
00001e  fb005011          MLS      r0,r0,r1,r5
000022  fa1ffa80          UXTH     r10,r0
;;;559    	count = g_tSF.PageSize - Addr;
000026  4852              LDR      r0,|L15.368|
000028  8b00              LDRH     r0,[r0,#0x18]  ; g_tSF
00002a  eba0000a          SUB      r0,r0,r10
00002e  b284              UXTH     r4,r0
;;;560    	NumOfPage =  _usWriteSize / g_tSF.PageSize;			//计算写入所需页数
000030  484f              LDR      r0,|L15.368|
000032  8b00              LDRH     r0,[r0,#0x18]  ; g_tSF
000034  fb96f0f0          SDIV     r0,r6,r0
000038  fa1ff880          UXTH     r8,r0
;;;561    	NumOfSingle = _usWriteSize % g_tSF.PageSize;
00003c  484c              LDR      r0,|L15.368|
00003e  8b00              LDRH     r0,[r0,#0x18]  ; g_tSF
000040  fb96f1f0          SDIV     r1,r6,r0
000044  fb006011          MLS      r0,r0,r1,r6
000048  fa1ff980          UXTH     r9,r0
;;;562    
;;;563    	if (Addr == 0) /* 起始地址是页面首地址  */
00004c  f1ba0f00          CMP      r10,#0
000050  d12a              BNE      |L15.168|
;;;564    	{
;;;565    		if (NumOfPage == 0) /* 数据长度小于页面大小 */
000052  f1b80f00          CMP      r8,#0
000056  d108              BNE      |L15.106|
;;;566    		{
;;;567    			if (sf_AutoWritePage(_pBuf, _uiWriteAddr, _usWriteSize) == 0)
000058  4632              MOV      r2,r6
00005a  4629              MOV      r1,r5
00005c  4638              MOV      r0,r7
00005e  f7fffffe          BL       sf_AutoWritePage
000062  2800              CMP      r0,#0
000064  d17e              BNE      |L15.356|
                  |L15.102|
;;;568    			{
;;;569    				return 0;
;;;570    			}
;;;571    		}
;;;572    		else 	/* 数据长度大于等于页面大小 */
;;;573    		{
;;;574    			while (NumOfPage--)
;;;575    			{
;;;576    				if (sf_AutoWritePage(_pBuf, _uiWriteAddr, g_tSF.PageSize) == 0)
;;;577    				{
;;;578    					return 0;
;;;579    				}
;;;580    				_uiWriteAddr +=  g_tSF.PageSize;
;;;581    				_pBuf += g_tSF.PageSize;
;;;582    			}
;;;583    			if (sf_AutoWritePage(_pBuf, _uiWriteAddr, NumOfSingle) == 0)
;;;584    			{
;;;585    				return 0;
;;;586    			}
;;;587    		}
;;;588    	}
;;;589    	else  /* 起始地址不是页面首地址  */
;;;590    	{
;;;591    		if (NumOfPage == 0) /* 数据长度小于页面大小 */
;;;592    		{
;;;593    			if (NumOfSingle > count) 	/* (_usWriteSize + _uiWriteAddr) > SPI_FLASH_PAGESIZE */
;;;594    			{
;;;595    				temp = NumOfSingle - count;
;;;596    
;;;597    				if (sf_AutoWritePage(_pBuf, _uiWriteAddr, count) == 0)
;;;598    				{
;;;599    					return 0;
;;;600    				}
;;;601    
;;;602    				_uiWriteAddr +=  count;
;;;603    				_pBuf += count;
;;;604    
;;;605    				if (sf_AutoWritePage(_pBuf, _uiWriteAddr, temp) == 0)
;;;606    				{
;;;607    					return 0;
;;;608    				}
;;;609    			}
;;;610    			else
;;;611    			{
;;;612    				if (sf_AutoWritePage(_pBuf, _uiWriteAddr, _usWriteSize) == 0)
;;;613    				{
;;;614    					return 0;
;;;615    				}
;;;616    			}
;;;617    		}
;;;618    		else	/* 数据长度大于等于页面大小 */
;;;619    		{
;;;620    			_usWriteSize -= count;
;;;621    			NumOfPage =  _usWriteSize / g_tSF.PageSize;
;;;622    			NumOfSingle = _usWriteSize % g_tSF.PageSize;
;;;623    
;;;624    			if (sf_AutoWritePage(_pBuf, _uiWriteAddr, count) == 0)
;;;625    			{
;;;626    				return 0;
;;;627    			}
;;;628    
;;;629    			_uiWriteAddr +=  count;
;;;630    			_pBuf += count;
;;;631    
;;;632    			while (NumOfPage--)
;;;633    			{
;;;634    				if (sf_AutoWritePage(_pBuf, _uiWriteAddr, g_tSF.PageSize) == 0)
;;;635    				{
;;;636    					return 0;
;;;637    				}
;;;638    				_uiWriteAddr +=  g_tSF.PageSize;
;;;639    				_pBuf += g_tSF.PageSize;
;;;640    			}
;;;641    
;;;642    			if (NumOfSingle != 0)
;;;643    			{
;;;644    				if (sf_AutoWritePage(_pBuf, _uiWriteAddr, NumOfSingle) == 0)
;;;645    				{
;;;646    					return 0;
;;;647    				}
;;;648    			}
;;;649    		}
;;;650    	}
;;;651    	return 1;	/* 成功 */
;;;652    }
000066  e8bd9ff0          POP      {r4-r12,pc}
                  |L15.106|
00006a  e00e              B        |L15.138|
                  |L15.108|
00006c  4840              LDR      r0,|L15.368|
00006e  8b02              LDRH     r2,[r0,#0x18]         ;576  ; g_tSF
000070  4629              MOV      r1,r5                 ;576
000072  4638              MOV      r0,r7                 ;576
000074  f7fffffe          BL       sf_AutoWritePage
000078  b908              CBNZ     r0,|L15.126|
00007a  2000              MOVS     r0,#0                 ;578
00007c  e7f3              B        |L15.102|
                  |L15.126|
00007e  483c              LDR      r0,|L15.368|
000080  8b00              LDRH     r0,[r0,#0x18]         ;580  ; g_tSF
000082  4405              ADD      r5,r5,r0              ;580
000084  483a              LDR      r0,|L15.368|
000086  8b00              LDRH     r0,[r0,#0x18]         ;581  ; g_tSF
000088  4407              ADD      r7,r7,r0              ;581
                  |L15.138|
00008a  f1b80000          SUBS     r0,r8,#0              ;574
00008e  f1a80101          SUB      r1,r8,#1              ;574
000092  fa1ff881          UXTH     r8,r1                 ;574
000096  d1e9              BNE      |L15.108|
000098  464a              MOV      r2,r9                 ;583
00009a  4629              MOV      r1,r5                 ;583
00009c  4638              MOV      r0,r7                 ;583
00009e  f7fffffe          BL       sf_AutoWritePage
0000a2  2800              CMP      r0,#0                 ;583
0000a4  d161              BNE      |L15.362|
0000a6  e7de              B        |L15.102|
                  |L15.168|
0000a8  f1b80f00          CMP      r8,#0                 ;591
0000ac  d11f              BNE      |L15.238|
0000ae  45a1              CMP      r9,r4                 ;593
0000b0  dd15              BLE      |L15.222|
0000b2  eba90004          SUB      r0,r9,r4              ;595
0000b6  fa1ffb80          UXTH     r11,r0                ;595
0000ba  4622              MOV      r2,r4                 ;597
0000bc  4629              MOV      r1,r5                 ;597
0000be  4638              MOV      r0,r7                 ;597
0000c0  f7fffffe          BL       sf_AutoWritePage
0000c4  b908              CBNZ     r0,|L15.202|
0000c6  2000              MOVS     r0,#0                 ;599
0000c8  e7cd              B        |L15.102|
                  |L15.202|
0000ca  4425              ADD      r5,r5,r4              ;602
0000cc  4427              ADD      r7,r7,r4              ;603
0000ce  465a              MOV      r2,r11                ;605
0000d0  4629              MOV      r1,r5                 ;605
0000d2  4638              MOV      r0,r7                 ;605
0000d4  f7fffffe          BL       sf_AutoWritePage
0000d8  2800              CMP      r0,#0                 ;605
0000da  d146              BNE      |L15.362|
0000dc  e7c3              B        |L15.102|
                  |L15.222|
0000de  4632              MOV      r2,r6                 ;612
0000e0  4629              MOV      r1,r5                 ;612
0000e2  4638              MOV      r0,r7                 ;612
0000e4  f7fffffe          BL       sf_AutoWritePage
0000e8  bbe0              CBNZ     r0,|L15.356|
0000ea  2000              MOVS     r0,#0                 ;614
0000ec  e7bb              B        |L15.102|
                  |L15.238|
0000ee  1b30              SUBS     r0,r6,r4              ;620
0000f0  b286              UXTH     r6,r0                 ;620
0000f2  481f              LDR      r0,|L15.368|
0000f4  8b00              LDRH     r0,[r0,#0x18]         ;621  ; g_tSF
0000f6  fb96f0f0          SDIV     r0,r6,r0              ;621
0000fa  fa1ff880          UXTH     r8,r0                 ;621
0000fe  481c              LDR      r0,|L15.368|
000100  8b00              LDRH     r0,[r0,#0x18]         ;622  ; g_tSF
000102  fb96f1f0          SDIV     r1,r6,r0              ;622
000106  fb006011          MLS      r0,r0,r1,r6           ;622
00010a  fa1ff980          UXTH     r9,r0                 ;622
00010e  4622              MOV      r2,r4                 ;624
000110  4629              MOV      r1,r5                 ;624
000112  4638              MOV      r0,r7                 ;624
000114  f7fffffe          BL       sf_AutoWritePage
000118  b908              CBNZ     r0,|L15.286|
00011a  2000              MOVS     r0,#0                 ;626
00011c  e7a3              B        |L15.102|
                  |L15.286|
00011e  4425              ADD      r5,r5,r4              ;629
000120  4427              ADD      r7,r7,r4              ;630
000122  e00e              B        |L15.322|
                  |L15.292|
000124  4812              LDR      r0,|L15.368|
000126  8b02              LDRH     r2,[r0,#0x18]         ;634  ; g_tSF
000128  4629              MOV      r1,r5                 ;634
00012a  4638              MOV      r0,r7                 ;634
00012c  f7fffffe          BL       sf_AutoWritePage
000130  b908              CBNZ     r0,|L15.310|
000132  2000              MOVS     r0,#0                 ;636
000134  e797              B        |L15.102|
                  |L15.310|
000136  480e              LDR      r0,|L15.368|
000138  8b00              LDRH     r0,[r0,#0x18]         ;638  ; g_tSF
00013a  4405              ADD      r5,r5,r0              ;638
00013c  480c              LDR      r0,|L15.368|
00013e  8b00              LDRH     r0,[r0,#0x18]         ;639  ; g_tSF
000140  4407              ADD      r7,r7,r0              ;639
                  |L15.322|
000142  f1b80000          SUBS     r0,r8,#0              ;632
000146  f1a80101          SUB      r1,r8,#1              ;632
00014a  fa1ff881          UXTH     r8,r1                 ;632
00014e  d1e9              BNE      |L15.292|
000150  f1b90f00          CMP      r9,#0                 ;642
000154  d009              BEQ      |L15.362|
000156  464a              MOV      r2,r9                 ;644
000158  4629              MOV      r1,r5                 ;644
00015a  4638              MOV      r0,r7                 ;644
00015c  f7fffffe          BL       sf_AutoWritePage
000160  b900              CBNZ     r0,|L15.356|
000162  e000              B        |L15.358|
                  |L15.356|
000164  e001              B        |L15.362|
                  |L15.358|
000166  2000              MOVS     r0,#0                 ;646
000168  e77d              B        |L15.102|
                  |L15.362|
00016a  2001              MOVS     r0,#1                 ;651
00016c  e77b              B        |L15.102|
;;;653    
                          ENDP

00016e  0000              DCW      0x0000
                  |L15.368|
                          DCD      g_tSF

                          AREA ||i.sf_WriteEnable||, CODE, READONLY, ALIGN=1

                  sf_WriteEnable PROC
;;;742    */
;;;743    static void sf_WriteEnable(void)
000000  b510              PUSH     {r4,lr}
;;;744    {
;;;745    	sf_SetCS(0);									/* 使能片选 */
000002  2000              MOVS     r0,#0
000004  f7fffffe          BL       sf_SetCS
;;;746    	bsp_spiWrite1(CMD_WREN);						/* 发送命令 */
000008  2006              MOVS     r0,#6
00000a  f7fffffe          BL       bsp_spiWrite1
;;;747    	sf_SetCS(1);									/* 禁能片选 */
00000e  2001              MOVS     r0,#1
000010  f7fffffe          BL       sf_SetCS
;;;748    }
000014  bd10              POP      {r4,pc}
;;;749    
                          ENDP


                          AREA ||i.sf_WriteStatus||, CODE, READONLY, ALIGN=2

                  sf_WriteStatus PROC
;;;757    */
;;;758    static void sf_WriteStatus(uint8_t _ucValue)
000000  b510              PUSH     {r4,lr}
;;;759    {
000002  4604              MOV      r4,r0
;;;760    
;;;761    	if (g_tSF.ChipID == SST25VF016B_ID)
000004  4813              LDR      r0,|L17.84|
000006  6800              LDR      r0,[r0,#0]  ; g_tSF
000008  4913              LDR      r1,|L17.88|
00000a  4288              CMP      r0,r1
00000c  d115              BNE      |L17.58|
;;;762    	{
;;;763    		/* 第1步：先使能写状态寄存器 */
;;;764    		sf_SetCS(0);									/* 使能片选 */
00000e  2000              MOVS     r0,#0
000010  f7fffffe          BL       sf_SetCS
;;;765    		bsp_spiWrite1(CMD_EWRSR);						/* 发送命令， 允许写状态寄存器 */
000014  2050              MOVS     r0,#0x50
000016  f7fffffe          BL       bsp_spiWrite1
;;;766    		sf_SetCS(1);									/* 禁能片选 */
00001a  2001              MOVS     r0,#1
00001c  f7fffffe          BL       sf_SetCS
;;;767    
;;;768    		/* 第2步：再写状态寄存器 */
;;;769    		sf_SetCS(0);									/* 使能片选 */
000020  2000              MOVS     r0,#0
000022  f7fffffe          BL       sf_SetCS
;;;770    		bsp_spiWrite1(CMD_WRSR);						/* 发送命令， 写状态寄存器 */
000026  2001              MOVS     r0,#1
000028  f7fffffe          BL       bsp_spiWrite1
;;;771    		bsp_spiWrite1(_ucValue);						/* 发送数据：状态寄存器的值 */
00002c  4620              MOV      r0,r4
00002e  f7fffffe          BL       bsp_spiWrite1
;;;772    		sf_SetCS(1);									/* 禁能片选 */
000032  2001              MOVS     r0,#1
000034  f7fffffe          BL       sf_SetCS
000038  e00b              B        |L17.82|
                  |L17.58|
;;;773    	}
;;;774    	else
;;;775    	{
;;;776    		sf_SetCS(0);									/* 使能片选 */
00003a  2000              MOVS     r0,#0
00003c  f7fffffe          BL       sf_SetCS
;;;777    		bsp_spiWrite1(CMD_WRSR);						/* 发送命令， 写状态寄存器 */
000040  2001              MOVS     r0,#1
000042  f7fffffe          BL       bsp_spiWrite1
;;;778    		bsp_spiWrite1(_ucValue);						/* 发送数据：状态寄存器的值 */
000046  4620              MOV      r0,r4
000048  f7fffffe          BL       bsp_spiWrite1
;;;779    		sf_SetCS(1);									/* 禁能片选 */
00004c  2001              MOVS     r0,#1
00004e  f7fffffe          BL       sf_SetCS
                  |L17.82|
;;;780    	}
;;;781    }
000052  bd10              POP      {r4,pc}
;;;782    
                          ENDP

                  |L17.84|
                          DCD      g_tSF
                  |L17.88|
                          DCD      0x00bf2541

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  g_tSF
                          %        28

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\bsp\\src\\bsp_spi_flash.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_bsp_spi_flash_c_69e7dfca____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___15_bsp_spi_flash_c_69e7dfca____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_bsp_spi_flash_c_69e7dfca____REVSH|
#line 128
|__asm___15_bsp_spi_flash_c_69e7dfca____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
