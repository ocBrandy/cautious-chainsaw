; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\obj\usb_regs.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\usb_regs.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\Libraries\CMSIS\Include -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User\app\inc -I..\..\User\FatFS\src -I..\..\User\Mass_Storage\inc -I..\..\User\LCD_Driver -I..\..\User\SYSTEM\sys -I..\..\User\Debugprintf -I..\..\User\LogDebug -I..\..\User\app\inc -I..\..\User\app\src -I..\..\User\bsp\inc -I..\..\User\bsp\src -I.\RTE\_Flash -ID:\Keil_v5\ARM\Packs\ARM\CMSIS\5.5.1\CMSIS\Core\Include -ID:\Keil_v5\ARM\Packs\Keil\STM32F1xx_DFP\2.1.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=527 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\flash\obj\usb_regs.crf ..\..\Libraries\STM32_USB-FS-Device_Driver\src\usb_regs.c]
                          THUMB

                          AREA ||i.ByteSwap||, CODE, READONLY, ALIGN=1

                  ByteSwap PROC
;;;752    *******************************************************************************/
;;;753    uint16_t ByteSwap(uint16_t wSwW)
000000  4601              MOV      r1,r0
;;;754    {
;;;755      uint8_t bTemp;
;;;756      uint16_t wRet;
;;;757      bTemp = (uint8_t)(wSwW & 0xff);
000002  b2ca              UXTB     r2,r1
;;;758      wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
000004  120b              ASRS     r3,r1,#8
000006  ea432002          ORR      r0,r3,r2,LSL #8
;;;759      return(wRet);
;;;760    }
00000a  4770              BX       lr
;;;761    
                          ENDP


                          AREA ||i.ClearDTOG_RX||, CODE, READONLY, ALIGN=2

                  ClearDTOG_RX PROC
;;;434    *******************************************************************************/
;;;435    void ClearDTOG_RX(uint8_t bEpNum)
000000  4a0b              LDR      r2,|L2.48|
;;;436    {
;;;437      _ClearDTOG_RX(bEpNum);
000002  eb020180          ADD      r1,r2,r0,LSL #2
000006  f8d11c00          LDR      r1,[r1,#0xc00]
00000a  f4014180          AND      r1,r1,#0x4000
00000e  b171              CBZ      r1,|L2.46|
000010  eb020180          ADD      r1,r2,r0,LSL #2
000014  f8d11c00          LDR      r1,[r1,#0xc00]
000018  f648728f          MOV      r2,#0x8f8f
00001c  4011              ANDS     r1,r1,r2
00001e  f24c0280          MOV      r2,#0xc080
000022  4311              ORRS     r1,r1,r2
000024  4b02              LDR      r3,|L2.48|
000026  eb030280          ADD      r2,r3,r0,LSL #2
00002a  f8c21c00          STR      r1,[r2,#0xc00]
                  |L2.46|
;;;438    }
00002e  4770              BX       lr
;;;439    /*******************************************************************************
                          ENDP

                  |L2.48|
                          DCD      0x40005000

                          AREA ||i.ClearDTOG_TX||, CODE, READONLY, ALIGN=2

                  ClearDTOG_TX PROC
;;;445    *******************************************************************************/
;;;446    void ClearDTOG_TX(uint8_t bEpNum)
000000  4a0b              LDR      r2,|L3.48|
;;;447    {
;;;448      _ClearDTOG_TX(bEpNum);
000002  eb020180          ADD      r1,r2,r0,LSL #2
000006  f8d11c00          LDR      r1,[r1,#0xc00]
00000a  f0010140          AND      r1,r1,#0x40
00000e  b171              CBZ      r1,|L3.46|
000010  eb020180          ADD      r1,r2,r0,LSL #2
000014  f8d11c00          LDR      r1,[r1,#0xc00]
000018  f648728f          MOV      r2,#0x8f8f
00001c  4011              ANDS     r1,r1,r2
00001e  f24802c0          MOV      r2,#0x80c0
000022  4311              ORRS     r1,r1,r2
000024  4b02              LDR      r3,|L3.48|
000026  eb030280          ADD      r2,r3,r0,LSL #2
00002a  f8c21c00          STR      r1,[r2,#0xc00]
                  |L3.46|
;;;449    }
00002e  4770              BX       lr
;;;450    /*******************************************************************************
                          ENDP

                  |L3.48|
                          DCD      0x40005000

                          AREA ||i.ClearEPDoubleBuff||, CODE, READONLY, ALIGN=2

                  ClearEPDoubleBuff PROC
;;;357    *******************************************************************************/
;;;358    void ClearEPDoubleBuff(uint8_t bEpNum)
000000  4a08              LDR      r2,|L4.36|
;;;359    {
;;;360      _ClearEP_KIND(bEpNum);
000002  eb020180          ADD      r1,r2,r0,LSL #2
000006  f8d11c00          LDR      r1,[r1,#0xc00]
00000a  f648628f          MOV      r2,#0x8e8f
00000e  4011              ANDS     r1,r1,r2
000010  f2480280          MOV      r2,#0x8080
000014  4311              ORRS     r1,r1,r2
000016  4b03              LDR      r3,|L4.36|
000018  eb030280          ADD      r2,r3,r0,LSL #2
00001c  f8c21c00          STR      r1,[r2,#0xc00]
;;;361    }
000020  4770              BX       lr
;;;362    /*******************************************************************************
                          ENDP

000022  0000              DCW      0x0000
                  |L4.36|
                          DCD      0x40005000

                          AREA ||i.ClearEP_CTR_RX||, CODE, READONLY, ALIGN=2

                  ClearEP_CTR_RX PROC
;;;390    *******************************************************************************/
;;;391    void ClearEP_CTR_RX(uint8_t bEpNum)
000000  4a07              LDR      r2,|L5.32|
;;;392    {
;;;393      _ClearEP_CTR_RX(bEpNum);
000002  eb020180          ADD      r1,r2,r0,LSL #2
000006  f8d11c00          LDR      r1,[r1,#0xc00]
00000a  f3c1010e          UBFX     r1,r1,#0,#15
00000e  f648728f          MOV      r2,#0x8f8f
000012  4011              ANDS     r1,r1,r2
000014  4b02              LDR      r3,|L5.32|
000016  eb030280          ADD      r2,r3,r0,LSL #2
00001a  f8c21c00          STR      r1,[r2,#0xc00]
;;;394    }
00001e  4770              BX       lr
;;;395    /*******************************************************************************
                          ENDP

                  |L5.32|
                          DCD      0x40005000

                          AREA ||i.ClearEP_CTR_TX||, CODE, READONLY, ALIGN=2

                  ClearEP_CTR_TX PROC
;;;401    *******************************************************************************/
;;;402    void ClearEP_CTR_TX(uint8_t bEpNum)
000000  4a06              LDR      r2,|L6.28|
;;;403    {
;;;404      _ClearEP_CTR_TX(bEpNum);
000002  eb020180          ADD      r1,r2,r0,LSL #2
000006  f8d11c00          LDR      r1,[r1,#0xc00]
00000a  f648720f          MOV      r2,#0x8f0f
00000e  4011              ANDS     r1,r1,r2
000010  4b02              LDR      r3,|L6.28|
000012  eb030280          ADD      r2,r3,r0,LSL #2
000016  f8c21c00          STR      r1,[r2,#0xc00]
;;;405    }
00001a  4770              BX       lr
;;;406    /*******************************************************************************
                          ENDP

                  |L6.28|
                          DCD      0x40005000

                          AREA ||i.ClearEP_KIND||, CODE, READONLY, ALIGN=2

                  ClearEP_KIND PROC
;;;313    *******************************************************************************/
;;;314    void ClearEP_KIND(uint8_t bEpNum)
000000  4a08              LDR      r2,|L7.36|
;;;315    {
;;;316      _ClearEP_KIND(bEpNum);
000002  eb020180          ADD      r1,r2,r0,LSL #2
000006  f8d11c00          LDR      r1,[r1,#0xc00]
00000a  f648628f          MOV      r2,#0x8e8f
00000e  4011              ANDS     r1,r1,r2
000010  f2480280          MOV      r2,#0x8080
000014  4311              ORRS     r1,r1,r2
000016  4b03              LDR      r3,|L7.36|
000018  eb030280          ADD      r2,r3,r0,LSL #2
00001c  f8c21c00          STR      r1,[r2,#0xc00]
;;;317    }
000020  4770              BX       lr
;;;318    /*******************************************************************************
                          ENDP

000022  0000              DCW      0x0000
                  |L7.36|
                          DCD      0x40005000

                          AREA ||i.Clear_Status_Out||, CODE, READONLY, ALIGN=2

                  Clear_Status_Out PROC
;;;324    *******************************************************************************/
;;;325    void Clear_Status_Out(uint8_t bEpNum)
000000  4a08              LDR      r2,|L8.36|
;;;326    {
;;;327      _ClearEP_KIND(bEpNum);
000002  eb020180          ADD      r1,r2,r0,LSL #2
000006  f8d11c00          LDR      r1,[r1,#0xc00]
00000a  f648628f          MOV      r2,#0x8e8f
00000e  4011              ANDS     r1,r1,r2
000010  f2480280          MOV      r2,#0x8080
000014  4311              ORRS     r1,r1,r2
000016  4b03              LDR      r3,|L8.36|
000018  eb030280          ADD      r2,r3,r0,LSL #2
00001c  f8c21c00          STR      r1,[r2,#0xc00]
;;;328    }
000020  4770              BX       lr
;;;329    /*******************************************************************************
                          ENDP

000022  0000              DCW      0x0000
                  |L8.36|
                          DCD      0x40005000

                          AREA ||i.FreeUserBuffer||, CODE, READONLY, ALIGN=2

                  FreeUserBuffer PROC
;;;720    *******************************************************************************/
;;;721    void FreeUserBuffer(uint8_t bEpNum, uint8_t bDir)
000000  b510              PUSH     {r4,lr}
;;;722    {
;;;723      if (bDir == EP_DBUF_OUT)
000002  2901              CMP      r1,#1
000004  d110              BNE      |L9.40|
;;;724      { /* OUT double buffered endpoint */
;;;725        _ToggleDTOG_TX(bEpNum);
000006  4b12              LDR      r3,|L9.80|
000008  eb030280          ADD      r2,r3,r0,LSL #2
00000c  f8d22c00          LDR      r2,[r2,#0xc00]
000010  f648738f          MOV      r3,#0x8f8f
000014  401a              ANDS     r2,r2,r3
000016  f24803c0          MOV      r3,#0x80c0
00001a  431a              ORRS     r2,r2,r3
00001c  4c0c              LDR      r4,|L9.80|
00001e  eb040380          ADD      r3,r4,r0,LSL #2
000022  f8c32c00          STR      r2,[r3,#0xc00]
000026  e011              B        |L9.76|
                  |L9.40|
;;;726      }
;;;727      else if (bDir == EP_DBUF_IN)
000028  2902              CMP      r1,#2
00002a  d10f              BNE      |L9.76|
;;;728      { /* IN double buffered endpoint */
;;;729        _ToggleDTOG_RX(bEpNum);
00002c  4b08              LDR      r3,|L9.80|
00002e  eb030280          ADD      r2,r3,r0,LSL #2
000032  f8d22c00          LDR      r2,[r2,#0xc00]
000036  f648738f          MOV      r3,#0x8f8f
00003a  401a              ANDS     r2,r2,r3
00003c  f24c0380          MOV      r3,#0xc080
000040  431a              ORRS     r2,r2,r3
000042  4c03              LDR      r4,|L9.80|
000044  eb040380          ADD      r3,r4,r0,LSL #2
000048  f8c32c00          STR      r2,[r3,#0xc00]
                  |L9.76|
;;;730      }
;;;731    }
00004c  bd10              POP      {r4,pc}
;;;732    
                          ENDP

00004e  0000              DCW      0x0000
                  |L9.80|
                          DCD      0x40005000

                          AREA ||i.GetBTABLE||, CODE, READONLY, ALIGN=2

                  GetBTABLE PROC
;;;143    *******************************************************************************/
;;;144    uint16_t GetBTABLE(void)
000000  4801              LDR      r0,|L10.8|
;;;145    {
;;;146      return(_GetBTABLE());
000002  6800              LDR      r0,[r0,#0]
000004  b280              UXTH     r0,r0
;;;147    }
000006  4770              BX       lr
;;;148    
                          ENDP

                  |L10.8|
                          DCD      0x40005c50

                          AREA ||i.GetCNTR||, CODE, READONLY, ALIGN=2

                  GetCNTR PROC
;;;59     *******************************************************************************/
;;;60     uint16_t GetCNTR(void)
000000  4801              LDR      r0,|L11.8|
;;;61     {
;;;62       return(_GetCNTR());
000002  6800              LDR      r0,[r0,#0]
000004  b280              UXTH     r0,r0
;;;63     }
000006  4770              BX       lr
;;;64     
                          ENDP

                  |L11.8|
                          DCD      0x40005c40

                          AREA ||i.GetDADDR||, CODE, READONLY, ALIGN=2

                  GetDADDR PROC
;;;119    *******************************************************************************/
;;;120    uint16_t GetDADDR(void)
000000  4801              LDR      r0,|L12.8|
;;;121    {
;;;122      return(_GetDADDR());
000002  6800              LDR      r0,[r0,#0]
000004  b280              UXTH     r0,r0
;;;123    }
000006  4770              BX       lr
;;;124    
                          ENDP

                  |L12.8|
                          DCD      0x40005c4c

                          AREA ||i.GetENDPOINT||, CODE, READONLY, ALIGN=2

                  GetENDPOINT PROC
;;;168    *******************************************************************************/
;;;169    uint16_t GetENDPOINT(uint8_t bEpNum)
000000  4601              MOV      r1,r0
;;;170    {
;;;171      return(_GetENDPOINT(bEpNum));
000002  4a03              LDR      r2,|L13.16|
000004  eb020081          ADD      r0,r2,r1,LSL #2
000008  f8d00c00          LDR      r0,[r0,#0xc00]
00000c  b280              UXTH     r0,r0
;;;172    }
00000e  4770              BX       lr
;;;173    
                          ENDP

                  |L13.16|
                          DCD      0x40005000

                          AREA ||i.GetEPAddress||, CODE, READONLY, ALIGN=2

                  GetEPAddress PROC
;;;468    *******************************************************************************/
;;;469    uint8_t GetEPAddress(uint8_t bEpNum)
000000  4601              MOV      r1,r0
;;;470    {
;;;471      return(_GetEPAddress(bEpNum));
000002  4a04              LDR      r2,|L14.20|
000004  eb020081          ADD      r0,r2,r1,LSL #2
000008  f8d00c00          LDR      r0,[r0,#0xc00]
00000c  f000000f          AND      r0,r0,#0xf
;;;472    }
000010  4770              BX       lr
;;;473    /*******************************************************************************
                          ENDP

000012  0000              DCW      0x0000
                  |L14.20|
                          DCD      0x40005000

                          AREA ||i.GetEPDblBuf0Addr||, CODE, READONLY, ALIGN=2

                  GetEPDblBuf0Addr PROC
;;;620    *******************************************************************************/
;;;621    uint16_t GetEPDblBuf0Addr(uint8_t bEpNum)
000000  4601              MOV      r1,r0
;;;622    {
;;;623      return(_GetEPDblBuf0Addr(bEpNum));
000002  4805              LDR      r0,|L15.24|
000004  6800              LDR      r0,[r0,#0]
000006  b280              UXTH     r0,r0
000008  eb0000c1          ADD      r0,r0,r1,LSL #3
00000c  4a03              LDR      r2,|L15.28|
00000e  f8320010          LDRH     r0,[r2,r0,LSL #1]
000012  b280              UXTH     r0,r0
;;;624    }
000014  4770              BX       lr
;;;625    /*******************************************************************************
                          ENDP

000016  0000              DCW      0x0000
                  |L15.24|
                          DCD      0x40005c50
                  |L15.28|
                          DCD      0x40006000

                          AREA ||i.GetEPDblBuf0Count||, CODE, READONLY, ALIGN=2

                  GetEPDblBuf0Count PROC
;;;679    *******************************************************************************/
;;;680    uint16_t GetEPDblBuf0Count(uint8_t bEpNum)
000000  4601              MOV      r1,r0
;;;681    {
;;;682      return(_GetEPDblBuf0Count(bEpNum));
000002  4806              LDR      r0,|L16.28|
000004  6800              LDR      r0,[r0,#0]
000006  b280              UXTH     r0,r0
000008  eb0000c1          ADD      r0,r0,r1,LSL #3
00000c  1c80              ADDS     r0,r0,#2
00000e  4a04              LDR      r2,|L16.32|
000010  f8320010          LDRH     r0,[r2,r0,LSL #1]
000014  f3c00009          UBFX     r0,r0,#0,#10
;;;683    }
000018  4770              BX       lr
;;;684    /*******************************************************************************
                          ENDP

00001a  0000              DCW      0x0000
                  |L16.28|
                          DCD      0x40005c50
                  |L16.32|
                          DCD      0x40006000

                          AREA ||i.GetEPDblBuf1Addr||, CODE, READONLY, ALIGN=2

                  GetEPDblBuf1Addr PROC
;;;631    *******************************************************************************/
;;;632    uint16_t GetEPDblBuf1Addr(uint8_t bEpNum)
000000  4601              MOV      r1,r0
;;;633    {
;;;634      return(_GetEPDblBuf1Addr(bEpNum));
000002  4805              LDR      r0,|L17.24|
000004  6800              LDR      r0,[r0,#0]
000006  b280              UXTH     r0,r0
000008  eb0000c1          ADD      r0,r0,r1,LSL #3
00000c  1d00              ADDS     r0,r0,#4
00000e  4a03              LDR      r2,|L17.28|
000010  f8320010          LDRH     r0,[r2,r0,LSL #1]
000014  b280              UXTH     r0,r0
;;;635    }
000016  4770              BX       lr
;;;636    /*******************************************************************************
                          ENDP

                  |L17.24|
                          DCD      0x40005c50
                  |L17.28|
                          DCD      0x40006000

                          AREA ||i.GetEPDblBuf1Count||, CODE, READONLY, ALIGN=2

                  GetEPDblBuf1Count PROC
;;;691    *******************************************************************************/
;;;692    uint16_t GetEPDblBuf1Count(uint8_t bEpNum)
000000  4601              MOV      r1,r0
;;;693    {
;;;694      return(_GetEPDblBuf1Count(bEpNum));
000002  4806              LDR      r0,|L18.28|
000004  6800              LDR      r0,[r0,#0]
000006  b280              UXTH     r0,r0
000008  eb0000c1          ADD      r0,r0,r1,LSL #3
00000c  1d80              ADDS     r0,r0,#6
00000e  4a04              LDR      r2,|L18.32|
000010  f8320010          LDRH     r0,[r2,r0,LSL #1]
000014  f3c00009          UBFX     r0,r0,#0,#10
;;;695    }
000018  4770              BX       lr
;;;696    /*******************************************************************************
                          ENDP

00001a  0000              DCW      0x0000
                  |L18.28|
                          DCD      0x40005c50
                  |L18.32|
                          DCD      0x40006000

                          AREA ||i.GetEPDblBufDir||, CODE, READONLY, ALIGN=2

                  GetEPDblBufDir PROC
;;;703    *******************************************************************************/
;;;704    EP_DBUF_DIR GetEPDblBufDir(uint8_t bEpNum)
000000  4601              MOV      r1,r0
;;;705    {
;;;706      if ((uint16_t)(*_pEPRxCount(bEpNum) & 0xFC00) != 0)
000002  480f              LDR      r0,|L19.64|
000004  6800              LDR      r0,[r0,#0]
000006  b280              UXTH     r0,r0
000008  eb0000c1          ADD      r0,r0,r1,LSL #3
00000c  1d80              ADDS     r0,r0,#6
00000e  4a0d              LDR      r2,|L19.68|
000010  f8320010          LDRH     r0,[r2,r0,LSL #1]
000014  f400407c          AND      r0,r0,#0xfc00
000018  b108              CBZ      r0,|L19.30|
;;;707        return(EP_DBUF_OUT);
00001a  2001              MOVS     r0,#1
                  |L19.28|
;;;708      else if (((uint16_t)(*_pEPTxCount(bEpNum)) & 0x03FF) != 0)
;;;709        return(EP_DBUF_IN);
;;;710      else
;;;711        return(EP_DBUF_ERR);
;;;712    }
00001c  4770              BX       lr
                  |L19.30|
00001e  4808              LDR      r0,|L19.64|
000020  6800              LDR      r0,[r0,#0]            ;708
000022  b280              UXTH     r0,r0                 ;708
000024  eb0000c1          ADD      r0,r0,r1,LSL #3       ;708
000028  1c80              ADDS     r0,r0,#2              ;708
00002a  4a06              LDR      r2,|L19.68|
00002c  f8320010          LDRH     r0,[r2,r0,LSL #1]     ;708
000030  f3c00009          UBFX     r0,r0,#0,#10          ;708
000034  b108              CBZ      r0,|L19.58|
000036  2002              MOVS     r0,#2                 ;709
000038  e7f0              B        |L19.28|
                  |L19.58|
00003a  2000              MOVS     r0,#0                 ;711
00003c  e7ee              B        |L19.28|
;;;713    /*******************************************************************************
                          ENDP

00003e  0000              DCW      0x0000
                  |L19.64|
                          DCD      0x40005c50
                  |L19.68|
                          DCD      0x40006000

                          AREA ||i.GetEPRxAddr||, CODE, READONLY, ALIGN=2

                  GetEPRxAddr PROC
;;;514    *******************************************************************************/
;;;515    uint16_t GetEPRxAddr(uint8_t bEpNum)
000000  4601              MOV      r1,r0
;;;516    {
;;;517      return(_GetEPRxAddr(bEpNum));
000002  4805              LDR      r0,|L20.24|
000004  6800              LDR      r0,[r0,#0]
000006  b280              UXTH     r0,r0
000008  eb0000c1          ADD      r0,r0,r1,LSL #3
00000c  1d00              ADDS     r0,r0,#4
00000e  4a03              LDR      r2,|L20.28|
000010  f8320010          LDRH     r0,[r2,r0,LSL #1]
000014  b280              UXTH     r0,r0
;;;518    }
000016  4770              BX       lr
;;;519    /*******************************************************************************
                          ENDP

                  |L20.24|
                          DCD      0x40005c50
                  |L20.28|
                          DCD      0x40006000

                          AREA ||i.GetEPRxCount||, CODE, READONLY, ALIGN=2

                  GetEPRxCount PROC
;;;572    *******************************************************************************/
;;;573    uint16_t GetEPRxCount(uint8_t bEpNum)
000000  4601              MOV      r1,r0
;;;574    {
;;;575      return(_GetEPRxCount(bEpNum));
000002  4806              LDR      r0,|L21.28|
000004  6800              LDR      r0,[r0,#0]
000006  b280              UXTH     r0,r0
000008  eb0000c1          ADD      r0,r0,r1,LSL #3
00000c  1d80              ADDS     r0,r0,#6
00000e  4a04              LDR      r2,|L21.32|
000010  f8320010          LDRH     r0,[r2,r0,LSL #1]
000014  f3c00009          UBFX     r0,r0,#0,#10
;;;576    }
000018  4770              BX       lr
;;;577    /*******************************************************************************
                          ENDP

00001a  0000              DCW      0x0000
                  |L21.28|
                          DCD      0x40005c50
                  |L21.32|
                          DCD      0x40006000

                          AREA ||i.GetEPRxStatus||, CODE, READONLY, ALIGN=2

                  GetEPRxStatus PROC
;;;265    *******************************************************************************/
;;;266    uint16_t GetEPRxStatus(uint8_t bEpNum)
000000  4601              MOV      r1,r0
;;;267    {
;;;268      return(_GetEPRxStatus(bEpNum));
000002  4a04              LDR      r2,|L22.20|
000004  eb020081          ADD      r0,r2,r1,LSL #2
000008  f8d00c00          LDR      r0,[r0,#0xc00]
00000c  f4005040          AND      r0,r0,#0x3000
;;;269    }
000010  4770              BX       lr
;;;270    
                          ENDP

000012  0000              DCW      0x0000
                  |L22.20|
                          DCD      0x40005000

                          AREA ||i.GetEPTxAddr||, CODE, READONLY, ALIGN=2

                  GetEPTxAddr PROC
;;;503    *******************************************************************************/
;;;504    uint16_t GetEPTxAddr(uint8_t bEpNum)
000000  4601              MOV      r1,r0
;;;505    {
;;;506      return(_GetEPTxAddr(bEpNum));
000002  4805              LDR      r0,|L23.24|
000004  6800              LDR      r0,[r0,#0]
000006  b280              UXTH     r0,r0
000008  eb0000c1          ADD      r0,r0,r1,LSL #3
00000c  4a03              LDR      r2,|L23.28|
00000e  f8320010          LDRH     r0,[r2,r0,LSL #1]
000012  b280              UXTH     r0,r0
;;;507    }
000014  4770              BX       lr
;;;508    /*******************************************************************************
                          ENDP

000016  0000              DCW      0x0000
                  |L23.24|
                          DCD      0x40005c50
                  |L23.28|
                          DCD      0x40006000

                          AREA ||i.GetEPTxCount||, CODE, READONLY, ALIGN=2

                  GetEPTxCount PROC
;;;561    *******************************************************************************/
;;;562    uint16_t GetEPTxCount(uint8_t bEpNum)
000000  4601              MOV      r1,r0
;;;563    {
;;;564      return(_GetEPTxCount(bEpNum));
000002  4806              LDR      r0,|L24.28|
000004  6800              LDR      r0,[r0,#0]
000006  b280              UXTH     r0,r0
000008  eb0000c1          ADD      r0,r0,r1,LSL #3
00000c  1c80              ADDS     r0,r0,#2
00000e  4a04              LDR      r2,|L24.32|
000010  f8320010          LDRH     r0,[r2,r0,LSL #1]
000014  f3c00009          UBFX     r0,r0,#0,#10
;;;565    }
000018  4770              BX       lr
;;;566    /*******************************************************************************
                          ENDP

00001a  0000              DCW      0x0000
                  |L24.28|
                          DCD      0x40005c50
                  |L24.32|
                          DCD      0x40006000

                          AREA ||i.GetEPTxStatus||, CODE, READONLY, ALIGN=2

                  GetEPTxStatus PROC
;;;253    *******************************************************************************/
;;;254    uint16_t GetEPTxStatus(uint8_t bEpNum)
000000  4601              MOV      r1,r0
;;;255    {
;;;256      return(_GetEPTxStatus(bEpNum));
000002  4a04              LDR      r2,|L25.20|
000004  eb020081          ADD      r0,r2,r1,LSL #2
000008  f8d00c00          LDR      r0,[r0,#0xc00]
00000c  f0000030          AND      r0,r0,#0x30
;;;257    }
000010  4770              BX       lr
;;;258    
                          ENDP

000012  0000              DCW      0x0000
                  |L25.20|
                          DCD      0x40005000

                          AREA ||i.GetEPType||, CODE, READONLY, ALIGN=2

                  GetEPType PROC
;;;193    *******************************************************************************/
;;;194    uint16_t GetEPType(uint8_t bEpNum)
000000  4601              MOV      r1,r0
;;;195    {
;;;196      return(_GetEPType(bEpNum));
000002  4a04              LDR      r2,|L26.20|
000004  eb020081          ADD      r0,r2,r1,LSL #2
000008  f8d00c00          LDR      r0,[r0,#0xc00]
00000c  f40060c0          AND      r0,r0,#0x600
;;;197    }
000010  4770              BX       lr
;;;198    
                          ENDP

000012  0000              DCW      0x0000
                  |L26.20|
                          DCD      0x40005000

                          AREA ||i.GetFNR||, CODE, READONLY, ALIGN=2

                  GetFNR PROC
;;;95     *******************************************************************************/
;;;96     uint16_t GetFNR(void)
000000  4801              LDR      r0,|L27.8|
;;;97     {
;;;98       return(_GetFNR());
000002  6800              LDR      r0,[r0,#0]
000004  b280              UXTH     r0,r0
;;;99     }
000006  4770              BX       lr
;;;100    
                          ENDP

                  |L27.8|
                          DCD      0x40005c48

                          AREA ||i.GetISTR||, CODE, READONLY, ALIGN=2

                  GetISTR PROC
;;;83     *******************************************************************************/
;;;84     uint16_t GetISTR(void)
000000  4801              LDR      r0,|L28.8|
;;;85     {
;;;86       return(_GetISTR());
000002  6800              LDR      r0,[r0,#0]
000004  b280              UXTH     r0,r0
;;;87     }
000006  4770              BX       lr
;;;88     
                          ENDP

                  |L28.8|
                          DCD      0x40005c44

                          AREA ||i.GetRxStallStatus||, CODE, READONLY, ALIGN=2

                  GetRxStallStatus PROC
;;;379    *******************************************************************************/
;;;380    uint16_t GetRxStallStatus(uint8_t bEpNum)
000000  4601              MOV      r1,r0
;;;381    {
;;;382      return(_GetRxStallStatus(bEpNum));
000002  4a07              LDR      r2,|L29.32|
000004  eb020081          ADD      r0,r2,r1,LSL #2
000008  f8d00c00          LDR      r0,[r0,#0xc00]
00000c  f4005040          AND      r0,r0,#0x3000
000010  f5b05f80          CMP      r0,#0x1000
000014  d101              BNE      |L29.26|
000016  2001              MOVS     r0,#1
                  |L29.24|
;;;383    }
000018  4770              BX       lr
                  |L29.26|
00001a  2000              MOVS     r0,#0                 ;382
00001c  e7fc              B        |L29.24|
;;;384    /*******************************************************************************
                          ENDP

00001e  0000              DCW      0x0000
                  |L29.32|
                          DCD      0x40005000

                          AREA ||i.GetTxStallStatus||, CODE, READONLY, ALIGN=2

                  GetTxStallStatus PROC
;;;368    *******************************************************************************/
;;;369    uint16_t GetTxStallStatus(uint8_t bEpNum)
000000  4601              MOV      r1,r0
;;;370    {
;;;371      return(_GetTxStallStatus(bEpNum));
000002  4a06              LDR      r2,|L30.28|
000004  eb020081          ADD      r0,r2,r1,LSL #2
000008  f8d00c00          LDR      r0,[r0,#0xc00]
00000c  f0000030          AND      r0,r0,#0x30
000010  2810              CMP      r0,#0x10
000012  d101              BNE      |L30.24|
000014  2001              MOVS     r0,#1
                  |L30.22|
;;;372    }
000016  4770              BX       lr
                  |L30.24|
000018  2000              MOVS     r0,#0                 ;371
00001a  e7fc              B        |L30.22|
;;;373    /*******************************************************************************
                          ENDP

                  |L30.28|
                          DCD      0x40005000

                          AREA ||i.SetBTABLE||, CODE, READONLY, ALIGN=2

                  SetBTABLE PROC
;;;131    *******************************************************************************/
;;;132    void SetBTABLE(uint16_t wRegValue)
000000  f64f71f8          MOV      r1,#0xfff8
;;;133    {
;;;134      _SetBTABLE(wRegValue);
000004  4001              ANDS     r1,r1,r0
000006  4a01              LDR      r2,|L31.12|
000008  6011              STR      r1,[r2,#0]
;;;135    }
00000a  4770              BX       lr
;;;136    
                          ENDP

                  |L31.12|
                          DCD      0x40005c50

                          AREA ||i.SetCNTR||, CODE, READONLY, ALIGN=2

                  SetCNTR PROC
;;;47     *******************************************************************************/
;;;48     void SetCNTR(uint16_t wRegValue)
000000  4901              LDR      r1,|L32.8|
;;;49     {
;;;50       _SetCNTR(wRegValue);
000002  6008              STR      r0,[r1,#0]
;;;51     }
000004  4770              BX       lr
;;;52     
                          ENDP

000006  0000              DCW      0x0000
                  |L32.8|
                          DCD      0x40005c40

                          AREA ||i.SetDADDR||, CODE, READONLY, ALIGN=2

                  SetDADDR PROC
;;;107    *******************************************************************************/
;;;108    void SetDADDR(uint16_t wRegValue)
000000  4901              LDR      r1,|L33.8|
;;;109    {
;;;110      _SetDADDR(wRegValue);
000002  6008              STR      r0,[r1,#0]
;;;111    }
000004  4770              BX       lr
;;;112    
                          ENDP

000006  0000              DCW      0x0000
                  |L33.8|
                          DCD      0x40005c4c

                          AREA ||i.SetDouBleBuffEPStall||, CODE, READONLY, ALIGN=2

                  SetDouBleBuffEPStall PROC
;;;232    *******************************************************************************/
;;;233    void SetDouBleBuffEPStall(uint8_t bEpNum, uint8_t bDir)
000000  b530              PUSH     {r4,r5,lr}
;;;234    {
000002  4603              MOV      r3,r0
000004  460c              MOV      r4,r1
;;;235      uint16_t Endpoint_DTOG_Status;
;;;236      Endpoint_DTOG_Status = GetENDPOINT(bEpNum);
000006  4618              MOV      r0,r3
000008  f7fffffe          BL       GetENDPOINT
00000c  4605              MOV      r5,r0
;;;237      if (bDir == EP_DBUF_OUT)
00000e  2c01              CMP      r4,#1
000010  d107              BNE      |L34.34|
;;;238      { /* OUT double buffered endpoint */
;;;239        _SetENDPOINT(bEpNum, Endpoint_DTOG_Status & ~EPRX_DTOG1);
000012  f4255080          BIC      r0,r5,#0x1000
000016  4a08              LDR      r2,|L34.56|
000018  eb020183          ADD      r1,r2,r3,LSL #2
00001c  f8c10c00          STR      r0,[r1,#0xc00]
000020  e008              B        |L34.52|
                  |L34.34|
;;;240      }
;;;241      else if (bDir == EP_DBUF_IN)
000022  2c02              CMP      r4,#2
000024  d106              BNE      |L34.52|
;;;242      { /* IN double buffered endpoint */
;;;243        _SetENDPOINT(bEpNum, Endpoint_DTOG_Status & ~EPTX_DTOG1);
000026  f0250010          BIC      r0,r5,#0x10
00002a  4a03              LDR      r2,|L34.56|
00002c  eb020183          ADD      r1,r2,r3,LSL #2
000030  f8c10c00          STR      r0,[r1,#0xc00]
                  |L34.52|
;;;244      }
;;;245    }
000034  bd30              POP      {r4,r5,pc}
;;;246    
                          ENDP

000036  0000              DCW      0x0000
                  |L34.56|
                          DCD      0x40005000

                          AREA ||i.SetENDPOINT||, CODE, READONLY, ALIGN=2

                  SetENDPOINT PROC
;;;156    *******************************************************************************/
;;;157    void SetENDPOINT(uint8_t bEpNum, uint16_t wRegValue)
000000  4b02              LDR      r3,|L35.12|
;;;158    {
;;;159      _SetENDPOINT(bEpNum, wRegValue);
000002  eb030280          ADD      r2,r3,r0,LSL #2
000006  f8c21c00          STR      r1,[r2,#0xc00]
;;;160    }
00000a  4770              BX       lr
;;;161    
                          ENDP

                  |L35.12|
                          DCD      0x40005000

                          AREA ||i.SetEPAddress||, CODE, READONLY, ALIGN=2

                  SetEPAddress PROC
;;;457    *******************************************************************************/
;;;458    void SetEPAddress(uint8_t bEpNum, uint8_t bAddr)
000000  b510              PUSH     {r4,lr}
;;;459    {
;;;460      _SetEPAddress(bEpNum, bAddr);
000002  4b09              LDR      r3,|L36.40|
000004  eb030280          ADD      r2,r3,r0,LSL #2
000008  f8d22c00          LDR      r2,[r2,#0xc00]
00000c  f648738f          MOV      r3,#0x8f8f
000010  401a              ANDS     r2,r2,r3
000012  f2480380          MOV      r3,#0x8080
000016  431a              ORRS     r2,r2,r3
000018  430a              ORRS     r2,r2,r1
00001a  4c03              LDR      r4,|L36.40|
00001c  eb040380          ADD      r3,r4,r0,LSL #2
000020  f8c32c00          STR      r2,[r3,#0xc00]
;;;461    }
000024  bd10              POP      {r4,pc}
;;;462    /*******************************************************************************
                          ENDP

000026  0000              DCW      0x0000
                  |L36.40|
                          DCD      0x40005000

                          AREA ||i.SetEPCountRxReg||, CODE, READONLY, ALIGN=1

                  SetEPCountRxReg PROC
;;;538    *******************************************************************************/
;;;539    void SetEPCountRxReg(uint32_t *pdwReg, uint16_t wCount)
000000  4602              MOV      r2,r0
;;;540    {
;;;541      _SetEPCountRxReg(dwReg, wCount);
000002  293e              CMP      r1,#0x3e
000004  dd0b              BLE      |L37.30|
000006  1148              ASRS     r0,r1,#5
000008  f001031f          AND      r3,r1,#0x1f
00000c  b90b              CBNZ     r3,|L37.18|
00000e  1e43              SUBS     r3,r0,#1
000010  b298              UXTH     r0,r3
                  |L37.18|
000012  f44f4300          MOV      r3,#0x8000
000016  ea432380          ORR      r3,r3,r0,LSL #10
00001a  6013              STR      r3,[r2,#0]
00001c  e007              B        |L37.46|
                  |L37.30|
00001e  1048              ASRS     r0,r1,#1
000020  f0010301          AND      r3,r1,#1
000024  b10b              CBZ      r3,|L37.42|
000026  1c43              ADDS     r3,r0,#1
000028  b298              UXTH     r0,r3
                  |L37.42|
00002a  0283              LSLS     r3,r0,#10
00002c  6013              STR      r3,[r2,#0]
                  |L37.46|
;;;542    }
00002e  4770              BX       lr
;;;543    /*******************************************************************************
                          ENDP


                          AREA ||i.SetEPDblBuf0Addr||, CODE, READONLY, ALIGN=2

                  SetEPDblBuf0Addr PROC
;;;597    *******************************************************************************/
;;;598    void SetEPDblBuf0Addr(uint8_t bEpNum, uint16_t wBuf0Addr)
000000  b510              PUSH     {r4,lr}
;;;599    {
;;;600      _SetEPDblBuf0Addr(bEpNum, wBuf0Addr);
000002  104a              ASRS     r2,r1,#1
000004  0052              LSLS     r2,r2,#1
000006  4b04              LDR      r3,|L38.24|
000008  681b              LDR      r3,[r3,#0]
00000a  b29b              UXTH     r3,r3
00000c  eb0303c0          ADD      r3,r3,r0,LSL #3
000010  4c02              LDR      r4,|L38.28|
000012  f8442013          STR      r2,[r4,r3,LSL #1]
;;;601    }
000016  bd10              POP      {r4,pc}
;;;602    /*******************************************************************************
                          ENDP

                  |L38.24|
                          DCD      0x40005c50
                  |L38.28|
                          DCD      0x40006000

                          AREA ||i.SetEPDblBuf0Count||, CODE, READONLY, ALIGN=2

                  SetEPDblBuf0Count PROC
;;;655    *******************************************************************************/
;;;656    void SetEPDblBuf0Count(uint8_t bEpNum, uint8_t bDir, uint16_t wCount)
000000  b530              PUSH     {r4,r5,lr}
;;;657    {
000002  4603              MOV      r3,r0
;;;658      _SetEPDblBuf0Count(bEpNum, bDir, wCount);
000004  2901              CMP      r1,#1
000006  d11f              BNE      |L39.72|
000008  4815              LDR      r0,|L39.96|
00000a  6800              LDR      r0,[r0,#0]
00000c  b280              UXTH     r0,r0
00000e  eb0000c3          ADD      r0,r0,r3,LSL #3
000012  1c80              ADDS     r0,r0,#2
000014  4d13              LDR      r5,|L39.100|
000016  eb050440          ADD      r4,r5,r0,LSL #1
00001a  2a3e              CMP      r2,#0x3e
00001c  dd0b              BLE      |L39.54|
00001e  1150              ASRS     r0,r2,#5
000020  f002051f          AND      r5,r2,#0x1f
000024  b90d              CBNZ     r5,|L39.42|
000026  1e45              SUBS     r5,r0,#1
000028  b2a8              UXTH     r0,r5
                  |L39.42|
00002a  f44f4500          MOV      r5,#0x8000
00002e  ea452580          ORR      r5,r5,r0,LSL #10
000032  6025              STR      r5,[r4,#0]
000034  e007              B        |L39.70|
                  |L39.54|
000036  1050              ASRS     r0,r2,#1
000038  f0020501          AND      r5,r2,#1
00003c  b10d              CBZ      r5,|L39.66|
00003e  1c45              ADDS     r5,r0,#1
000040  b2a8              UXTH     r0,r5
                  |L39.66|
000042  0285              LSLS     r5,r0,#10
000044  6025              STR      r5,[r4,#0]
                  |L39.70|
000046  e00a              B        |L39.94|
                  |L39.72|
000048  2902              CMP      r1,#2
00004a  d108              BNE      |L39.94|
00004c  4804              LDR      r0,|L39.96|
00004e  6800              LDR      r0,[r0,#0]
000050  b280              UXTH     r0,r0
000052  eb0000c3          ADD      r0,r0,r3,LSL #3
000056  1c80              ADDS     r0,r0,#2
000058  4c02              LDR      r4,|L39.100|
00005a  f8442010          STR      r2,[r4,r0,LSL #1]
                  |L39.94|
;;;659    }
00005e  bd30              POP      {r4,r5,pc}
;;;660    /*******************************************************************************
                          ENDP

                  |L39.96|
                          DCD      0x40005c50
                  |L39.100|
                          DCD      0x40006000

                          AREA ||i.SetEPDblBuf1Addr||, CODE, READONLY, ALIGN=2

                  SetEPDblBuf1Addr PROC
;;;609    *******************************************************************************/
;;;610    void SetEPDblBuf1Addr(uint8_t bEpNum, uint16_t wBuf1Addr)
000000  b510              PUSH     {r4,lr}
;;;611    {
;;;612      _SetEPDblBuf1Addr(bEpNum, wBuf1Addr);
000002  104a              ASRS     r2,r1,#1
000004  0053              LSLS     r3,r2,#1
000006  4a05              LDR      r2,|L40.28|
000008  6812              LDR      r2,[r2,#0]
00000a  b292              UXTH     r2,r2
00000c  eb0202c0          ADD      r2,r2,r0,LSL #3
000010  1d12              ADDS     r2,r2,#4
000012  4c03              LDR      r4,|L40.32|
000014  f8443012          STR      r3,[r4,r2,LSL #1]
;;;613    }
000018  bd10              POP      {r4,pc}
;;;614    /*******************************************************************************
                          ENDP

00001a  0000              DCW      0x0000
                  |L40.28|
                          DCD      0x40005c50
                  |L40.32|
                          DCD      0x40006000

                          AREA ||i.SetEPDblBuf1Count||, CODE, READONLY, ALIGN=2

                  SetEPDblBuf1Count PROC
;;;667    *******************************************************************************/
;;;668    void SetEPDblBuf1Count(uint8_t bEpNum, uint8_t bDir, uint16_t wCount)
000000  b530              PUSH     {r4,r5,lr}
;;;669    {
000002  4603              MOV      r3,r0
;;;670      _SetEPDblBuf1Count(bEpNum, bDir, wCount);
000004  2901              CMP      r1,#1
000006  d11f              BNE      |L41.72|
000008  4815              LDR      r0,|L41.96|
00000a  6800              LDR      r0,[r0,#0]
00000c  b280              UXTH     r0,r0
00000e  eb0000c3          ADD      r0,r0,r3,LSL #3
000012  1d80              ADDS     r0,r0,#6
000014  4d13              LDR      r5,|L41.100|
000016  eb050440          ADD      r4,r5,r0,LSL #1
00001a  2a3e              CMP      r2,#0x3e
00001c  dd0b              BLE      |L41.54|
00001e  1150              ASRS     r0,r2,#5
000020  f002051f          AND      r5,r2,#0x1f
000024  b90d              CBNZ     r5,|L41.42|
000026  1e45              SUBS     r5,r0,#1
000028  b2a8              UXTH     r0,r5
                  |L41.42|
00002a  f44f4500          MOV      r5,#0x8000
00002e  ea452580          ORR      r5,r5,r0,LSL #10
000032  6025              STR      r5,[r4,#0]
000034  e007              B        |L41.70|
                  |L41.54|
000036  1050              ASRS     r0,r2,#1
000038  f0020501          AND      r5,r2,#1
00003c  b10d              CBZ      r5,|L41.66|
00003e  1c45              ADDS     r5,r0,#1
000040  b2a8              UXTH     r0,r5
                  |L41.66|
000042  0285              LSLS     r5,r0,#10
000044  6025              STR      r5,[r4,#0]
                  |L41.70|
000046  e00a              B        |L41.94|
                  |L41.72|
000048  2902              CMP      r1,#2
00004a  d108              BNE      |L41.94|
00004c  4804              LDR      r0,|L41.96|
00004e  6800              LDR      r0,[r0,#0]
000050  b280              UXTH     r0,r0
000052  eb0000c3          ADD      r0,r0,r3,LSL #3
000056  1d80              ADDS     r0,r0,#6
000058  4c02              LDR      r4,|L41.100|
00005a  f8442010          STR      r2,[r4,r0,LSL #1]
                  |L41.94|
;;;671    }
00005e  bd30              POP      {r4,r5,pc}
;;;672    /*******************************************************************************
                          ENDP

                  |L41.96|
                          DCD      0x40005c50
                  |L41.100|
                          DCD      0x40006000

                          AREA ||i.SetEPDblBuffAddr||, CODE, READONLY, ALIGN=2

                  SetEPDblBuffAddr PROC
;;;585    *******************************************************************************/
;;;586    void SetEPDblBuffAddr(uint8_t bEpNum, uint16_t wBuf0Addr, uint16_t wBuf1Addr)
000000  b530              PUSH     {r4,r5,lr}
;;;587    {
;;;588      _SetEPDblBuffAddr(bEpNum, wBuf0Addr, wBuf1Addr);
000002  104b              ASRS     r3,r1,#1
000004  005b              LSLS     r3,r3,#1
000006  4c09              LDR      r4,|L42.44|
000008  6824              LDR      r4,[r4,#0]
00000a  b2a4              UXTH     r4,r4
00000c  eb0404c0          ADD      r4,r4,r0,LSL #3
000010  4d07              LDR      r5,|L42.48|
000012  f8453014          STR      r3,[r5,r4,LSL #1]
000016  1053              ASRS     r3,r2,#1
000018  005c              LSLS     r4,r3,#1
00001a  4b04              LDR      r3,|L42.44|
00001c  681b              LDR      r3,[r3,#0]
00001e  b29b              UXTH     r3,r3
000020  eb0303c0          ADD      r3,r3,r0,LSL #3
000024  1d1b              ADDS     r3,r3,#4
000026  f8454013          STR      r4,[r5,r3,LSL #1]
;;;589    }
00002a  bd30              POP      {r4,r5,pc}
;;;590    /*******************************************************************************
                          ENDP

                  |L42.44|
                          DCD      0x40005c50
                  |L42.48|
                          DCD      0x40006000

                          AREA ||i.SetEPDblBuffCount||, CODE, READONLY, ALIGN=2

                  SetEPDblBuffCount PROC
;;;643    *******************************************************************************/
;;;644    void SetEPDblBuffCount(uint8_t bEpNum, uint8_t bDir, uint16_t wCount)
000000  b530              PUSH     {r4,r5,lr}
;;;645    {
000002  460b              MOV      r3,r1
;;;646      _SetEPDblBuffCount(bEpNum, bDir, wCount);
000004  2b01              CMP      r3,#1
000006  d11f              BNE      |L43.72|
000008  492c              LDR      r1,|L43.188|
00000a  6809              LDR      r1,[r1,#0]
00000c  b289              UXTH     r1,r1
00000e  eb0101c0          ADD      r1,r1,r0,LSL #3
000012  1c89              ADDS     r1,r1,#2
000014  4d2a              LDR      r5,|L43.192|
000016  eb050441          ADD      r4,r5,r1,LSL #1
00001a  2a3e              CMP      r2,#0x3e
00001c  dd0b              BLE      |L43.54|
00001e  1151              ASRS     r1,r2,#5
000020  f002051f          AND      r5,r2,#0x1f
000024  b90d              CBNZ     r5,|L43.42|
000026  1e4d              SUBS     r5,r1,#1
000028  b2a9              UXTH     r1,r5
                  |L43.42|
00002a  f44f4500          MOV      r5,#0x8000
00002e  ea452581          ORR      r5,r5,r1,LSL #10
000032  6025              STR      r5,[r4,#0]
000034  e007              B        |L43.70|
                  |L43.54|
000036  1051              ASRS     r1,r2,#1
000038  f0020501          AND      r5,r2,#1
00003c  b10d              CBZ      r5,|L43.66|
00003e  1c4d              ADDS     r5,r1,#1
000040  b2a9              UXTH     r1,r5
                  |L43.66|
000042  028d              LSLS     r5,r1,#10
000044  6025              STR      r5,[r4,#0]
                  |L43.70|
000046  e00a              B        |L43.94|
                  |L43.72|
000048  2b02              CMP      r3,#2
00004a  d108              BNE      |L43.94|
00004c  491b              LDR      r1,|L43.188|
00004e  6809              LDR      r1,[r1,#0]
000050  b289              UXTH     r1,r1
000052  eb0101c0          ADD      r1,r1,r0,LSL #3
000056  1c89              ADDS     r1,r1,#2
000058  4c19              LDR      r4,|L43.192|
00005a  f8442011          STR      r2,[r4,r1,LSL #1]
                  |L43.94|
00005e  2b01              CMP      r3,#1
000060  d11f              BNE      |L43.162|
000062  4916              LDR      r1,|L43.188|
000064  6809              LDR      r1,[r1,#0]
000066  b289              UXTH     r1,r1
000068  eb0101c0          ADD      r1,r1,r0,LSL #3
00006c  1d89              ADDS     r1,r1,#6
00006e  4d14              LDR      r5,|L43.192|
000070  eb050441          ADD      r4,r5,r1,LSL #1
000074  2a3e              CMP      r2,#0x3e
000076  dd0b              BLE      |L43.144|
000078  1151              ASRS     r1,r2,#5
00007a  f002051f          AND      r5,r2,#0x1f
00007e  b90d              CBNZ     r5,|L43.132|
000080  1e4d              SUBS     r5,r1,#1
000082  b2a9              UXTH     r1,r5
                  |L43.132|
000084  f44f4500          MOV      r5,#0x8000
000088  ea452581          ORR      r5,r5,r1,LSL #10
00008c  6025              STR      r5,[r4,#0]
00008e  e007              B        |L43.160|
                  |L43.144|
000090  1051              ASRS     r1,r2,#1
000092  f0020501          AND      r5,r2,#1
000096  b10d              CBZ      r5,|L43.156|
000098  1c4d              ADDS     r5,r1,#1
00009a  b2a9              UXTH     r1,r5
                  |L43.156|
00009c  028d              LSLS     r5,r1,#10
00009e  6025              STR      r5,[r4,#0]
                  |L43.160|
0000a0  e00a              B        |L43.184|
                  |L43.162|
0000a2  2b02              CMP      r3,#2
0000a4  d108              BNE      |L43.184|
0000a6  4905              LDR      r1,|L43.188|
0000a8  6809              LDR      r1,[r1,#0]
0000aa  b289              UXTH     r1,r1
0000ac  eb0101c0          ADD      r1,r1,r0,LSL #3
0000b0  1d89              ADDS     r1,r1,#6
0000b2  4c03              LDR      r4,|L43.192|
0000b4  f8442011          STR      r2,[r4,r1,LSL #1]
                  |L43.184|
;;;647    }
0000b8  bd30              POP      {r4,r5,pc}
;;;648    /*******************************************************************************
                          ENDP

0000ba  0000              DCW      0x0000
                  |L43.188|
                          DCD      0x40005c50
                  |L43.192|
                          DCD      0x40006000

                          AREA ||i.SetEPDoubleBuff||, CODE, READONLY, ALIGN=2

                  SetEPDoubleBuff PROC
;;;346    *******************************************************************************/
;;;347    void SetEPDoubleBuff(uint8_t bEpNum)
000000  4a09              LDR      r2,|L44.40|
;;;348    {
;;;349      _SetEP_KIND(bEpNum);
000002  eb020180          ADD      r1,r2,r0,LSL #2
000006  f8d11c00          LDR      r1,[r1,#0xc00]
00000a  f4417180          ORR      r1,r1,#0x100
00000e  f648728f          MOV      r2,#0x8f8f
000012  4011              ANDS     r1,r1,r2
000014  f2480280          MOV      r2,#0x8080
000018  4311              ORRS     r1,r1,r2
00001a  4b03              LDR      r3,|L44.40|
00001c  eb030280          ADD      r2,r3,r0,LSL #2
000020  f8c21c00          STR      r1,[r2,#0xc00]
;;;350    }
000024  4770              BX       lr
;;;351    /*******************************************************************************
                          ENDP

000026  0000              DCW      0x0000
                  |L44.40|
                          DCD      0x40005000

                          AREA ||i.SetEPRxAddr||, CODE, READONLY, ALIGN=2

                  SetEPRxAddr PROC
;;;492    *******************************************************************************/
;;;493    void SetEPRxAddr(uint8_t bEpNum, uint16_t wAddr)
000000  b510              PUSH     {r4,lr}
;;;494    {
;;;495      _SetEPRxAddr(bEpNum, wAddr);
000002  104a              ASRS     r2,r1,#1
000004  0053              LSLS     r3,r2,#1
000006  4a05              LDR      r2,|L45.28|
000008  6812              LDR      r2,[r2,#0]
00000a  b292              UXTH     r2,r2
00000c  eb0202c0          ADD      r2,r2,r0,LSL #3
000010  1d12              ADDS     r2,r2,#4
000012  4c03              LDR      r4,|L45.32|
000014  f8443012          STR      r3,[r4,r2,LSL #1]
;;;496    }
000018  bd10              POP      {r4,pc}
;;;497    /*******************************************************************************
                          ENDP

00001a  0000              DCW      0x0000
                  |L45.28|
                          DCD      0x40005c50
                  |L45.32|
                          DCD      0x40006000

                          AREA ||i.SetEPRxCount||, CODE, READONLY, ALIGN=2

                  SetEPRxCount PROC
;;;550    *******************************************************************************/
;;;551    void SetEPRxCount(uint8_t bEpNum, uint16_t wCount)
000000  b510              PUSH     {r4,lr}
;;;552    {
000002  4602              MOV      r2,r0
;;;553      _SetEPRxCount(bEpNum, wCount);
000004  480f              LDR      r0,|L46.68|
000006  6800              LDR      r0,[r0,#0]
000008  b280              UXTH     r0,r0
00000a  eb0000c2          ADD      r0,r0,r2,LSL #3
00000e  1d80              ADDS     r0,r0,#6
000010  4c0d              LDR      r4,|L46.72|
000012  eb040340          ADD      r3,r4,r0,LSL #1
000016  293e              CMP      r1,#0x3e
000018  dd0b              BLE      |L46.50|
00001a  1148              ASRS     r0,r1,#5
00001c  f001041f          AND      r4,r1,#0x1f
000020  b90c              CBNZ     r4,|L46.38|
000022  1e44              SUBS     r4,r0,#1
000024  b2a0              UXTH     r0,r4
                  |L46.38|
000026  f44f4400          MOV      r4,#0x8000
00002a  ea442480          ORR      r4,r4,r0,LSL #10
00002e  601c              STR      r4,[r3,#0]
000030  e007              B        |L46.66|
                  |L46.50|
000032  1048              ASRS     r0,r1,#1
000034  f0010401          AND      r4,r1,#1
000038  b10c              CBZ      r4,|L46.62|
00003a  1c44              ADDS     r4,r0,#1
00003c  b2a0              UXTH     r0,r4
                  |L46.62|
00003e  0284              LSLS     r4,r0,#10
000040  601c              STR      r4,[r3,#0]
                  |L46.66|
;;;554    }
000042  bd10              POP      {r4,pc}
;;;555    /*******************************************************************************
                          ENDP

                  |L46.68|
                          DCD      0x40005c50
                  |L46.72|
                          DCD      0x40006000

                          AREA ||i.SetEPRxStatus||, CODE, READONLY, ALIGN=2

                  SetEPRxStatus PROC
;;;219    *******************************************************************************/
;;;220    void SetEPRxStatus(uint8_t bEpNum, uint16_t wState)
000000  b530              PUSH     {r4,r5,lr}
;;;221    {
;;;222      _SetEPRxStatus(bEpNum, wState);
000002  4c0e              LDR      r4,|L47.60|
000004  eb040380          ADD      r3,r4,r0,LSL #2
000008  f8d33c00          LDR      r3,[r3,#0xc00]
00000c  f64b748f          MOV      r4,#0xbf8f
000010  ea030204          AND      r2,r3,r4
000014  f4015380          AND      r3,r1,#0x1000
000018  b10b              CBZ      r3,|L47.30|
00001a  f4825280          EOR      r2,r2,#0x1000
                  |L47.30|
00001e  f4015300          AND      r3,r1,#0x2000
000022  b10b              CBZ      r3,|L47.40|
000024  f4825200          EOR      r2,r2,#0x2000
                  |L47.40|
000028  f4424300          ORR      r3,r2,#0x8000
00002c  f0430380          ORR      r3,r3,#0x80
000030  4d02              LDR      r5,|L47.60|
000032  eb050480          ADD      r4,r5,r0,LSL #2
000036  f8c43c00          STR      r3,[r4,#0xc00]
;;;223    }
00003a  bd30              POP      {r4,r5,pc}
;;;224    
                          ENDP

                  |L47.60|
                          DCD      0x40005000

                          AREA ||i.SetEPRxValid||, CODE, READONLY, ALIGN=2

                  SetEPRxValid PROC
;;;289    *******************************************************************************/
;;;290    void SetEPRxValid(uint8_t bEpNum)
000000  b510              PUSH     {r4,lr}
;;;291    {
;;;292      _SetEPRxStatus(bEpNum, EP_RX_VALID);
000002  4b0b              LDR      r3,|L48.48|
000004  eb030280          ADD      r2,r3,r0,LSL #2
000008  f8d22c00          LDR      r2,[r2,#0xc00]
00000c  f64b738f          MOV      r3,#0xbf8f
000010  ea020103          AND      r1,r2,r3
000014  f4815180          EOR      r1,r1,#0x1000
000018  f4815100          EOR      r1,r1,#0x2000
00001c  f4414200          ORR      r2,r1,#0x8000
000020  f0420280          ORR      r2,r2,#0x80
000024  4c02              LDR      r4,|L48.48|
000026  eb040380          ADD      r3,r4,r0,LSL #2
00002a  f8c32c00          STR      r2,[r3,#0xc00]
;;;293    }
00002e  bd10              POP      {r4,pc}
;;;294    
                          ENDP

                  |L48.48|
                          DCD      0x40005000

                          AREA ||i.SetEPTxAddr||, CODE, READONLY, ALIGN=2

                  SetEPTxAddr PROC
;;;480    *******************************************************************************/
;;;481    void SetEPTxAddr(uint8_t bEpNum, uint16_t wAddr)
000000  b510              PUSH     {r4,lr}
;;;482    {
;;;483      _SetEPTxAddr(bEpNum, wAddr);
000002  104a              ASRS     r2,r1,#1
000004  0052              LSLS     r2,r2,#1
000006  4b04              LDR      r3,|L49.24|
000008  681b              LDR      r3,[r3,#0]
00000a  b29b              UXTH     r3,r3
00000c  eb0303c0          ADD      r3,r3,r0,LSL #3
000010  4c02              LDR      r4,|L49.28|
000012  f8442013          STR      r2,[r4,r3,LSL #1]
;;;484    }
000016  bd10              POP      {r4,pc}
;;;485    /*******************************************************************************
                          ENDP

                  |L49.24|
                          DCD      0x40005c50
                  |L49.28|
                          DCD      0x40006000

                          AREA ||i.SetEPTxCount||, CODE, READONLY, ALIGN=2

                  SetEPTxCount PROC
;;;526    *******************************************************************************/
;;;527    void SetEPTxCount(uint8_t bEpNum, uint16_t wCount)
000000  4a04              LDR      r2,|L50.20|
;;;528    {
;;;529      _SetEPTxCount(bEpNum, wCount);
000002  6812              LDR      r2,[r2,#0]
000004  b292              UXTH     r2,r2
000006  eb0202c0          ADD      r2,r2,r0,LSL #3
00000a  1c92              ADDS     r2,r2,#2
00000c  4b02              LDR      r3,|L50.24|
00000e  f8431012          STR      r1,[r3,r2,LSL #1]
;;;530    }
000012  4770              BX       lr
;;;531    /*******************************************************************************
                          ENDP

                  |L50.20|
                          DCD      0x40005c50
                  |L50.24|
                          DCD      0x40006000

                          AREA ||i.SetEPTxStatus||, CODE, READONLY, ALIGN=2

                  SetEPTxStatus PROC
;;;206    *******************************************************************************/
;;;207    void SetEPTxStatus(uint8_t bEpNum, uint16_t wState)
000000  b530              PUSH     {r4,r5,lr}
;;;208    {
;;;209      _SetEPTxStatus(bEpNum, wState);
000002  4c0e              LDR      r4,|L51.60|
000004  eb040380          ADD      r3,r4,r0,LSL #2
000008  f8d33c00          LDR      r3,[r3,#0xc00]
00000c  f64874bf          MOV      r4,#0x8fbf
000010  ea030204          AND      r2,r3,r4
000014  f0010310          AND      r3,r1,#0x10
000018  b10b              CBZ      r3,|L51.30|
00001a  f0820210          EOR      r2,r2,#0x10
                  |L51.30|
00001e  f0010320          AND      r3,r1,#0x20
000022  b10b              CBZ      r3,|L51.40|
000024  f0820220          EOR      r2,r2,#0x20
                  |L51.40|
000028  f4424300          ORR      r3,r2,#0x8000
00002c  f0430380          ORR      r3,r3,#0x80
000030  4d02              LDR      r5,|L51.60|
000032  eb050480          ADD      r4,r5,r0,LSL #2
000036  f8c43c00          STR      r3,[r4,#0xc00]
;;;210    }
00003a  bd30              POP      {r4,r5,pc}
;;;211    
                          ENDP

                  |L51.60|
                          DCD      0x40005000

                          AREA ||i.SetEPTxValid||, CODE, READONLY, ALIGN=2

                  SetEPTxValid PROC
;;;277    *******************************************************************************/
;;;278    void SetEPTxValid(uint8_t bEpNum)
000000  b510              PUSH     {r4,lr}
;;;279    {
;;;280      _SetEPTxStatus(bEpNum, EP_TX_VALID);
000002  4b0b              LDR      r3,|L52.48|
000004  eb030280          ADD      r2,r3,r0,LSL #2
000008  f8d22c00          LDR      r2,[r2,#0xc00]
00000c  f64873bf          MOV      r3,#0x8fbf
000010  ea020103          AND      r1,r2,r3
000014  f0810110          EOR      r1,r1,#0x10
000018  f0810120          EOR      r1,r1,#0x20
00001c  f4414200          ORR      r2,r1,#0x8000
000020  f0420280          ORR      r2,r2,#0x80
000024  4c02              LDR      r4,|L52.48|
000026  eb040380          ADD      r3,r4,r0,LSL #2
00002a  f8c32c00          STR      r2,[r3,#0xc00]
;;;281    }
00002e  bd10              POP      {r4,pc}
;;;282    
                          ENDP

                  |L52.48|
                          DCD      0x40005000

                          AREA ||i.SetEPType||, CODE, READONLY, ALIGN=2

                  SetEPType PROC
;;;181    *******************************************************************************/
;;;182    void SetEPType(uint8_t bEpNum, uint16_t wType)
000000  b510              PUSH     {r4,lr}
;;;183    {
;;;184      _SetEPType(bEpNum, wType);
000002  4b07              LDR      r3,|L53.32|
000004  eb030280          ADD      r2,r3,r0,LSL #2
000008  f8d22c00          LDR      r2,[r2,#0xc00]
00000c  f648138f          MOV      r3,#0x898f
000010  401a              ANDS     r2,r2,r3
000012  430a              ORRS     r2,r2,r1
000014  4c02              LDR      r4,|L53.32|
000016  eb040380          ADD      r3,r4,r0,LSL #2
00001a  f8c32c00          STR      r2,[r3,#0xc00]
;;;185    }
00001e  bd10              POP      {r4,pc}
;;;186    
                          ENDP

                  |L53.32|
                          DCD      0x40005000

                          AREA ||i.SetEP_KIND||, CODE, READONLY, ALIGN=2

                  SetEP_KIND PROC
;;;301    *******************************************************************************/
;;;302    void SetEP_KIND(uint8_t bEpNum)
000000  4a09              LDR      r2,|L54.40|
;;;303    {
;;;304      _SetEP_KIND(bEpNum);
000002  eb020180          ADD      r1,r2,r0,LSL #2
000006  f8d11c00          LDR      r1,[r1,#0xc00]
00000a  f4417180          ORR      r1,r1,#0x100
00000e  f648728f          MOV      r2,#0x8f8f
000012  4011              ANDS     r1,r1,r2
000014  f2480280          MOV      r2,#0x8080
000018  4311              ORRS     r1,r1,r2
00001a  4b03              LDR      r3,|L54.40|
00001c  eb030280          ADD      r2,r3,r0,LSL #2
000020  f8c21c00          STR      r1,[r2,#0xc00]
;;;305    }
000024  4770              BX       lr
;;;306    
                          ENDP

000026  0000              DCW      0x0000
                  |L54.40|
                          DCD      0x40005000

                          AREA ||i.SetISTR||, CODE, READONLY, ALIGN=2

                  SetISTR PROC
;;;71     *******************************************************************************/
;;;72     void SetISTR(uint16_t wRegValue)
000000  4901              LDR      r1,|L55.8|
;;;73     {
;;;74       _SetISTR(wRegValue);
000002  6008              STR      r0,[r1,#0]
;;;75     }
000004  4770              BX       lr
;;;76     
                          ENDP

000006  0000              DCW      0x0000
                  |L55.8|
                          DCD      0x40005c44

                          AREA ||i.Set_Status_Out||, CODE, READONLY, ALIGN=2

                  Set_Status_Out PROC
;;;335    *******************************************************************************/
;;;336    void Set_Status_Out(uint8_t bEpNum)
000000  4a09              LDR      r2,|L56.40|
;;;337    {
;;;338      _SetEP_KIND(bEpNum);
000002  eb020180          ADD      r1,r2,r0,LSL #2
000006  f8d11c00          LDR      r1,[r1,#0xc00]
00000a  f4417180          ORR      r1,r1,#0x100
00000e  f648728f          MOV      r2,#0x8f8f
000012  4011              ANDS     r1,r1,r2
000014  f2480280          MOV      r2,#0x8080
000018  4311              ORRS     r1,r1,r2
00001a  4b03              LDR      r3,|L56.40|
00001c  eb030280          ADD      r2,r3,r0,LSL #2
000020  f8c21c00          STR      r1,[r2,#0xc00]
;;;339    }
000024  4770              BX       lr
;;;340    /*******************************************************************************
                          ENDP

000026  0000              DCW      0x0000
                  |L56.40|
                          DCD      0x40005000

                          AREA ||i.ToWord||, CODE, READONLY, ALIGN=1

                  ToWord PROC
;;;739    *******************************************************************************/
;;;740    uint16_t ToWord(uint8_t bh, uint8_t bl)
000000  4602              MOV      r2,r0
;;;741    {
;;;742      uint16_t wRet;
;;;743      wRet = (uint16_t)bl | ((uint16_t)bh << 8);
000002  ea412002          ORR      r0,r1,r2,LSL #8
;;;744      return(wRet);
;;;745    }
000006  4770              BX       lr
;;;746    /*******************************************************************************
                          ENDP


                          AREA ||i.ToggleDTOG_RX||, CODE, READONLY, ALIGN=2

                  ToggleDTOG_RX PROC
;;;412    *******************************************************************************/
;;;413    void ToggleDTOG_RX(uint8_t bEpNum)
000000  4a08              LDR      r2,|L58.36|
;;;414    {
;;;415      _ToggleDTOG_RX(bEpNum);
000002  eb020180          ADD      r1,r2,r0,LSL #2
000006  f8d11c00          LDR      r1,[r1,#0xc00]
00000a  f648728f          MOV      r2,#0x8f8f
00000e  4011              ANDS     r1,r1,r2
000010  f24c0280          MOV      r2,#0xc080
000014  4311              ORRS     r1,r1,r2
000016  4b03              LDR      r3,|L58.36|
000018  eb030280          ADD      r2,r3,r0,LSL #2
00001c  f8c21c00          STR      r1,[r2,#0xc00]
;;;416    }
000020  4770              BX       lr
;;;417    /*******************************************************************************
                          ENDP

000022  0000              DCW      0x0000
                  |L58.36|
                          DCD      0x40005000

                          AREA ||i.ToggleDTOG_TX||, CODE, READONLY, ALIGN=2

                  ToggleDTOG_TX PROC
;;;423    *******************************************************************************/
;;;424    void ToggleDTOG_TX(uint8_t bEpNum)
000000  4a08              LDR      r2,|L59.36|
;;;425    {
;;;426      _ToggleDTOG_TX(bEpNum);
000002  eb020180          ADD      r1,r2,r0,LSL #2
000006  f8d11c00          LDR      r1,[r1,#0xc00]
00000a  f648728f          MOV      r2,#0x8f8f
00000e  4011              ANDS     r1,r1,r2
000010  f24802c0          MOV      r2,#0x80c0
000014  4311              ORRS     r1,r1,r2
000016  4b03              LDR      r3,|L59.36|
000018  eb030280          ADD      r2,r3,r0,LSL #2
00001c  f8c21c00          STR      r1,[r2,#0xc00]
;;;427    }
000020  4770              BX       lr
;;;428    /*******************************************************************************
                          ENDP

000022  0000              DCW      0x0000
                  |L59.36|
                          DCD      0x40005000

;*** Start embedded assembler ***

#line 1 "..\\..\\Libraries\\STM32_USB-FS-Device_Driver\\src\\usb_regs.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___10_usb_regs_c_SetCNTR____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___10_usb_regs_c_SetCNTR____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___10_usb_regs_c_SetCNTR____REVSH|
#line 128
|__asm___10_usb_regs_c_SetCNTR____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
