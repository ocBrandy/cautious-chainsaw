; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\obj\dg_datastorage.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\dg_datastorage.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\Libraries\CMSIS\Include -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User\app\inc -I..\..\User\FatFS\src -I..\..\User\Mass_Storage\inc -I..\..\User\LCD_Driver -I..\..\User\SYSTEM\sys -I..\..\User\Debugprintf -I..\..\User\LogDebug -I..\..\User\app\inc -I..\..\User\app\src -I..\..\User\bsp\inc -I..\..\User\bsp\src -I.\RTE\_Flash -ID:\Keil_v5\ARM\Packs\ARM\CMSIS\5.5.1\CMSIS\Core\Include -ID:\Keil_v5\ARM\Packs\Keil\STM32F1xx_DFP\2.1.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=527 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\flash\obj\dg_datastorage.crf ..\..\User\app\src\DG_DataStorage.c]
                          THUMB

                          AREA ||i.BC95_StrToHex||, CODE, READONLY, ALIGN=1

                  BC95_StrToHex PROC
;;;726    */
;;;727    static int32_t BC95_StrToHex(char *_pStr, uint8_t _ucLen)
000000  b570              PUSH     {r4-r6,lr}
;;;728    {
000002  4603              MOV      r3,r0
000004  460c              MOV      r4,r1
;;;729    
;;;730     char *p;
;;;731     uint32_t ulInt;
;;;732     uint8_t i;
;;;733     uint8_t ucTemp;
;;;734    
;;;735     p = _pStr;
000006  461a              MOV      r2,r3
;;;736    
;;;737     ulInt = 0;
000008  2000              MOVS     r0,#0
;;;738     for (i = 0; i < _ucLen; i++)
00000a  2500              MOVS     r5,#0
00000c  e021              B        |L1.82|
                  |L1.14|
;;;739     {
;;;740      ucTemp = *p;
00000e  7811              LDRB     r1,[r2,#0]
;;;741    
;;;742      if ((ucTemp >= '0') && (ucTemp <= '9'))
000010  2930              CMP      r1,#0x30
000012  db07              BLT      |L1.36|
000014  2939              CMP      r1,#0x39
000016  dc05              BGT      |L1.36|
;;;743      {
;;;744       ulInt = ( ulInt << 4) + (ucTemp - '0');
000018  f1a10630          SUB      r6,r1,#0x30
00001c  eb061000          ADD      r0,r6,r0,LSL #4
;;;745       p++;
000020  1c52              ADDS     r2,r2,#1
000022  e014              B        |L1.78|
                  |L1.36|
;;;746      }
;;;747      else if ((ucTemp >= 'A') && (ucTemp <= 'F'))
000024  2941              CMP      r1,#0x41
000026  db07              BLT      |L1.56|
000028  2946              CMP      r1,#0x46
00002a  dc05              BGT      |L1.56|
;;;748      {
;;;749       ulInt = ( ulInt <<4) + (ucTemp - 55);
00002c  f1a10637          SUB      r6,r1,#0x37
000030  eb061000          ADD      r0,r6,r0,LSL #4
;;;750       p++;
000034  1c52              ADDS     r2,r2,#1
000036  e00a              B        |L1.78|
                  |L1.56|
;;;751      }
;;;752      else if ((ucTemp >= 'a') && (ucTemp <= 'f'))
000038  2961              CMP      r1,#0x61
00003a  db07              BLT      |L1.76|
00003c  2966              CMP      r1,#0x66
00003e  dc05              BGT      |L1.76|
;;;753      {
;;;754       ulInt = (ulInt <<4) + (ucTemp - 87);
000040  f1a10657          SUB      r6,r1,#0x57
000044  eb061000          ADD      r0,r6,r0,LSL #4
;;;755       p++;
000048  1c52              ADDS     r2,r2,#1
00004a  e000              B        |L1.78|
                  |L1.76|
;;;756      }
;;;757      else
;;;758      {
;;;759       break;
00004c  e003              B        |L1.86|
                  |L1.78|
00004e  1c6e              ADDS     r6,r5,#1              ;738
000050  b2f5              UXTB     r5,r6                 ;738
                  |L1.82|
000052  42a5              CMP      r5,r4                 ;738
000054  dbdb              BLT      |L1.14|
                  |L1.86|
000056  bf00              NOP      
;;;760      }
;;;761     }
;;;762    
;;;763     return ulInt;
;;;764    }
000058  bd70              POP      {r4-r6,pc}
;;;765    
                          ENDP


                          AREA ||i.CheckSum||, CODE, READONLY, ALIGN=1

                  CheckSum PROC
;;;93     */
;;;94     static uint16_t CheckSum(uint8_t *_buf, uint16_t _len)
000000  b510              PUSH     {r4,lr}
;;;95     {
000002  4602              MOV      r2,r0
000004  460b              MOV      r3,r1
;;;96     	uint16_t sum = 0;
000006  2000              MOVS     r0,#0
;;;97     	uint16_t i;
;;;98     	 
;;;99     	for(i = 0 ; i<_len ; i++)
000008  2100              MOVS     r1,#0
00000a  e004              B        |L2.22|
                  |L2.12|
;;;100    		{
;;;101    			sum += _buf[i];
00000c  5c54              LDRB     r4,[r2,r1]
00000e  4404              ADD      r4,r4,r0
000010  b2a0              UXTH     r0,r4
000012  1c4c              ADDS     r4,r1,#1              ;99
000014  b2a1              UXTH     r1,r4                 ;99
                  |L2.22|
000016  4299              CMP      r1,r3                 ;99
000018  dbf8              BLT      |L2.12|
;;;102    		}
;;;103    	
;;;104    	return sum;
;;;105    }
00001a  bd10              POP      {r4,pc}
;;;106    /*
                          ENDP


                          AREA ||i.DataPoll||, CODE, READONLY, ALIGN=2

                  DataPoll PROC
;;;114    */
;;;115    void DataPoll(void)
000000  b570              PUSH     {r4-r6,lr}
;;;116    {
000002  b08c              SUB      sp,sp,#0x30
;;;117    	uint8_t ucData;
;;;118    	uint16_t ucRxCount = 0; 
000004  2500              MOVS     r5,#0
;;;119    	uint8_t overflag = 0;
000006  2600              MOVS     r6,#0
;;;120    	uint8_t buf[44] = {0};                  //数据存储426，不满足255
000008  212c              MOVS     r1,#0x2c
00000a  4668              MOV      r0,sp
00000c  f7fffffe          BL       __aeabi_memclr4
;;;121    //    uint8_t uclen;
;;;122    	uint8_t i;
;;;123    	
;;;124    	while(1)
000010  e04a              B        |L3.168|
                  |L3.18|
;;;125    	{
;;;126    	  /* 轮询是否有数据上传，超时 20ms无数据则退出 */
;;;127    		if(comGetChar(COM2,&ucData))
000012  a90b              ADD      r1,sp,#0x2c
000014  2001              MOVS     r0,#1
000016  f7fffffe          BL       comGetChar
00001a  b358              CBZ      r0,|L3.116|
;;;128    		{
;;;129    		    g_ucTimeOut2 = 0;
00001c  2000              MOVS     r0,#0
00001e  4997              LDR      r1,|L3.636|
000020  7008              STRB     r0,[r1,#0]
;;;130    		    bsp_StopTimer(1);			
000022  2001              MOVS     r0,#1
000024  f7fffffe          BL       bsp_StopTimer
;;;131    			switch(CmdRxState)
000028  4895              LDR      r0,|L3.640|
00002a  7800              LDRB     r0,[r0,#0]  ; CmdRxState
00002c  b120              CBZ      r0,|L3.56|
00002e  2801              CMP      r0,#1
000030  d00c              BEQ      |L3.76|
000032  2802              CMP      r0,#2
000034  d11c              BNE      |L3.112|
000036  e013              B        |L3.96|
                  |L3.56|
;;;132    			{
;;;133    				/* 校验帧头1 */
;;;134    				case 0:				
;;;135    					if(ucData == 0x2F)
000038  f89d002c          LDRB     r0,[sp,#0x2c]
00003c  282f              CMP      r0,#0x2f
00003e  d104              BNE      |L3.74|
;;;136    						{
;;;137    							CmdRxState++;		/* 跳转进入下一步 */
000040  488f              LDR      r0,|L3.640|
000042  7800              LDRB     r0,[r0,#0]  ; CmdRxState
000044  1c40              ADDS     r0,r0,#1
000046  498e              LDR      r1,|L3.640|
000048  7008              STRB     r0,[r1,#0]
                  |L3.74|
;;;138    						}
;;;139    			
;;;140    				break;
00004a  e011              B        |L3.112|
                  |L3.76|
;;;141    				
;;;142    				/* 校验帧头2 */
;;;143    				case 1:				
;;;144    					if(ucData == 0x2F)
00004c  f89d002c          LDRB     r0,[sp,#0x2c]
000050  282f              CMP      r0,#0x2f
000052  d104              BNE      |L3.94|
;;;145    					    {
;;;146    							CmdRxState++;		/* 跳转进入下一步 */
000054  488a              LDR      r0,|L3.640|
000056  7800              LDRB     r0,[r0,#0]  ; CmdRxState
000058  1c40              ADDS     r0,r0,#1
00005a  4989              LDR      r1,|L3.640|
00005c  7008              STRB     r0,[r1,#0]
                  |L3.94|
;;;147    						}
;;;148    					break;
00005e  e007              B        |L3.112|
                  |L3.96|
;;;149    				case 2:  
;;;150    					    
;;;151              		 		buf[ucRxCount++] = ucData;    /* 存储剩余数据*/
000060  f89d202c          LDRB     r2,[sp,#0x2c]
000064  4628              MOV      r0,r5
000066  1c69              ADDS     r1,r5,#1
000068  b28d              UXTH     r5,r1
00006a  f80d2000          STRB     r2,[sp,r0]
;;;152    //				          INSERT(LogDebug)(TIMER2_DEBUG,("\r\n TIME run \r\n"));
;;;153    					         
;;;154    					    break;
00006e  bf00              NOP      
                  |L3.112|
000070  bf00              NOP                            ;140
;;;155    	             /* 可能还有数据，继续识别一次，确保无数据了 */
;;;156    			}
;;;157    			 continue; 
000072  e019              B        |L3.168|
                  |L3.116|
;;;158    		}		
;;;159    		else if(g_ucTimeOut2 == 0)
000074  4881              LDR      r0,|L3.636|
000076  7800              LDRB     r0,[r0,#0]  ; g_ucTimeOut2
000078  b930              CBNZ     r0,|L3.136|
;;;160    		{
;;;161    		   bsp_StartTimer(1,3);   //等待3ms若还没有数据，标志位置1,10/19200=(一字节)
00007a  2103              MOVS     r1,#3
00007c  2001              MOVS     r0,#1
00007e  f7fffffe          BL       bsp_StartTimer
;;;162    		   g_ucTimeOut2 = 1;
000082  2001              MOVS     r0,#1
000084  497d              LDR      r1,|L3.636|
000086  7008              STRB     r0,[r1,#0]
                  |L3.136|
;;;163    		}
;;;164      
;;;165    		/* 连续3ms没有收到数据，退出循环 */
;;;166    		if(bsp_CheckTimer(1))
000088  2001              MOVS     r0,#1
00008a  f7fffffe          BL       bsp_CheckTimer
00008e  b128              CBZ      r0,|L3.156|
;;;167    		{
;;;168    		   g_ucTimeOut2 = 0;
000090  2000              MOVS     r0,#0
000092  497a              LDR      r1,|L3.636|
000094  7008              STRB     r0,[r1,#0]
;;;169    		   CmdRxState = 0;	
000096  497a              LDR      r1,|L3.640|
000098  7008              STRB     r0,[r1,#0]
;;;170    		   break;
00009a  e006              B        |L3.170|
                  |L3.156|
;;;171    		}		  
;;;172    		/* 没有任何数据 */
;;;173    		if(g_ucTimeOut2 == 0 && ucRxCount == 0)
00009c  4877              LDR      r0,|L3.636|
00009e  7800              LDRB     r0,[r0,#0]  ; g_ucTimeOut2
0000a0  b908              CBNZ     r0,|L3.166|
0000a2  b905              CBNZ     r5,|L3.166|
;;;174    		{
;;;175    			break;
0000a4  e001              B        |L3.170|
                  |L3.166|
0000a6  bf00              NOP                            ;157
                  |L3.168|
0000a8  e7b3              B        |L3.18|
                  |L3.170|
0000aa  bf00              NOP                            ;170
;;;176    		}
;;;177    		
;;;178    		
;;;179    	}
;;;180    	//数据解析//
;;;181    	if(ucRxCount >= 44)    //接受完一帧数据
0000ac  2d2c              CMP      r5,#0x2c
0000ae  db7d              BLT      |L3.428|
;;;182    	{	
;;;183    		      INSERT(LogDebug)(Rx_data_DEBUG,("\r\n %x %x %x %x %x %x %x \r\n",buf[0],buf[1],buf[2],buf[3],buf[4],buf[5],buf[6])); //打印数组
0000b0  bf00              NOP      
0000b2  bf00              NOP      
;;;184    					INSERT(LogDebug)(Rx_data_DEBUG,("\r\n %x %x %x %x %x %x %x \r\n",buf[7],buf[8],buf[9],buf[10],buf[11],buf[12],buf[13])); //打印数组
0000b4  bf00              NOP      
0000b6  bf00              NOP      
;;;185    				  INSERT(LogDebug)(Rx_data_DEBUG,("\r\n %x %x %x %x %x %x %x \r\n",buf[14],buf[15],buf[16],buf[17],buf[18],buf[19],buf[20])); //打印数组
0000b8  bf00              NOP      
0000ba  bf00              NOP      
;;;186    				  INSERT(LogDebug)(Rx_data_DEBUG,("\r\n %x %x %x %x %x %x %x \r\n",buf[21],buf[22],buf[23],buf[24],buf[25],buf[26],buf[27])); //打印数组
0000bc  bf00              NOP      
0000be  bf00              NOP      
;;;187    			   	INSERT(LogDebug)(Rx_data_DEBUG,("\r\n %x %x %x %x %x %x %x \r\n",buf[28],buf[29],buf[30],buf[31],buf[32],buf[33],buf[34])); //打印数组
0000c0  bf00              NOP      
0000c2  bf00              NOP      
;;;188    			   	INSERT(LogDebug)(Rx_data_DEBUG,("\r\n %x %x %x %x %x %x %x \r\n",buf[35],buf[36],buf[37],buf[38],buf[39],buf[40],buf[41])); //打印数组
0000c4  bf00              NOP      
0000c6  bf00              NOP      
;;;189    				  INSERT(LogDebug)(Rx_data_DEBUG,("\r\n %x %x \r\n",buf[42],buf[43])); //打印数组
0000c8  bf00              NOP      
0000ca  bf00              NOP      
;;;190    		      INSERT(LogDebug)(RxData_over_DEBUG,("\r\n RD over ! \r\n"));
0000cc  bf00              NOP      
0000ce  bf00              NOP      
;;;191    //		comSendBuf(COM2,buf,44);
;;;192    		g_tDisDate.Mode.d = ((uint16_t)buf[1] << 8)|(uint16_t)buf[0];
0000d0  f89d0000          LDRB     r0,[sp,#0]
0000d4  f89d1001          LDRB     r1,[sp,#1]
0000d8  ea402001          ORR      r0,r0,r1,LSL #8
0000dc  4969              LDR      r1,|L3.644|
0000de  8008              STRH     r0,[r1,#0]
;;;193    	    g_tDisDate.DEP.a  = ((int32_t)buf[5] << 24) | ((int32_t)buf[4] << 16)|((int32_t)buf[3] << 8)|((int32_t)buf[2]);	
0000e0  f89d0005          LDRB     r0,[sp,#5]
0000e4  0600              LSLS     r0,r0,#24
0000e6  f89d1004          LDRB     r1,[sp,#4]
0000ea  ea404001          ORR      r0,r0,r1,LSL #16
0000ee  f89d1003          LDRB     r1,[sp,#3]
0000f2  ea402001          ORR      r0,r0,r1,LSL #8
0000f6  f89d1002          LDRB     r1,[sp,#2]
0000fa  4308              ORRS     r0,r0,r1
0000fc  4961              LDR      r1,|L3.644|
0000fe  6048              STR      r0,[r1,#4]  ; g_tDisDate
;;;194    		g_tDisDate.DEP.a /=100;
000100  4608              MOV      r0,r1
000102  6840              LDR      r0,[r0,#4]  ; g_tDisDate
000104  2164              MOVS     r1,#0x64
000106  fb90f0f1          SDIV     r0,r0,r1
00010a  495e              LDR      r1,|L3.644|
00010c  6048              STR      r0,[r1,#4]  ; g_tDisDate
;;;195    		if(pre_DEP > g_tDisDate.DEP.a )
00010e  4608              MOV      r0,r1
000110  6840              LDR      r0,[r0,#4]  ; g_tDisDate
000112  495d              LDR      r1,|L3.648|
000114  6809              LDR      r1,[r1,#0]  ; pre_DEP
000116  4288              CMP      r0,r1
000118  d207              BCS      |L3.298|
;;;196    		{
;;;197    			row_buf = 0x01;                        //  向上
00011a  2001              MOVS     r0,#1
00011c  495b              LDR      r1,|L3.652|
00011e  7008              STRB     r0,[r1,#0]
;;;198    			pre_DEP = g_tDisDate.DEP.a; 
000120  4858              LDR      r0,|L3.644|
000122  6840              LDR      r0,[r0,#4]  ; g_tDisDate
000124  4958              LDR      r1,|L3.648|
000126  6008              STR      r0,[r1,#0]  ; pre_DEP
000128  e014              B        |L3.340|
                  |L3.298|
;;;199    		}	
;;;200    		else if(pre_DEP < g_tDisDate.DEP.a )
00012a  4856              LDR      r0,|L3.644|
00012c  6840              LDR      r0,[r0,#4]  ; g_tDisDate
00012e  4956              LDR      r1,|L3.648|
000130  6809              LDR      r1,[r1,#0]  ; pre_DEP
000132  4288              CMP      r0,r1
000134  d907              BLS      |L3.326|
;;;201            {
;;;202    		    row_buf = 0x02;                          //向下
000136  2002              MOVS     r0,#2
000138  4954              LDR      r1,|L3.652|
00013a  7008              STRB     r0,[r1,#0]
;;;203    			pre_DEP = g_tDisDate.DEP.a;
00013c  4851              LDR      r0,|L3.644|
00013e  6840              LDR      r0,[r0,#4]  ; g_tDisDate
000140  4951              LDR      r1,|L3.648|
000142  6008              STR      r0,[r1,#0]  ; pre_DEP
000144  e006              B        |L3.340|
                  |L3.326|
;;;204    		}
;;;205    		else
;;;206            {
;;;207    		    row_buf = 0x00;             //隐藏
000146  2000              MOVS     r0,#0
000148  4950              LDR      r1,|L3.652|
00014a  7008              STRB     r0,[r1,#0]
;;;208    			pre_DEP = g_tDisDate.DEP.a;
00014c  484d              LDR      r0,|L3.644|
00014e  6840              LDR      r0,[r0,#4]  ; g_tDisDate
000150  494d              LDR      r1,|L3.648|
000152  6008              STR      r0,[r1,#0]  ; pre_DEP
                  |L3.340|
;;;209    		}
;;;210    		g_tDisDate.UNDEP.a = ((int32_t)buf[9] << 24) | ((int32_t)buf[8] << 16)|((int32_t)buf[7] << 8)|((int32_t)buf[6]);
000154  f89d0009          LDRB     r0,[sp,#9]
000158  0600              LSLS     r0,r0,#24
00015a  f89d1008          LDRB     r1,[sp,#8]
00015e  ea404001          ORR      r0,r0,r1,LSL #16
000162  f89d1007          LDRB     r1,[sp,#7]
000166  ea402001          ORR      r0,r0,r1,LSL #8
00016a  f89d1006          LDRB     r1,[sp,#6]
00016e  4308              ORRS     r0,r0,r1
000170  4944              LDR      r1,|L3.644|
000172  6088              STR      r0,[r1,#8]  ; g_tDisDate
;;;211    		g_tDisDate.SPD.c = ((int16_t)buf[11] << 8)|((int16_t)buf[10]);
000174  f89d000a          LDRB     r0,[sp,#0xa]
000178  f89d100b          LDRB     r1,[sp,#0xb]
00017c  ea402001          ORR      r0,r0,r1,LSL #8
000180  b200              SXTH     r0,r0
000182  4940              LDR      r1,|L3.644|
000184  8188              STRH     r0,[r1,#0xc]
;;;212    		g_tDisDate.TEN.c = ((int16_t)buf[13] << 8)|((int16_t)buf[12]);
000186  f89d000c          LDRB     r0,[sp,#0xc]
00018a  f89d100d          LDRB     r1,[sp,#0xd]
00018e  ea402001          ORR      r0,r0,r1,LSL #8
000192  b200              SXTH     r0,r0
000194  493b              LDR      r1,|L3.644|
000196  81c8              STRH     r0,[r1,#0xe]
;;;213    		g_tDisDate.CHT.c = ((int16_t)buf[15] << 8)|((int16_t)buf[14]);
000198  f89d000e          LDRB     r0,[sp,#0xe]
00019c  f89d100f          LDRB     r1,[sp,#0xf]
0001a0  ea402001          ORR      r0,r0,r1,LSL #8
0001a4  b200              SXTH     r0,r0
0001a6  4937              LDR      r1,|L3.644|
0001a8  8208              STRH     r0,[r1,#0x10]
;;;214    		for(i = 0;i < 14;i++)
0001aa  e000              B        |L3.430|
                  |L3.428|
0001ac  e044              B        |L3.568|
                  |L3.430|
0001ae  2400              MOVS     r4,#0
0001b0  e007              B        |L3.450|
                  |L3.434|
;;;215    		   {
;;;216    		     g_tDisDate.RES.c = buf[i+16];
0001b2  f1040010          ADD      r0,r4,#0x10
0001b6  f81d0000          LDRB     r0,[sp,r0]
0001ba  4932              LDR      r1,|L3.644|
0001bc  8248              STRH     r0,[r1,#0x12]
0001be  1c60              ADDS     r0,r4,#1              ;214
0001c0  b2c4              UXTB     r4,r0                 ;214
                  |L3.450|
0001c2  2c0e              CMP      r4,#0xe               ;214
0001c4  dbf5              BLT      |L3.434|
;;;217    		   }
;;;218    		g_tDisDate.CHV.d = ((uint16_t)buf[31] << 8)|((uint16_t)buf[30]);
0001c6  f89d001e          LDRB     r0,[sp,#0x1e]
0001ca  f89d101f          LDRB     r1,[sp,#0x1f]
0001ce  ea402001          ORR      r0,r0,r1,LSL #8
0001d2  492c              LDR      r1,|L3.644|
0001d4  8288              STRH     r0,[r1,#0x14]
;;;219    		g_tDisDate.DOWNRATE.d = ((uint16_t)buf[33] << 8)|((uint16_t)buf[32]);
0001d6  f89d0020          LDRB     r0,[sp,#0x20]
0001da  f89d1021          LDRB     r1,[sp,#0x21]
0001de  ea402001          ORR      r0,r0,r1,LSL #8
0001e2  4928              LDR      r1,|L3.644|
0001e4  8308              STRH     r0,[r1,#0x18]
;;;220    		g_tDisDate.UPRATE.d = ((uint16_t)buf[35] << 8)|((uint16_t)buf[34]);
0001e6  f89d0022          LDRB     r0,[sp,#0x22]
0001ea  f89d1023          LDRB     r1,[sp,#0x23]
0001ee  ea402001          ORR      r0,r0,r1,LSL #8
0001f2  4924              LDR      r1,|L3.644|
0001f4  82c8              STRH     r0,[r1,#0x16]
;;;221    		g_tDisDate.UPLOSE.d = ((uint16_t)buf[37] << 8)|((uint16_t)buf[36]);
0001f6  f89d0024          LDRB     r0,[sp,#0x24]
0001fa  f89d1025          LDRB     r1,[sp,#0x25]
0001fe  ea402001          ORR      r0,r0,r1,LSL #8
000202  4920              LDR      r1,|L3.644|
000204  8348              STRH     r0,[r1,#0x1a]
;;;222    		g_tDisDate.DOWNLOSE.d = ((uint16_t)buf[39] << 8)|((uint16_t)buf[38]);
000206  f89d0026          LDRB     r0,[sp,#0x26]
00020a  f89d1027          LDRB     r1,[sp,#0x27]
00020e  ea402001          ORR      r0,r0,r1,LSL #8
000212  491c              LDR      r1,|L3.644|
000214  8388              STRH     r0,[r1,#0x1c]
;;;223    		g_tDisDate.UPUTI.d = ((uint16_t)buf[41] << 8)|((uint16_t)buf[40]);
000216  f89d0028          LDRB     r0,[sp,#0x28]
00021a  f89d1029          LDRB     r1,[sp,#0x29]
00021e  ea402001          ORR      r0,r0,r1,LSL #8
000222  4918              LDR      r1,|L3.644|
000224  83c8              STRH     r0,[r1,#0x1e]
;;;224    		g_tDisDate.MODEM.d = ((uint16_t)buf[43] << 8)|((uint16_t)buf[42]);
000226  f89d002a          LDRB     r0,[sp,#0x2a]
00022a  f89d102b          LDRB     r1,[sp,#0x2b]
00022e  ea402001          ORR      r0,r0,r1,LSL #8
000232  4914              LDR      r1,|L3.644|
000234  8408              STRH     r0,[r1,#0x20]
;;;225    		overflag = 1; 
000236  2601              MOVS     r6,#1
                  |L3.568|
;;;226    	}
;;;227    	if(overflag == 1)
000238  2e01              CMP      r6,#1
00023a  d11d              BNE      |L3.632|
;;;228    	{
;;;229    		
;;;230    		DisPlay(DEP); 
00023c  2000              MOVS     r0,#0
00023e  f7fffffe          BL       DisPlay
;;;231    		DisPlay(SPD);
000242  2001              MOVS     r0,#1
000244  f7fffffe          BL       DisPlay
;;;232    		DisPlay(TEN);
000248  2002              MOVS     r0,#2
00024a  f7fffffe          BL       DisPlay
;;;233    		DisPlay(CHT);
00024e  2003              MOVS     r0,#3
000250  f7fffffe          BL       DisPlay
;;;234    		DisPlay(CHV);
000254  2004              MOVS     r0,#4
000256  f7fffffe          BL       DisPlay
;;;235    		DisPlay(MODEM);
00025a  2007              MOVS     r0,#7
00025c  f7fffffe          BL       DisPlay
;;;236    		DisPlay(UPRATE);
000260  2005              MOVS     r0,#5
000262  f7fffffe          BL       DisPlay
;;;237    		DisPlay(DOWNRATE);
000266  2006              MOVS     r0,#6
000268  f7fffffe          BL       DisPlay
;;;238    		DisPlay(ROW);
00026c  2008              MOVS     r0,#8
00026e  f7fffffe          BL       DisPlay
;;;239    		overflag = 0;
000272  2600              MOVS     r6,#0
;;;240    		INSERT(LogDebug)(RxData_display_DEBUG,("\r\n RD display ! \r\n"));
000274  bf00              NOP      
000276  bf00              NOP      
                  |L3.632|
;;;241    	}	
;;;242    }
000278  b00c              ADD      sp,sp,#0x30
00027a  bd70              POP      {r4-r6,pc}
;;;243    
                          ENDP

                  |L3.636|
                          DCD      g_ucTimeOut2
                  |L3.640|
                          DCD      CmdRxState
                  |L3.644|
                          DCD      g_tDisDate
                  |L3.648|
                          DCD      pre_DEP
                  |L3.652|
                          DCD      row_buf

                          AREA ||i.DisPlay||, CODE, READONLY, ALIGN=2

                  DisPlay PROC
;;;251    */
;;;252    void DisPlay(DIS_TYPE_E _type)                        //枚举函数，一般和switch连用
000000  b570              PUSH     {r4-r6,lr}
;;;253    {
000002  4605              MOV      r5,r0
;;;254    	uint8_t uclen = 0;
000004  2400              MOVS     r4,#0
;;;255    	g_LcdTxBuf[uclen++] = 0x5A;
000006  225a              MOVS     r2,#0x5a
000008  4621              MOV      r1,r4
00000a  1c64              ADDS     r4,r4,#1
00000c  489c              LDR      r0,|L4.640|
00000e  5442              STRB     r2,[r0,r1]
;;;256    	g_LcdTxBuf[uclen++] = 0xA5;
000010  22a5              MOVS     r2,#0xa5
000012  4621              MOV      r1,r4
000014  1c64              ADDS     r4,r4,#1
000016  5442              STRB     r2,[r0,r1]
;;;257    	g_LcdTxBuf[uclen++] = 0x00;                       //最后根据接收数据位判断数据长度
000018  2200              MOVS     r2,#0
00001a  4621              MOV      r1,r4
00001c  1c64              ADDS     r4,r4,#1
00001e  5442              STRB     r2,[r0,r1]
;;;258    	g_LcdTxBuf[uclen++] = 0x82;                       //写指令
000020  2282              MOVS     r2,#0x82
000022  4621              MOV      r1,r4
000024  1c64              ADDS     r4,r4,#1
000026  5442              STRB     r2,[r0,r1]
;;;259    	switch(_type)
000028  2d09              CMP      r5,#9
00002a  d27d              BCS      |L4.296|
00002c  e8dff005          TBB      [pc,r5]
000030  05304d6a          DCB      0x05,0x30,0x4d,0x6a
000034  89c5e2a6          DCB      0x89,0xc5,0xe2,0xa6
000038  fe00              DCB      0xfe,0x00
;;;260    	{
;;;261    		/* 校正深度 */
;;;262    		case DEP:
;;;263    			g_LcdTxBuf[uclen++] = add_buf[0][0];      //数据只能一位一位的，如果多位可以利用for循环
00003a  4892              LDR      r0,|L4.644|
00003c  7802              LDRB     r2,[r0,#0]  ; add_buf
00003e  4620              MOV      r0,r4
000040  1c61              ADDS     r1,r4,#1
000042  b2cc              UXTB     r4,r1
000044  498e              LDR      r1,|L4.640|
000046  540a              STRB     r2,[r1,r0]
;;;264    			g_LcdTxBuf[uclen++] = add_buf[0][1];
000048  488e              LDR      r0,|L4.644|
00004a  7842              LDRB     r2,[r0,#1]  ; add_buf
00004c  4620              MOV      r0,r4
00004e  1c61              ADDS     r1,r4,#1
000050  b2cc              UXTB     r4,r1
000052  498b              LDR      r1,|L4.640|
000054  540a              STRB     r2,[r1,r0]
;;;265    			g_LcdTxBuf[uclen++] = g_tDisDate.DEP.b[3];
000056  488c              LDR      r0,|L4.648|
000058  79c2              LDRB     r2,[r0,#7]
00005a  4620              MOV      r0,r4
00005c  1c61              ADDS     r1,r4,#1
00005e  b2cc              UXTB     r4,r1
000060  4987              LDR      r1,|L4.640|
000062  540a              STRB     r2,[r1,r0]
;;;266    			g_LcdTxBuf[uclen++] = g_tDisDate.DEP.b[2];
000064  4888              LDR      r0,|L4.648|
000066  7982              LDRB     r2,[r0,#6]
000068  4620              MOV      r0,r4
00006a  1c61              ADDS     r1,r4,#1
00006c  b2cc              UXTB     r4,r1
00006e  4984              LDR      r1,|L4.640|
000070  540a              STRB     r2,[r1,r0]
;;;267    			g_LcdTxBuf[uclen++] = g_tDisDate.DEP.b[1];
000072  4885              LDR      r0,|L4.648|
000074  7942              LDRB     r2,[r0,#5]
000076  4620              MOV      r0,r4
000078  1c61              ADDS     r1,r4,#1
00007a  b2cc              UXTB     r4,r1
00007c  4980              LDR      r1,|L4.640|
00007e  540a              STRB     r2,[r1,r0]
;;;268    			g_LcdTxBuf[uclen++] = g_tDisDate.DEP.b[0];
000080  4881              LDR      r0,|L4.648|
000082  7902              LDRB     r2,[r0,#4]  ; g_tDisDate
000084  4620              MOV      r0,r4
000086  1c61              ADDS     r1,r4,#1
000088  b2cc              UXTB     r4,r1
00008a  497d              LDR      r1,|L4.640|
00008c  540a              STRB     r2,[r1,r0]
;;;269    
;;;270    			break;
00008e  e0ed              B        |L4.620|
;;;271    		/* 速度 */
;;;272    		case SPD:
;;;273    			g_LcdTxBuf[uclen++] = add_buf[1][0];      
000090  487c              LDR      r0,|L4.644|
000092  7882              LDRB     r2,[r0,#2]  ; add_buf
000094  4620              MOV      r0,r4
000096  1c61              ADDS     r1,r4,#1
000098  b2cc              UXTB     r4,r1
00009a  4979              LDR      r1,|L4.640|
00009c  540a              STRB     r2,[r1,r0]
;;;274    			g_LcdTxBuf[uclen++] = add_buf[1][1];
00009e  4879              LDR      r0,|L4.644|
0000a0  78c2              LDRB     r2,[r0,#3]
0000a2  4620              MOV      r0,r4
0000a4  1c61              ADDS     r1,r4,#1
0000a6  b2cc              UXTB     r4,r1
0000a8  4975              LDR      r1,|L4.640|
0000aa  540a              STRB     r2,[r1,r0]
;;;275    			g_LcdTxBuf[uclen++] = g_tDisDate.SPD.e[1];
0000ac  4876              LDR      r0,|L4.648|
0000ae  7b42              LDRB     r2,[r0,#0xd]
0000b0  4620              MOV      r0,r4
0000b2  1c61              ADDS     r1,r4,#1
0000b4  b2cc              UXTB     r4,r1
0000b6  4972              LDR      r1,|L4.640|
0000b8  540a              STRB     r2,[r1,r0]
;;;276    			g_LcdTxBuf[uclen++] = g_tDisDate.SPD.e[0];
0000ba  4873              LDR      r0,|L4.648|
0000bc  7b02              LDRB     r2,[r0,#0xc]  ; g_tDisDate
0000be  4620              MOV      r0,r4
0000c0  1c61              ADDS     r1,r4,#1
0000c2  b2cc              UXTB     r4,r1
0000c4  496e              LDR      r1,|L4.640|
0000c6  540a              STRB     r2,[r1,r0]
;;;277    	
;;;278    			break;
0000c8  e0d0              B        |L4.620|
;;;279    		/* 张力 */
;;;280    		case TEN:
;;;281    			g_LcdTxBuf[uclen++] = add_buf[2][0];     
0000ca  486e              LDR      r0,|L4.644|
0000cc  7902              LDRB     r2,[r0,#4]  ; add_buf
0000ce  4620              MOV      r0,r4
0000d0  1c61              ADDS     r1,r4,#1
0000d2  b2cc              UXTB     r4,r1
0000d4  496a              LDR      r1,|L4.640|
0000d6  540a              STRB     r2,[r1,r0]
;;;282    			g_LcdTxBuf[uclen++] = add_buf[2][1];
0000d8  486a              LDR      r0,|L4.644|
0000da  7942              LDRB     r2,[r0,#5]
0000dc  4620              MOV      r0,r4
0000de  1c61              ADDS     r1,r4,#1
0000e0  b2cc              UXTB     r4,r1
0000e2  4967              LDR      r1,|L4.640|
0000e4  540a              STRB     r2,[r1,r0]
;;;283    			g_LcdTxBuf[uclen++] = g_tDisDate.TEN.e[1];
0000e6  4868              LDR      r0,|L4.648|
0000e8  7bc2              LDRB     r2,[r0,#0xf]
0000ea  4620              MOV      r0,r4
0000ec  1c61              ADDS     r1,r4,#1
0000ee  b2cc              UXTB     r4,r1
0000f0  4963              LDR      r1,|L4.640|
0000f2  540a              STRB     r2,[r1,r0]
;;;284    			g_LcdTxBuf[uclen++] = g_tDisDate.TEN.e[0];
0000f4  4864              LDR      r0,|L4.648|
0000f6  7b82              LDRB     r2,[r0,#0xe]  ; g_tDisDate
0000f8  4620              MOV      r0,r4
0000fa  1c61              ADDS     r1,r4,#1
0000fc  b2cc              UXTB     r4,r1
0000fe  4960              LDR      r1,|L4.640|
000100  540a              STRB     r2,[r1,r0]
;;;285    
;;;286    			break;	
000102  e0b3              B        |L4.620|
;;;287    	    
;;;288    		case CHT:
;;;289    			g_LcdTxBuf[uclen++] = add_buf[3][0];     
000104  485f              LDR      r0,|L4.644|
000106  7982              LDRB     r2,[r0,#6]  ; add_buf
000108  4620              MOV      r0,r4
00010a  1c61              ADDS     r1,r4,#1
00010c  b2cc              UXTB     r4,r1
00010e  495c              LDR      r1,|L4.640|
000110  540a              STRB     r2,[r1,r0]
;;;290    			g_LcdTxBuf[uclen++] = add_buf[3][1];
000112  485c              LDR      r0,|L4.644|
000114  79c2              LDRB     r2,[r0,#7]
000116  4620              MOV      r0,r4
000118  1c61              ADDS     r1,r4,#1
00011a  b2cc              UXTB     r4,r1
00011c  4958              LDR      r1,|L4.640|
00011e  540a              STRB     r2,[r1,r0]
;;;291    			g_LcdTxBuf[uclen++] = g_tDisDate.CHT.e[1];
000120  4859              LDR      r0,|L4.648|
000122  7c42              LDRB     r2,[r0,#0x11]
000124  4620              MOV      r0,r4
000126  e000              B        |L4.298|
                  |L4.296|
000128  e09f              B        |L4.618|
                  |L4.298|
00012a  1c61              ADDS     r1,r4,#1
00012c  b2cc              UXTB     r4,r1
00012e  4954              LDR      r1,|L4.640|
000130  540a              STRB     r2,[r1,r0]
;;;292    			g_LcdTxBuf[uclen++] = g_tDisDate.CHT.e[0];
000132  4855              LDR      r0,|L4.648|
000134  7c02              LDRB     r2,[r0,#0x10]  ; g_tDisDate
000136  4620              MOV      r0,r4
000138  1c61              ADDS     r1,r4,#1
00013a  b2cc              UXTB     r4,r1
00013c  4950              LDR      r1,|L4.640|
00013e  540a              STRB     r2,[r1,r0]
;;;293    		
;;;294    			break;	
000140  e094              B        |L4.620|
;;;295    	    
;;;296    		case CHV:
;;;297    			g_LcdTxBuf[uclen++] = add_buf[4][0];      
000142  4850              LDR      r0,|L4.644|
000144  7a02              LDRB     r2,[r0,#8]  ; add_buf
000146  4620              MOV      r0,r4
000148  1c61              ADDS     r1,r4,#1
00014a  b2cc              UXTB     r4,r1
00014c  494c              LDR      r1,|L4.640|
00014e  540a              STRB     r2,[r1,r0]
;;;298    			g_LcdTxBuf[uclen++] = add_buf[4][1];
000150  484c              LDR      r0,|L4.644|
000152  7a42              LDRB     r2,[r0,#9]
000154  4620              MOV      r0,r4
000156  1c61              ADDS     r1,r4,#1
000158  b2cc              UXTB     r4,r1
00015a  4949              LDR      r1,|L4.640|
00015c  540a              STRB     r2,[r1,r0]
;;;299    			g_LcdTxBuf[uclen++] = g_tDisDate.CHV.e[1];
00015e  484a              LDR      r0,|L4.648|
000160  7d42              LDRB     r2,[r0,#0x15]
000162  4620              MOV      r0,r4
000164  1c61              ADDS     r1,r4,#1
000166  b2cc              UXTB     r4,r1
000168  4945              LDR      r1,|L4.640|
00016a  540a              STRB     r2,[r1,r0]
;;;300    			g_LcdTxBuf[uclen++] = g_tDisDate.CHV.e[0];
00016c  4846              LDR      r0,|L4.648|
00016e  7d02              LDRB     r2,[r0,#0x14]  ; g_tDisDate
000170  4620              MOV      r0,r4
000172  1c61              ADDS     r1,r4,#1
000174  b2cc              UXTB     r4,r1
000176  4942              LDR      r1,|L4.640|
000178  540a              STRB     r2,[r1,r0]
;;;301    		
;;;302    			break;	
00017a  e077              B        |L4.620|
;;;303    	    /* Modem状态 */
;;;304    		case MODEM:
;;;305    			g_LcdTxBuf[uclen++] = add_buf[5][0];      
00017c  4841              LDR      r0,|L4.644|
00017e  7a82              LDRB     r2,[r0,#0xa]  ; add_buf
000180  4620              MOV      r0,r4
000182  1c61              ADDS     r1,r4,#1
000184  b2cc              UXTB     r4,r1
000186  493e              LDR      r1,|L4.640|
000188  540a              STRB     r2,[r1,r0]
;;;306    			g_LcdTxBuf[uclen++] = add_buf[5][1];
00018a  483e              LDR      r0,|L4.644|
00018c  7ac2              LDRB     r2,[r0,#0xb]
00018e  4620              MOV      r0,r4
000190  1c61              ADDS     r1,r4,#1
000192  b2cc              UXTB     r4,r1
000194  493a              LDR      r1,|L4.640|
000196  540a              STRB     r2,[r1,r0]
;;;307    			g_LcdTxBuf[uclen++] = g_tDisDate.MODEM.e[1];
000198  483b              LDR      r0,|L4.648|
00019a  f8902021          LDRB     r2,[r0,#0x21]
00019e  4620              MOV      r0,r4
0001a0  1c61              ADDS     r1,r4,#1
0001a2  b2cc              UXTB     r4,r1
0001a4  4936              LDR      r1,|L4.640|
0001a6  540a              STRB     r2,[r1,r0]
;;;308    			g_LcdTxBuf[uclen++] = g_tDisDate.MODEM.e[0]; 
0001a8  4837              LDR      r0,|L4.648|
0001aa  f8902020          LDRB     r2,[r0,#0x20]  ; g_tDisDate
0001ae  4620              MOV      r0,r4
0001b0  1c61              ADDS     r1,r4,#1
0001b2  b2cc              UXTB     r4,r1
0001b4  4932              LDR      r1,|L4.640|
0001b6  540a              STRB     r2,[r1,r0]
;;;309    	
;;;310    		    break;
0001b8  e058              B        |L4.620|
;;;311    		/* 上行速度 */
;;;312    		case UPRATE:
;;;313    			g_LcdTxBuf[uclen++] = add_buf[6][0];      
0001ba  4832              LDR      r0,|L4.644|
0001bc  7b02              LDRB     r2,[r0,#0xc]  ; add_buf
0001be  4620              MOV      r0,r4
0001c0  1c61              ADDS     r1,r4,#1
0001c2  b2cc              UXTB     r4,r1
0001c4  492e              LDR      r1,|L4.640|
0001c6  540a              STRB     r2,[r1,r0]
;;;314    			g_LcdTxBuf[uclen++] = add_buf[6][1];
0001c8  482e              LDR      r0,|L4.644|
0001ca  7b42              LDRB     r2,[r0,#0xd]
0001cc  4620              MOV      r0,r4
0001ce  1c61              ADDS     r1,r4,#1
0001d0  b2cc              UXTB     r4,r1
0001d2  492b              LDR      r1,|L4.640|
0001d4  540a              STRB     r2,[r1,r0]
;;;315    			g_LcdTxBuf[uclen++] = g_tDisDate.UPRATE.e[1];
0001d6  482c              LDR      r0,|L4.648|
0001d8  7dc2              LDRB     r2,[r0,#0x17]
0001da  4620              MOV      r0,r4
0001dc  1c61              ADDS     r1,r4,#1
0001de  b2cc              UXTB     r4,r1
0001e0  4927              LDR      r1,|L4.640|
0001e2  540a              STRB     r2,[r1,r0]
;;;316    			g_LcdTxBuf[uclen++] = g_tDisDate.UPRATE.e[0];
0001e4  4828              LDR      r0,|L4.648|
0001e6  7d82              LDRB     r2,[r0,#0x16]  ; g_tDisDate
0001e8  4620              MOV      r0,r4
0001ea  1c61              ADDS     r1,r4,#1
0001ec  b2cc              UXTB     r4,r1
0001ee  4924              LDR      r1,|L4.640|
0001f0  540a              STRB     r2,[r1,r0]
;;;317    		
;;;318    			break;	
0001f2  e03b              B        |L4.620|
;;;319    	   /* 下行速度 */
;;;320    		case DOWNRATE:
;;;321    			g_LcdTxBuf[uclen++] = add_buf[7][0];      
0001f4  4823              LDR      r0,|L4.644|
0001f6  7b82              LDRB     r2,[r0,#0xe]  ; add_buf
0001f8  4620              MOV      r0,r4
0001fa  1c61              ADDS     r1,r4,#1
0001fc  b2cc              UXTB     r4,r1
0001fe  4920              LDR      r1,|L4.640|
000200  540a              STRB     r2,[r1,r0]
;;;322    			g_LcdTxBuf[uclen++] = add_buf[7][1];
000202  4820              LDR      r0,|L4.644|
000204  7bc2              LDRB     r2,[r0,#0xf]
000206  4620              MOV      r0,r4
000208  1c61              ADDS     r1,r4,#1
00020a  b2cc              UXTB     r4,r1
00020c  491c              LDR      r1,|L4.640|
00020e  540a              STRB     r2,[r1,r0]
;;;323    			g_LcdTxBuf[uclen++] = g_tDisDate.DOWNRATE.e[1];
000210  481d              LDR      r0,|L4.648|
000212  7e42              LDRB     r2,[r0,#0x19]
000214  4620              MOV      r0,r4
000216  1c61              ADDS     r1,r4,#1
000218  b2cc              UXTB     r4,r1
00021a  4919              LDR      r1,|L4.640|
00021c  540a              STRB     r2,[r1,r0]
;;;324    			g_LcdTxBuf[uclen++] = g_tDisDate.DOWNRATE.e[0];
00021e  481a              LDR      r0,|L4.648|
000220  7e02              LDRB     r2,[r0,#0x18]  ; g_tDisDate
000222  4620              MOV      r0,r4
000224  1c61              ADDS     r1,r4,#1
000226  b2cc              UXTB     r4,r1
000228  4915              LDR      r1,|L4.640|
00022a  e000              B        |L4.558|
00022c  e001              B        |L4.562|
                  |L4.558|
00022e  540a              STRB     r2,[r1,r0]
;;;325    	
;;;326    			break;	
000230  e01c              B        |L4.620|
                  |L4.562|
;;;327    		/* 箭头向上/向下*/
;;;328    		case ROW:
;;;329    			g_LcdTxBuf[uclen++] = add_buf[8][0];      
000232  4814              LDR      r0,|L4.644|
000234  7c02              LDRB     r2,[r0,#0x10]  ; add_buf
000236  4620              MOV      r0,r4
000238  1c61              ADDS     r1,r4,#1
00023a  b2cc              UXTB     r4,r1
00023c  4910              LDR      r1,|L4.640|
00023e  540a              STRB     r2,[r1,r0]
;;;330    			g_LcdTxBuf[uclen++] = add_buf[8][1];
000240  4810              LDR      r0,|L4.644|
000242  7c42              LDRB     r2,[r0,#0x11]
000244  4620              MOV      r0,r4
000246  1c61              ADDS     r1,r4,#1
000248  b2cc              UXTB     r4,r1
00024a  490d              LDR      r1,|L4.640|
00024c  540a              STRB     r2,[r1,r0]
;;;331    			g_LcdTxBuf[uclen++] = 0x00;
00024e  2200              MOVS     r2,#0
000250  4620              MOV      r0,r4
000252  1c61              ADDS     r1,r4,#1
000254  b2cc              UXTB     r4,r1
000256  490a              LDR      r1,|L4.640|
000258  540a              STRB     r2,[r1,r0]
;;;332    			g_LcdTxBuf[uclen++] = row_buf;   //00隐藏01向上02向下
00025a  480c              LDR      r0,|L4.652|
00025c  7802              LDRB     r2,[r0,#0]  ; row_buf
00025e  4620              MOV      r0,r4
000260  1c61              ADDS     r1,r4,#1
000262  b2cc              UXTB     r4,r1
000264  4906              LDR      r1,|L4.640|
000266  540a              STRB     r2,[r1,r0]
;;;333    			break;	
000268  e000              B        |L4.620|
                  |L4.618|
;;;334    		
;;;335    		 default:  
;;;336    			      break;
00026a  bf00              NOP      
                  |L4.620|
00026c  bf00              NOP                            ;270
;;;337    	
;;;338    	}
;;;339    	     g_LcdTxBuf[2] = uclen - 3;                 //数据长度=写指令+地址+数据
00026e  1ee0              SUBS     r0,r4,#3
000270  4903              LDR      r1,|L4.640|
000272  7088              STRB     r0,[r1,#2]
;;;340    	     comSendBuf(COM5,g_LcdTxBuf,uclen);
000274  4622              MOV      r2,r4
000276  2004              MOVS     r0,#4
000278  f7fffffe          BL       comSendBuf
;;;341    
;;;342    }
00027c  bd70              POP      {r4-r6,pc}
;;;343    
                          ENDP

00027e  0000              DCW      0x0000
                  |L4.640|
                          DCD      g_LcdTxBuf
                  |L4.644|
                          DCD      add_buf
                  |L4.648|
                          DCD      g_tDisDate
                  |L4.652|
                          DCD      row_buf

                          AREA ||i.GetTimeStamp||, CODE, READONLY, ALIGN=2

                  GetTimeStamp PROC
;;;351    */
;;;352    static uint32_t GetTimeStamp(void)
000000  4907              LDR      r1,|L5.32|
;;;353    {
;;;354    	uint32_t temp;	
;;;355    	temp = ((uint32_t)g_ucTempAndStress[3] << 24) | ((uint32_t)g_ucTempAndStress[4] << 16)|((uint32_t)g_ucTempAndStress[5] << 8)|((uint32_t)g_ucTempAndStress[6]);	
000002  78c9              LDRB     r1,[r1,#3]  ; g_ucTempAndStress
000004  0609              LSLS     r1,r1,#24
000006  4a06              LDR      r2,|L5.32|
000008  7912              LDRB     r2,[r2,#4]  ; g_ucTempAndStress
00000a  ea414102          ORR      r1,r1,r2,LSL #16
00000e  4a04              LDR      r2,|L5.32|
000010  7952              LDRB     r2,[r2,#5]  ; g_ucTempAndStress
000012  ea412102          ORR      r1,r1,r2,LSL #8
000016  4a02              LDR      r2,|L5.32|
000018  7992              LDRB     r2,[r2,#6]  ; g_ucTempAndStress
00001a  ea410002          ORR      r0,r1,r2
;;;356    	return temp;
;;;357    }
00001e  4770              BX       lr
;;;358    
                          ENDP

                  |L5.32|
                          DCD      g_ucTempAndStress

                          AREA ||i.Is_Leap_Year||, CODE, READONLY, ALIGN=1

                  Is_Leap_Year PROC
;;;366    */
;;;367    static uint8_t Is_Leap_Year(uint16_t _year)
000000  4601              MOV      r1,r0
;;;368    {                     
;;;369    	if (_year % 4 == 0) /* 必须能被4整除 */
000002  17ca              ASRS     r2,r1,#31
000004  eb017292          ADD      r2,r1,r2,LSR #30
000008  1092              ASRS     r2,r2,#2
00000a  eba10282          SUB      r2,r1,r2,LSL #2
00000e  b992              CBNZ     r2,|L6.54|
;;;370    	{ 
;;;371    		if (_year % 100 == 0) 
000010  2064              MOVS     r0,#0x64
000012  fb91f2f0          SDIV     r2,r1,r0
000016  fb001012          MLS      r0,r0,r2,r1
00001a  b950              CBNZ     r0,|L6.50|
;;;372    		{ 
;;;373    			if (_year % 400 == 0)
00001c  f44f70c8          MOV      r0,#0x190
000020  fb91f2f0          SDIV     r2,r1,r0
000024  fb001012          MLS      r0,r0,r2,r1
000028  b908              CBNZ     r0,|L6.46|
;;;374    			{
;;;375    				return 1;	/* 如果以00结尾,还要能被400整除 */
00002a  2001              MOVS     r0,#1
                  |L6.44|
;;;376    			}
;;;377    			else 
;;;378    			{
;;;379    				return 0;   
;;;380    			}
;;;381    
;;;382    		}
;;;383    		else 
;;;384    		{
;;;385    			return 1;   
;;;386    		}
;;;387    	}
;;;388    	else 
;;;389    	{
;;;390    		return 0; 
;;;391    	}
;;;392    }  
00002c  4770              BX       lr
                  |L6.46|
00002e  2000              MOVS     r0,#0                 ;379
000030  e7fc              B        |L6.44|
                  |L6.50|
000032  2001              MOVS     r0,#1                 ;385
000034  e7fa              B        |L6.44|
                  |L6.54|
000036  2000              MOVS     r0,#0                 ;390
000038  e7f8              B        |L6.44|
;;;393    
                          ENDP


                          AREA ||i.ReadSysClock||, CODE, READONLY, ALIGN=2

                  ReadSysClock PROC
;;;401    */
;;;402    void ReadSysClock(SYS_CLOCK_T *_clock)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;403    {
000004  4606              MOV      r6,r0
;;;404    	static uint16_t daycnt = 0;
;;;405    	uint32_t uiTimeCount = 0; 
000006  2700              MOVS     r7,#0
;;;406    	uint32_t temp = 0;
000008  2400              MOVS     r4,#0
;;;407    	uint16_t temp1 = 0;
00000a  2500              MOVS     r5,#0
;;;408    
;;;409    	uiTimeCount = GetTimeStamp();     
00000c  f7fffffe          BL       GetTimeStamp
000010  4607              MOV      r7,r0
;;;410    
;;;411    	temp = uiTimeCount / 86400;   /* 得到天数 */
000012  4820              LDR      r0,|L7.148|
000014  fbb7f4f0          UDIV     r4,r7,r0
;;;412    
;;;413    	if (daycnt != temp)	/* 超过一天了 */
000018  481f              LDR      r0,|L7.152|
00001a  8800              LDRH     r0,[r0,#0]  ; daycnt
00001c  42a0              CMP      r0,r4
00001e  d037              BEQ      |L7.144|
;;;414    	{       
;;;415    		daycnt = temp;
000020  491d              LDR      r1,|L7.152|
000022  800c              STRH     r4,[r1,#0]
;;;416    		temp1 = 1970;  /* 从1970年开始 */
000024  f24075b2          MOV      r5,#0x7b2
;;;417    
;;;418    		while (temp >= 365)
000028  e00e              B        |L7.72|
                  |L7.42|
;;;419    		{                          
;;;420    			if (Is_Leap_Year(temp1))	/* 是闰年 */
00002a  4628              MOV      r0,r5
00002c  f7fffffe          BL       Is_Leap_Year
000030  b130              CBZ      r0,|L7.64|
;;;421    			{
;;;422    				if (temp >= 366)
000032  f5b47fb7          CMP      r4,#0x16e
000036  d302              BCC      |L7.62|
;;;423    				{
;;;424    					temp -= 366;		/* 闰年的秒钟数 */
000038  f5a474b7          SUB      r4,r4,#0x16e
00003c  e002              B        |L7.68|
                  |L7.62|
;;;425    				}
;;;426    				else
;;;427    				{
;;;428    					//temp1++;		/* armfly: 这里闰年处理错误，不能加1 */
;;;429    					break;
00003e  e006              B        |L7.78|
                  |L7.64|
;;;430    				}  
;;;431                }
;;;432    			else 
;;;433    			{
;;;434    				temp -= 365;       /* 平年 */
000040  f2a4146d          SUB      r4,r4,#0x16d
                  |L7.68|
;;;435    			}
;;;436    			temp1++;  
000044  1c68              ADDS     r0,r5,#1
000046  b285              UXTH     r5,r0
                  |L7.72|
000048  f5b47fb6          CMP      r4,#0x16c             ;418
00004c  d8ed              BHI      |L7.42|
                  |L7.78|
00004e  bf00              NOP                            ;429
;;;437    		}   
;;;438    		_clock->Year = temp1;	/* 得到年份 */
000050  8035              STRH     r5,[r6,#0]
;;;439    		
;;;440    		temp1 = 0;
000052  2500              MOVS     r5,#0
;;;441    		while (temp >= 28)	/* 超过了一个月 */
000054  e015              B        |L7.130|
                  |L7.86|
;;;442    		{
;;;443    			if(Is_Leap_Year(_clock->Year) && temp1 == 1)	/* 当年是不是闰年/2月份 */
000056  8830              LDRH     r0,[r6,#0]
000058  f7fffffe          BL       Is_Leap_Year
00005c  b130              CBZ      r0,|L7.108|
00005e  2d01              CMP      r5,#1
000060  d104              BNE      |L7.108|
;;;444    			{
;;;445    				if (temp >= 29)
000062  2c1d              CMP      r4,#0x1d
000064  d301              BCC      |L7.106|
;;;446    				{
;;;447    					temp -= 29;	/* 闰年的秒钟数 */
000066  3c1d              SUBS     r4,r4,#0x1d
000068  e009              B        |L7.126|
                  |L7.106|
;;;448    				}
;;;449    				else
;;;450    				{
;;;451    					break; 
00006a  e00c              B        |L7.134|
                  |L7.108|
;;;452    				}
;;;453                }
;;;454                else 
;;;455    			{
;;;456    				if (temp >= mon_table[temp1])
00006c  480b              LDR      r0,|L7.156|
00006e  5d40              LDRB     r0,[r0,r5]
000070  42a0              CMP      r0,r4
000072  d803              BHI      |L7.124|
;;;457    				{
;;;458    					temp -= mon_table[temp1];	/* 平年 */
000074  4809              LDR      r0,|L7.156|
000076  5d40              LDRB     r0,[r0,r5]
000078  1a24              SUBS     r4,r4,r0
00007a  e000              B        |L7.126|
                  |L7.124|
;;;459    				}
;;;460    				else 
;;;461    				{
;;;462    					break;
00007c  e003              B        |L7.134|
                  |L7.126|
;;;463    				}
;;;464    			}
;;;465    			temp1++;  
00007e  1c68              ADDS     r0,r5,#1
000080  b285              UXTH     r5,r0
                  |L7.130|
000082  2c1c              CMP      r4,#0x1c              ;441
000084  d2e7              BCS      |L7.86|
                  |L7.134|
000086  bf00              NOP                            ;451
;;;466    		}
;;;467    		_clock->Mon = temp1 + 1;	/* 得到月份 */
000088  1c68              ADDS     r0,r5,#1
00008a  70b0              STRB     r0,[r6,#2]
;;;468    		_clock->Day = temp + 1;  	/* 得到日期 */
00008c  1c60              ADDS     r0,r4,#1
00008e  70f0              STRB     r0,[r6,#3]
                  |L7.144|
;;;469    	}
;;;470    }
000090  e8bd81f0          POP      {r4-r8,pc}
;;;471    
                          ENDP

                  |L7.148|
                          DCD      0x00015180
                  |L7.152|
                          DCD      daycnt
                  |L7.156|
                          DCD      mon_table

                          AREA ||i.SaveTempAndStress||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                          REQUIRE _printf_str
                  SaveTempAndStress PROC
;;;479    */
;;;480    uint8_t SaveTempAndStress(void)
000000  b570              PUSH     {r4-r6,lr}
;;;481    {
000002  f5ad5d33          SUB      sp,sp,#0x2cc0
;;;482    /* 本函数使用的局部变量占用较多，请修改启动文件，保证堆栈空间够用 */
;;;483    	FRESULT result;
;;;484    	FATFS fs;
;;;485    	FIL file;
;;;486    	DIR DirInf;
;;;487    	uint32_t bw;
;;;488    //	uint32_t i;
;;;489    	char buf[100] = {0};
000006  2164              MOVS     r1,#0x64
000008  f60d30d8          ADD      r0,sp,#0xbd8
00000c  f7fffffe          BL       __aeabi_memclr4
;;;490    	char str[3000] = {0};
000010  f64031b8          MOV      r1,#0xbb8
000014  a808              ADD      r0,sp,#0x20
000016  f7fffffe          BL       __aeabi_memclr4
;;;491    //	for (i = 0; i < sizeof(g_TestBuf_SD); i++)
;;;492    //	{
;;;493    //		g_TestBuf_SD[i] = (i/512) + '0';
;;;494    //	}
;;;495    
;;;496     	/* 挂载文件系统 */
;;;497    	result = f_mount(&fs, FS_VOLUME_SD, 0);			/* 挂载逻辑驱动器 */
00001a  2200              MOVS     r2,#0
00001c  a13c              ADR      r1,|L8.272|
00001e  f6414090          MOV      r0,#0x1c90
000022  4468              ADD      r0,r0,sp
000024  f7fffffe          BL       f_mount
000028  4604              MOV      r4,r0
;;;498    	if (result != FR_OK)
00002a  b12c              CBZ      r4,|L8.56|
;;;499    	{
;;;500    		printf("挂载文件系统失败 (%s)\r\n", FR_Table[result]);
00002c  4839              LDR      r0,|L8.276|
00002e  f8501024          LDR      r1,[r0,r4,LSL #2]
000032  a039              ADR      r0,|L8.280|
000034  f7fffffe          BL       __2printf
                  |L8.56|
;;;501    	}
;;;502    
;;;503    	/* 打开根文件夹 */
;;;504    	result = f_opendir(&DirInf, "0:/Temp"); /* 如果不带参数，则从当前目录开始 */
000038  a13d              ADR      r1,|L8.304|
00003a  f50d6044          ADD      r0,sp,#0xc40
00003e  f7fffffe          BL       f_opendir
000042  4604              MOV      r4,r0
;;;505    	if (result != FR_OK)
000044  b14c              CBZ      r4,|L8.90|
;;;506    	{
;;;507    		printf("打开根目录失败 (%s)\r\n", FR_Table[result]);
000046  4833              LDR      r0,|L8.276|
000048  f8501024          LDR      r1,[r0,r4,LSL #2]
00004c  a03a              ADR      r0,|L8.312|
00004e  f7fffffe          BL       __2printf
;;;508    		return 1;
000052  2001              MOVS     r0,#1
                  |L8.84|
;;;509    	}
;;;510    
;;;511    //	printf("Year=%d,Mon=%d,Day=%d",s_tDate.Year,s_tDate.Mon,s_tDate.Day);
;;;512    	sprintf((char*)buf,"0:/Temp/%d-%d-%d.txt",s_tDate.Year,s_tDate.Mon,s_tDate.Day);
;;;513    	sprintf((char*)str, "0x%02x,", g_ucTempAndStress[0]);
;;;514    	for(uint16_t i = 1; i < sizeof(g_ucTempAndStress); i++)  
;;;515    	{
;;;516    		sprintf((char*)&str[strlen((char*)str)],"0x%02x,",g_ucTempAndStress[i] );  
;;;517        }
;;;518    	printf("len=%d\r\n",strlen((char*)str));
;;;519    	/* 打开文件 */
;;;520    	result = f_open(&file, buf, FA_CREATE_ALWAYS | FA_WRITE);
;;;521    
;;;522    	/* 写一串数据 */
;;;523    	result = f_write(&file, str, strlen((char*)str), &bw);
;;;524    //	result = f_write(&file, g_TestBuf_SD, sizeof(g_TestBuf_SD), &bw);
;;;525    	if (result == FR_OK)
;;;526    	{
;;;527    		printf("TempAndStress.txt 文件写入成功,文件大小为(%dB)\r\n",strlen((char*)str));
;;;528    	}
;;;529    	else
;;;530    	{
;;;531    		printf("TempAndStress.txt 文件写入失败(%s)\r\n",FR_Table[result]);
;;;532    	}
;;;533    
;;;534    	/* 关闭文件*/
;;;535    	f_close(&file);
;;;536    
;;;537    	/* 卸载文件系统 */
;;;538    	f_mount(NULL, FS_VOLUME_SD, 0);
;;;539    }
000054  f50d5d33          ADD      sp,sp,#0x2cc0
000058  bd70              POP      {r4-r6,pc}
                  |L8.90|
00005a  483d              LDR      r0,|L8.336|
00005c  78c0              LDRB     r0,[r0,#3]            ;512  ; s_tDate
00005e  9000              STR      r0,[sp,#0]            ;512
000060  483b              LDR      r0,|L8.336|
000062  7883              LDRB     r3,[r0,#2]            ;512  ; s_tDate
000064  8802              LDRH     r2,[r0,#0]            ;512  ; s_tDate
000066  a13b              ADR      r1,|L8.340|
000068  f60d30d8          ADD      r0,sp,#0xbd8          ;512
00006c  f7fffffe          BL       __2sprintf
000070  483e              LDR      r0,|L8.364|
000072  7802              LDRB     r2,[r0,#0]            ;513  ; g_ucTempAndStress
000074  a13e              ADR      r1,|L8.368|
000076  a808              ADD      r0,sp,#0x20           ;513
000078  f7fffffe          BL       __2sprintf
00007c  2501              MOVS     r5,#1                 ;514
00007e  e00c              B        |L8.154|
                  |L8.128|
000080  a808              ADD      r0,sp,#0x20           ;516
000082  f7fffffe          BL       strlen
000086  a908              ADD      r1,sp,#0x20           ;516
000088  1846              ADDS     r6,r0,r1              ;516
00008a  4838              LDR      r0,|L8.364|
00008c  5d42              LDRB     r2,[r0,r5]            ;516
00008e  a138              ADR      r1,|L8.368|
000090  4630              MOV      r0,r6                 ;516
000092  f7fffffe          BL       __2sprintf
000096  1c68              ADDS     r0,r5,#1              ;514
000098  b285              UXTH     r5,r0                 ;514
                  |L8.154|
00009a  f5b57fd5          CMP      r5,#0x1aa             ;514
00009e  d3ef              BCC      |L8.128|
0000a0  a808              ADD      r0,sp,#0x20           ;518
0000a2  f7fffffe          BL       strlen
0000a6  4605              MOV      r5,r0                 ;518
0000a8  4629              MOV      r1,r5                 ;518
0000aa  a033              ADR      r0,|L8.376|
0000ac  f7fffffe          BL       __2printf
0000b0  220a              MOVS     r2,#0xa               ;520
0000b2  f60d31d8          ADD      r1,sp,#0xbd8          ;520
0000b6  f60d4068          ADD      r0,sp,#0xc68          ;520
0000ba  f7fffffe          BL       f_open
0000be  4604              MOV      r4,r0                 ;520
0000c0  a808              ADD      r0,sp,#0x20           ;523
0000c2  f7fffffe          BL       strlen
0000c6  4605              MOV      r5,r0                 ;523
0000c8  f60d433c          ADD      r3,sp,#0xc3c          ;523
0000cc  462a              MOV      r2,r5                 ;523
0000ce  a908              ADD      r1,sp,#0x20           ;523
0000d0  f60d4068          ADD      r0,sp,#0xc68          ;523
0000d4  f7fffffe          BL       f_write
0000d8  4604              MOV      r4,r0                 ;523
0000da  b944              CBNZ     r4,|L8.238|
0000dc  a808              ADD      r0,sp,#0x20           ;527
0000de  f7fffffe          BL       strlen
0000e2  4605              MOV      r5,r0                 ;527
0000e4  4629              MOV      r1,r5                 ;527
0000e6  a027              ADR      r0,|L8.388|
0000e8  f7fffffe          BL       __2printf
0000ec  e005              B        |L8.250|
                  |L8.238|
0000ee  4809              LDR      r0,|L8.276|
0000f0  f8501024          LDR      r1,[r0,r4,LSL #2]     ;531
0000f4  a030              ADR      r0,|L8.440|
0000f6  f7fffffe          BL       __2printf
                  |L8.250|
0000fa  f60d4068          ADD      r0,sp,#0xc68          ;535
0000fe  f7fffffe          BL       f_close
000102  2200              MOVS     r2,#0                 ;538
000104  a102              ADR      r1,|L8.272|
000106  4610              MOV      r0,r2                 ;538
000108  f7fffffe          BL       f_mount
00010c  bf00              NOP      
00010e  e7a1              B        |L8.84|
;;;540    
                          ENDP

                  |L8.272|
000110  303a00            DCB      "0:",0
000113  00                DCB      0
                  |L8.276|
                          DCD      FR_Table
                  |L8.280|
000118  b9d2d4d8          DCB      185,210,212,216,206,196,188,254,207,181,205,179,202,167,176
00011c  cec4bcfe
000120  cfb5cdb3
000124  caa7b0  
000127  dc202825          DCB      220," (%s)\r\n",0
00012b  73290d0a
00012f  00      
                  |L8.304|
000130  303a2f54          DCB      "0:/Temp",0
000134  656d7000
                  |L8.312|
000138  b4f2bfaa          DCB      180,242,191,170,184,249,196,191,194,188,202,167,176,220," "
00013c  b8f9c4bf
000140  c2bccaa7
000144  b0dc20  
000147  28257329          DCB      "(%s)\r\n",0
00014b  0d0a00  
00014e  00                DCB      0
00014f  00                DCB      0
                  |L8.336|
                          DCD      s_tDate
                  |L8.340|
000154  303a2f54          DCB      "0:/Temp/%d-%d-%d.txt",0
000158  656d702f
00015c  25642d25
000160  642d2564
000164  2e747874
000168  00      
000169  00                DCB      0
00016a  00                DCB      0
00016b  00                DCB      0
                  |L8.364|
                          DCD      g_ucTempAndStress
                  |L8.368|
000170  30782530          DCB      "0x%02x,",0
000174  32782c00
                  |L8.376|
000178  6c656e3d          DCB      "len=%d\r\n",0
00017c  25640d0a
000180  00      
000181  00                DCB      0
000182  00                DCB      0
000183  00                DCB      0
                  |L8.388|
000184  54656d70          DCB      "TempAndStress.txt ",206,196,188,254,208,180,200,235,179
000188  416e6453
00018c  74726573
000190  732e7478
000194  7420cec4
000198  bcfed0b4
00019c  c8ebb3  
00019f  c9b9a62c          DCB      201,185,166,",",206,196,188,254,180,243,208,161,206,170,"("
0001a3  cec4bcfe
0001a7  b4f3d0a1
0001ab  ceaa28  
0001ae  25644229          DCB      "%dB)\r\n",0
0001b2  0d0a00  
0001b5  00                DCB      0
0001b6  00                DCB      0
0001b7  00                DCB      0
                  |L8.440|
0001b8  54656d70          DCB      "TempAndStress.txt ",206,196,188,254,208,180,200,235,202
0001bc  416e6453
0001c0  74726573
0001c4  732e7478
0001c8  7420cec4
0001cc  bcfed0b4
0001d0  c8ebca  
0001d3  a7b0dc28          DCB      167,176,220,"(%s)\r\n",0
0001d7  2573290d
0001db  0a00    
0001dd  00                DCB      0
0001de  00                DCB      0
0001df  00                DCB      0

                          AREA ||i.SendConfigMsg||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  SendConfigMsg PROC
;;;614    */
;;;615    uint8_t	SendConfigMsg(void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;616    {
000004  f5ad5d52          SUB      sp,sp,#0x3480
;;;617        /* 本函数使用的局部变量占用较多，请修改启动文件，保证堆栈空间够用 */
;;;618    	FRESULT result;
;;;619    	FATFS fs;
;;;620    	FIL file;
;;;621    	DIR DirInf;
;;;622    	uint32_t bw;
;;;623    	char buf[SD_BUF_SIZE];
;;;624    	char str[1000]={0};
000008  f44f717a          MOV      r1,#0x3e8
00000c  a805              ADD      r0,sp,#0x14
00000e  f7fffffe          BL       __aeabi_memclr4
;;;625    	char *q;   //指针指向buf
;;;626    	uint8_t temp=0;
000012  2700              MOVS     r7,#0
;;;627    	uint8_t ucData;
;;;628     	/* 挂载文件系统 */
;;;629    	result = f_mount(&fs, FS_VOLUME_SD, 0);			/* Mount a logical drive */
000014  2200              MOVS     r2,#0
000016  a136              ADR      r1,|L9.240|
000018  f2424050          MOV      r0,#0x2450
00001c  4468              ADD      r0,r0,sp
00001e  f7fffffe          BL       f_mount
000022  4604              MOV      r4,r0
;;;630    	if (result != FR_OK)
000024  b12c              CBZ      r4,|L9.50|
;;;631    	{
;;;632    		printf("挂载文件系统失败(%s)\r\n", FR_Table[result]);
000026  4833              LDR      r0,|L9.244|
000028  f8501024          LDR      r1,[r0,r4,LSL #2]
00002c  a032              ADR      r0,|L9.248|
00002e  f7fffffe          BL       __2printf
                  |L9.50|
;;;633    	}
;;;634    
;;;635    	/* 打开根文件夹 */
;;;636    	result = f_opendir(&DirInf, "0:/Conf"); /* 如果不带参数，则从当前目录开始 */
000032  a137              ADR      r1,|L9.272|
000034  f50d50a0          ADD      r0,sp,#0x1400
000038  f7fffffe          BL       f_opendir
00003c  4604              MOV      r4,r0
;;;637    	if (result != FR_OK)
00003e  b154              CBZ      r4,|L9.86|
;;;638    	{
;;;639    		printf("打开根目录失败(%s)\r\n", FR_Table[result]);
000040  482c              LDR      r0,|L9.244|
000042  f8501024          LDR      r1,[r0,r4,LSL #2]
000046  a034              ADR      r0,|L9.280|
000048  f7fffffe          BL       __2printf
;;;640    		return 1;
00004c  2001              MOVS     r0,#1
                  |L9.78|
;;;641    	}
;;;642    	/* 打开文件 */
;;;643    	result = f_open(&file, "0:/Conf/Conf.txt", FA_OPEN_EXISTING | FA_READ);
;;;644    	if (result !=  FR_OK)
;;;645    	{
;;;646    		printf("Don't Find File : Conf.txt\r\n");
;;;647    		return 1;
;;;648    	}
;;;649        
;;;650    	/* 读取文件 */
;;;651    	result = f_read(&file, &buf, sizeof(buf) - 1, &bw);    //将file的存到buf
;;;652    	if (bw > 0)
;;;653    	{
;;;654    		buf[bw] = 0;
;;;655    		printf("\r\nConf.txt 文件内容 : \r\n%s\r\n", buf);
;;;656    		q = buf;   //指向数据开头
;;;657         for(uint8_t i = 0; i<CONFIGMSG;i++)
;;;658         {
;;;659             memset(buf,0,sizeof(buf)+1); 
;;;660    		 g_TxBuf[i] = BC95_StrToHex(q,2);               //两个两个字符开始转换
;;;661          q += 2;
;;;662        
;;;663    	 }			
;;;664    		 	
;;;665    						
;;;666    	}
;;;667    	else
;;;668    	{
;;;669    		printf("\r\nConf.txt 文件内容 : \r\n");
;;;670    	}
;;;671    
;;;672    	/* 关闭文件*/
;;;673    	f_close(&file);
;;;674    
;;;675    	/* 卸载文件系统 */
;;;676    	f_mount(NULL, FS_VOLUME_SD, 0);
;;;677    }
00004e  f50d5d52          ADD      sp,sp,#0x3480
000052  e8bd81f0          POP      {r4-r8,pc}
                  |L9.86|
000056  2201              MOVS     r2,#1                 ;643
000058  a135              ADR      r1,|L9.304|
00005a  f2414028          MOV      r0,#0x1428            ;643
00005e  4468              ADD      r0,r0,sp              ;643
000060  f7fffffe          BL       f_open
000064  4604              MOV      r4,r0                 ;643
000066  b124              CBZ      r4,|L9.114|
000068  a036              ADR      r0,|L9.324|
00006a  f7fffffe          BL       __2printf
00006e  2001              MOVS     r0,#1                 ;647
000070  e7ed              B        |L9.78|
                  |L9.114|
000072  f24133fc          MOV      r3,#0x13fc            ;651
000076  446b              ADD      r3,r3,sp              ;651
000078  f64072ff          MOV      r2,#0xfff             ;651
00007c  a9ff              ADD      r1,sp,#0x3fc          ;651
00007e  f103002c          ADD      r0,r3,#0x2c           ;651
000082  f7fffffe          BL       f_read
000086  4604              MOV      r4,r0                 ;651
000088  f50d5080          ADD      r0,sp,#0x1000         ;652
00008c  f8d003fc          LDR      r0,[r0,#0x3fc]        ;652
000090  b1f0              CBZ      r0,|L9.208|
000092  2100              MOVS     r1,#0                 ;654
000094  aaff              ADD      r2,sp,#0x3fc          ;654
000096  f50d5080          ADD      r0,sp,#0x1000         ;654
00009a  f8d003fc          LDR      r0,[r0,#0x3fc]        ;654
00009e  5411              STRB     r1,[r2,r0]            ;654
0000a0  a9ff              ADD      r1,sp,#0x3fc          ;655
0000a2  a030              ADR      r0,|L9.356|
0000a4  f7fffffe          BL       __2printf
0000a8  adff              ADD      r5,sp,#0x3fc          ;656
0000aa  2600              MOVS     r6,#0                 ;657
0000ac  e00d              B        |L9.202|
                  |L9.174|
0000ae  f2410101          MOV      r1,#0x1001            ;659
0000b2  a8ff              ADD      r0,sp,#0x3fc          ;659
0000b4  f7fffffe          BL       __aeabi_memclr4
0000b8  2102              MOVS     r1,#2                 ;660
0000ba  4628              MOV      r0,r5                 ;660
0000bc  f7fffffe          BL       BC95_StrToHex
0000c0  4930              LDR      r1,|L9.388|
0000c2  5588              STRB     r0,[r1,r6]            ;660
0000c4  1cad              ADDS     r5,r5,#2              ;661
0000c6  1c70              ADDS     r0,r6,#1              ;657
0000c8  b2c6              UXTB     r6,r0                 ;657
                  |L9.202|
0000ca  2e5d              CMP      r6,#0x5d              ;657
0000cc  dbef              BLT      |L9.174|
0000ce  e002              B        |L9.214|
                  |L9.208|
0000d0  a02d              ADR      r0,|L9.392|
0000d2  f7fffffe          BL       __2printf
                  |L9.214|
0000d6  f2414028          MOV      r0,#0x1428            ;673
0000da  4468              ADD      r0,r0,sp              ;673
0000dc  f7fffffe          BL       f_close
0000e0  2200              MOVS     r2,#0                 ;676
0000e2  a103              ADR      r1,|L9.240|
0000e4  4610              MOV      r0,r2                 ;676
0000e6  f7fffffe          BL       f_mount
0000ea  bf00              NOP      
0000ec  e7af              B        |L9.78|
;;;678    
                          ENDP

0000ee  0000              DCW      0x0000
                  |L9.240|
0000f0  303a00            DCB      "0:",0
0000f3  00                DCB      0
                  |L9.244|
                          DCD      FR_Table
                  |L9.248|
0000f8  b9d2d4d8          DCB      185,210,212,216,206,196,188,254,207,181,205,179,202,167,176
0000fc  cec4bcfe
000100  cfb5cdb3
000104  caa7b0  
000107  dc282573          DCB      220,"(%s)\r\n",0
00010b  290d0a00
00010f  00                DCB      0
                  |L9.272|
000110  303a2f43          DCB      "0:/Conf",0
000114  6f6e6600
                  |L9.280|
000118  b4f2bfaa          DCB      180,242,191,170,184,249,196,191,194,188,202,167,176,220,"("
00011c  b8f9c4bf
000120  c2bccaa7
000124  b0dc28  
000127  2573290d          DCB      "%s)\r\n",0
00012b  0a00    
00012d  00                DCB      0
00012e  00                DCB      0
00012f  00                DCB      0
                  |L9.304|
000130  303a2f43          DCB      "0:/Conf/Conf.txt",0
000134  6f6e662f
000138  436f6e66
00013c  2e747874
000140  00      
000141  00                DCB      0
000142  00                DCB      0
000143  00                DCB      0
                  |L9.324|
000144  446f6e27          DCB      "Don't Find File : Conf.txt\r\n",0
000148  74204669
00014c  6e642046
000150  696c6520
000154  3a20436f
000158  6e662e74
00015c  78740d0a
000160  00      
000161  00                DCB      0
000162  00                DCB      0
000163  00                DCB      0
                  |L9.356|
000164  0d0a436f          DCB      "\r\nConf.txt ",206,196,188,254,196,218,200,221," : \r\n"
000168  6e662e74
00016c  787420ce
000170  c4bcfec4
000174  dac8dd20
000178  3a200d0a
00017c  25730d0a          DCB      "%s\r\n",0
000180  00      
000181  00                DCB      0
000182  00                DCB      0
000183  00                DCB      0
                  |L9.388|
                          DCD      g_TxBuf
                  |L9.392|
000188  0d0a436f          DCB      "\r\nConf.txt ",206,196,188,254,196,218,200,221," : \r\n"
00018c  6e662e74
000190  787420ce
000194  c4bcfec4
000198  dac8dd20
00019c  3a200d0a
0001a0  00                DCB      0
0001a1  00                DCB      0
0001a2  00                DCB      0
0001a3  00                DCB      0

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  g_ucTempAndStress
                          %        426
                  g_ucConfigMsg
                          %        93
                  g_LcdTxBuf
                          %        101
                  g_tDisDate
                          %        36
                  g_TxBuf
                          %        46

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  mon_table
000000  1f1c1f1e          DCB      0x1f,0x1c,0x1f,0x1e
000004  1f1e1f1f          DCB      0x1f,0x1e,0x1f,0x1f
000008  1e1f1e1f          DCB      0x1e,0x1f,0x1e,0x1f

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  46525f4f          DCB      "FR_OK",163,186,179,201,185,166,0
000004  4ba3bab3
000008  c9b9a600
00000c  46525f44          DCB      "FR_DISK_ERR",163,186,181,215,178,227,211,178,188,254,180
000010  49534b5f
000014  455252a3
000018  bab5d7b2
00001c  e3d3b2bc
000020  feb4    
000022  edcef300          DCB      237,206,243,0
000026  00                DCB      0
000027  00                DCB      0
000028  46525f49          DCB      "FR_INT_ERR",163,186,182,207,209,212,202,167,176,220,0
00002c  4e545f45
000030  5252a3ba
000034  b6cfd1d4
000038  caa7b0dc
00003c  00      
00003d  00                DCB      0
00003e  00                DCB      0
00003f  00                DCB      0
000040  46525f4e          DCB      "FR_NOT_READY",163,186,206,239,192,237,199,253,182,175,195
000044  4f545f52
000048  45414459
00004c  a3baceef
000050  c0edc7fd
000054  b6afc3  
000057  bbd3d0b9          DCB      187,211,208,185,164,215,247,0
00005b  a4d7f700
00005f  00                DCB      0
000060  46525f4e          DCB      "FR_NO_FILE",163,186,206,196,188,254,178,187,180,230,212
000064  4f5f4649
000068  4c45a3ba
00006c  cec4bcfe
000070  b2bbb4e6
000074  d4      
000075  da00              DCB      218,0
000077  00                DCB      0
000078  46525f4e          DCB      "FR_NO_PATH",163,186,194,183,190,182,178,187,180,230,212
00007c  4f5f5041
000080  5448a3ba
000084  c2b7beb6
000088  b2bbb4e6
00008c  d4      
00008d  da00              DCB      218,0
00008f  00                DCB      0
000090  46525f49          DCB      "FR_INVALID_NAME",163,186,206,222,208,167,206,196,188,254
000094  4e56414c
000098  49445f4e
00009c  414d45a3
0000a0  baceded0
0000a4  a7cec4bc
0000a8  fe      
0000a9  c3fb00            DCB      195,251,0
0000ac  46525f44          DCB      "FR_DENIED",163,186,211,201,211,218,189,251,214,185,183,195
0000b0  454e4945
0000b4  44a3bad3
0000b8  c9d3dabd
0000bc  fbd6b9b7
0000c0  c3      
0000c1  cecabbf2          DCB      206,202,187,242,213,223,196,191,194,188,210,209,194,250,183
0000c5  d5dfc4bf
0000c9  c2bcd2d1
0000cd  c2fab7  
0000d0  c3cecab1          DCB      195,206,202,177,187,190,220,190,248,0
0000d4  bbbedcbe
0000d8  f800    
0000da  00                DCB      0
0000db  00                DCB      0
0000dc  46525f45          DCB      "FR_EXIST",163,186,206,196,188,254,210,209,190,173,180,230
0000e0  58495354
0000e4  a3bacec4
0000e8  bcfed2d1
0000ec  beadb4e6
0000f0  d4da00            DCB      212,218,0
0000f3  00                DCB      0
0000f4  46525f49          DCB      "FR_INVALID_OBJECT",163,186,206,196,188,254,187,242,213,223
0000f8  4e56414c
0000fc  49445f4f
000100  424a4543
000104  54a3bace
000108  c4bcfebb
00010c  f2d5df  
00010f  c4bfc2bc          DCB      196,191,194,188,182,212,207,243,206,222,208,167,0
000113  b6d4cff3
000117  ceded0a7
00011b  00      
00011c  46525f57          DCB      "FR_WRITE_PROTECTED",163,186,206,239,192,237,199,253,182
000120  52495445
000124  5f50524f
000128  54454354
00012c  4544a3ba
000130  ceefc0ed
000134  c7fdb6  
000137  afb1bbd0          DCB      175,177,187,208,180,177,163,187,164,0
00013b  b4b1a3bb
00013f  a400    
000141  00                DCB      0
000142  00                DCB      0
000143  00                DCB      0
000144  46525f49          DCB      "FR_INVALID_DRIVE",163,186,194,223,188,173,199,253,182,175
000148  4e56414c
00014c  49445f44
000150  52495645
000154  a3bac2df
000158  bcadc7fd
00015c  b6af    
00015e  bac5cede          DCB      186,197,206,222,208,167,0
000162  d0a700  
000165  00                DCB      0
000166  00                DCB      0
000167  00                DCB      0
000168  46525f4e          DCB      "FR_NOT_ENABLED",163,186,190,237,214,208,206,222,185,164
00016c  4f545f45
000170  4e41424c
000174  4544a3ba
000178  beedd6d0
00017c  cedeb9a4
000180  d7f7c7f8          DCB      215,247,199,248,0
000184  00      
000185  00                DCB      0
000186  00                DCB      0
000187  00                DCB      0
000188  46525f4e          DCB      "FR_NO_FILESYSTEM",163,186,195,187,211,208,211,208,208,167
00018c  4f5f4649
000190  4c455359
000194  5354454d
000198  a3bac3bb
00019c  d3d0d3d0
0001a0  d0a7    
0001a2  b5c44641          DCB      181,196,"FAT",190,237,0
0001a6  54beed00
0001aa  00                DCB      0
0001ab  00                DCB      0
0001ac  46525f4d          DCB      "FR_MKFS_ABORTED",163,186,211,201,211,218,178,206,202,253
0001b0  4b46535f
0001b4  41424f52
0001b8  544544a3
0001bc  bad3c9d3
0001c0  dab2ceca
0001c4  fd      
0001c5  b4edcef3          DCB      180,237,206,243,"f_mkfs()",177,187,214,213,214,185,0
0001c9  665f6d6b
0001cd  66732829
0001d1  b1bbd6d5
0001d5  d6b900  
0001d8  46525f54          DCB      "FR_TIMEOUT",163,186,212,218,185,230,182,168,181,196,202
0001dc  494d454f
0001e0  5554a3ba
0001e4  d4dab9e6
0001e8  b6a8b5c4
0001ec  ca      
0001ed  b1bce4c4          DCB      177,188,228,196,218,206,222,183,168,187,241,181,195,183,195
0001f1  dacedeb7
0001f5  a8bbf1b5
0001f9  c3b7c3  
0001fc  cecabeed          DCB      206,202,190,237,181,196,208,237,191,201,0
000200  b5c4d0ed
000204  bfc900  
000207  00                DCB      0
000208  46525f4c          DCB      "FR_LOCKED",163,186,211,201,211,218,206,196,188,254,185,178
00020c  4f434b45
000210  44a3bad3
000214  c9d3dace
000218  c4bcfeb9
00021c  b2      
00021d  cfedb2df          DCB      207,237,178,223,194,212,178,217,215,247,177,187,190,220,190
000221  c2d4b2d9
000225  d7f7b1bb
000229  bedcbe  
00022c  f800              DCB      248,0
00022e  00                DCB      0
00022f  00                DCB      0
000230  46525f4e          DCB      "FR_NOT_ENOUGH_CORE",163,186,206,222,183,168,183,214,197
000234  4f545f45
000238  4e4f5547
00023c  485f434f
000240  5245a3ba
000244  cedeb7a8
000248  b7d6c5  
00024b  e4b3a4ce          DCB      228,179,164,206,196,188,254,195,251,185,164,215,247,199,248
00024f  c4bcfec3
000253  fbb9a4d7
000257  f7c7f8  
00025a  00                DCB      0
00025b  00                DCB      0
00025c  46525f54          DCB      "FR_TOO_MANY_OPEN_FILES",163,186,181,177,199,176,180,242
000260  4f4f5f4d
000264  414e595f
000268  4f50454e
00026c  5f46494c
000270  4553a3ba
000274  b5b1c7b0
000278  b4f2    
00027a  bfaab5c4          DCB      191,170,181,196,206,196,188,254,202,253,180,243,211,218,"_"
00027e  cec4bcfe
000282  cafdb4f3
000286  d3da5f  
000289  46535f53          DCB      "FS_SHARE",0
00028d  48415245
000291  00      
000292  00                DCB      0
000293  00                DCB      0
000294  46525f49          DCB      "FR_INVALID_PARAMETER",163,186,178,206,202,253,206,222,208
000298  4e56414c
00029c  49445f50
0002a0  4152414d
0002a4  45544552
0002a8  a3bab2ce
0002ac  cafdcede
0002b0  d0      
0002b1  a700              DCB      167,0

                          AREA ||.data||, DATA, ALIGN=2

                  row_buf
000000  0000              DCB      0x00,0x00
                  s_tDate
000002  0000              DCB      0x00,0x00
000004  0000              DCB      0x00,0x00
                  CmdRxState
000006  00                DCB      0x00
                  g_ucTimeOut2
000007  00                DCB      0x00
                  g_CmdRxOver
000008  00000000          DCB      0x00,0x00,0x00,0x00
                  FR_Table
                          DCD      ||.conststring||
                          DCD      ||.conststring||+0xc
                          DCD      ||.conststring||+0x28
                          DCD      ||.conststring||+0x40
                          DCD      ||.conststring||+0x60
                          DCD      ||.conststring||+0x78
                          DCD      ||.conststring||+0x90
                          DCD      ||.conststring||+0xac
                          DCD      ||.conststring||+0xdc
                          DCD      ||.conststring||+0xf4
                          DCD      ||.conststring||+0x11c
                          DCD      ||.conststring||+0x144
                          DCD      ||.conststring||+0x168
                          DCD      ||.conststring||+0x188
                          DCD      ||.conststring||+0x1ac
                          DCD      ||.conststring||+0x1d8
                          DCD      ||.conststring||+0x208
                          DCD      ||.conststring||+0x230
                          DCD      ||.conststring||+0x25c
                          DCD      ||.conststring||+0x294
                  pre_DEP
                          DCD      0x00000000
                  add_buf
000060  10001006          DCB      0x10,0x00,0x10,0x06
000064  10161024          DCB      0x10,0x16,0x10,0x24
000068  10321038          DCB      0x10,0x32,0x10,0x38
00006c  10391040          DCB      0x10,0x39,0x10,0x40
000070  1090              DCB      0x10,0x90
                  daycnt
000072  0000              DCW      0x0000

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\app\\src\\DG_DataStorage.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___16_DG_DataStorage_c_ba8a3929____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___16_DG_DataStorage_c_ba8a3929____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___16_DG_DataStorage_c_ba8a3929____REVSH|
#line 128
|__asm___16_DG_DataStorage_c_ba8a3929____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
