; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\obj\ersc_ht_250ms.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\ersc_ht_250ms.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\Libraries\CMSIS\Include -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User\app\inc -I..\..\User\FatFS\src -I..\..\User\Mass_Storage\inc -I..\..\User\LCD_Driver -I..\..\User\SYSTEM\sys -I..\..\User\Debugprintf -I..\..\User\LogDebug -I..\..\User\app\inc -I..\..\User\app\src -I..\..\User\bsp\inc -I..\..\User\bsp\src -I.\RTE\_Flash -ID:\Keil_v5\ARM\Packs\ARM\CMSIS\5.5.1\CMSIS\Core\Include -ID:\Keil_v5\ARM\Packs\Keil\STM32F1xx_DFP\2.1.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=527 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\flash\obj\ersc_ht_250ms.crf ..\..\User\app\src\ERSC_HT_250ms.c]
                          THUMB

                          AREA ||i.ETH_DistStatusUpdata||, CODE, READONLY, ALIGN=2

                  ETH_DistStatusUpdata PROC
;;;74     uint16_t _cmd;
;;;75     void ETH_DistStatusUpdata(uint8_t type)
000000  b510              PUSH     {r4,lr}
;;;76     {
000002  4604              MOV      r4,r0
;;;77     	if(_cmd == CT_push_open)//推靠开
000004  4871              LDR      r0,|L1.460|
000006  8800              LDRH     r0,[r0,#0]  ; _cmd
000008  2806              CMP      r0,#6
00000a  d10b              BNE      |L1.36|
;;;78     	{
;;;79     		resend_cnt = 0;//重发计数清零
00000c  2000              MOVS     r0,#0
00000e  4970              LDR      r1,|L1.464|
000010  7008              STRB     r0,[r1,#0]
;;;80     		Push_open_flag = 1;//等井下数据上传完以后在下发指令
000012  2001              MOVS     r0,#1
000014  496f              LDR      r1,|L1.468|
000016  7008              STRB     r0,[r1,#0]
;;;81     		Key_status |= 0x04;
000018  486f              LDR      r0,|L1.472|
00001a  7800              LDRB     r0,[r0,#0]  ; Key_status
00001c  f0400004          ORR      r0,r0,#4
000020  496d              LDR      r1,|L1.472|
000022  7008              STRB     r0,[r1,#0]
                  |L1.36|
;;;82     	}				
;;;83     	if(_cmd == CT_push_close)//推靠关	
000024  4869              LDR      r0,|L1.460|
000026  8800              LDRH     r0,[r0,#0]  ; _cmd
000028  2807              CMP      r0,#7
00002a  d10b              BNE      |L1.68|
;;;84     	{		
;;;85     		resend_cnt = 0;//重发计数清零
00002c  2000              MOVS     r0,#0
00002e  4968              LDR      r1,|L1.464|
000030  7008              STRB     r0,[r1,#0]
;;;86     		Push_close_flag = 1;//等井下数据上传完以后在下发指令	
000032  2001              MOVS     r0,#1
000034  4969              LDR      r1,|L1.476|
000036  7008              STRB     r0,[r1,#0]
;;;87     		Key_status &= ~0x04;
000038  4867              LDR      r0,|L1.472|
00003a  7800              LDRB     r0,[r0,#0]  ; Key_status
00003c  f0200004          BIC      r0,r0,#4
000040  4965              LDR      r1,|L1.472|
000042  7008              STRB     r0,[r1,#0]
                  |L1.68|
;;;88     	}			
;;;89     	if(_cmd == CT_bit_front)//钻进开
000044  4861              LDR      r0,|L1.460|
000046  8800              LDRH     r0,[r0,#0]  ; _cmd
000048  2804              CMP      r0,#4
00004a  d10f              BNE      |L1.108|
;;;90     	{		
;;;91     		resend_cnt = 0;//重发计数清零
00004c  2000              MOVS     r0,#0
00004e  4960              LDR      r1,|L1.464|
000050  7008              STRB     r0,[r1,#0]
;;;92     		bit_process_open_flag = 1;
000052  2001              MOVS     r0,#1
000054  4962              LDR      r1,|L1.480|
000056  7008              STRB     r0,[r1,#0]
;;;93     		if(start_push == 1)//井下推靠打开
000058  4862              LDR      r0,|L1.484|
00005a  7800              LDRB     r0,[r0,#0]  ; start_push
00005c  2801              CMP      r0,#1
00005e  d105              BNE      |L1.108|
;;;94     			{						
;;;95     				Key_status |= 0x02;				
000060  485d              LDR      r0,|L1.472|
000062  7800              LDRB     r0,[r0,#0]  ; Key_status
000064  f0400002          ORR      r0,r0,#2
000068  495b              LDR      r1,|L1.472|
00006a  7008              STRB     r0,[r1,#0]
                  |L1.108|
;;;96     			}
;;;97     	}		
;;;98     	if(_cmd == CT_bit_back)//钻进关			
00006c  4857              LDR      r0,|L1.460|
00006e  8800              LDRH     r0,[r0,#0]  ; _cmd
000070  2805              CMP      r0,#5
000072  d10f              BNE      |L1.148|
;;;99     	{
;;;100    		resend_cnt = 0;//重发计数清零
000074  2000              MOVS     r0,#0
000076  4956              LDR      r1,|L1.464|
000078  7008              STRB     r0,[r1,#0]
;;;101    		bit_process_close_flag = 1;
00007a  2001              MOVS     r0,#1
00007c  495a              LDR      r1,|L1.488|
00007e  7008              STRB     r0,[r1,#0]
;;;102    		if(start_push == 1)
000080  4858              LDR      r0,|L1.484|
000082  7800              LDRB     r0,[r0,#0]  ; start_push
000084  2801              CMP      r0,#1
000086  d105              BNE      |L1.148|
;;;103    			{
;;;104    				Key_status &= ~0x02;
000088  4853              LDR      r0,|L1.472|
00008a  7800              LDRB     r0,[r0,#0]  ; Key_status
00008c  f0200002          BIC      r0,r0,#2
000090  4951              LDR      r1,|L1.472|
000092  7008              STRB     r0,[r1,#0]
                  |L1.148|
;;;105    			}
;;;106    	}
;;;107    	if(_cmd == CT_motor_run)//马达开					
000094  484d              LDR      r0,|L1.460|
000096  8800              LDRH     r0,[r0,#0]  ; _cmd
000098  2802              CMP      r0,#2
00009a  d117              BNE      |L1.204|
;;;108    	{
;;;109    		resend_cnt = 0;//重发计数清零
00009c  2000              MOVS     r0,#0
00009e  494c              LDR      r1,|L1.464|
0000a0  7008              STRB     r0,[r1,#0]
;;;110    		motor_open_flag = 1;
0000a2  2001              MOVS     r0,#1
0000a4  4951              LDR      r1,|L1.492|
0000a6  7008              STRB     r0,[r1,#0]
;;;111    
;;;112    		if(BP_commd_flag == 1)//变频在接收数据，标志位置一 
0000a8  4851              LDR      r0,|L1.496|
0000aa  7800              LDRB     r0,[r0,#0]  ; BP_commd_flag
0000ac  2801              CMP      r0,#1
0000ae  d102              BNE      |L1.182|
;;;113    			{
;;;114    				MD_commd_flag = 1;
0000b0  4950              LDR      r1,|L1.500|
0000b2  7008              STRB     r0,[r1,#0]
0000b4  e004              B        |L1.192|
                  |L1.182|
;;;115    			}
;;;116    			else///立即下发马达指令给变频机箱
;;;117    			{
;;;118    
;;;119    				Sendkeycmd(MD_DIST_REG,1);				
0000b6  2101              MOVS     r1,#1
0000b8  f2423011          MOV      r0,#0x2311
0000bc  f7fffffe          BL       Sendkeycmd
                  |L1.192|
;;;120    			}
;;;121    		Key_status |= 0x01;						
0000c0  4845              LDR      r0,|L1.472|
0000c2  7800              LDRB     r0,[r0,#0]  ; Key_status
0000c4  f0400001          ORR      r0,r0,#1
0000c8  4943              LDR      r1,|L1.472|
0000ca  7008              STRB     r0,[r1,#0]
                  |L1.204|
;;;122    
;;;123    	}
;;;124    	if(_cmd == CT_motor_stop)//马达关			
0000cc  483f              LDR      r0,|L1.460|
0000ce  8800              LDRH     r0,[r0,#0]  ; _cmd
0000d0  2803              CMP      r0,#3
0000d2  d117              BNE      |L1.260|
;;;125    	{
;;;126    		resend_cnt = 0;//重发计数清零
0000d4  2000              MOVS     r0,#0
0000d6  493e              LDR      r1,|L1.464|
0000d8  7008              STRB     r0,[r1,#0]
;;;127    		motor_close_flag = 1;
0000da  2001              MOVS     r0,#1
0000dc  4946              LDR      r1,|L1.504|
0000de  7008              STRB     r0,[r1,#0]
;;;128    		if(BP_commd_flag == 1)//变频在接收数据，标志位置一 
0000e0  4843              LDR      r0,|L1.496|
0000e2  7800              LDRB     r0,[r0,#0]  ; BP_commd_flag
0000e4  2801              CMP      r0,#1
0000e6  d102              BNE      |L1.238|
;;;129    			{
;;;130    				MD_commd_flag = 1;
0000e8  4942              LDR      r1,|L1.500|
0000ea  7008              STRB     r0,[r1,#0]
0000ec  e004              B        |L1.248|
                  |L1.238|
;;;131    			}
;;;132    		else///立即下发马达指令给变频机箱
;;;133    			{
;;;134    				Sendkeycmd(MD_DIST_REG,0);				
0000ee  2100              MOVS     r1,#0
0000f0  f2423011          MOV      r0,#0x2311
0000f4  f7fffffe          BL       Sendkeycmd
                  |L1.248|
;;;135    			}
;;;136    		Key_status &= ~0x01;			
0000f8  4837              LDR      r0,|L1.472|
0000fa  7800              LDRB     r0,[r0,#0]  ; Key_status
0000fc  f0200001          BIC      r0,r0,#1
000100  4935              LDR      r1,|L1.472|
000102  7008              STRB     r0,[r1,#0]
                  |L1.260|
;;;137    	}
;;;138    	if(_cmd == CT_gama_open)//伽马开				
000104  4831              LDR      r0,|L1.460|
000106  8800              LDRH     r0,[r0,#0]  ; _cmd
000108  280b              CMP      r0,#0xb
00010a  d10b              BNE      |L1.292|
;;;139    	{
;;;140    		resend_cnt = 0;//重发计数清零
00010c  2000              MOVS     r0,#0
00010e  4930              LDR      r1,|L1.464|
000110  7008              STRB     r0,[r1,#0]
;;;141    		gama_open_flag = 1;
000112  2001              MOVS     r0,#1
000114  4939              LDR      r1,|L1.508|
000116  7008              STRB     r0,[r1,#0]
;;;142    		Key_status |= 0x08; 	
000118  482f              LDR      r0,|L1.472|
00011a  7800              LDRB     r0,[r0,#0]  ; Key_status
00011c  f0400008          ORR      r0,r0,#8
000120  492d              LDR      r1,|L1.472|
000122  7008              STRB     r0,[r1,#0]
                  |L1.292|
;;;143    	}
;;;144    	if(_cmd == CT_gama_close)//伽马关										
000124  4829              LDR      r0,|L1.460|
000126  8800              LDRH     r0,[r0,#0]  ; _cmd
000128  280c              CMP      r0,#0xc
00012a  d10b              BNE      |L1.324|
;;;145    	{
;;;146    		resend_cnt = 0;//重发计数清零
00012c  2000              MOVS     r0,#0
00012e  4928              LDR      r1,|L1.464|
000130  7008              STRB     r0,[r1,#0]
;;;147    		gama_close_flag = 1;
000132  2001              MOVS     r0,#1
000134  4932              LDR      r1,|L1.512|
000136  7008              STRB     r0,[r1,#0]
;;;148    		Key_status &= ~0x08;	
000138  4827              LDR      r0,|L1.472|
00013a  7800              LDRB     r0,[r0,#0]  ; Key_status
00013c  f0200008          BIC      r0,r0,#8
000140  4925              LDR      r1,|L1.472|
000142  7008              STRB     r0,[r1,#0]
                  |L1.324|
;;;149    	}
;;;150    	if(_cmd == CT_pressure_up)//压力升			
000144  4821              LDR      r0,|L1.460|
000146  8800              LDRH     r0,[r0,#0]  ; _cmd
000148  2808              CMP      r0,#8
00014a  d110              BNE      |L1.366|
;;;151    	{
;;;152    		resend_cnt = 0;//重发计数清零
00014c  2000              MOVS     r0,#0
00014e  4920              LDR      r1,|L1.464|
000150  7008              STRB     r0,[r1,#0]
;;;153    			pressure_up_flag = 1;
000152  2001              MOVS     r0,#1
000154  492b              LDR      r1,|L1.516|
000156  7008              STRB     r0,[r1,#0]
;;;154    			Key_status |= 0x10;
000158  481f              LDR      r0,|L1.472|
00015a  7800              LDRB     r0,[r0,#0]  ; Key_status
00015c  f0400010          ORR      r0,r0,#0x10
000160  491d              LDR      r1,|L1.472|
000162  7008              STRB     r0,[r1,#0]
;;;155    			Key_status &= ~0x20;
000164  4608              MOV      r0,r1
000166  7800              LDRB     r0,[r0,#0]  ; Key_status
000168  f0200020          BIC      r0,r0,#0x20
00016c  7008              STRB     r0,[r1,#0]
                  |L1.366|
;;;156    	}
;;;157    	if(_cmd == CT_pressure_hold)//压力保持		
00016e  4817              LDR      r0,|L1.460|
000170  8800              LDRH     r0,[r0,#0]  ; _cmd
000172  2809              CMP      r0,#9
000174  d110              BNE      |L1.408|
;;;158    	{
;;;159    		resend_cnt = 0;//重发计数清零
000176  2000              MOVS     r0,#0
000178  4915              LDR      r1,|L1.464|
00017a  7008              STRB     r0,[r1,#0]
;;;160    		pressure_keep_flag = 1;
00017c  2001              MOVS     r0,#1
00017e  4922              LDR      r1,|L1.520|
000180  7008              STRB     r0,[r1,#0]
;;;161    		Key_status &= ~0x10;
000182  4815              LDR      r0,|L1.472|
000184  7800              LDRB     r0,[r0,#0]  ; Key_status
000186  f0200010          BIC      r0,r0,#0x10
00018a  4913              LDR      r1,|L1.472|
00018c  7008              STRB     r0,[r1,#0]
;;;162    		Key_status &= ~0x20;
00018e  4608              MOV      r0,r1
000190  7800              LDRB     r0,[r0,#0]  ; Key_status
000192  f0200020          BIC      r0,r0,#0x20
000196  7008              STRB     r0,[r1,#0]
                  |L1.408|
;;;163    	}
;;;164    	if(_cmd == CT_pressure_down)//压力降					
000198  480c              LDR      r0,|L1.460|
00019a  8800              LDRH     r0,[r0,#0]  ; _cmd
00019c  280a              CMP      r0,#0xa
00019e  d110              BNE      |L1.450|
;;;165    	{
;;;166    		resend_cnt = 0;//重发计数清零
0001a0  2000              MOVS     r0,#0
0001a2  490b              LDR      r1,|L1.464|
0001a4  7008              STRB     r0,[r1,#0]
;;;167    		pressure_down_flag = 1;
0001a6  2001              MOVS     r0,#1
0001a8  4918              LDR      r1,|L1.524|
0001aa  7008              STRB     r0,[r1,#0]
;;;168    		Key_status |= 0x20;
0001ac  480a              LDR      r0,|L1.472|
0001ae  7800              LDRB     r0,[r0,#0]  ; Key_status
0001b0  f0400020          ORR      r0,r0,#0x20
0001b4  4908              LDR      r1,|L1.472|
0001b6  7008              STRB     r0,[r1,#0]
;;;169    		Key_status &= ~0x10; 
0001b8  4608              MOV      r0,r1
0001ba  7800              LDRB     r0,[r0,#0]  ; Key_status
0001bc  f0200010          BIC      r0,r0,#0x10
0001c0  7008              STRB     r0,[r1,#0]
                  |L1.450|
;;;170    	}
;;;171    _cmd = 0x00;	
0001c2  2000              MOVS     r0,#0
0001c4  4901              LDR      r1,|L1.460|
0001c6  8008              STRH     r0,[r1,#0]
;;;172    }
0001c8  bd10              POP      {r4,pc}
;;;173    //
                          ENDP

0001ca  0000              DCW      0x0000
                  |L1.460|
                          DCD      _cmd
                  |L1.464|
                          DCD      resend_cnt
                  |L1.468|
                          DCD      Push_open_flag
                  |L1.472|
                          DCD      Key_status
                  |L1.476|
                          DCD      Push_close_flag
                  |L1.480|
                          DCD      bit_process_open_flag
                  |L1.484|
                          DCD      start_push
                  |L1.488|
                          DCD      bit_process_close_flag
                  |L1.492|
                          DCD      motor_open_flag
                  |L1.496|
                          DCD      BP_commd_flag
                  |L1.500|
                          DCD      MD_commd_flag
                  |L1.504|
                          DCD      motor_close_flag
                  |L1.508|
                          DCD      gama_open_flag
                  |L1.512|
                          DCD      gama_close_flag
                  |L1.516|
                          DCD      pressure_up_flag
                  |L1.520|
                          DCD      pressure_keep_flag
                  |L1.524|
                          DCD      pressure_down_flag

                          AREA ||i.ETH_StatusResponse||, CODE, READONLY, ALIGN=2

                  ETH_StatusResponse PROC
;;;443    
;;;444    void ETH_StatusResponse(uint8_t type)
000000  1e81              SUBS     r1,r0,#2
;;;445    {
;;;446    		switch(type)
000002  290b              CMP      r1,#0xb
000004  d275              BCS      |L2.242|
000006  e8dff001          TBB      [pc,r1]
00000a  2e38              DCB      0x2e,0x38
00000c  1a240610          DCB      0x1a,0x24,0x06,0x10
000010  56657542          DCB      0x56,0x65,0x75,0x42
000014  4c00              DCB      0x4c,0x00
;;;447    		{
;;;448    			case CT_push_open:
;;;449    				Button_flag = 0;
000016  2100              MOVS     r1,#0
000018  4a3f              LDR      r2,|L2.280|
00001a  7011              STRB     r1,[r2,#0]
;;;450    				Key_respstatus_data |= 0x04;
00001c  493f              LDR      r1,|L2.284|
00001e  8809              LDRH     r1,[r1,#0]  ; Key_respstatus_data
000020  f0410104          ORR      r1,r1,#4
000024  4a3d              LDR      r2,|L2.284|
000026  8011              STRH     r1,[r2,#0]
;;;451    				break;
000028  e074              B        |L2.276|
;;;452    			case CT_push_close:
;;;453    				Button_flag = 0;
00002a  2100              MOVS     r1,#0
00002c  4a3a              LDR      r2,|L2.280|
00002e  7011              STRB     r1,[r2,#0]
;;;454    				Key_respstatus_data &= ~0x04;
000030  493a              LDR      r1,|L2.284|
000032  8809              LDRH     r1,[r1,#0]  ; Key_respstatus_data
000034  f0210104          BIC      r1,r1,#4
000038  4a38              LDR      r2,|L2.284|
00003a  8011              STRH     r1,[r2,#0]
;;;455    				break;
00003c  e06a              B        |L2.276|
;;;456    			case CT_bit_front:
;;;457    				Button_flag = 0;
00003e  2100              MOVS     r1,#0
000040  4a35              LDR      r2,|L2.280|
000042  7011              STRB     r1,[r2,#0]
;;;458    				Key_respstatus_data |= 0x02;
000044  4935              LDR      r1,|L2.284|
000046  8809              LDRH     r1,[r1,#0]  ; Key_respstatus_data
000048  f0410102          ORR      r1,r1,#2
00004c  4a33              LDR      r2,|L2.284|
00004e  8011              STRH     r1,[r2,#0]
;;;459    				break;
000050  e060              B        |L2.276|
;;;460    			case CT_bit_back:
;;;461    				Button_flag = 0;
000052  2100              MOVS     r1,#0
000054  4a30              LDR      r2,|L2.280|
000056  7011              STRB     r1,[r2,#0]
;;;462    				Key_respstatus_data &= ~0x02;
000058  4930              LDR      r1,|L2.284|
00005a  8809              LDRH     r1,[r1,#0]  ; Key_respstatus_data
00005c  f0210102          BIC      r1,r1,#2
000060  4a2e              LDR      r2,|L2.284|
000062  8011              STRH     r1,[r2,#0]
;;;463    				break;
000064  e056              B        |L2.276|
;;;464    			case CT_motor_run:
;;;465    				Button_flag = 0;
000066  2100              MOVS     r1,#0
000068  4a2b              LDR      r2,|L2.280|
00006a  7011              STRB     r1,[r2,#0]
;;;466    				Key_respstatus_data |= 0x01;
00006c  492b              LDR      r1,|L2.284|
00006e  8809              LDRH     r1,[r1,#0]  ; Key_respstatus_data
000070  f0410101          ORR      r1,r1,#1
000074  4a29              LDR      r2,|L2.284|
000076  8011              STRH     r1,[r2,#0]
;;;467    				break;
000078  e04c              B        |L2.276|
;;;468    			case CT_motor_stop:
;;;469    				Button_flag = 0;
00007a  2100              MOVS     r1,#0
00007c  4a26              LDR      r2,|L2.280|
00007e  7011              STRB     r1,[r2,#0]
;;;470    				Key_respstatus_data &= ~0x01;
000080  4926              LDR      r1,|L2.284|
000082  8809              LDRH     r1,[r1,#0]  ; Key_respstatus_data
000084  f0210101          BIC      r1,r1,#1
000088  4a24              LDR      r2,|L2.284|
00008a  8011              STRH     r1,[r2,#0]
;;;471    				break;
00008c  e042              B        |L2.276|
;;;472    			case CT_gama_open:
;;;473    				Button_flag = 0;
00008e  2100              MOVS     r1,#0
000090  4a21              LDR      r2,|L2.280|
000092  7011              STRB     r1,[r2,#0]
;;;474    				Key_respstatus_data |= 0x08;
000094  4921              LDR      r1,|L2.284|
000096  8809              LDRH     r1,[r1,#0]  ; Key_respstatus_data
000098  f0410108          ORR      r1,r1,#8
00009c  4a1f              LDR      r2,|L2.284|
00009e  8011              STRH     r1,[r2,#0]
;;;475    				break;
0000a0  e038              B        |L2.276|
;;;476    			case CT_gama_close:
;;;477    				Button_flag = 0;
0000a2  2100              MOVS     r1,#0
0000a4  4a1c              LDR      r2,|L2.280|
0000a6  7011              STRB     r1,[r2,#0]
;;;478    				Key_respstatus_data &= ~0x08;
0000a8  491c              LDR      r1,|L2.284|
0000aa  8809              LDRH     r1,[r1,#0]  ; Key_respstatus_data
0000ac  f0210108          BIC      r1,r1,#8
0000b0  4a1a              LDR      r2,|L2.284|
0000b2  8011              STRH     r1,[r2,#0]
;;;479    				break;
0000b4  e02e              B        |L2.276|
;;;480    			case CT_pressure_up:
;;;481    				Button_flag = 0;
0000b6  2100              MOVS     r1,#0
0000b8  4a17              LDR      r2,|L2.280|
0000ba  7011              STRB     r1,[r2,#0]
;;;482    				Key_respstatus_data |= 0x10;
0000bc  4917              LDR      r1,|L2.284|
0000be  8809              LDRH     r1,[r1,#0]  ; Key_respstatus_data
0000c0  f0410110          ORR      r1,r1,#0x10
0000c4  4a15              LDR      r2,|L2.284|
0000c6  8011              STRH     r1,[r2,#0]
;;;483    				Key_respstatus_data &= ~0x20;
0000c8  4611              MOV      r1,r2
0000ca  8809              LDRH     r1,[r1,#0]  ; Key_respstatus_data
0000cc  f0210120          BIC      r1,r1,#0x20
0000d0  8011              STRH     r1,[r2,#0]
;;;484    				break;
0000d2  e01f              B        |L2.276|
;;;485    			case CT_pressure_hold:
;;;486    				Button_flag = 0;
0000d4  2100              MOVS     r1,#0
0000d6  4a10              LDR      r2,|L2.280|
0000d8  7011              STRB     r1,[r2,#0]
;;;487    				Key_respstatus_data  &= ~0x10;
0000da  4910              LDR      r1,|L2.284|
0000dc  8809              LDRH     r1,[r1,#0]  ; Key_respstatus_data
0000de  f0210110          BIC      r1,r1,#0x10
0000e2  4a0e              LDR      r2,|L2.284|
0000e4  8011              STRH     r1,[r2,#0]
;;;488    				Key_respstatus_data  &= ~0x20; 
0000e6  4611              MOV      r1,r2
0000e8  8809              LDRH     r1,[r1,#0]  ; Key_respstatus_data
0000ea  f0210120          BIC      r1,r1,#0x20
0000ee  8011              STRH     r1,[r2,#0]
;;;489    				break;
0000f0  e010              B        |L2.276|
                  |L2.242|
0000f2  e00e              B        |L2.274|
;;;490    			case CT_pressure_down:
;;;491    				Button_flag = 0;
0000f4  2100              MOVS     r1,#0
0000f6  4a08              LDR      r2,|L2.280|
0000f8  7011              STRB     r1,[r2,#0]
;;;492    				Key_respstatus_data |= 0x20;
0000fa  4908              LDR      r1,|L2.284|
0000fc  8809              LDRH     r1,[r1,#0]  ; Key_respstatus_data
0000fe  f0410120          ORR      r1,r1,#0x20
000102  4a06              LDR      r2,|L2.284|
000104  8011              STRH     r1,[r2,#0]
;;;493    				Key_respstatus_data &= ~0x10; 
000106  4611              MOV      r1,r2
000108  8809              LDRH     r1,[r1,#0]  ; Key_respstatus_data
00010a  f0210110          BIC      r1,r1,#0x10
00010e  8011              STRH     r1,[r2,#0]
;;;494    				break;
000110  e000              B        |L2.276|
                  |L2.274|
;;;495    			default:
;;;496    						break;
000112  bf00              NOP      
                  |L2.276|
000114  bf00              NOP                            ;451
;;;497    		}
;;;498    }
000116  4770              BX       lr
;;;499    
                          ENDP

                  |L2.280|
                          DCD      Button_flag
                  |L2.284|
                          DCD      Key_respstatus_data

                          AREA ||i.HT_250ms_Timerout||, CODE, READONLY, ALIGN=2

                  HT_250ms_Timerout PROC
;;;41     
;;;42     void HT_250ms_Timerout(void)
000000  b510              PUSH     {r4,lr}
;;;43     {
;;;44     	if(bsp_CheckTimer(0))
000002  2000              MOVS     r0,#0
000004  f7fffffe          BL       bsp_CheckTimer
000008  b160              CBZ      r0,|L3.36|
;;;45     	{
;;;46     		LCD_Updata();		//刷屏显示	
00000a  f7fffffe          BL       LCD_Updata
;;;47     
;;;48     		WriteGmmaCntToFpga(send_data.gmma_cnt);					//给FPGA写入伽马值
00000e  4908              LDR      r1,|L3.48|
000010  f8b1000f          LDRH     r0,[r1,#0xf]  ; send_data
000014  f7fffffe          BL       WriteGmmaCntToFpga
;;;49     		Torque_acq();																		//扭矩测试
000018  f7fffffe          BL       Torque_acq
;;;50     		senddatatoETH();															//给上位机上传数据
00001c  f7fffffe          BL       senddatatoETH
;;;51     		Data_request();																//数据请求	
000020  f7fffffe          BL       Data_request
                  |L3.36|
;;;52     	}
;;;53     
;;;54     		ADC_Ctrl_Current_acqdata();																																			//缆头电流采集
000024  f7fffffe          BL       ADC_Ctrl_Current_acqdata
;;;55     		ADC_Motor_Current_acqdata();																																		//电机电流采集井上电机电压采集
000028  f7fffffe          BL       ADC_Motor_Current_acqdata
;;;56     }
00002c  bd10              POP      {r4,pc}
;;;57     /******************************************************************************
                          ENDP

00002e  0000              DCW      0x0000
                  |L3.48|
                          DCD      send_data

                          AREA ||i.KeyDistStatusUpdata||, CODE, READONLY, ALIGN=2

                  KeyDistStatusUpdata PROC
;;;173    //
;;;174    void KeyDistStatusUpdata(uint8_t type)
000000  b510              PUSH     {r4,lr}
;;;175    {
000002  4604              MOV      r4,r0
;;;176    	switch(type)
000004  2c13              CMP      r4,#0x13
000006  d275              BCS      |L4.244|
000008  e8dff004          TBB      [pc,r4]
00000c  740a2374          DCB      0x74,0x0a,0x23,0x74
000010  3858747f          DCB      0x38,0x58,0x74,0x7f
000014  a074c1d6          DCB      0xa0,0x74,0xc1,0xd6
000018  7474eeef          DCB      0x74,0x74,0xee,0xef
00001c  74eceb00          DCB      0x74,0xec,0xeb,0x00
;;;177    	{
;;;178    		case PUSH_KEY1_DOWN://推靠开
;;;179    				resend_cnt = 0;//重发计数清零
000020  2000              MOVS     r0,#0
000022  49a4              LDR      r1,|L4.692|
000024  7008              STRB     r0,[r1,#0]
;;;180    				bit_process_open_flag = 0;
000026  49a4              LDR      r1,|L4.696|
000028  7008              STRB     r0,[r1,#0]
;;;181    				bit_process_close_flag = 0;
00002a  49a4              LDR      r1,|L4.700|
00002c  7008              STRB     r0,[r1,#0]
;;;182    ////				timeout_cnt = 0;			
;;;183    				push_flag	 = 1;					
00002e  2001              MOVS     r0,#1
000030  49a3              LDR      r1,|L4.704|
000032  7008              STRB     r0,[r1,#0]
;;;184    				Push_open_flag = 1;
000034  49a3              LDR      r1,|L4.708|
000036  7008              STRB     r0,[r1,#0]
;;;185    				Key_status |= 0x04;
000038  48a3              LDR      r0,|L4.712|
00003a  7800              LDRB     r0,[r0,#0]  ; Key_status
00003c  f0400004          ORR      r0,r0,#4
000040  49a1              LDR      r1,|L4.712|
000042  7008              STRB     r0,[r1,#0]
;;;186            onButtonUpdata_Rect(2,open,COLOR_GREEN);//绿色					
000044  f44f62fc          MOV      r2,#0x7e0
000048  2101              MOVS     r1,#1
00004a  2002              MOVS     r0,#2
00004c  f7fffffe          BL       onButtonUpdata_Rect
;;;187    				break;
000050  e12e              B        |L4.688|
;;;188    		case PUSH_KEY1_UP://推靠关
;;;189    				resend_cnt = 0;//重发计数清零
000052  2000              MOVS     r0,#0
000054  4997              LDR      r1,|L4.692|
000056  7008              STRB     r0,[r1,#0]
;;;190    ////				timeout_cnt = 0;		
;;;191    				Push_close_flag = 1;
000058  2001              MOVS     r0,#1
00005a  499c              LDR      r1,|L4.716|
00005c  7008              STRB     r0,[r1,#0]
;;;192    				push_flag	 = 1;				
00005e  4998              LDR      r1,|L4.704|
000060  7008              STRB     r0,[r1,#0]
;;;193    				Key_status &= ~0x04;
000062  4899              LDR      r0,|L4.712|
000064  7800              LDRB     r0,[r0,#0]  ; Key_status
000066  f0200004          BIC      r0,r0,#4
00006a  4997              LDR      r1,|L4.712|
00006c  7008              STRB     r0,[r1,#0]
;;;194    				onButtonUpdata_Rect(2,close,COLOR_GREEN);				
00006e  f44f62fc          MOV      r2,#0x7e0
000072  2100              MOVS     r1,#0
000074  2002              MOVS     r0,#2
000076  f7fffffe          BL       onButtonUpdata_Rect
;;;195    				break;
00007a  e119              B        |L4.688|
;;;196    		case BIT_PROCESS_KEY2_DOWN://钻进开
;;;197    				resend_cnt = 0;//重发计数清零
00007c  2000              MOVS     r0,#0
00007e  498d              LDR      r1,|L4.692|
000080  7008              STRB     r0,[r1,#0]
;;;198    ////				timeout_cnt = 0;			
;;;199    				bit_process_flag = 1;
000082  2001              MOVS     r0,#1
000084  4992              LDR      r1,|L4.720|
000086  7008              STRB     r0,[r1,#0]
;;;200    				bit_process_open_flag = 1;
000088  498b              LDR      r1,|L4.696|
00008a  7008              STRB     r0,[r1,#0]
;;;201    				if(start_push == 1)//井下推靠打开
00008c  4891              LDR      r0,|L4.724|
00008e  7800              LDRB     r0,[r0,#0]  ; start_push
000090  2801              CMP      r0,#1
000092  d10c              BNE      |L4.174|
;;;202    					{						
;;;203    						Key_status |= 0x02;
000094  488c              LDR      r0,|L4.712|
000096  7800              LDRB     r0,[r0,#0]  ; Key_status
000098  f0400002          ORR      r0,r0,#2
00009c  498a              LDR      r1,|L4.712|
00009e  7008              STRB     r0,[r1,#0]
;;;204    						onButtonUpdata_Rect(3,open,COLOR_GREEN);//色块显示绿色					
0000a0  f44f62fc          MOV      r2,#0x7e0
0000a4  2101              MOVS     r1,#1
0000a6  2003              MOVS     r0,#3
0000a8  f7fffffe          BL       onButtonUpdata_Rect
0000ac  e005              B        |L4.186|
                  |L4.174|
;;;205    					}
;;;206    				else
;;;207    					{
;;;208    						onButtonUpdata_Rect(3,open,COLOR_YELLOW);//色块显示黄色，，，指令不下发
0000ae  f44f427f          MOV      r2,#0xff00
0000b2  2101              MOVS     r1,#1
0000b4  2003              MOVS     r0,#3
0000b6  f7fffffe          BL       onButtonUpdata_Rect
                  |L4.186|
;;;209    					}
;;;210    				break;
0000ba  e0f9              B        |L4.688|
;;;211    		case BIT_PROCESS_KEY2_UP://钻进关
;;;212    				resend_cnt = 0;//重发计数清零
0000bc  2000              MOVS     r0,#0
0000be  497d              LDR      r1,|L4.692|
0000c0  7008              STRB     r0,[r1,#0]
;;;213    ////				timeout_cnt = 0;			
;;;214    				bit_process_flag = 1;
0000c2  2001              MOVS     r0,#1
0000c4  4982              LDR      r1,|L4.720|
0000c6  7008              STRB     r0,[r1,#0]
;;;215    				bit_process_close_flag = 1;
0000c8  497c              LDR      r1,|L4.700|
0000ca  7008              STRB     r0,[r1,#0]
;;;216    				if(start_push == 1)
0000cc  4881              LDR      r0,|L4.724|
0000ce  7800              LDRB     r0,[r0,#0]  ; start_push
0000d0  2801              CMP      r0,#1
0000d2  d110              BNE      |L4.246|
;;;217    					{
;;;218    						
;;;219    						Key_status &= ~0x02;
0000d4  487c              LDR      r0,|L4.712|
0000d6  7800              LDRB     r0,[r0,#0]  ; Key_status
0000d8  f0200002          BIC      r0,r0,#2
0000dc  497a              LDR      r1,|L4.712|
0000de  7008              STRB     r0,[r1,#0]
;;;220    						onButtonUpdata_Rect(3,close,COLOR_GREEN);//色块显示绿色						
0000e0  f44f62fc          MOV      r2,#0x7e0
0000e4  2100              MOVS     r1,#0
0000e6  2003              MOVS     r0,#3
0000e8  f7fffffe          BL       onButtonUpdata_Rect
;;;221    						flag_yellow = 1;
0000ec  2001              MOVS     r0,#1
0000ee  497a              LDR      r1,|L4.728|
0000f0  7008              STRB     r0,[r1,#0]
0000f2  e009              B        |L4.264|
                  |L4.244|
0000f4  e0db              B        |L4.686|
                  |L4.246|
;;;222    					}
;;;223    				else
;;;224    					{
;;;225    						onButtonUpdata_Rect(3,close,COLOR_YELLOW);//色块显示黄色，，，指令不下发
0000f6  f44f427f          MOV      r2,#0xff00
0000fa  2100              MOVS     r1,#0
0000fc  2003              MOVS     r0,#3
0000fe  f7fffffe          BL       onButtonUpdata_Rect
;;;226    						flag_yellow = 0;
000102  2000              MOVS     r0,#0
000104  4974              LDR      r1,|L4.728|
000106  7008              STRB     r0,[r1,#0]
                  |L4.264|
;;;227    					}
;;;228    				break;
000108  e0d2              B        |L4.688|
;;;229    		case MOTOR_KEY3_DOWN://马达开
;;;230    				resend_cnt = 0;//重发计数清零
00010a  2000              MOVS     r0,#0
00010c  4969              LDR      r1,|L4.692|
00010e  7008              STRB     r0,[r1,#0]
;;;231    ////				timeout_cnt = 0;	
;;;232    				motor_open_flag = 1;
000110  2001              MOVS     r0,#1
000112  4972              LDR      r1,|L4.732|
000114  7008              STRB     r0,[r1,#0]
;;;233    				motor_flag =1;
000116  4972              LDR      r1,|L4.736|
000118  7008              STRB     r0,[r1,#0]
;;;234    
;;;235    				if(BP_commd_flag == 1)//变频在接收数据，标志位置一 
00011a  4872              LDR      r0,|L4.740|
00011c  7800              LDRB     r0,[r0,#0]  ; BP_commd_flag
00011e  2801              CMP      r0,#1
000120  d102              BNE      |L4.296|
;;;236    					{
;;;237    						MD_commd_flag = 1;
000122  4971              LDR      r1,|L4.744|
000124  7008              STRB     r0,[r1,#0]
000126  e004              B        |L4.306|
                  |L4.296|
;;;238    					}
;;;239    					else///立即下发马达指令给变频机箱
;;;240              {
;;;241    						Sendkeycmd(MD_DIST_REG,1);				
000128  2101              MOVS     r1,#1
00012a  f2423011          MOV      r0,#0x2311
00012e  f7fffffe          BL       Sendkeycmd
                  |L4.306|
;;;242    					}
;;;243    				Key_status |= 0x01;					
000132  4865              LDR      r0,|L4.712|
000134  7800              LDRB     r0,[r0,#0]  ; Key_status
000136  f0400001          ORR      r0,r0,#1
00013a  4963              LDR      r1,|L4.712|
00013c  7008              STRB     r0,[r1,#0]
;;;244    		    onButtonUpdata_Rect(4,open,COLOR_GREEN);				
00013e  f44f62fc          MOV      r2,#0x7e0
000142  2101              MOVS     r1,#1
000144  2004              MOVS     r0,#4
000146  f7fffffe          BL       onButtonUpdata_Rect
;;;245    				break;
00014a  e0b1              B        |L4.688|
;;;246    		case MOTOR_KEY3_UP://马达关
;;;247    				resend_cnt = 0;//重发计数清零
00014c  2000              MOVS     r0,#0
00014e  4959              LDR      r1,|L4.692|
000150  7008              STRB     r0,[r1,#0]
;;;248    ////				timeout_cnt = 0;	
;;;249    				motor_close_flag = 1;
000152  2001              MOVS     r0,#1
000154  4965              LDR      r1,|L4.748|
000156  7008              STRB     r0,[r1,#0]
;;;250    				motor_flag = 1;
000158  4961              LDR      r1,|L4.736|
00015a  7008              STRB     r0,[r1,#0]
;;;251    
;;;252    				if(BP_commd_flag == 1)//变频在接收数据，标志位置一 
00015c  4861              LDR      r0,|L4.740|
00015e  7800              LDRB     r0,[r0,#0]  ; BP_commd_flag
000160  2801              CMP      r0,#1
000162  d102              BNE      |L4.362|
;;;253    					{
;;;254    						MD_commd_flag = 1;
000164  4960              LDR      r1,|L4.744|
000166  7008              STRB     r0,[r1,#0]
000168  e004              B        |L4.372|
                  |L4.362|
;;;255    					}
;;;256    					else///立即下发马达指令给变频机箱
;;;257              {
;;;258    						Sendkeycmd(MD_DIST_REG,0);				
00016a  2100              MOVS     r1,#0
00016c  f2423011          MOV      r0,#0x2311
000170  f7fffffe          BL       Sendkeycmd
                  |L4.372|
;;;259    					}
;;;260    				Key_status &= ~0x01;
000174  4854              LDR      r0,|L4.712|
000176  7800              LDRB     r0,[r0,#0]  ; Key_status
000178  f0200001          BIC      r0,r0,#1
00017c  4952              LDR      r1,|L4.712|
00017e  7008              STRB     r0,[r1,#0]
;;;261    				onButtonUpdata_Rect(4,close,COLOR_GREEN);				
000180  f44f62fc          MOV      r2,#0x7e0
000184  2100              MOVS     r1,#0
000186  2004              MOVS     r0,#4
000188  f7fffffe          BL       onButtonUpdata_Rect
;;;262    				break;
00018c  e090              B        |L4.688|
;;;263    		case GMMA_KEY4_DOWN://伽马开
;;;264    				resend_cnt = 0;//重发计数清零
00018e  2000              MOVS     r0,#0
000190  4948              LDR      r1,|L4.692|
000192  7008              STRB     r0,[r1,#0]
;;;265    //////				timeout_cnt = 0;	
;;;266    				gama_open_flag = 1;
000194  2001              MOVS     r0,#1
000196  4956              LDR      r1,|L4.752|
000198  7008              STRB     r0,[r1,#0]
;;;267    				gama_flag = 1;
00019a  4956              LDR      r1,|L4.756|
00019c  7008              STRB     r0,[r1,#0]
;;;268    				Key_status |= 0x08; 
00019e  484a              LDR      r0,|L4.712|
0001a0  7800              LDRB     r0,[r0,#0]  ; Key_status
0001a2  f0400008          ORR      r0,r0,#8
0001a6  4948              LDR      r1,|L4.712|
0001a8  7008              STRB     r0,[r1,#0]
;;;269    				onButtonUpdata_Rect(0,open,COLOR_GREEN);			
0001aa  f44f62fc          MOV      r2,#0x7e0
0001ae  2101              MOVS     r1,#1
0001b0  2000              MOVS     r0,#0
0001b2  f7fffffe          BL       onButtonUpdata_Rect
;;;270    				break;
0001b6  e07b              B        |L4.688|
;;;271    		case GMMA_KEY4_UP://伽马关
;;;272    				resend_cnt = 0;//重发计数清零
0001b8  2000              MOVS     r0,#0
0001ba  493e              LDR      r1,|L4.692|
0001bc  7008              STRB     r0,[r1,#0]
;;;273    ////				timeout_cnt = 0;	
;;;274    				gama_close_flag = 1;
0001be  2001              MOVS     r0,#1
0001c0  494d              LDR      r1,|L4.760|
0001c2  7008              STRB     r0,[r1,#0]
;;;275    				gama_flag = 1;
0001c4  494b              LDR      r1,|L4.756|
0001c6  7008              STRB     r0,[r1,#0]
;;;276    				Key_status &= ~0x08;
0001c8  483f              LDR      r0,|L4.712|
0001ca  7800              LDRB     r0,[r0,#0]  ; Key_status
0001cc  f0200008          BIC      r0,r0,#8
0001d0  493d              LDR      r1,|L4.712|
0001d2  7008              STRB     r0,[r1,#0]
;;;277    				onButtonUpdata_Rect(0,close,COLOR_GREEN);		
0001d4  f44f62fc          MOV      r2,#0x7e0
0001d8  2100              MOVS     r1,#0
0001da  4608              MOV      r0,r1
0001dc  f7fffffe          BL       onButtonUpdata_Rect
;;;278    				break;
0001e0  e066              B        |L4.688|
0001e2  e033              B        |L4.588|
0001e4  e04c              B        |L4.640|
0001e6  e000              B        |L4.490|
0001e8  e019              B        |L4.542|
                  |L4.490|
;;;279    		case RESSURE_UP_KEY5_LONG://压力升
;;;280    				resend_cnt = 0;//重发计数清零
0001ea  2000              MOVS     r0,#0
0001ec  4931              LDR      r1,|L4.692|
0001ee  7008              STRB     r0,[r1,#0]
;;;281    //////				timeout_cnt = 0;	
;;;282    				pressure_up_flag = 1;
0001f0  2001              MOVS     r0,#1
0001f2  4942              LDR      r1,|L4.764|
0001f4  7008              STRB     r0,[r1,#0]
;;;283    				pressuer_flag = 1;
0001f6  4942              LDR      r1,|L4.768|
0001f8  7008              STRB     r0,[r1,#0]
;;;284    
;;;285    				Key_status |= 0x10;
0001fa  4833              LDR      r0,|L4.712|
0001fc  7800              LDRB     r0,[r0,#0]  ; Key_status
0001fe  f0400010          ORR      r0,r0,#0x10
000202  4931              LDR      r1,|L4.712|
000204  7008              STRB     r0,[r1,#0]
;;;286    				Key_status &= ~0x20;
000206  4608              MOV      r0,r1
000208  7800              LDRB     r0,[r0,#0]  ; Key_status
00020a  f0200020          BIC      r0,r0,#0x20
00020e  7008              STRB     r0,[r1,#0]
;;;287    				onButtonUpdata_Rect(1,open,COLOR_GREEN);		
000210  f44f62fc          MOV      r2,#0x7e0
000214  2101              MOVS     r1,#1
000216  4608              MOV      r0,r1
000218  f7fffffe          BL       onButtonUpdata_Rect
;;;288    				break;
00021c  e048              B        |L4.688|
                  |L4.542|
;;;289    		case RESSURE_UP_KEY5_UP://压力保持
;;;290    				resend_cnt = 0;//重发计数清零
00021e  2000              MOVS     r0,#0
000220  4924              LDR      r1,|L4.692|
000222  7008              STRB     r0,[r1,#0]
;;;291    				pressure_keep_flag = 1;
000224  2001              MOVS     r0,#1
000226  4937              LDR      r1,|L4.772|
000228  7008              STRB     r0,[r1,#0]
;;;292    				pressuer_flag = 1;
00022a  4935              LDR      r1,|L4.768|
00022c  7008              STRB     r0,[r1,#0]
;;;293    
;;;294    				Key_status &= ~0x10;
00022e  4826              LDR      r0,|L4.712|
000230  7800              LDRB     r0,[r0,#0]  ; Key_status
000232  f0200010          BIC      r0,r0,#0x10
000236  4924              LDR      r1,|L4.712|
000238  7008              STRB     r0,[r1,#0]
;;;295    				Key_status &= ~0x20;
00023a  4608              MOV      r0,r1
00023c  7800              LDRB     r0,[r0,#0]  ; Key_status
00023e  f0200020          BIC      r0,r0,#0x20
000242  7008              STRB     r0,[r1,#0]
;;;296    				ButtonClear(1);//两色块全清色
000244  2001              MOVS     r0,#1
000246  f7fffffe          BL       ButtonClear
;;;297    				break;
00024a  e031              B        |L4.688|
                  |L4.588|
;;;298    		case PRESSURE_DOWN_KEY6_LONG://压力降
;;;299    				resend_cnt = 0;//重发计数清零
00024c  2000              MOVS     r0,#0
00024e  4919              LDR      r1,|L4.692|
000250  7008              STRB     r0,[r1,#0]
;;;300    ////				timeout_cnt = 0;	
;;;301    				pressure_down_flag = 1;
000252  2001              MOVS     r0,#1
000254  492c              LDR      r1,|L4.776|
000256  7008              STRB     r0,[r1,#0]
;;;302    				pressuer_flag = 1;
000258  4929              LDR      r1,|L4.768|
00025a  7008              STRB     r0,[r1,#0]
;;;303    
;;;304    				Key_status |= 0x20;
00025c  481a              LDR      r0,|L4.712|
00025e  7800              LDRB     r0,[r0,#0]  ; Key_status
000260  f0400020          ORR      r0,r0,#0x20
000264  4918              LDR      r1,|L4.712|
000266  7008              STRB     r0,[r1,#0]
;;;305    				Key_status &= ~0x10; 
000268  4608              MOV      r0,r1
00026a  7800              LDRB     r0,[r0,#0]  ; Key_status
00026c  f0200010          BIC      r0,r0,#0x10
000270  7008              STRB     r0,[r1,#0]
;;;306    				onButtonUpdata_Rect(1,close,COLOR_GREEN);			
000272  f44f62fc          MOV      r2,#0x7e0
000276  2100              MOVS     r1,#0
000278  2001              MOVS     r0,#1
00027a  f7fffffe          BL       onButtonUpdata_Rect
;;;307    				break;
00027e  e017              B        |L4.688|
                  |L4.640|
;;;308    		case PRESSURE_DOWN_KEY6_UP://压力保持
;;;309    				resend_cnt = 0;//重发计数清零
000280  2000              MOVS     r0,#0
000282  490c              LDR      r1,|L4.692|
000284  7008              STRB     r0,[r1,#0]
;;;310    				pressure_keep_flag = 1;
000286  2001              MOVS     r0,#1
000288  491e              LDR      r1,|L4.772|
00028a  7008              STRB     r0,[r1,#0]
;;;311    				pressuer_flag = 1;
00028c  491c              LDR      r1,|L4.768|
00028e  7008              STRB     r0,[r1,#0]
;;;312    				Key_status  &= ~0x10;
000290  480d              LDR      r0,|L4.712|
000292  7800              LDRB     r0,[r0,#0]  ; Key_status
000294  f0200010          BIC      r0,r0,#0x10
000298  490b              LDR      r1,|L4.712|
00029a  7008              STRB     r0,[r1,#0]
;;;313    				Key_status  &= ~0x20; 
00029c  4608              MOV      r0,r1
00029e  7800              LDRB     r0,[r0,#0]  ; Key_status
0002a0  f0200020          BIC      r0,r0,#0x20
0002a4  7008              STRB     r0,[r1,#0]
;;;314    				ButtonClear(1);//两色块全清色		
0002a6  2001              MOVS     r0,#1
0002a8  f7fffffe          BL       ButtonClear
;;;315    				break;
0002ac  e000              B        |L4.688|
                  |L4.686|
;;;316    		default:
;;;317    				break;
0002ae  bf00              NOP      
                  |L4.688|
0002b0  bf00              NOP                            ;187
;;;318      	
;;;319    }
;;;320    }
0002b2  bd10              POP      {r4,pc}
;;;321    
                          ENDP

                  |L4.692|
                          DCD      resend_cnt
                  |L4.696|
                          DCD      bit_process_open_flag
                  |L4.700|
                          DCD      bit_process_close_flag
                  |L4.704|
                          DCD      push_flag
                  |L4.708|
                          DCD      Push_open_flag
                  |L4.712|
                          DCD      Key_status
                  |L4.716|
                          DCD      Push_close_flag
                  |L4.720|
                          DCD      bit_process_flag
                  |L4.724|
                          DCD      start_push
                  |L4.728|
                          DCD      flag_yellow
                  |L4.732|
                          DCD      motor_open_flag
                  |L4.736|
                          DCD      motor_flag
                  |L4.740|
                          DCD      BP_commd_flag
                  |L4.744|
                          DCD      MD_commd_flag
                  |L4.748|
                          DCD      motor_close_flag
                  |L4.752|
                          DCD      gama_open_flag
                  |L4.756|
                          DCD      gama_flag
                  |L4.760|
                          DCD      gama_close_flag
                  |L4.764|
                          DCD      pressure_up_flag
                  |L4.768|
                          DCD      pressuer_flag
                  |L4.772|
                          DCD      pressure_keep_flag
                  |L4.776|
                          DCD      pressure_down_flag

                          AREA ||i.KeyStatusResponse||, CODE, READONLY, ALIGN=2

                  KeyStatusResponse PROC
;;;326    uint8_t commd_response_cnt;
;;;327    void KeyStatusResponse(uint8_t type)
000000  b510              PUSH     {r4,lr}
;;;328    {
000002  4604              MOV      r4,r0
;;;329    switch(type)
000004  1ea0              SUBS     r0,r4,#2
000006  280b              CMP      r0,#0xb
000008  d276              BCS      |L5.248|
00000a  e8dff000          TBB      [pc,r0]
00000e  3e4c              DCB      0x3e,0x4c
000010  22300614          DCB      0x22,0x30,0x06,0x14
000014  76899b5a          DCB      0x76,0x89,0x9b,0x5a
000018  6700              DCB      0x67,0x00
;;;330    {
;;;331    	case CT_push_open:
;;;332    		Button_flag = 0;//用于超时刷新色块
00001a  2000              MOVS     r0,#0
00001c  497f              LDR      r1,|L5.540|
00001e  7008              STRB     r0,[r1,#0]
;;;333    		ButtonDeepGreen(2,open);
000020  2101              MOVS     r1,#1
000022  2002              MOVS     r0,#2
000024  f7fffffe          BL       ButtonDeepGreen
;;;334    		Key_respstatus_data |= 0x04;
000028  487d              LDR      r0,|L5.544|
00002a  8800              LDRH     r0,[r0,#0]  ; Key_respstatus_data
00002c  f0400004          ORR      r0,r0,#4
000030  497b              LDR      r1,|L5.544|
000032  8008              STRH     r0,[r1,#0]
;;;335    		break;
000034  e0f0              B        |L5.536|
;;;336    	case CT_push_close:
;;;337    		Button_flag = 0;
000036  2000              MOVS     r0,#0
000038  4978              LDR      r1,|L5.540|
00003a  7008              STRB     r0,[r1,#0]
;;;338    		ButtonDeepGreen(2,close);
00003c  2100              MOVS     r1,#0
00003e  2002              MOVS     r0,#2
000040  f7fffffe          BL       ButtonDeepGreen
;;;339    		Key_respstatus_data &= ~0x04;
000044  4876              LDR      r0,|L5.544|
000046  8800              LDRH     r0,[r0,#0]  ; Key_respstatus_data
000048  f0200004          BIC      r0,r0,#4
00004c  4974              LDR      r1,|L5.544|
00004e  8008              STRH     r0,[r1,#0]
;;;340    		break;
000050  e0e2              B        |L5.536|
;;;341    	case CT_bit_front:
;;;342    		Button_flag = 0;
000052  2000              MOVS     r0,#0
000054  4971              LDR      r1,|L5.540|
000056  7008              STRB     r0,[r1,#0]
;;;343    		ButtonDeepGreen(3,open);
000058  2101              MOVS     r1,#1
00005a  2003              MOVS     r0,#3
00005c  f7fffffe          BL       ButtonDeepGreen
;;;344    		Key_respstatus_data |= 0x02;
000060  486f              LDR      r0,|L5.544|
000062  8800              LDRH     r0,[r0,#0]  ; Key_respstatus_data
000064  f0400002          ORR      r0,r0,#2
000068  496d              LDR      r1,|L5.544|
00006a  8008              STRH     r0,[r1,#0]
;;;345    		break;
00006c  e0d4              B        |L5.536|
;;;346    	case CT_bit_back:
;;;347    		Button_flag = 0;
00006e  2000              MOVS     r0,#0
000070  496a              LDR      r1,|L5.540|
000072  7008              STRB     r0,[r1,#0]
;;;348    		ButtonDeepGreen(3,close);
000074  2100              MOVS     r1,#0
000076  2003              MOVS     r0,#3
000078  f7fffffe          BL       ButtonDeepGreen
;;;349    		Key_respstatus_data &= ~0x02;
00007c  4868              LDR      r0,|L5.544|
00007e  8800              LDRH     r0,[r0,#0]  ; Key_respstatus_data
000080  f0200002          BIC      r0,r0,#2
000084  4966              LDR      r1,|L5.544|
000086  8008              STRH     r0,[r1,#0]
;;;350    		break;
000088  e0c6              B        |L5.536|
;;;351    	case CT_motor_run:
;;;352    		Button_flag = 0;
00008a  2000              MOVS     r0,#0
00008c  4963              LDR      r1,|L5.540|
00008e  7008              STRB     r0,[r1,#0]
;;;353    		ButtonDeepGreen(4,open);
000090  2101              MOVS     r1,#1
000092  2004              MOVS     r0,#4
000094  f7fffffe          BL       ButtonDeepGreen
;;;354    		Key_respstatus_data |= 0x01;
000098  4861              LDR      r0,|L5.544|
00009a  8800              LDRH     r0,[r0,#0]  ; Key_respstatus_data
00009c  f0400001          ORR      r0,r0,#1
0000a0  495f              LDR      r1,|L5.544|
0000a2  8008              STRH     r0,[r1,#0]
;;;355    		break;
0000a4  e0b8              B        |L5.536|
;;;356    	case CT_motor_stop:
;;;357    		Button_flag = 0;
0000a6  2000              MOVS     r0,#0
0000a8  495c              LDR      r1,|L5.540|
0000aa  7008              STRB     r0,[r1,#0]
;;;358    		ButtonDeepGreen(4,close);
0000ac  2100              MOVS     r1,#0
0000ae  2004              MOVS     r0,#4
0000b0  f7fffffe          BL       ButtonDeepGreen
;;;359    		Key_respstatus_data &= ~0x01;
0000b4  485a              LDR      r0,|L5.544|
0000b6  8800              LDRH     r0,[r0,#0]  ; Key_respstatus_data
0000b8  f0200001          BIC      r0,r0,#1
0000bc  4958              LDR      r1,|L5.544|
0000be  8008              STRH     r0,[r1,#0]
;;;360    		break;
0000c0  e0aa              B        |L5.536|
;;;361    	case CT_gama_open:
;;;362    		Button_flag = 0;
0000c2  2000              MOVS     r0,#0
0000c4  4955              LDR      r1,|L5.540|
0000c6  7008              STRB     r0,[r1,#0]
;;;363    		ButtonDeepGreen(0,open);
0000c8  2101              MOVS     r1,#1
0000ca  f7fffffe          BL       ButtonDeepGreen
;;;364    		Key_respstatus_data |= 0x08;
0000ce  4854              LDR      r0,|L5.544|
0000d0  8800              LDRH     r0,[r0,#0]  ; Key_respstatus_data
0000d2  f0400008          ORR      r0,r0,#8
0000d6  4952              LDR      r1,|L5.544|
0000d8  8008              STRH     r0,[r1,#0]
;;;365    		break;
0000da  e09d              B        |L5.536|
;;;366    	case CT_gama_close:
;;;367    		Button_flag = 0;
0000dc  2000              MOVS     r0,#0
0000de  494f              LDR      r1,|L5.540|
0000e0  7008              STRB     r0,[r1,#0]
;;;368    		ButtonDeepGreen(0,close);
0000e2  2100              MOVS     r1,#0
0000e4  4608              MOV      r0,r1
0000e6  f7fffffe          BL       ButtonDeepGreen
;;;369    		Key_respstatus_data &= ~0x08;
0000ea  484d              LDR      r0,|L5.544|
0000ec  8800              LDRH     r0,[r0,#0]  ; Key_respstatus_data
0000ee  f0200008          BIC      r0,r0,#8
0000f2  494b              LDR      r1,|L5.544|
0000f4  8008              STRH     r0,[r1,#0]
;;;370    		break;
0000f6  e08f              B        |L5.536|
                  |L5.248|
0000f8  e037              B        |L5.362|
;;;371    	case CT_pressure_up:
;;;372    		Button_flag = 0;
0000fa  2000              MOVS     r0,#0
0000fc  4947              LDR      r1,|L5.540|
0000fe  7008              STRB     r0,[r1,#0]
;;;373    		ButtonDeepGreen(1,open);
000100  2101              MOVS     r1,#1
000102  4608              MOV      r0,r1
000104  f7fffffe          BL       ButtonDeepGreen
;;;374    		Key_respstatus_data |= 0x10;
000108  4845              LDR      r0,|L5.544|
00010a  8800              LDRH     r0,[r0,#0]  ; Key_respstatus_data
00010c  f0400010          ORR      r0,r0,#0x10
000110  4943              LDR      r1,|L5.544|
000112  8008              STRH     r0,[r1,#0]
;;;375    		Key_respstatus_data &= ~0x20;
000114  4608              MOV      r0,r1
000116  8800              LDRH     r0,[r0,#0]  ; Key_respstatus_data
000118  f0200020          BIC      r0,r0,#0x20
00011c  8008              STRH     r0,[r1,#0]
;;;376    		break;
00011e  e07b              B        |L5.536|
;;;377    	case CT_pressure_hold:
;;;378    		Button_flag = 0;
000120  2000              MOVS     r0,#0
000122  493e              LDR      r1,|L5.540|
000124  7008              STRB     r0,[r1,#0]
;;;379    		ButtonClear(1);
000126  2001              MOVS     r0,#1
000128  f7fffffe          BL       ButtonClear
;;;380    		Key_respstatus_data  &= ~0x10;
00012c  483c              LDR      r0,|L5.544|
00012e  8800              LDRH     r0,[r0,#0]  ; Key_respstatus_data
000130  f0200010          BIC      r0,r0,#0x10
000134  493a              LDR      r1,|L5.544|
000136  8008              STRH     r0,[r1,#0]
;;;381    		Key_respstatus_data  &= ~0x20; 
000138  4608              MOV      r0,r1
00013a  8800              LDRH     r0,[r0,#0]  ; Key_respstatus_data
00013c  f0200020          BIC      r0,r0,#0x20
000140  8008              STRH     r0,[r1,#0]
;;;382    		break;
000142  e069              B        |L5.536|
;;;383    	case CT_pressure_down:
;;;384    		Button_flag = 0;
000144  2000              MOVS     r0,#0
000146  4935              LDR      r1,|L5.540|
000148  7008              STRB     r0,[r1,#0]
;;;385    		ButtonDeepGreen(1,close);
00014a  2100              MOVS     r1,#0
00014c  2001              MOVS     r0,#1
00014e  f7fffffe          BL       ButtonDeepGreen
;;;386    		Key_respstatus_data |= 0x20;
000152  4833              LDR      r0,|L5.544|
000154  8800              LDRH     r0,[r0,#0]  ; Key_respstatus_data
000156  f0400020          ORR      r0,r0,#0x20
00015a  4931              LDR      r1,|L5.544|
00015c  8008              STRH     r0,[r1,#0]
;;;387    		Key_respstatus_data &= ~0x10; 
00015e  4608              MOV      r0,r1
000160  8800              LDRH     r0,[r0,#0]  ; Key_respstatus_data
000162  f0200010          BIC      r0,r0,#0x10
000166  8008              STRH     r0,[r1,#0]
;;;388    		break;
000168  e056              B        |L5.536|
                  |L5.362|
;;;389    	default:
;;;390    			if(Button_flag == 1)
00016a  482c              LDR      r0,|L5.540|
00016c  7800              LDRB     r0,[r0,#0]  ; Button_flag
00016e  2801              CMP      r0,#1
000170  d151              BNE      |L5.534|
;;;391    			{				
;;;392    				commd_response_cnt++;
000172  482c              LDR      r0,|L5.548|
000174  7800              LDRB     r0,[r0,#0]  ; commd_response_cnt
000176  1c40              ADDS     r0,r0,#1
000178  492a              LDR      r1,|L5.548|
00017a  7008              STRB     r0,[r1,#0]
;;;393    				if(commd_response_cnt > 1)
00017c  4608              MOV      r0,r1
00017e  7800              LDRB     r0,[r0,#0]  ; commd_response_cnt
000180  2801              CMP      r0,#1
000182  dd48              BLE      |L5.534|
;;;394    				{
;;;395    					commd_response_cnt = 0;
000184  2000              MOVS     r0,#0
000186  7008              STRB     r0,[r1,#0]
;;;396    					Button_flag = 0;
000188  4924              LDR      r1,|L5.540|
00018a  7008              STRB     r0,[r1,#0]
;;;397    					switch(commd_reg)///下发给井下指令
00018c  4826              LDR      r0,|L5.552|
00018e  8800              LDRH     r0,[r0,#0]  ; commd_reg
000190  1e80              SUBS     r0,r0,#2
000192  280b              CMP      r0,#0xb
000194  d23d              BCS      |L5.530|
000196  e8dff000          TBB      [pc,r0]
00019a  1a1f              DCB      0x1a,0x1f
00019c  1015060b          DCB      0x10,0x15,0x06,0x0b
0001a0  2e333724          DCB      0x2e,0x33,0x37,0x24
0001a4  2900              DCB      0x29,0x00
;;;398    					{
;;;399    						case CT_push_open:
;;;400    							ButtonRed(2,open);
0001a6  2101              MOVS     r1,#1
0001a8  2002              MOVS     r0,#2
0001aa  f7fffffe          BL       ButtonRed
;;;401    							break;
0001ae  e031              B        |L5.532|
;;;402    						case CT_push_close:
;;;403    							ButtonRed(2,close);
0001b0  2100              MOVS     r1,#0
0001b2  2002              MOVS     r0,#2
0001b4  f7fffffe          BL       ButtonRed
;;;404    							break;
0001b8  e02c              B        |L5.532|
;;;405    						case CT_bit_front:
;;;406    							ButtonRed(3,open);
0001ba  2101              MOVS     r1,#1
0001bc  2003              MOVS     r0,#3
0001be  f7fffffe          BL       ButtonRed
;;;407    							break;
0001c2  e027              B        |L5.532|
;;;408    						case CT_bit_back:
;;;409    							ButtonRed(3,close);
0001c4  2100              MOVS     r1,#0
0001c6  2003              MOVS     r0,#3
0001c8  f7fffffe          BL       ButtonRed
;;;410    							break;
0001cc  e022              B        |L5.532|
;;;411    						case CT_motor_run:
;;;412    							ButtonRed(4,open);
0001ce  2101              MOVS     r1,#1
0001d0  2004              MOVS     r0,#4
0001d2  f7fffffe          BL       ButtonRed
;;;413    							break;
0001d6  e01d              B        |L5.532|
;;;414    						case CT_motor_stop:
;;;415    							ButtonRed(4,close);
0001d8  2100              MOVS     r1,#0
0001da  2004              MOVS     r0,#4
0001dc  f7fffffe          BL       ButtonRed
;;;416    							break;
0001e0  e018              B        |L5.532|
;;;417    						case CT_gama_open:
;;;418    							ButtonRed(0,open);
0001e2  2101              MOVS     r1,#1
0001e4  2000              MOVS     r0,#0
0001e6  f7fffffe          BL       ButtonRed
;;;419    							break;
0001ea  e013              B        |L5.532|
;;;420    						case CT_gama_close:
;;;421    							ButtonRed(0,close);
0001ec  2100              MOVS     r1,#0
0001ee  4608              MOV      r0,r1
0001f0  f7fffffe          BL       ButtonRed
;;;422    							break;
0001f4  e00e              B        |L5.532|
;;;423    						case CT_pressure_up:
;;;424    							ButtonRed(1,open);
0001f6  2101              MOVS     r1,#1
0001f8  4608              MOV      r0,r1
0001fa  f7fffffe          BL       ButtonRed
;;;425    							break;
0001fe  e009              B        |L5.532|
;;;426    						case CT_pressure_hold:
;;;427    							ButtonClear(1);
000200  2001              MOVS     r0,#1
000202  f7fffffe          BL       ButtonClear
;;;428    							break;
000206  e005              B        |L5.532|
;;;429    						case CT_pressure_down:
;;;430    							ButtonRed(1,close);
000208  2100              MOVS     r1,#0
00020a  2001              MOVS     r0,#1
00020c  f7fffffe          BL       ButtonRed
;;;431    							break;
000210  e000              B        |L5.532|
                  |L5.530|
;;;432    						default:							
;;;433    									break;
000212  bf00              NOP      
                  |L5.532|
000214  bf00              NOP                            ;401
                  |L5.534|
;;;434    					}
;;;435    				}
;;;436    			
;;;437    			}
;;;438    				break;
000216  bf00              NOP      
                  |L5.536|
000218  bf00              NOP                            ;335
;;;439    }
;;;440    }
00021a  bd10              POP      {r4,pc}
;;;441    
                          ENDP

                  |L5.540|
                          DCD      Button_flag
                  |L5.544|
                          DCD      Key_respstatus_data
                  |L5.548|
                          DCD      commd_response_cnt
                  |L5.552|
                          DCD      commd_reg

                          AREA ||i.Key_NoresponseRefresh_Colorblock||, CODE, READONLY, ALIGN=2

                  Key_NoresponseRefresh_Colorblock PROC
;;;505    *******************************************************************************/
;;;506    void Key_NoresponseRefresh_Colorblock(uint8_t _status)
000000  b510              PUSH     {r4,lr}
;;;507    {
000002  4604              MOV      r4,r0
;;;508    	if(motor_flag == 1)///色块刷新标志，，，上位机不需要
000004  483a              LDR      r0,|L6.240|
000006  7800              LDRB     r0,[r0,#0]  ; motor_flag
000008  2801              CMP      r0,#1
00000a  d10e              BNE      |L6.42|
;;;509    		{
;;;510    			motor_flag = 0;
00000c  2000              MOVS     r0,#0
00000e  4938              LDR      r1,|L6.240|
000010  7008              STRB     r0,[r1,#0]
;;;511    			if((_status & 0x01)== 1)//马达开
000012  f0040001          AND      r0,r4,#1
000016  b120              CBZ      r0,|L6.34|
;;;512    				 {
;;;513    						ButtonRed(4,open);
000018  2101              MOVS     r1,#1
00001a  2004              MOVS     r0,#4
00001c  f7fffffe          BL       ButtonRed
000020  e003              B        |L6.42|
                  |L6.34|
;;;514    				 }
;;;515    			else//马达关
;;;516    				{
;;;517    						ButtonRed(4,close);
000022  2100              MOVS     r1,#0
000024  2004              MOVS     r0,#4
000026  f7fffffe          BL       ButtonRed
                  |L6.42|
;;;518    				}
;;;519    		}
;;;520    	if((bit_process_flag == 1)&&(flag_yellow == 1))//黄色不会变红，绿色变红
00002a  4832              LDR      r0,|L6.244|
00002c  7800              LDRB     r0,[r0,#0]  ; bit_process_flag
00002e  2801              CMP      r0,#1
000030  d113              BNE      |L6.90|
000032  4831              LDR      r0,|L6.248|
000034  7800              LDRB     r0,[r0,#0]  ; flag_yellow
000036  2801              CMP      r0,#1
000038  d10f              BNE      |L6.90|
;;;521    		{
;;;522    			bit_process_flag = 0;
00003a  2000              MOVS     r0,#0
00003c  492d              LDR      r1,|L6.244|
00003e  7008              STRB     r0,[r1,#0]
;;;523    			if((_status & 0x02)== 0x02)//钻进开
000040  f0040002          AND      r0,r4,#2
000044  2802              CMP      r0,#2
000046  d104              BNE      |L6.82|
;;;524    					 {
;;;525    							ButtonRed(3,open);
000048  2101              MOVS     r1,#1
00004a  2003              MOVS     r0,#3
00004c  f7fffffe          BL       ButtonRed
000050  e003              B        |L6.90|
                  |L6.82|
;;;526    					 }
;;;527    				else//钻进关
;;;528    					 {
;;;529    							ButtonRed(3,close);
000052  2100              MOVS     r1,#0
000054  2003              MOVS     r0,#3
000056  f7fffffe          BL       ButtonRed
                  |L6.90|
;;;530    					 }
;;;531    		}
;;;532    		if(push_flag == 1)
00005a  4828              LDR      r0,|L6.252|
00005c  7800              LDRB     r0,[r0,#0]  ; push_flag
00005e  2801              CMP      r0,#1
000060  d10f              BNE      |L6.130|
;;;533    			{
;;;534    				push_flag = 0;
000062  2000              MOVS     r0,#0
000064  4925              LDR      r1,|L6.252|
000066  7008              STRB     r0,[r1,#0]
;;;535    				if((_status & 0x04) == 0x04)//推靠开
000068  f0040004          AND      r0,r4,#4
00006c  2804              CMP      r0,#4
00006e  d104              BNE      |L6.122|
;;;536    					 {						
;;;537    							ButtonRed(2,open);					
000070  2101              MOVS     r1,#1
000072  2002              MOVS     r0,#2
000074  f7fffffe          BL       ButtonRed
000078  e003              B        |L6.130|
                  |L6.122|
;;;538    					 }
;;;539    				else//推靠关
;;;540    					 {
;;;541    							ButtonRed(2,close);
00007a  2100              MOVS     r1,#0
00007c  2002              MOVS     r0,#2
00007e  f7fffffe          BL       ButtonRed
                  |L6.130|
;;;542    					 }	
;;;543    			}
;;;544    		if(gama_flag == 1)
000082  481f              LDR      r0,|L6.256|
000084  7800              LDRB     r0,[r0,#0]  ; gama_flag
000086  2801              CMP      r0,#1
000088  d10f              BNE      |L6.170|
;;;545    			{
;;;546    			gama_flag = 0;	
00008a  2000              MOVS     r0,#0
00008c  491c              LDR      r1,|L6.256|
00008e  7008              STRB     r0,[r1,#0]
;;;547    			if((_status & 0x08)== 0x08)//伽马开
000090  f0040008          AND      r0,r4,#8
000094  2808              CMP      r0,#8
000096  d104              BNE      |L6.162|
;;;548    					 {
;;;549    							ButtonRed(0,open);
000098  2101              MOVS     r1,#1
00009a  2000              MOVS     r0,#0
00009c  f7fffffe          BL       ButtonRed
0000a0  e003              B        |L6.170|
                  |L6.162|
;;;550    					 }
;;;551    			else//伽马关
;;;552    					 {
;;;553    							ButtonRed(0,close);
0000a2  2100              MOVS     r1,#0
0000a4  4608              MOV      r0,r1
0000a6  f7fffffe          BL       ButtonRed
                  |L6.170|
;;;554    					 }
;;;555    			}
;;;556    			if(pressuer_flag == 1)
0000aa  4816              LDR      r0,|L6.260|
0000ac  7800              LDRB     r0,[r0,#0]  ; pressuer_flag
0000ae  2801              CMP      r0,#1
0000b0  d11d              BNE      |L6.238|
;;;557    			{
;;;558    				pressuer_flag = 0;
0000b2  2000              MOVS     r0,#0
0000b4  4913              LDR      r1,|L6.260|
0000b6  7008              STRB     r0,[r1,#0]
;;;559    				if(((_status & 0x10) == 0x10)&&((_status & 0x20) == 0))//压力升
0000b8  f0040010          AND      r0,r4,#0x10
0000bc  2810              CMP      r0,#0x10
0000be  d107              BNE      |L6.208|
0000c0  f0040020          AND      r0,r4,#0x20
0000c4  b920              CBNZ     r0,|L6.208|
;;;560    					 {
;;;561    							ButtonRed(1,open);
0000c6  2101              MOVS     r1,#1
0000c8  4608              MOV      r0,r1
0000ca  f7fffffe          BL       ButtonRed
0000ce  e00e              B        |L6.238|
                  |L6.208|
;;;562    					 }
;;;563    				else if(((_status & 0x20) == 0x20)&&((_status & 0x10) == 0))//压力降
0000d0  f0040020          AND      r0,r4,#0x20
0000d4  2820              CMP      r0,#0x20
0000d6  d107              BNE      |L6.232|
0000d8  f0040010          AND      r0,r4,#0x10
0000dc  b920              CBNZ     r0,|L6.232|
;;;564    					 {
;;;565    							ButtonRed(1,close);
0000de  2100              MOVS     r1,#0
0000e0  2001              MOVS     r0,#1
0000e2  f7fffffe          BL       ButtonRed
0000e6  e002              B        |L6.238|
                  |L6.232|
;;;566    					 }
;;;567    				else//压力保持，色块全清
;;;568    						{
;;;569    								ButtonClear(1);
0000e8  2001              MOVS     r0,#1
0000ea  f7fffffe          BL       ButtonClear
                  |L6.238|
;;;570    						}
;;;571    			}
;;;572    }	
0000ee  bd10              POP      {r4,pc}
;;;573    
                          ENDP

                  |L6.240|
                          DCD      motor_flag
                  |L6.244|
                          DCD      bit_process_flag
                  |L6.248|
                          DCD      flag_yellow
                  |L6.252|
                          DCD      push_flag
                  |L6.256|
                          DCD      gama_flag
                  |L6.260|
                          DCD      pressuer_flag

                          AREA ||i.Torque_acq||, CODE, READONLY, ALIGN=2

                  Torque_acq PROC
;;;581    uint16_t tor_uphole,tspe_uphole;
;;;582    void Torque_acq(void)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;583    {
;;;584    	for(uint8_t i = 0;i < 15;i++)
000004  2400              MOVS     r4,#0
000006  e010              B        |L7.42|
                  |L7.8|
;;;585    	{
;;;586    		Fpga_Write(0x03,i+1);
000008  1c60              ADDS     r0,r4,#1
00000a  b2c1              UXTB     r1,r0
00000c  2003              MOVS     r0,#3
00000e  f7fffffe          BL       Fpga_Write
;;;587    		send_data.tor_uphole[i] = Fpga_Read(0x02);
000012  2002              MOVS     r0,#2
000014  f7fffffe          BL       Fpga_Read
000018  499f              LDR      r1,|L7.664|
00001a  5508              STRB     r0,[r1,r4]
;;;588    		Torque_buf[i] = Fpga_Read(0x02);
00001c  2002              MOVS     r0,#2
00001e  f7fffffe          BL       Fpga_Read
000022  499e              LDR      r1,|L7.668|
000024  5508              STRB     r0,[r1,r4]
000026  1c60              ADDS     r0,r4,#1              ;584
000028  b2c4              UXTB     r4,r0                 ;584
                  |L7.42|
00002a  2c0f              CMP      r4,#0xf               ;584
00002c  dbec              BLT      |L7.8|
;;;589    	}
;;;590    		Fpga_Write(0x04,0x80);
00002e  2180              MOVS     r1,#0x80
000030  2004              MOVS     r0,#4
000032  f7fffffe          BL       Fpga_Write
;;;591    		Fpga_Write(0x04,0x00);
000036  2100              MOVS     r1,#0
000038  2004              MOVS     r0,#4
00003a  f7fffffe          BL       Fpga_Write
;;;592    	
;;;593    	for(uint8_t i = 0;i < 15;i++)
00003e  2000              MOVS     r0,#0
000040  e013              B        |L7.106|
                  |L7.66|
;;;594    	{
;;;595    		H_buf[i] = Torque_buf[i]/16;
000042  4a96              LDR      r2,|L7.668|
000044  5c11              LDRB     r1,[r2,r0]
000046  17ca              ASRS     r2,r1,#31
000048  eb017212          ADD      r2,r1,r2,LSR #28
00004c  1112              ASRS     r2,r2,#4
00004e  4b94              LDR      r3,|L7.672|
000050  541a              STRB     r2,[r3,r0]
;;;596    		L_buf[i] = Torque_buf[i]%16;		
000052  4a92              LDR      r2,|L7.668|
000054  5c11              LDRB     r1,[r2,r0]
000056  17ca              ASRS     r2,r1,#31
000058  eb017212          ADD      r2,r1,r2,LSR #28
00005c  1112              ASRS     r2,r2,#4
00005e  eba11202          SUB      r2,r1,r2,LSL #4
000062  4b90              LDR      r3,|L7.676|
000064  541a              STRB     r2,[r3,r0]
000066  1c41              ADDS     r1,r0,#1              ;593
000068  b2c8              UXTB     r0,r1                 ;593
                  |L7.106|
00006a  280f              CMP      r0,#0xf               ;593
00006c  dbe9              BLT      |L7.66|
;;;597    	}
;;;598    	tor_data = H_buf[0]*10000000 + L_buf[0]*1000000 + H_buf[1]*100000 + L_buf[1]*10000 + H_buf[2]*1000 + L_buf[2]*100 + H_buf[3]*10 + L_buf[3];
00006e  488c              LDR      r0,|L7.672|
000070  7800              LDRB     r0,[r0,#0]  ; H_buf
000072  498d              LDR      r1,|L7.680|
000074  4348              MULS     r0,r1,r0
000076  498b              LDR      r1,|L7.676|
000078  7809              LDRB     r1,[r1,#0]  ; L_buf
00007a  f6435209          MOV      r2,#0x3d09
00007e  4351              MULS     r1,r2,r1
000080  eb001181          ADD      r1,r0,r1,LSL #6
000084  4886              LDR      r0,|L7.672|
000086  7840              LDRB     r0,[r0,#1]  ; H_buf
000088  f6404235          MOV      r2,#0xc35
00008c  4350              MULS     r0,r2,r0
00008e  eb011140          ADD      r1,r1,r0,LSL #5
000092  4884              LDR      r0,|L7.676|
000094  7840              LDRB     r0,[r0,#1]  ; L_buf
000096  f2402271          MOV      r2,#0x271
00009a  4350              MULS     r0,r2,r0
00009c  eb011000          ADD      r0,r1,r0,LSL #4
0000a0  497f              LDR      r1,|L7.672|
0000a2  7889              LDRB     r1,[r1,#2]  ; H_buf
0000a4  eb010241          ADD      r2,r1,r1,LSL #1
0000a8  ebc211c1          RSB      r1,r2,r1,LSL #7
0000ac  eb0000c1          ADD      r0,r0,r1,LSL #3
0000b0  497c              LDR      r1,|L7.676|
0000b2  7889              LDRB     r1,[r1,#2]  ; L_buf
0000b4  eb0102c1          ADD      r2,r1,r1,LSL #3
0000b8  eb021101          ADD      r1,r2,r1,LSL #4
0000bc  eb000081          ADD      r0,r0,r1,LSL #2
0000c0  4977              LDR      r1,|L7.672|
0000c2  78c9              LDRB     r1,[r1,#3]  ; H_buf
0000c4  eb010181          ADD      r1,r1,r1,LSL #2
0000c8  eb000041          ADD      r0,r0,r1,LSL #1
0000cc  4975              LDR      r1,|L7.676|
0000ce  78c9              LDRB     r1,[r1,#3]  ; L_buf
0000d0  4408              ADD      r0,r0,r1
0000d2  4976              LDR      r1,|L7.684|
0000d4  6008              STR      r0,[r1,#0]  ; tor_data
;;;599    	tspe_data = H_buf[5]*10000000 + L_buf[5]*1000000 + H_buf[6]*100000 + L_buf[6]*10000 + H_buf[7]*1000 + L_buf[7]*100 + H_buf[8]*10 + L_buf[8];
0000d6  4872              LDR      r0,|L7.672|
0000d8  7940              LDRB     r0,[r0,#5]  ; H_buf
0000da  4973              LDR      r1,|L7.680|
0000dc  4348              MULS     r0,r1,r0
0000de  4971              LDR      r1,|L7.676|
0000e0  7949              LDRB     r1,[r1,#5]  ; L_buf
0000e2  f6435209          MOV      r2,#0x3d09
0000e6  4351              MULS     r1,r2,r1
0000e8  eb001181          ADD      r1,r0,r1,LSL #6
0000ec  486c              LDR      r0,|L7.672|
0000ee  7980              LDRB     r0,[r0,#6]  ; H_buf
0000f0  f6404235          MOV      r2,#0xc35
0000f4  4350              MULS     r0,r2,r0
0000f6  eb011140          ADD      r1,r1,r0,LSL #5
0000fa  486a              LDR      r0,|L7.676|
0000fc  7980              LDRB     r0,[r0,#6]  ; L_buf
0000fe  f2402271          MOV      r2,#0x271
000102  4350              MULS     r0,r2,r0
000104  eb011000          ADD      r0,r1,r0,LSL #4
000108  4965              LDR      r1,|L7.672|
00010a  79c9              LDRB     r1,[r1,#7]  ; H_buf
00010c  eb010241          ADD      r2,r1,r1,LSL #1
000110  ebc211c1          RSB      r1,r2,r1,LSL #7
000114  eb0000c1          ADD      r0,r0,r1,LSL #3
000118  4962              LDR      r1,|L7.676|
00011a  79c9              LDRB     r1,[r1,#7]  ; L_buf
00011c  eb0102c1          ADD      r2,r1,r1,LSL #3
000120  eb021101          ADD      r1,r2,r1,LSL #4
000124  eb000081          ADD      r0,r0,r1,LSL #2
000128  495d              LDR      r1,|L7.672|
00012a  7a09              LDRB     r1,[r1,#8]  ; H_buf
00012c  eb010181          ADD      r1,r1,r1,LSL #2
000130  eb000041          ADD      r0,r0,r1,LSL #1
000134  495b              LDR      r1,|L7.676|
000136  7a09              LDRB     r1,[r1,#8]  ; L_buf
000138  4408              ADD      r0,r0,r1
00013a  495d              LDR      r1,|L7.688|
00013c  6008              STR      r0,[r1,#0]  ; tspe_data
;;;600    	power_data = H_buf[10]*10000000 + L_buf[10]*1000000 + H_buf[11]*100000 + L_buf[11]*10000 + H_buf[12]*1000 + L_buf[12]*100 + H_buf[13]*10 + L_buf[13];
00013e  4858              LDR      r0,|L7.672|
000140  7a80              LDRB     r0,[r0,#0xa]  ; H_buf
000142  4959              LDR      r1,|L7.680|
000144  4348              MULS     r0,r1,r0
000146  4957              LDR      r1,|L7.676|
000148  7a89              LDRB     r1,[r1,#0xa]  ; L_buf
00014a  f6435209          MOV      r2,#0x3d09
00014e  4351              MULS     r1,r2,r1
000150  eb001181          ADD      r1,r0,r1,LSL #6
000154  4852              LDR      r0,|L7.672|
000156  7ac0              LDRB     r0,[r0,#0xb]  ; H_buf
000158  f6404235          MOV      r2,#0xc35
00015c  4350              MULS     r0,r2,r0
00015e  eb011140          ADD      r1,r1,r0,LSL #5
000162  4850              LDR      r0,|L7.676|
000164  7ac0              LDRB     r0,[r0,#0xb]  ; L_buf
000166  f2402271          MOV      r2,#0x271
00016a  4350              MULS     r0,r2,r0
00016c  eb011000          ADD      r0,r1,r0,LSL #4
000170  494b              LDR      r1,|L7.672|
000172  7b09              LDRB     r1,[r1,#0xc]  ; H_buf
000174  eb010241          ADD      r2,r1,r1,LSL #1
000178  ebc211c1          RSB      r1,r2,r1,LSL #7
00017c  eb0000c1          ADD      r0,r0,r1,LSL #3
000180  4948              LDR      r1,|L7.676|
000182  7b09              LDRB     r1,[r1,#0xc]  ; L_buf
000184  eb0102c1          ADD      r2,r1,r1,LSL #3
000188  eb021101          ADD      r1,r2,r1,LSL #4
00018c  eb000081          ADD      r0,r0,r1,LSL #2
000190  4943              LDR      r1,|L7.672|
000192  7b49              LDRB     r1,[r1,#0xd]  ; H_buf
000194  eb010181          ADD      r1,r1,r1,LSL #2
000198  eb000041          ADD      r0,r0,r1,LSL #1
00019c  4941              LDR      r1,|L7.676|
00019e  7b49              LDRB     r1,[r1,#0xd]  ; L_buf
0001a0  4408              ADD      r0,r0,r1
0001a2  4944              LDR      r1,|L7.692|
0001a4  6008              STR      r0,[r1,#0]  ; power_data
;;;601    	
;;;602    	tor_order = 7 - L_buf[4];
0001a6  483f              LDR      r0,|L7.676|
0001a8  7900              LDRB     r0,[r0,#4]  ; L_buf
0001aa  f1c00007          RSB      r0,r0,#7
0001ae  4942              LDR      r1,|L7.696|
0001b0  7008              STRB     r0,[r1,#0]
;;;603    	tor = tor_data/ pow(10,tor_order);
0001b2  4608              MOV      r0,r1
0001b4  7800              LDRB     r0,[r0,#0]  ; tor_order
0001b6  f7fffffe          BL       __aeabi_ui2d
0001ba  4680              MOV      r8,r0
0001bc  4642              MOV      r2,r8
0001be  460b              MOV      r3,r1
0001c0  2000              MOVS     r0,#0
0001c2  493e              LDR      r1,|L7.700|
0001c4  f7fffffe          BL       pow
0001c8  4606              MOV      r6,r0
0001ca  460f              MOV      r7,r1
0001cc  4837              LDR      r0,|L7.684|
0001ce  6800              LDR      r0,[r0,#0]  ; tor_data
0001d0  f7fffffe          BL       __aeabi_ui2d
0001d4  4682              MOV      r10,r0
0001d6  4632              MOV      r2,r6
0001d8  463b              MOV      r3,r7
0001da  f7fffffe          BL       __aeabi_ddiv
0001de  4604              MOV      r4,r0
0001e0  f7fffffe          BL       __aeabi_d2f
0001e4  4936              LDR      r1,|L7.704|
0001e6  6008              STR      r0,[r1,#0]  ; tor
;;;604    	tor_uphole = tor*10000;
0001e8  4936              LDR      r1,|L7.708|
0001ea  4835              LDR      r0,|L7.704|
0001ec  6800              LDR      r0,[r0,#0]  ; tor
0001ee  f7fffffe          BL       __aeabi_fmul
0001f2  4604              MOV      r4,r0
0001f4  f7fffffe          BL       __aeabi_f2uiz
0001f8  4933              LDR      r1,|L7.712|
0001fa  8008              STRH     r0,[r1,#0]
;;;605    
;;;606    	tspe_order = 7 - L_buf[9];
0001fc  4829              LDR      r0,|L7.676|
0001fe  7a40              LDRB     r0,[r0,#9]  ; L_buf
000200  f1c00007          RSB      r0,r0,#7
000204  4931              LDR      r1,|L7.716|
000206  7008              STRB     r0,[r1,#0]
;;;607    	tspe = tspe_data/ pow(10,tspe_order);
000208  4608              MOV      r0,r1
00020a  7800              LDRB     r0,[r0,#0]  ; tspe_order
00020c  f7fffffe          BL       __aeabi_ui2d
000210  4606              MOV      r6,r0
000212  4632              MOV      r2,r6
000214  460b              MOV      r3,r1
000216  2000              MOVS     r0,#0
000218  4928              LDR      r1,|L7.700|
00021a  f7fffffe          BL       pow
00021e  4604              MOV      r4,r0
000220  460d              MOV      r5,r1
000222  4823              LDR      r0,|L7.688|
000224  6800              LDR      r0,[r0,#0]  ; tspe_data
000226  f7fffffe          BL       __aeabi_ui2d
00022a  4680              MOV      r8,r0
00022c  4622              MOV      r2,r4
00022e  462b              MOV      r3,r5
000230  f7fffffe          BL       __aeabi_ddiv
000234  4682              MOV      r10,r0
000236  f7fffffe          BL       __aeabi_d2f
00023a  4925              LDR      r1,|L7.720|
00023c  6008              STR      r0,[r1,#0]  ; tspe
;;;608    	tspe_uphole = tspe*10;
00023e  4925              LDR      r1,|L7.724|
000240  4823              LDR      r0,|L7.720|
000242  6800              LDR      r0,[r0,#0]  ; tspe
000244  f7fffffe          BL       __aeabi_fmul
000248  4604              MOV      r4,r0
00024a  f7fffffe          BL       __aeabi_f2uiz
00024e  4922              LDR      r1,|L7.728|
000250  8008              STRH     r0,[r1,#0]
;;;609    	
;;;610    	power_order = 7 - L_buf[14];
000252  4814              LDR      r0,|L7.676|
000254  7b80              LDRB     r0,[r0,#0xe]  ; L_buf
000256  f1c00007          RSB      r0,r0,#7
00025a  4920              LDR      r1,|L7.732|
00025c  7008              STRB     r0,[r1,#0]
;;;611    	power = power_data/ pow(10,tor_order);
00025e  4816              LDR      r0,|L7.696|
000260  7800              LDRB     r0,[r0,#0]  ; tor_order
000262  f7fffffe          BL       __aeabi_ui2d
000266  4606              MOV      r6,r0
000268  4632              MOV      r2,r6
00026a  460b              MOV      r3,r1
00026c  2000              MOVS     r0,#0
00026e  4913              LDR      r1,|L7.700|
000270  f7fffffe          BL       pow
000274  4680              MOV      r8,r0
000276  4689              MOV      r9,r1
000278  480e              LDR      r0,|L7.692|
00027a  6800              LDR      r0,[r0,#0]  ; power_data
00027c  f7fffffe          BL       __aeabi_ui2d
000280  4604              MOV      r4,r0
000282  4642              MOV      r2,r8
000284  464b              MOV      r3,r9
000286  f7fffffe          BL       __aeabi_ddiv
00028a  4682              MOV      r10,r0
00028c  f7fffffe          BL       __aeabi_d2f
000290  4913              LDR      r1,|L7.736|
000292  6008              STR      r0,[r1,#0]  ; power
;;;612    	
;;;613    	
;;;614    }	
000294  e8bd9ff0          POP      {r4-r12,pc}
;;;615    
                          ENDP

                  |L7.664|
                          DCD      send_data+0x47
                  |L7.668|
                          DCD      Torque_buf
                  |L7.672|
                          DCD      H_buf
                  |L7.676|
                          DCD      L_buf
                  |L7.680|
                          DCD      0x00989680
                  |L7.684|
                          DCD      tor_data
                  |L7.688|
                          DCD      tspe_data
                  |L7.692|
                          DCD      power_data
                  |L7.696|
                          DCD      tor_order
                  |L7.700|
                          DCD      0x40240000
                  |L7.704|
                          DCD      tor
                  |L7.708|
                          DCD      0x461c4000
                  |L7.712|
                          DCD      tor_uphole
                  |L7.716|
                          DCD      tspe_order
                  |L7.720|
                          DCD      tspe
                  |L7.724|
                          DCD      0x41200000
                  |L7.728|
                          DCD      tspe_uphole
                  |L7.732|
                          DCD      power_order
                  |L7.736|
                          DCD      power

                          AREA ||i.send_key_cmd||, CODE, READONLY, ALIGN=2

                  send_key_cmd PROC
;;;616    uint8_t DoseResend = 0;
;;;617    void send_key_cmd(void)
000000  b510              PUSH     {r4,lr}
;;;618    {
;;;619    	if(Push_open_flag == 1)///按键扫描到标志位1，等到井下接受完，再下发
000002  4857              LDR      r0,|L8.352|
000004  7800              LDRB     r0,[r0,#0]  ; Push_open_flag
000006  2801              CMP      r0,#1
000008  d10a              BNE      |L8.32|
;;;620    	{
;;;621    		push_flag = 0;
00000a  2000              MOVS     r0,#0
00000c  4955              LDR      r1,|L8.356|
00000e  7008              STRB     r0,[r1,#0]
;;;622    		Push_open_flag = 0;
000010  4953              LDR      r1,|L8.352|
000012  7008              STRB     r0,[r1,#0]
;;;623    		CmdSendToUnderGround(CT_push_open);
000014  2006              MOVS     r0,#6
000016  f7fffffe          BL       CmdSendToUnderGround
;;;624    		DoseResend = CT_push_open;
00001a  2006              MOVS     r0,#6
00001c  4952              LDR      r1,|L8.360|
00001e  7008              STRB     r0,[r1,#0]
                  |L8.32|
;;;625    		
;;;626    	}
;;;627    	if(Push_close_flag == 1)
000020  4852              LDR      r0,|L8.364|
000022  7800              LDRB     r0,[r0,#0]  ; Push_close_flag
000024  2801              CMP      r0,#1
000026  d10a              BNE      |L8.62|
;;;628    	{
;;;629    		push_flag = 0;
000028  2000              MOVS     r0,#0
00002a  494e              LDR      r1,|L8.356|
00002c  7008              STRB     r0,[r1,#0]
;;;630    		Push_close_flag = 0;
00002e  494f              LDR      r1,|L8.364|
000030  7008              STRB     r0,[r1,#0]
;;;631    		CmdSendToUnderGround(CT_push_close);
000032  2007              MOVS     r0,#7
000034  f7fffffe          BL       CmdSendToUnderGround
;;;632    		DoseResend = CT_push_close;
000038  2007              MOVS     r0,#7
00003a  494b              LDR      r1,|L8.360|
00003c  7008              STRB     r0,[r1,#0]
                  |L8.62|
;;;633    	}
;;;634    	if(bit_process_open_flag == 1 && start_push == 1)
00003e  484c              LDR      r0,|L8.368|
000040  7800              LDRB     r0,[r0,#0]  ; bit_process_open_flag
000042  2801              CMP      r0,#1
000044  d10e              BNE      |L8.100|
000046  484b              LDR      r0,|L8.372|
000048  7800              LDRB     r0,[r0,#0]  ; start_push
00004a  2801              CMP      r0,#1
00004c  d10a              BNE      |L8.100|
;;;635    	{
;;;636    		bit_process_flag = 0;
00004e  2000              MOVS     r0,#0
000050  4949              LDR      r1,|L8.376|
000052  7008              STRB     r0,[r1,#0]
;;;637    		bit_process_open_flag = 0;
000054  4946              LDR      r1,|L8.368|
000056  7008              STRB     r0,[r1,#0]
;;;638    		CmdSendToUnderGround(CT_bit_front);
000058  2004              MOVS     r0,#4
00005a  f7fffffe          BL       CmdSendToUnderGround
;;;639    		DoseResend = CT_bit_front;
00005e  2004              MOVS     r0,#4
000060  4941              LDR      r1,|L8.360|
000062  7008              STRB     r0,[r1,#0]
                  |L8.100|
;;;640    	}
;;;641    	if(bit_process_close_flag == 1 && start_push == 1)
000064  4845              LDR      r0,|L8.380|
000066  7800              LDRB     r0,[r0,#0]  ; bit_process_close_flag
000068  2801              CMP      r0,#1
00006a  d10e              BNE      |L8.138|
00006c  4841              LDR      r0,|L8.372|
00006e  7800              LDRB     r0,[r0,#0]  ; start_push
000070  2801              CMP      r0,#1
000072  d10a              BNE      |L8.138|
;;;642    	{
;;;643    		bit_process_flag = 0;
000074  2000              MOVS     r0,#0
000076  4940              LDR      r1,|L8.376|
000078  7008              STRB     r0,[r1,#0]
;;;644    		bit_process_close_flag = 0;
00007a  4940              LDR      r1,|L8.380|
00007c  7008              STRB     r0,[r1,#0]
;;;645    		CmdSendToUnderGround(CT_bit_back);
00007e  2005              MOVS     r0,#5
000080  f7fffffe          BL       CmdSendToUnderGround
;;;646    		DoseResend = CT_bit_back;
000084  2005              MOVS     r0,#5
000086  4938              LDR      r1,|L8.360|
000088  7008              STRB     r0,[r1,#0]
                  |L8.138|
;;;647    	}
;;;648    	if(motor_open_flag == 1)
00008a  483d              LDR      r0,|L8.384|
00008c  7800              LDRB     r0,[r0,#0]  ; motor_open_flag
00008e  2801              CMP      r0,#1
000090  d10a              BNE      |L8.168|
;;;649    	{
;;;650    		motor_flag = 0;
000092  2000              MOVS     r0,#0
000094  493b              LDR      r1,|L8.388|
000096  7008              STRB     r0,[r1,#0]
;;;651    		motor_open_flag = 0;
000098  4939              LDR      r1,|L8.384|
00009a  7008              STRB     r0,[r1,#0]
;;;652    		CmdSendToUnderGround(CT_motor_run);
00009c  2002              MOVS     r0,#2
00009e  f7fffffe          BL       CmdSendToUnderGround
;;;653    		DoseResend = CT_motor_run;
0000a2  2002              MOVS     r0,#2
0000a4  4930              LDR      r1,|L8.360|
0000a6  7008              STRB     r0,[r1,#0]
                  |L8.168|
;;;654    	}
;;;655    	if(motor_close_flag == 1)
0000a8  4837              LDR      r0,|L8.392|
0000aa  7800              LDRB     r0,[r0,#0]  ; motor_close_flag
0000ac  2801              CMP      r0,#1
0000ae  d10a              BNE      |L8.198|
;;;656    	{
;;;657    		motor_flag = 0;
0000b0  2000              MOVS     r0,#0
0000b2  4934              LDR      r1,|L8.388|
0000b4  7008              STRB     r0,[r1,#0]
;;;658    		motor_close_flag = 0;
0000b6  4934              LDR      r1,|L8.392|
0000b8  7008              STRB     r0,[r1,#0]
;;;659    		CmdSendToUnderGround(CT_motor_stop);
0000ba  2003              MOVS     r0,#3
0000bc  f7fffffe          BL       CmdSendToUnderGround
;;;660    		DoseResend = CT_motor_stop;
0000c0  2003              MOVS     r0,#3
0000c2  4929              LDR      r1,|L8.360|
0000c4  7008              STRB     r0,[r1,#0]
                  |L8.198|
;;;661    	}
;;;662    	if(gama_open_flag == 1)
0000c6  4831              LDR      r0,|L8.396|
0000c8  7800              LDRB     r0,[r0,#0]  ; gama_open_flag
0000ca  2801              CMP      r0,#1
0000cc  d10a              BNE      |L8.228|
;;;663    	{
;;;664    		gama_flag = 0;
0000ce  2000              MOVS     r0,#0
0000d0  492f              LDR      r1,|L8.400|
0000d2  7008              STRB     r0,[r1,#0]
;;;665    		gama_open_flag = 0;
0000d4  492d              LDR      r1,|L8.396|
0000d6  7008              STRB     r0,[r1,#0]
;;;666    		CmdSendToUnderGround(CT_gama_open);
0000d8  200b              MOVS     r0,#0xb
0000da  f7fffffe          BL       CmdSendToUnderGround
;;;667    		DoseResend = CT_gama_open;
0000de  200b              MOVS     r0,#0xb
0000e0  4921              LDR      r1,|L8.360|
0000e2  7008              STRB     r0,[r1,#0]
                  |L8.228|
;;;668    	}
;;;669    	if(gama_close_flag == 1)
0000e4  482b              LDR      r0,|L8.404|
0000e6  7800              LDRB     r0,[r0,#0]  ; gama_close_flag
0000e8  2801              CMP      r0,#1
0000ea  d10a              BNE      |L8.258|
;;;670    	{
;;;671    		gama_flag = 0;
0000ec  2000              MOVS     r0,#0
0000ee  4928              LDR      r1,|L8.400|
0000f0  7008              STRB     r0,[r1,#0]
;;;672    		gama_close_flag = 0;
0000f2  4928              LDR      r1,|L8.404|
0000f4  7008              STRB     r0,[r1,#0]
;;;673    		CmdSendToUnderGround(CT_gama_close);
0000f6  200c              MOVS     r0,#0xc
0000f8  f7fffffe          BL       CmdSendToUnderGround
;;;674    		DoseResend = CT_gama_close;
0000fc  200c              MOVS     r0,#0xc
0000fe  491a              LDR      r1,|L8.360|
000100  7008              STRB     r0,[r1,#0]
                  |L8.258|
;;;675    	}
;;;676    	if(pressure_up_flag == 1)
000102  4825              LDR      r0,|L8.408|
000104  7800              LDRB     r0,[r0,#0]  ; pressure_up_flag
000106  2801              CMP      r0,#1
000108  d108              BNE      |L8.284|
;;;677    	{
;;;678    		pressuer_flag = 0;
00010a  2000              MOVS     r0,#0
00010c  4923              LDR      r1,|L8.412|
00010e  7008              STRB     r0,[r1,#0]
;;;679    		CmdSendToUnderGround(CT_pressure_up);
000110  2008              MOVS     r0,#8
000112  f7fffffe          BL       CmdSendToUnderGround
;;;680    		DoseResend = CT_pressure_up;
000116  2008              MOVS     r0,#8
000118  4913              LDR      r1,|L8.360|
00011a  7008              STRB     r0,[r1,#0]
                  |L8.284|
;;;681    	}
;;;682    
;;;683    	if(pressure_keep_flag == 1)
00011c  4820              LDR      r0,|L8.416|
00011e  7800              LDRB     r0,[r0,#0]  ; pressure_keep_flag
000120  2801              CMP      r0,#1
000122  d10e              BNE      |L8.322|
;;;684    	{
;;;685    		pressure_up_flag = 0;////按键弹起时候，禁止上一包数据UP或DOWN下发，会导致井下 数据接收不正确
000124  2000              MOVS     r0,#0
000126  491c              LDR      r1,|L8.408|
000128  7008              STRB     r0,[r1,#0]
;;;686    		pressure_down_flag = 0;
00012a  491e              LDR      r1,|L8.420|
00012c  7008              STRB     r0,[r1,#0]
;;;687    		pressuer_flag = 0;
00012e  491b              LDR      r1,|L8.412|
000130  7008              STRB     r0,[r1,#0]
;;;688    		pressure_keep_flag = 0;
000132  491b              LDR      r1,|L8.416|
000134  7008              STRB     r0,[r1,#0]
;;;689    		CmdSendToUnderGround(CT_pressure_hold);
000136  2009              MOVS     r0,#9
000138  f7fffffe          BL       CmdSendToUnderGround
;;;690    		DoseResend = CT_pressure_hold;
00013c  2009              MOVS     r0,#9
00013e  490a              LDR      r1,|L8.360|
000140  7008              STRB     r0,[r1,#0]
                  |L8.322|
;;;691    	}
;;;692    	if(pressure_down_flag == 1)
000142  4818              LDR      r0,|L8.420|
000144  7800              LDRB     r0,[r0,#0]  ; pressure_down_flag
000146  2801              CMP      r0,#1
000148  d108              BNE      |L8.348|
;;;693    	{
;;;694    		pressuer_flag = 0;
00014a  2000              MOVS     r0,#0
00014c  4913              LDR      r1,|L8.412|
00014e  7008              STRB     r0,[r1,#0]
;;;695    		CmdSendToUnderGround(CT_pressure_down);
000150  200a              MOVS     r0,#0xa
000152  f7fffffe          BL       CmdSendToUnderGround
;;;696    		DoseResend = CT_pressure_down;
000156  200a              MOVS     r0,#0xa
000158  4903              LDR      r1,|L8.360|
00015a  7008              STRB     r0,[r1,#0]
                  |L8.348|
;;;697    	}
;;;698    }
00015c  bd10              POP      {r4,pc}
;;;699    
                          ENDP

00015e  0000              DCW      0x0000
                  |L8.352|
                          DCD      Push_open_flag
                  |L8.356|
                          DCD      push_flag
                  |L8.360|
                          DCD      DoseResend
                  |L8.364|
                          DCD      Push_close_flag
                  |L8.368|
                          DCD      bit_process_open_flag
                  |L8.372|
                          DCD      start_push
                  |L8.376|
                          DCD      bit_process_flag
                  |L8.380|
                          DCD      bit_process_close_flag
                  |L8.384|
                          DCD      motor_open_flag
                  |L8.388|
                          DCD      motor_flag
                  |L8.392|
                          DCD      motor_close_flag
                  |L8.396|
                          DCD      gama_open_flag
                  |L8.400|
                          DCD      gama_flag
                  |L8.404|
                          DCD      gama_close_flag
                  |L8.408|
                          DCD      pressure_up_flag
                  |L8.412|
                          DCD      pressuer_flag
                  |L8.416|
                          DCD      pressure_keep_flag
                  |L8.420|
                          DCD      pressure_down_flag

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  Torque_buf
                          %        15
                  H_buf
                          %        15
                  L_buf
                          %        15

                          AREA ||.data||, DATA, ALIGN=2

                  Key_status
000000  00                DCB      0x00
                  MD_commd_flag
000001  00                DCB      0x00
                  MD_cmd_dist_flag
000002  00                DCB      0x00
                  push_flag
000003  00                DCB      0x00
                  motor_flag
000004  00                DCB      0x00
                  pressuer_flag
000005  00                DCB      0x00
                  bit_process_flag
000006  00                DCB      0x00
                  gama_flag
000007  00                DCB      0x00
                  flag_yellow
000008  00                DCB      0x00
                  upflag
000009  00                DCB      0x00
                  downflag
00000a  0000              DCB      0x00,0x00
                  motor_cycle_lcd
00000c  0000              DCB      0x00,0x00
                  motor_cycle_flag
00000e  00                DCB      0x00
                  flag_allkey
00000f  00                DCB      0x00
                  Push_open_flag
000010  00                DCB      0x00
                  Push_close_flag
000011  00                DCB      0x00
                  bit_process_open_flag
000012  00                DCB      0x00
                  bit_process_close_flag
000013  00                DCB      0x00
                  motor_open_flag
000014  00                DCB      0x00
                  motor_close_flag
000015  00                DCB      0x00
                  gama_open_flag
000016  00                DCB      0x00
                  gama_close_flag
000017  00                DCB      0x00
                  pressure_up_flag
000018  00                DCB      0x00
                  pressure_down_flag
000019  00                DCB      0x00
                  pressure_keep_flag
00001a  0000              DCB      0x00,0x00
                  _cmd
00001c  0000              DCB      0x00,0x00
                  Key_respstatus_data
00001e  0000              DCW      0x0000
                  commd_response_cnt
000020  00000000          DCB      0x00,0x00,0x00,0x00
                  tor_data
                          DCD      0x00000000
                  tspe_data
                          DCD      0x00000000
                  power_data
                          DCD      0x00000000
                  tor_value
                          DCD      0x00000000
                  tspe_value
                          DCD      0x00000000
                  power_value
                          DCD      0x00000000
                  tor_order
00003c  00                DCB      0x00
                  tspe_order
00003d  00                DCB      0x00
                  power_order
00003e  0000              DCB      0x00,0x00
                  tor
                          DCD      0x00000000
                  tspe
                          DCD      0x00000000
                  power
                          DCD      0x00000000
                  tor_uphole
00004c  0000              DCB      0x00,0x00
                  tspe_uphole
00004e  0000              DCB      0x00,0x00
                  DoseResend
000050  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\app\\src\\ERSC_HT_250ms.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_ERSC_HT_250ms_c_3f648790____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___15_ERSC_HT_250ms_c_3f648790____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_ERSC_HT_250ms_c_3f648790____REVSH|
#line 128
|__asm___15_ERSC_HT_250ms_c_3f648790____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
