; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\obj\main.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\main.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\Libraries\CMSIS\Include -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User\app\inc -I..\..\User\FatFS\src -I..\..\User\Mass_Storage\inc -I..\..\User\LCD_Driver -I..\..\User\SYSTEM\sys -I..\..\User\Debugprintf -I..\..\User\LogDebug -I..\..\User\app\inc -I..\..\User\app\src -I..\..\User\bsp\inc -I..\..\User\bsp\src -I.\RTE\_Flash -ID:\Keil_v5\ARM\Packs\ARM\CMSIS\5.5.1\CMSIS\Core\Include -ID:\Keil_v5\ARM\Packs\Keil\STM32F1xx_DFP\2.1.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=527 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\flash\obj\main.crf ..\..\User\app\src\main.c]
                          THUMB

                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                  main PROC
;;;41     */
;;;42     int main(void)
000000  f7fffffe          BL       bsp_Init
;;;43     {
;;;44     	/*ST固件库中的启动文件已经执行了 SystemInit() 函数，该函数在 system_stm32f4xx.c 文件，主要功能是
;;;45     	配置CPU系统的时钟，内部Flash访问时序，配置FSMC用于外部SRAM*/
;;;46     	bsp_Init();		/* 硬件初始化 */
;;;47     	bsp_StartAutoTimer(0,250);
000004  21fa              MOVS     r1,#0xfa
000006  2000              MOVS     r0,#0
000008  f7fffffe          BL       bsp_StartAutoTimer
;;;48     	bsp_DelayMS(2000);////屏幕初始化慢
00000c  f44f60fa          MOV      r0,#0x7d0
000010  f7fffffe          BL       bsp_DelayMS
;;;49     	init_key();//按键扫描
000014  f7fffffe          BL       init_key
;;;50     	Initialvoltagevalue();//偏置电压采集
000018  f7fffffe          BL       Initialvoltagevalue
;;;51     	bsp_LedOn(1);//初始化完成，点亮LED
00001c  2001              MOVS     r0,#1
00001e  f7fffffe          BL       bsp_LedOn
;;;52     	
;;;53     
;;;54     	while (1)
000022  e051              B        |L1.200|
                  |L1.36|
;;;55     	{	
;;;56     		HT_250ms_Timerout();																//250ms轮询
000024  f7fffffe          BL       HT_250ms_Timerout
;;;57     		Downdata_storage();																	//串口5接收井下数据，数据解析
000028  f7fffffe          BL       Downdata_storage
;;;58     		if(Key_disable_flag == 0 && _7538_flag == 1)				//上位机失能，按键使能
00002c  4827              LDR      r0,|L1.204|
00002e  7800              LDRB     r0,[r0,#0]  ; Key_disable_flag
000030  b940              CBNZ     r0,|L1.68|
000032  4827              LDR      r0,|L1.208|
000034  7800              LDRB     r0,[r0,#0]  ; _7538_flag
000036  2801              CMP      r0,#1
000038  d104              BNE      |L1.68|
;;;59     			{
;;;60     				KeyDistStatusUpdata(bsp_GetKey());							//按键扫描
00003a  f7fffffe          BL       bsp_GetKey
00003e  4604              MOV      r4,r0
000040  f7fffffe          BL       KeyDistStatusUpdata
                  |L1.68|
;;;61     			}
;;;62     		ETH_data_storage();																	//以太网串口1接收上位机数据，数据解析
000044  f7fffffe          BL       ETH_data_storage
;;;63     		BP_data_storage();																	//485串口2接收变频机箱数据，数据解析
000048  f7fffffe          BL       BP_data_storage
;;;64     			
;;;65     		if((MD_commd_flag == 1)&&((MD_timer >= 150)))				//定时时间到,或者变频机箱数据接收完成
00004c  4821              LDR      r0,|L1.212|
00004e  7800              LDRB     r0,[r0,#0]  ; MD_commd_flag
000050  2801              CMP      r0,#1
000052  d11c              BNE      |L1.142|
000054  4820              LDR      r0,|L1.216|
000056  7800              LDRB     r0,[r0,#0]  ; MD_timer
000058  2896              CMP      r0,#0x96
00005a  db18              BLT      |L1.142|
;;;66     		{
;;;67     			MD_commd_flag = 0;																//马达按键动作清零
00005c  2000              MOVS     r0,#0
00005e  491d              LDR      r1,|L1.212|
000060  7008              STRB     r0,[r1,#0]
;;;68     
;;;69     			if((Key_status & 0x01) == 1)											//马达指令 下发
000062  481e              LDR      r0,|L1.220|
000064  7800              LDRB     r0,[r0,#0]  ; Key_status
000066  f0000001          AND      r0,r0,#1
00006a  b140              CBZ      r0,|L1.126|
;;;70     				{
;;;71     					Sendkeycmd(MD_DIST_REG,1);
00006c  2101              MOVS     r1,#1
00006e  f2423011          MOV      r0,#0x2311
000072  f7fffffe          BL       Sendkeycmd
;;;72     					BP_commd_flag = 0;
000076  2000              MOVS     r0,#0
000078  4919              LDR      r1,|L1.224|
00007a  7008              STRB     r0,[r1,#0]
00007c  e007              B        |L1.142|
                  |L1.126|
;;;73     				}
;;;74     			else
;;;75     				{
;;;76     					Sendkeycmd(MD_DIST_REG,0);
00007e  2100              MOVS     r1,#0
000080  f2423011          MOV      r0,#0x2311
000084  f7fffffe          BL       Sendkeycmd
;;;77     					BP_commd_flag = 0;
000088  2000              MOVS     r0,#0
00008a  4915              LDR      r1,|L1.224|
00008c  7008              STRB     r0,[r1,#0]
                  |L1.142|
;;;78     				}	
;;;79     		}
;;;80     
;;;81     		if((Motor_status_flag == 1)&&(BP_commd_flag == 0))//马达反馈状态 ，变频机箱接收数据完成，
00008e  4815              LDR      r0,|L1.228|
000090  7800              LDRB     r0,[r0,#0]  ; Motor_status_flag
000092  2801              CMP      r0,#1
000094  d115              BNE      |L1.194|
000096  4812              LDR      r0,|L1.224|
000098  7800              LDRB     r0,[r0,#0]  ; BP_commd_flag
00009a  b990              CBNZ     r0,|L1.194|
;;;82     		{
;;;83     			Motor_status_flag = 0;
00009c  2000              MOVS     r0,#0
00009e  4911              LDR      r1,|L1.228|
0000a0  7008              STRB     r0,[r1,#0]
;;;84     			if((Key_respstatus_data & 0x01) == 1)						//马达反馈指令下发
0000a2  4811              LDR      r0,|L1.232|
0000a4  7800              LDRB     r0,[r0,#0]  ; Key_respstatus_data
0000a6  f0000001          AND      r0,r0,#1
0000aa  b128              CBZ      r0,|L1.184|
;;;85     				{
;;;86     					Sendkeycmd(MD_RESPONSE_REG,1);	
0000ac  2101              MOVS     r1,#1
0000ae  f2423012          MOV      r0,#0x2312
0000b2  f7fffffe          BL       Sendkeycmd
0000b6  e004              B        |L1.194|
                  |L1.184|
;;;87     				}
;;;88     			else
;;;89     				{
;;;90     					Sendkeycmd(MD_RESPONSE_REG,0);
0000b8  2100              MOVS     r1,#0
0000ba  f2423012          MOV      r0,#0x2312
0000be  f7fffffe          BL       Sendkeycmd
                  |L1.194|
;;;91     				}
;;;92     		}	
;;;93     			
;;;94     		bsp_LedOn(2);
0000c2  2002              MOVS     r0,#2
0000c4  f7fffffe          BL       bsp_LedOn
                  |L1.200|
0000c8  e7ac              B        |L1.36|
;;;95     	}		
;;;96     }	
;;;97     
                          ENDP

0000ca  0000              DCW      0x0000
                  |L1.204|
                          DCD      Key_disable_flag
                  |L1.208|
                          DCD      _7538_flag
                  |L1.212|
                          DCD      MD_commd_flag
                  |L1.216|
                          DCD      MD_timer
                  |L1.220|
                          DCD      Key_status
                  |L1.224|
                          DCD      BP_commd_flag
                  |L1.228|
                          DCD      Motor_status_flag
                  |L1.232|
                          DCD      Key_respstatus_data

                          AREA ||.data||, DATA, ALIGN=1

                  DH_data_timer
000000  0000              DCW      0x0000
                  timer_out
000002  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\app\\src\\main.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_688c2fa0____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___6_main_c_688c2fa0____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_688c2fa0____REVSH|
#line 128
|__asm___6_main_c_688c2fa0____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
