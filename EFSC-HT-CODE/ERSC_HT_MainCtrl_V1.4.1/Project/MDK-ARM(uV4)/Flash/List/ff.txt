; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\obj\ff.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\ff.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\Libraries\CMSIS\Include -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User\app\inc -I..\..\User\FatFS\src -I..\..\User\Mass_Storage\inc -I..\..\User\LCD_Driver -I..\..\User\SYSTEM\sys -I..\..\User\Debugprintf -I..\..\User\LogDebug -I..\..\User\app\inc -I..\..\User\app\src -I..\..\User\bsp\inc -I..\..\User\bsp\src -I.\RTE\_Flash -ID:\Keil_v5\ARM\Packs\ARM\CMSIS\5.5.1\CMSIS\Core\Include -ID:\Keil_v5\ARM\Packs\Keil\STM32F1xx_DFP\2.1.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=527 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\flash\obj\ff.crf ..\..\User\FatFS\src\ff.c]
                          THUMB

                          AREA ||i.check_fs||, CODE, READONLY, ALIGN=2

                  check_fs PROC
;;;2135   static
;;;2136   BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
000000  b570              PUSH     {r4-r6,lr}
;;;2137   	FATFS* fs,	/* File system object */
;;;2138   	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
;;;2139   )
;;;2140   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;2141   	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
000006  2000              MOVS     r0,#0
000008  7120              STRB     r0,[r4,#4]
00000a  1e40              SUBS     r0,r0,#1
00000c  62e0              STR      r0,[r4,#0x2c]
;;;2142   	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
00000e  4629              MOV      r1,r5
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       move_window
000016  b108              CBZ      r0,|L1.28|
;;;2143   		return 3;
000018  2003              MOVS     r0,#3
                  |L1.26|
;;;2144   
;;;2145   	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
;;;2146   		return 2;
;;;2147   
;;;2148   	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
;;;2149   		return 0;
;;;2150   	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
;;;2151   		return 0;
;;;2152   
;;;2153   	return 1;
;;;2154   }
00001a  bd70              POP      {r4-r6,pc}
                  |L1.28|
00001c  f894122e          LDRB     r1,[r4,#0x22e]        ;2145
000020  f894022f          LDRB     r0,[r4,#0x22f]        ;2145
000024  ea412000          ORR      r0,r1,r0,LSL #8       ;2145
000028  f64a2155          MOV      r1,#0xaa55            ;2145
00002c  4288              CMP      r0,r1                 ;2145
00002e  d001              BEQ      |L1.52|
000030  2002              MOVS     r0,#2                 ;2146
000032  e7f2              B        |L1.26|
                  |L1.52|
000034  f8940069          LDRB     r0,[r4,#0x69]         ;2148
000038  0601              LSLS     r1,r0,#24             ;2148
00003a  f8940068          LDRB     r0,[r4,#0x68]         ;2148
00003e  ea414100          ORR      r1,r1,r0,LSL #16      ;2148
000042  f8940067          LDRB     r0,[r4,#0x67]         ;2148
000046  ea412000          ORR      r0,r1,r0,LSL #8       ;2148
00004a  f8941066          LDRB     r1,[r4,#0x66]         ;2148
00004e  4308              ORRS     r0,r0,r1              ;2148
000050  f020407f          BIC      r0,r0,#0xff000000     ;2148
000054  490d              LDR      r1,|L1.140|
000056  4288              CMP      r0,r1                 ;2148
000058  d101              BNE      |L1.94|
00005a  2000              MOVS     r0,#0                 ;2149
00005c  e7dd              B        |L1.26|
                  |L1.94|
00005e  f8940085          LDRB     r0,[r4,#0x85]         ;2150
000062  0601              LSLS     r1,r0,#24             ;2150
000064  f8940084          LDRB     r0,[r4,#0x84]         ;2150
000068  ea414100          ORR      r1,r1,r0,LSL #16      ;2150
00006c  f8940083          LDRB     r0,[r4,#0x83]         ;2150
000070  ea412000          ORR      r0,r1,r0,LSL #8       ;2150
000074  f8941082          LDRB     r1,[r4,#0x82]         ;2150
000078  4308              ORRS     r0,r0,r1              ;2150
00007a  f020407f          BIC      r0,r0,#0xff000000     ;2150
00007e  4903              LDR      r1,|L1.140|
000080  4288              CMP      r0,r1                 ;2150
000082  d101              BNE      |L1.136|
000084  2000              MOVS     r0,#0                 ;2151
000086  e7c8              B        |L1.26|
                  |L1.136|
000088  2001              MOVS     r0,#1                 ;2153
00008a  e7c6              B        |L1.26|
;;;2155   
                          ENDP

                  |L1.140|
                          DCD      0x00544146

                          AREA ||i.chk_chr||, CODE, READONLY, ALIGN=1

                  chk_chr PROC
;;;597    static
;;;598    int chk_chr (const char* str, int chr) {
000000  4602              MOV      r2,r0
;;;599    	while (*str && *str != chr) str++;
000002  e000              B        |L2.6|
                  |L2.4|
000004  1c52              ADDS     r2,r2,#1
                  |L2.6|
000006  7810              LDRB     r0,[r2,#0]
000008  b110              CBZ      r0,|L2.16|
00000a  7810              LDRB     r0,[r2,#0]
00000c  4288              CMP      r0,r1
00000e  d1f9              BNE      |L2.4|
                  |L2.16|
;;;600    	return *str;
000010  7810              LDRB     r0,[r2,#0]
;;;601    }
000012  4770              BX       lr
;;;602    
                          ENDP


                          AREA ||i.chk_lock||, CODE, READONLY, ALIGN=2

                  chk_lock PROC
;;;643    static
;;;644    FRESULT chk_lock (	/* Check if the file can be accessed */
000000  b530              PUSH     {r4,r5,lr}
;;;645    	DIR* dp,		/* Directory object pointing the file to be checked */
;;;646    	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
;;;647    )
;;;648    {
000002  4602              MOV      r2,r0
000004  460b              MOV      r3,r1
;;;649    	UINT i, be;
;;;650    
;;;651    	/* Search file semaphore table */
;;;652    	for (i = be = 0; i < _FS_LOCK; i++) {
000006  2000              MOVS     r0,#0
000008  4604              MOV      r4,r0
00000a  4601              MOV      r1,r0
00000c  e021              B        |L3.82|
                  |L3.14|
;;;653    		if (Files[i].fs) {	/* Existing entry */
00000e  eb010041          ADD      r0,r1,r1,LSL #1
000012  4d1d              LDR      r5,|L3.136|
000014  f8550020          LDR      r0,[r5,r0,LSL #2]
000018  b1c8              CBZ      r0,|L3.78|
;;;654    			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
00001a  eb010041          ADD      r0,r1,r1,LSL #1
00001e  f8550020          LDR      r0,[r5,r0,LSL #2]
000022  6815              LDR      r5,[r2,#0]
000024  42a8              CMP      r0,r5
000026  d113              BNE      |L3.80|
;;;655    				Files[i].clu == dp->sclust &&
000028  eb010041          ADD      r0,r1,r1,LSL #1
00002c  4d16              LDR      r5,|L3.136|
00002e  eb050080          ADD      r0,r5,r0,LSL #2
000032  6840              LDR      r0,[r0,#4]
000034  6895              LDR      r5,[r2,#8]
000036  42a8              CMP      r0,r5
000038  d10a              BNE      |L3.80|
;;;656    				Files[i].idx == dp->index) break;
00003a  eb010041          ADD      r0,r1,r1,LSL #1
00003e  4d12              LDR      r5,|L3.136|
000040  eb050080          ADD      r0,r5,r0,LSL #2
000044  8900              LDRH     r0,[r0,#8]
000046  88d5              LDRH     r5,[r2,#6]
000048  42a8              CMP      r0,r5
00004a  d101              BNE      |L3.80|
00004c  e003              B        |L3.86|
                  |L3.78|
;;;657    		} else {			/* Blank entry */
;;;658    			be = 1;
00004e  2401              MOVS     r4,#1
                  |L3.80|
000050  1c49              ADDS     r1,r1,#1              ;652
                  |L3.82|
000052  2903              CMP      r1,#3                 ;652
000054  d3db              BCC      |L3.14|
                  |L3.86|
000056  bf00              NOP                            ;656
;;;659    		}
;;;660    	}
;;;661    	if (i == _FS_LOCK)	/* The object is not opened */
000058  2903              CMP      r1,#3
00005a  d106              BNE      |L3.106|
;;;662    		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
00005c  b90c              CBNZ     r4,|L3.98|
00005e  2b02              CMP      r3,#2
000060  d101              BNE      |L3.102|
                  |L3.98|
000062  2000              MOVS     r0,#0
                  |L3.100|
;;;663    
;;;664    	/* The object has been opened. Reject any open against writing file and all write mode open */
;;;665    	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
;;;666    }
000064  bd30              POP      {r4,r5,pc}
                  |L3.102|
000066  2012              MOVS     r0,#0x12              ;662
000068  e7fc              B        |L3.100|
                  |L3.106|
00006a  b943              CBNZ     r3,|L3.126|
00006c  eb010041          ADD      r0,r1,r1,LSL #1       ;665
000070  4d05              LDR      r5,|L3.136|
000072  eb050080          ADD      r0,r5,r0,LSL #2       ;665
000076  8940              LDRH     r0,[r0,#0xa]          ;665
000078  f5b07f80          CMP      r0,#0x100             ;665
00007c  d101              BNE      |L3.130|
                  |L3.126|
00007e  2010              MOVS     r0,#0x10              ;665
000080  e7f0              B        |L3.100|
                  |L3.130|
000082  2000              MOVS     r0,#0                 ;665
000084  e7ee              B        |L3.100|
;;;667    
                          ENDP

000086  0000              DCW      0x0000
                  |L3.136|
                          DCD      Files

                          AREA ||i.clear_lock||, CODE, READONLY, ALIGN=2

                  clear_lock PROC
;;;734    static
;;;735    void clear_lock (	/* Clear lock entries of the volume */
000000  b510              PUSH     {r4,lr}
;;;736    	FATFS *fs
;;;737    )
;;;738    {
000002  4601              MOV      r1,r0
;;;739    	UINT i;
;;;740    
;;;741    	for (i = 0; i < _FS_LOCK; i++) {
000004  2000              MOVS     r0,#0
000006  e00d              B        |L4.36|
                  |L4.8|
;;;742    		if (Files[i].fs == fs) Files[i].fs = 0;
000008  eb000240          ADD      r2,r0,r0,LSL #1
00000c  4b07              LDR      r3,|L4.44|
00000e  f8532022          LDR      r2,[r3,r2,LSL #2]
000012  428a              CMP      r2,r1
000014  d105              BNE      |L4.34|
000016  2200              MOVS     r2,#0
000018  eb000340          ADD      r3,r0,r0,LSL #1
00001c  4c03              LDR      r4,|L4.44|
00001e  f8442023          STR      r2,[r4,r3,LSL #2]
                  |L4.34|
000022  1c40              ADDS     r0,r0,#1              ;741
                  |L4.36|
000024  2803              CMP      r0,#3                 ;741
000026  d3ef              BCC      |L4.8|
;;;743    	}
;;;744    }
000028  bd10              POP      {r4,pc}
;;;745    #endif
                          ENDP

00002a  0000              DCW      0x0000
                  |L4.44|
                          DCD      Files

                          AREA ||i.clust2sect||, CODE, READONLY, ALIGN=1

                  clust2sect PROC
;;;846    
;;;847    DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
000000  4602              MOV      r2,r0
;;;848    	FATFS* fs,		/* File system object */
;;;849    	DWORD clst		/* Cluster# to be converted */
;;;850    )
;;;851    {
;;;852    	clst -= 2;
000002  1e89              SUBS     r1,r1,#2
;;;853    	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
000004  6950              LDR      r0,[r2,#0x14]
000006  1e80              SUBS     r0,r0,#2
000008  4288              CMP      r0,r1
00000a  d801              BHI      |L5.16|
00000c  2000              MOVS     r0,#0
                  |L5.14|
;;;854    	return clst * fs->csize + fs->database;
;;;855    }
00000e  4770              BX       lr
                  |L5.16|
000010  7893              LDRB     r3,[r2,#2]            ;854
000012  6a90              LDR      r0,[r2,#0x28]         ;854
000014  fb010003          MLA      r0,r1,r3,r0           ;854
000018  e7f9              B        |L5.14|
;;;856    
                          ENDP


                          AREA ||i.cmp_lfn||, CODE, READONLY, ALIGN=2

                  cmp_lfn PROC
;;;1308   static
;;;1309   int cmp_lfn (			/* 1:Matched, 0:Not matched */
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;1310   	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
;;;1311   	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
;;;1312   )
;;;1313   {
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
;;;1314   	UINT i, s;
;;;1315   	WCHAR wc, uc;
;;;1316   
;;;1317   
;;;1318   	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
000008  7820              LDRB     r0,[r4,#0]
00000a  f0200040          BIC      r0,r0,#0x40
00000e  1e40              SUBS     r0,r0,#1
000010  eb000180          ADD      r1,r0,r0,LSL #2
000014  eb0106c0          ADD      r6,r1,r0,LSL #3
;;;1319   	s = 0; wc = 1;
000018  2700              MOVS     r7,#0
00001a  f04f0801          MOV      r8,#1
;;;1320   	do {
00001e  bf00              NOP      
                  |L6.32|
;;;1321   		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
000020  481a              LDR      r0,|L6.140|
000022  5dc0              LDRB     r0,[r0,r7]
000024  5c20              LDRB     r0,[r4,r0]
000026  4919              LDR      r1,|L6.140|
000028  5dc9              LDRB     r1,[r1,r7]
00002a  4421              ADD      r1,r1,r4
00002c  7849              LDRB     r1,[r1,#1]
00002e  ea402901          ORR      r9,r0,r1,LSL #8
;;;1322   		if (wc) {	/* Last character has not been processed */
000032  f1b80f00          CMP      r8,#0
000036  d010              BEQ      |L6.90|
;;;1323   			wc = ff_wtoupper(uc);		/* Convert it to upper case */
000038  4648              MOV      r0,r9
00003a  f7fffffe          BL       ff_wtoupper
00003e  4680              MOV      r8,r0
;;;1324   			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
000040  2eff              CMP      r6,#0xff
000042  d207              BCS      |L6.84|
000044  4631              MOV      r1,r6
000046  1c76              ADDS     r6,r6,#1
000048  f8350011          LDRH     r0,[r5,r1,LSL #1]
00004c  f7fffffe          BL       ff_wtoupper
000050  4540              CMP      r0,r8
000052  d008              BEQ      |L6.102|
                  |L6.84|
;;;1325   				return 0;				/* Not matched */
000054  2000              MOVS     r0,#0
                  |L6.86|
;;;1326   		} else {
;;;1327   			if (uc != 0xFFFF) return 0;	/* Check filler */
;;;1328   		}
;;;1329   	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
;;;1330   
;;;1331   	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
;;;1332   		return 0;
;;;1333   
;;;1334   	return 1;						/* The part of LFN matched */
;;;1335   }
000056  e8bd87f0          POP      {r4-r10,pc}
                  |L6.90|
00005a  f64f70ff          MOV      r0,#0xffff            ;1327
00005e  4581              CMP      r9,r0                 ;1327
000060  d001              BEQ      |L6.102|
000062  2000              MOVS     r0,#0                 ;1327
000064  e7f7              B        |L6.86|
                  |L6.102|
000066  1c78              ADDS     r0,r7,#1              ;1329
000068  4607              MOV      r7,r0                 ;1329
00006a  280d              CMP      r0,#0xd               ;1329
00006c  d3d8              BCC      |L6.32|
00006e  7820              LDRB     r0,[r4,#0]            ;1331
000070  f0000040          AND      r0,r0,#0x40           ;1331
000074  b138              CBZ      r0,|L6.134|
000076  f1b80f00          CMP      r8,#0                 ;1331
00007a  d004              BEQ      |L6.134|
00007c  f8350016          LDRH     r0,[r5,r6,LSL #1]     ;1331
000080  b108              CBZ      r0,|L6.134|
000082  2000              MOVS     r0,#0                 ;1332
000084  e7e7              B        |L6.86|
                  |L6.134|
000086  2001              MOVS     r0,#1                 ;1334
000088  e7e5              B        |L6.86|
;;;1336   
                          ENDP

00008a  0000              DCW      0x0000
                  |L6.140|
                          DCD      LfnOfs

                          AREA ||i.create_chain||, CODE, READONLY, ALIGN=1

                  create_chain PROC
;;;1026   static
;;;1027   DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;1028   	FATFS* fs,			/* File system object */
;;;1029   	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
;;;1030   )
;;;1031   {
000004  4604              MOV      r4,r0
000006  4689              MOV      r9,r1
;;;1032   	DWORD cs, ncl, scl;
;;;1033   	FRESULT res;
;;;1034   
;;;1035   
;;;1036   	if (clst == 0) {		/* Create a new chain */
000008  f1b90f00          CMP      r9,#0
00000c  d106              BNE      |L7.28|
;;;1037   		scl = fs->last_clust;			/* Get suggested start point */
00000e  68e7              LDR      r7,[r4,#0xc]
;;;1038   		if (!scl || scl >= fs->n_fatent) scl = 1;
000010  b117              CBZ      r7,|L7.24|
000012  6960              LDR      r0,[r4,#0x14]
000014  42b8              CMP      r0,r7
000016  d815              BHI      |L7.68|
                  |L7.24|
000018  2701              MOVS     r7,#1
00001a  e013              B        |L7.68|
                  |L7.28|
;;;1039   	}
;;;1040   	else {					/* Stretch the current chain */
;;;1041   		cs = get_fat(fs, clst);			/* Check the cluster status */
00001c  4649              MOV      r1,r9
00001e  4620              MOV      r0,r4
000020  f7fffffe          BL       get_fat
000024  4606              MOV      r6,r0
;;;1042   		if (cs < 2) return 1;			/* Invalid value */
000026  2e02              CMP      r6,#2
000028  d202              BCS      |L7.48|
00002a  2001              MOVS     r0,#1
                  |L7.44|
;;;1043   		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
;;;1044   		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
;;;1045   		scl = clst;
;;;1046   	}
;;;1047   
;;;1048   	ncl = scl;				/* Start cluster */
;;;1049   	for (;;) {
;;;1050   		ncl++;							/* Next cluster */
;;;1051   		if (ncl >= fs->n_fatent) {		/* Check wrap around */
;;;1052   			ncl = 2;
;;;1053   			if (ncl > scl) return 0;	/* No free cluster */
;;;1054   		}
;;;1055   		cs = get_fat(fs, ncl);			/* Get the cluster status */
;;;1056   		if (cs == 0) break;				/* Found a free cluster */
;;;1057   		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
;;;1058   			return cs;
;;;1059   		if (ncl == scl) return 0;		/* No free cluster */
;;;1060   	}
;;;1061   
;;;1062   	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
;;;1063   	if (res == FR_OK && clst != 0) {
;;;1064   		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
;;;1065   	}
;;;1066   	if (res == FR_OK) {
;;;1067   		fs->last_clust = ncl;			/* Update FSINFO */
;;;1068   		if (fs->free_clust != 0xFFFFFFFF) {
;;;1069   			fs->free_clust--;
;;;1070   			fs->fsi_flag |= 1;
;;;1071   		}
;;;1072   	} else {
;;;1073   		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
;;;1074   	}
;;;1075   
;;;1076   	return ncl;		/* Return new cluster number or error code */
;;;1077   }
00002c  e8bd87f0          POP      {r4-r10,pc}
                  |L7.48|
000030  1c70              ADDS     r0,r6,#1              ;1043
000032  b908              CBNZ     r0,|L7.56|
000034  4630              MOV      r0,r6                 ;1043
000036  e7f9              B        |L7.44|
                  |L7.56|
000038  6960              LDR      r0,[r4,#0x14]         ;1044
00003a  42b0              CMP      r0,r6                 ;1044
00003c  d901              BLS      |L7.66|
00003e  4630              MOV      r0,r6                 ;1044
000040  e7f4              B        |L7.44|
                  |L7.66|
000042  464f              MOV      r7,r9                 ;1045
                  |L7.68|
000044  463d              MOV      r5,r7                 ;1048
000046  bf00              NOP                            ;1049
                  |L7.72|
000048  1c6d              ADDS     r5,r5,#1              ;1050
00004a  6960              LDR      r0,[r4,#0x14]         ;1051
00004c  42a8              CMP      r0,r5                 ;1051
00004e  d804              BHI      |L7.90|
000050  2502              MOVS     r5,#2                 ;1052
000052  42bd              CMP      r5,r7                 ;1053
000054  d901              BLS      |L7.90|
000056  2000              MOVS     r0,#0                 ;1053
000058  e7e8              B        |L7.44|
                  |L7.90|
00005a  4629              MOV      r1,r5                 ;1055
00005c  4620              MOV      r0,r4                 ;1055
00005e  f7fffffe          BL       get_fat
000062  4606              MOV      r6,r0                 ;1055
000064  b906              CBNZ     r6,|L7.104|
000066  e009              B        |L7.124|
                  |L7.104|
000068  1c70              ADDS     r0,r6,#1              ;1057
00006a  b108              CBZ      r0,|L7.112|
00006c  2e01              CMP      r6,#1                 ;1057
00006e  d101              BNE      |L7.116|
                  |L7.112|
000070  4630              MOV      r0,r6                 ;1058
000072  e7db              B        |L7.44|
                  |L7.116|
000074  42bd              CMP      r5,r7                 ;1059
000076  d1e7              BNE      |L7.72|
000078  2000              MOVS     r0,#0                 ;1059
00007a  e7d7              B        |L7.44|
                  |L7.124|
00007c  bf00              NOP                            ;1056
00007e  f06f4270          MVN      r2,#0xf0000000        ;1062
000082  4629              MOV      r1,r5                 ;1062
000084  4620              MOV      r0,r4                 ;1062
000086  f7fffffe          BL       put_fat
00008a  4680              MOV      r8,r0                 ;1062
00008c  f1b80f00          CMP      r8,#0                 ;1063
000090  d108              BNE      |L7.164|
000092  f1b90f00          CMP      r9,#0                 ;1063
000096  d005              BEQ      |L7.164|
000098  462a              MOV      r2,r5                 ;1064
00009a  4649              MOV      r1,r9                 ;1064
00009c  4620              MOV      r0,r4                 ;1064
00009e  f7fffffe          BL       put_fat
0000a2  4680              MOV      r8,r0                 ;1064
                  |L7.164|
0000a4  f1b80f00          CMP      r8,#0                 ;1066
0000a8  d10b              BNE      |L7.194|
0000aa  60e5              STR      r5,[r4,#0xc]          ;1067
0000ac  6920              LDR      r0,[r4,#0x10]         ;1068
0000ae  1c40              ADDS     r0,r0,#1              ;1068
0000b0  b178              CBZ      r0,|L7.210|
0000b2  6920              LDR      r0,[r4,#0x10]         ;1069
0000b4  1e40              SUBS     r0,r0,#1              ;1069
0000b6  6120              STR      r0,[r4,#0x10]         ;1069
0000b8  7960              LDRB     r0,[r4,#5]            ;1070
0000ba  f0400001          ORR      r0,r0,#1              ;1070
0000be  7160              STRB     r0,[r4,#5]            ;1070
0000c0  e007              B        |L7.210|
                  |L7.194|
0000c2  f1b80f01          CMP      r8,#1                 ;1073
0000c6  d102              BNE      |L7.206|
0000c8  f04f30ff          MOV      r0,#0xffffffff        ;1073
0000cc  e000              B        |L7.208|
                  |L7.206|
0000ce  2001              MOVS     r0,#1                 ;1073
                  |L7.208|
0000d0  4605              MOV      r5,r0                 ;1073
                  |L7.210|
0000d2  4628              MOV      r0,r5                 ;1076
0000d4  e7aa              B        |L7.44|
;;;1078   #endif /* !_FS_READONLY */
                          ENDP


                          AREA ||i.create_name||, CODE, READONLY, ALIGN=2

                  create_name PROC
;;;1804   static
;;;1805   FRESULT create_name (
000000  e92d4ff3          PUSH     {r0,r1,r4-r11,lr}
;;;1806   	DIR* dp,			/* Pointer to the directory object */
;;;1807   	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
;;;1808   )
;;;1809   {
000004  b083              SUB      sp,sp,#0xc
000006  4681              MOV      r9,r0
;;;1810   #if _USE_LFN	/* LFN configuration */
;;;1811   	BYTE b, cf;
;;;1812   	WCHAR w, *lfn;
;;;1813   	UINT i, ni, si, di;
;;;1814   	const TCHAR *p;
;;;1815   
;;;1816   	/* Create LFN in Unicode */
;;;1817   	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
000008  9804              LDR      r0,[sp,#0x10]
00000a  6800              LDR      r0,[r0,#0]
00000c  9001              STR      r0,[sp,#4]
00000e  e002              B        |L8.22|
                  |L8.16|
000010  9801              LDR      r0,[sp,#4]
000012  1c40              ADDS     r0,r0,#1
000014  9001              STR      r0,[sp,#4]
                  |L8.22|
000016  9801              LDR      r0,[sp,#4]
000018  7800              LDRB     r0,[r0,#0]
00001a  282f              CMP      r0,#0x2f
00001c  d0f8              BEQ      |L8.16|
00001e  9801              LDR      r0,[sp,#4]
000020  7800              LDRB     r0,[r0,#0]
000022  285c              CMP      r0,#0x5c
000024  d0f4              BEQ      |L8.16|
;;;1818   	lfn = dp->lfn;
000026  f8d9a020          LDR      r10,[r9,#0x20]
;;;1819   	si = di = 0;
00002a  2500              MOVS     r5,#0
00002c  462f              MOV      r7,r5
;;;1820   	for (;;) {
00002e  bf00              NOP      
                  |L8.48|
;;;1821   		w = p[si++];					/* Get a character */
000030  4638              MOV      r0,r7
000032  1c7f              ADDS     r7,r7,#1
000034  9901              LDR      r1,[sp,#4]
000036  5c0c              LDRB     r4,[r1,r0]
;;;1822   		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
000038  2c20              CMP      r4,#0x20
00003a  db03              BLT      |L8.68|
00003c  2c2f              CMP      r4,#0x2f
00003e  d001              BEQ      |L8.68|
000040  2c5c              CMP      r4,#0x5c
000042  d100              BNE      |L8.70|
                  |L8.68|
000044  e032              B        |L8.172|
                  |L8.70|
;;;1823   		if (di >= _MAX_LFN)				/* Reject too long name */
000046  2dff              CMP      r5,#0xff
000048  d303              BCC      |L8.82|
;;;1824   			return FR_INVALID_NAME;
00004a  2006              MOVS     r0,#6
                  |L8.76|
;;;1825   #if !_LFN_UNICODE
;;;1826   		w &= 0xFF;
;;;1827   		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
;;;1828   			b = (BYTE)p[si++];			/* Get 2nd byte */
;;;1829   			if (!IsDBCS2(b))
;;;1830   				return FR_INVALID_NAME;	/* Reject invalid sequence */
;;;1831   			w = (w << 8) + b;			/* Create a DBC */
;;;1832   		}
;;;1833   		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
;;;1834   		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
;;;1835   #endif
;;;1836   		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
;;;1837   			return FR_INVALID_NAME;
;;;1838   		lfn[di++] = w;					/* Store the Unicode character */
;;;1839   	}
;;;1840   	*path = &p[si];						/* Return pointer to the next segment */
;;;1841   	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
;;;1842   #if _FS_RPATH
;;;1843   	if ((di == 1 && lfn[di-1] == '.') || /* Is this a dot entry? */
;;;1844   		(di == 2 && lfn[di-1] == '.' && lfn[di-2] == '.')) {
;;;1845   		lfn[di] = 0;
;;;1846   		for (i = 0; i < 11; i++)
;;;1847   			dp->fn[i] = (i < di) ? '.' : ' ';
;;;1848   		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
;;;1849   		return FR_OK;
;;;1850   	}
;;;1851   #endif
;;;1852   	while (di) {						/* Strip trailing spaces and dots */
;;;1853   		w = lfn[di-1];
;;;1854   		if (w != ' ' && w != '.') break;
;;;1855   		di--;
;;;1856   	}
;;;1857   	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
;;;1858   
;;;1859   	lfn[di] = 0;						/* LFN is created */
;;;1860   
;;;1861   	/* Create SFN in directory form */
;;;1862   	mem_set(dp->fn, ' ', 11);
;;;1863   	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
;;;1864   	if (si) cf |= NS_LOSS | NS_LFN;
;;;1865   	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
;;;1866   
;;;1867   	b = i = 0; ni = 8;
;;;1868   	for (;;) {
;;;1869   		w = lfn[si++];					/* Get an LFN character */
;;;1870   		if (!w) break;					/* Break on end of the LFN */
;;;1871   		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
;;;1872   			cf |= NS_LOSS | NS_LFN; continue;
;;;1873   		}
;;;1874   
;;;1875   		if (i >= ni || si == di) {		/* Extension or end of SFN */
;;;1876   			if (ni == 11) {				/* Long extension */
;;;1877   				cf |= NS_LOSS | NS_LFN; break;
;;;1878   			}
;;;1879   			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
;;;1880   			if (si > di) break;			/* No extension */
;;;1881   			si = di; i = 8; ni = 11;	/* Enter extension section */
;;;1882   			b <<= 2; continue;
;;;1883   		}
;;;1884   
;;;1885   		if (w >= 0x80) {				/* Non ASCII character */
;;;1886   #ifdef _EXCVT
;;;1887   			w = ff_convert(w, 0);		/* Unicode -> OEM code */
;;;1888   			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
;;;1889   #else
;;;1890   			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
;;;1891   #endif
;;;1892   			cf |= NS_LFN;				/* Force create LFN entry */
;;;1893   		}
;;;1894   
;;;1895   		if (_DF1S && w >= 0x100) {		/* Double byte character (always false on SBCS cfg) */
;;;1896   			if (i >= ni - 1) {
;;;1897   				cf |= NS_LOSS | NS_LFN; i = ni; continue;
;;;1898   			}
;;;1899   			dp->fn[i++] = (BYTE)(w >> 8);
;;;1900   		} else {						/* Single byte character */
;;;1901   			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
;;;1902   				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
;;;1903   			} else {
;;;1904   				if (IsUpper(w)) {		/* ASCII large capital */
;;;1905   					b |= 2;
;;;1906   				} else {
;;;1907   					if (IsLower(w)) {	/* ASCII small capital */
;;;1908   						b |= 1; w -= 0x20;
;;;1909   					}
;;;1910   				}
;;;1911   			}
;;;1912   		}
;;;1913   		dp->fn[i++] = (BYTE)w;
;;;1914   	}
;;;1915   
;;;1916   	if (dp->fn[0] == DDE) dp->fn[0] = NDDE;	/* If the first character collides with deleted mark, replace it with 0x05 */
;;;1917   
;;;1918   	if (ni == 8) b <<= 2;
;;;1919   	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
;;;1920   		cf |= NS_LFN;
;;;1921   	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
;;;1922   		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
;;;1923   		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
;;;1924   	}
;;;1925   
;;;1926   	dp->fn[NS] = cf;	/* SFN is created */
;;;1927   
;;;1928   	return FR_OK;
;;;1929   
;;;1930   
;;;1931   #else	/* Non-LFN configuration */
;;;1932   	BYTE b, c, d, *sfn;
;;;1933   	UINT ni, si, i;
;;;1934   	const char *p;
;;;1935   
;;;1936   	/* Create file name in directory form */
;;;1937   	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
;;;1938   	sfn = dp->fn;
;;;1939   	mem_set(sfn, ' ', 11);
;;;1940   	si = i = b = 0; ni = 8;
;;;1941   #if _FS_RPATH
;;;1942   	if (p[si] == '.') { /* Is this a dot entry? */
;;;1943   		for (;;) {
;;;1944   			c = (BYTE)p[si++];
;;;1945   			if (c != '.' || si >= 3) break;
;;;1946   			sfn[i++] = c;
;;;1947   		}
;;;1948   		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
;;;1949   		*path = &p[si];									/* Return pointer to the next segment */
;;;1950   		sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
;;;1951   		return FR_OK;
;;;1952   	}
;;;1953   #endif
;;;1954   	for (;;) {
;;;1955   		c = (BYTE)p[si++];
;;;1956   		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
;;;1957   		if (c == '.' || i >= ni) {
;;;1958   			if (ni != 8 || c != '.') return FR_INVALID_NAME;
;;;1959   			i = 8; ni = 11;
;;;1960   			b <<= 2; continue;
;;;1961   		}
;;;1962   		if (c >= 0x80) {				/* Extended character? */
;;;1963   			b |= 3;						/* Eliminate NT flag */
;;;1964   #ifdef _EXCVT
;;;1965   			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
;;;1966   #else
;;;1967   #if !_DF1S
;;;1968   			return FR_INVALID_NAME;		/* Reject extended characters (ASCII cfg) */
;;;1969   #endif
;;;1970   #endif
;;;1971   		}
;;;1972   		if (IsDBCS1(c)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
;;;1973   			d = (BYTE)p[si++];			/* Get 2nd byte */
;;;1974   			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
;;;1975   				return FR_INVALID_NAME;
;;;1976   			sfn[i++] = c;
;;;1977   			sfn[i++] = d;
;;;1978   		} else {						/* Single byte code */
;;;1979   			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
;;;1980   				return FR_INVALID_NAME;
;;;1981   			if (IsUpper(c)) {			/* ASCII large capital? */
;;;1982   				b |= 2;
;;;1983   			} else {
;;;1984   				if (IsLower(c)) {		/* ASCII small capital? */
;;;1985   					b |= 1; c -= 0x20;
;;;1986   				}
;;;1987   			}
;;;1988   			sfn[i++] = c;
;;;1989   		}
;;;1990   	}
;;;1991   	*path = &p[si];						/* Return pointer to the next segment */
;;;1992   	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
;;;1993   
;;;1994   	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
;;;1995   	if (sfn[0] == DDE) sfn[0] = NDDE;	/* When first character collides with DDE, replace it with 0x05 */
;;;1996   
;;;1997   	if (ni == 8) b <<= 2;
;;;1998   	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
;;;1999   	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
;;;2000   
;;;2001   	sfn[NS] = c;		/* Store NT flag, File name is created */
;;;2002   
;;;2003   	return FR_OK;
;;;2004   #endif
;;;2005   }
00004c  b005              ADD      sp,sp,#0x14
00004e  e8bd8ff0          POP      {r4-r11,pc}
                  |L8.82|
000052  b2e4              UXTB     r4,r4                 ;1826
000054  2c81              CMP      r4,#0x81              ;1827
000056  db13              BLT      |L8.128|
000058  b2e0              UXTB     r0,r4                 ;1827
00005a  28fe              CMP      r0,#0xfe              ;1827
00005c  dc10              BGT      |L8.128|
00005e  4638              MOV      r0,r7                 ;1828
000060  1c7f              ADDS     r7,r7,#1              ;1828
000062  9901              LDR      r1,[sp,#4]            ;1828
000064  5c0e              LDRB     r6,[r1,r0]            ;1828
000066  2e40              CMP      r6,#0x40              ;1829
000068  db01              BLT      |L8.110|
00006a  2e7e              CMP      r6,#0x7e              ;1829
00006c  dd05              BLE      |L8.122|
                  |L8.110|
00006e  2e80              CMP      r6,#0x80              ;1829
000070  db01              BLT      |L8.118|
000072  2efe              CMP      r6,#0xfe              ;1829
000074  dd01              BLE      |L8.122|
                  |L8.118|
000076  2006              MOVS     r0,#6                 ;1830
000078  e7e8              B        |L8.76|
                  |L8.122|
00007a  eb062004          ADD      r0,r6,r4,LSL #8       ;1831
00007e  b284              UXTH     r4,r0                 ;1831
                  |L8.128|
000080  2101              MOVS     r1,#1                 ;1833
000082  4620              MOV      r0,r4                 ;1833
000084  f7fffffe          BL       ff_convert
000088  4604              MOV      r4,r0                 ;1833
00008a  b90c              CBNZ     r4,|L8.144|
00008c  2006              MOVS     r0,#6                 ;1834
00008e  e7dd              B        |L8.76|
                  |L8.144|
000090  2c80              CMP      r4,#0x80              ;1836
000092  da06              BGE      |L8.162|
000094  4621              MOV      r1,r4                 ;1836
000096  a071              ADR      r0,|L8.604|
000098  f7fffffe          BL       chk_chr
00009c  b108              CBZ      r0,|L8.162|
00009e  2006              MOVS     r0,#6                 ;1837
0000a0  e7d4              B        |L8.76|
                  |L8.162|
0000a2  4628              MOV      r0,r5                 ;1838
0000a4  1c6d              ADDS     r5,r5,#1              ;1838
0000a6  f82a4010          STRH     r4,[r10,r0,LSL #1]    ;1838
0000aa  e7c1              B        |L8.48|
                  |L8.172|
0000ac  bf00              NOP                            ;1822
0000ae  9801              LDR      r0,[sp,#4]            ;1840
0000b0  19c1              ADDS     r1,r0,r7              ;1840
0000b2  9804              LDR      r0,[sp,#0x10]         ;1840
0000b4  6001              STR      r1,[r0,#0]            ;1840
0000b6  2c20              CMP      r4,#0x20              ;1841
0000b8  da01              BGE      |L8.190|
0000ba  2004              MOVS     r0,#4                 ;1841
0000bc  e000              B        |L8.192|
                  |L8.190|
0000be  2000              MOVS     r0,#0                 ;1841
                  |L8.192|
0000c0  4680              MOV      r8,r0                 ;1841
0000c2  e008              B        |L8.214|
                  |L8.196|
0000c4  1e68              SUBS     r0,r5,#1              ;1853
0000c6  f83a4010          LDRH     r4,[r10,r0,LSL #1]    ;1853
0000ca  2c20              CMP      r4,#0x20              ;1854
0000cc  d002              BEQ      |L8.212|
0000ce  2c2e              CMP      r4,#0x2e              ;1854
0000d0  d000              BEQ      |L8.212|
0000d2  e002              B        |L8.218|
                  |L8.212|
0000d4  1e6d              SUBS     r5,r5,#1              ;1855
                  |L8.214|
0000d6  2d00              CMP      r5,#0                 ;1852
0000d8  d1f4              BNE      |L8.196|
                  |L8.218|
0000da  bf00              NOP                            ;1854
0000dc  b90d              CBNZ     r5,|L8.226|
0000de  2006              MOVS     r0,#6                 ;1857
0000e0  e7b4              B        |L8.76|
                  |L8.226|
0000e2  2000              MOVS     r0,#0                 ;1859
0000e4  f82a0015          STRH     r0,[r10,r5,LSL #1]    ;1859
0000e8  220b              MOVS     r2,#0xb               ;1862
0000ea  2120              MOVS     r1,#0x20              ;1862
0000ec  f8d90018          LDR      r0,[r9,#0x18]         ;1862
0000f0  f7fffffe          BL       mem_set
0000f4  2700              MOVS     r7,#0                 ;1863
0000f6  e000              B        |L8.250|
                  |L8.248|
0000f8  1c7f              ADDS     r7,r7,#1              ;1863
                  |L8.250|
0000fa  f83a0017          LDRH     r0,[r10,r7,LSL #1]    ;1863
0000fe  2820              CMP      r0,#0x20              ;1863
000100  d0fa              BEQ      |L8.248|
000102  f83a0017          LDRH     r0,[r10,r7,LSL #1]    ;1863
000106  282e              CMP      r0,#0x2e              ;1863
000108  d0f6              BEQ      |L8.248|
00010a  b10f              CBZ      r7,|L8.272|
00010c  f0480803          ORR      r8,r8,#3              ;1864
                  |L8.272|
000110  e000              B        |L8.276|
                  |L8.274|
000112  1e6d              SUBS     r5,r5,#1              ;1865
                  |L8.276|
000114  b125              CBZ      r5,|L8.288|
000116  1e68              SUBS     r0,r5,#1              ;1865
000118  f83a0010          LDRH     r0,[r10,r0,LSL #1]    ;1865
00011c  282e              CMP      r0,#0x2e              ;1865
00011e  d1f8              BNE      |L8.274|
                  |L8.288|
000120  2000              MOVS     r0,#0                 ;1867
000122  4606              MOV      r6,r0                 ;1867
000124  9002              STR      r0,[sp,#8]            ;1867
000126  f04f0b08          MOV      r11,#8                ;1867
00012a  bf00              NOP                            ;1868
                  |L8.300|
00012c  4638              MOV      r0,r7                 ;1869
00012e  1c7f              ADDS     r7,r7,#1              ;1869
000130  f83a4010          LDRH     r4,[r10,r0,LSL #1]    ;1869
000134  b904              CBNZ     r4,|L8.312|
000136  e063              B        |L8.512|
                  |L8.312|
000138  2c20              CMP      r4,#0x20              ;1871
00013a  d003              BEQ      |L8.324|
00013c  2c2e              CMP      r4,#0x2e              ;1871
00013e  d104              BNE      |L8.330|
000140  42af              CMP      r7,r5                 ;1871
000142  d002              BEQ      |L8.330|
                  |L8.324|
000144  f0480803          ORR      r8,r8,#3              ;1872
000148  e7f0              B        |L8.300|
                  |L8.330|
00014a  9802              LDR      r0,[sp,#8]            ;1875
00014c  4558              CMP      r0,r11                ;1875
00014e  d201              BCS      |L8.340|
000150  42af              CMP      r7,r5                 ;1875
000152  d114              BNE      |L8.382|
                  |L8.340|
000154  f1bb0f0b          CMP      r11,#0xb              ;1876
000158  d102              BNE      |L8.352|
00015a  f0480803          ORR      r8,r8,#3              ;1877
00015e  e04f              B        |L8.512|
                  |L8.352|
000160  42af              CMP      r7,r5                 ;1879
000162  d001              BEQ      |L8.360|
000164  f0480803          ORR      r8,r8,#3              ;1879
                  |L8.360|
000168  42af              CMP      r7,r5                 ;1880
00016a  d900              BLS      |L8.366|
00016c  e048              B        |L8.512|
                  |L8.366|
00016e  462f              MOV      r7,r5                 ;1881
000170  2008              MOVS     r0,#8                 ;1881
000172  9002              STR      r0,[sp,#8]            ;1881
000174  f04f0b0b          MOV      r11,#0xb              ;1881
000178  06b0              LSLS     r0,r6,#26             ;1882
00017a  0e06              LSRS     r6,r0,#24             ;1882
00017c  e7d6              B        |L8.300|
                  |L8.382|
00017e  2c80              CMP      r4,#0x80              ;1885
000180  db09              BLT      |L8.406|
000182  4620              MOV      r0,r4                 ;1890
000184  f7fffffe          BL       ff_wtoupper
000188  2100              MOVS     r1,#0                 ;1890
00018a  9000              STR      r0,[sp,#0]            ;1890
00018c  f7fffffe          BL       ff_convert
000190  4604              MOV      r4,r0                 ;1890
000192  f0480802          ORR      r8,r8,#2              ;1892
                  |L8.406|
000196  2cff              CMP      r4,#0xff              ;1895
000198  dd11              BLE      |L8.446|
00019a  f1ab0001          SUB      r0,r11,#1             ;1896
00019e  9902              LDR      r1,[sp,#8]            ;1896
0001a0  4288              CMP      r0,r1                 ;1896
0001a2  d804              BHI      |L8.430|
0001a4  f0480803          ORR      r8,r8,#3              ;1897
0001a8  f8cdb008          STR      r11,[sp,#8]           ;1897
0001ac  e7be              B        |L8.300|
                  |L8.430|
0001ae  1222              ASRS     r2,r4,#8              ;1899
0001b0  f8d93018          LDR      r3,[r9,#0x18]         ;1899
0001b4  9802              LDR      r0,[sp,#8]            ;1899
0001b6  1c41              ADDS     r1,r0,#1              ;1899
0001b8  9102              STR      r1,[sp,#8]            ;1899
0001ba  541a              STRB     r2,[r3,r0]            ;1899
0001bc  e019              B        |L8.498|
                  |L8.446|
0001be  b124              CBZ      r4,|L8.458|
0001c0  4621              MOV      r1,r4                 ;1901
0001c2  a029              ADR      r0,|L8.616|
0001c4  f7fffffe          BL       chk_chr
0001c8  b118              CBZ      r0,|L8.466|
                  |L8.458|
0001ca  245f              MOVS     r4,#0x5f              ;1902
0001cc  f0480803          ORR      r8,r8,#3              ;1902
0001d0  e00f              B        |L8.498|
                  |L8.466|
0001d2  2c41              CMP      r4,#0x41              ;1904
0001d4  db04              BLT      |L8.480|
0001d6  2c5a              CMP      r4,#0x5a              ;1904
0001d8  dc02              BGT      |L8.480|
0001da  f0460602          ORR      r6,r6,#2              ;1905
0001de  e008              B        |L8.498|
                  |L8.480|
0001e0  2c61              CMP      r4,#0x61              ;1907
0001e2  db06              BLT      |L8.498|
0001e4  2c7a              CMP      r4,#0x7a              ;1907
0001e6  dc04              BGT      |L8.498|
0001e8  f0460601          ORR      r6,r6,#1              ;1908
0001ec  f1a40020          SUB      r0,r4,#0x20           ;1908
0001f0  b284              UXTH     r4,r0                 ;1908
                  |L8.498|
0001f2  f8d93018          LDR      r3,[r9,#0x18]         ;1913
0001f6  9802              LDR      r0,[sp,#8]            ;1913
0001f8  1c41              ADDS     r1,r0,#1              ;1913
0001fa  9102              STR      r1,[sp,#8]            ;1913
0001fc  541c              STRB     r4,[r3,r0]            ;1913
0001fe  e795              B        |L8.300|
                  |L8.512|
000200  bf00              NOP                            ;1870
000202  f8d90018          LDR      r0,[r9,#0x18]         ;1916
000206  7800              LDRB     r0,[r0,#0]            ;1916
000208  28e5              CMP      r0,#0xe5              ;1916
00020a  d103              BNE      |L8.532|
00020c  2005              MOVS     r0,#5                 ;1916
00020e  f8d91018          LDR      r1,[r9,#0x18]         ;1916
000212  7008              STRB     r0,[r1,#0]            ;1916
                  |L8.532|
000214  f1bb0f08          CMP      r11,#8                ;1918
000218  d101              BNE      |L8.542|
00021a  06b0              LSLS     r0,r6,#26             ;1918
00021c  0e06              LSRS     r6,r0,#24             ;1918
                  |L8.542|
00021e  f006000c          AND      r0,r6,#0xc            ;1919
000222  280c              CMP      r0,#0xc               ;1919
000224  d003              BEQ      |L8.558|
000226  f0060003          AND      r0,r6,#3              ;1919
00022a  2803              CMP      r0,#3                 ;1919
00022c  d101              BNE      |L8.562|
                  |L8.558|
00022e  f0480802          ORR      r8,r8,#2              ;1920
                  |L8.562|
000232  f0080002          AND      r0,r8,#2              ;1921
000236  b958              CBNZ     r0,|L8.592|
000238  f0060003          AND      r0,r6,#3              ;1922
00023c  2801              CMP      r0,#1                 ;1922
00023e  d101              BNE      |L8.580|
000240  f0480810          ORR      r8,r8,#0x10           ;1922
                  |L8.580|
000244  f006000c          AND      r0,r6,#0xc            ;1923
000248  2804              CMP      r0,#4                 ;1923
00024a  d101              BNE      |L8.592|
00024c  f0480808          ORR      r8,r8,#8              ;1923
                  |L8.592|
000250  f8d90018          LDR      r0,[r9,#0x18]         ;1926
000254  f880800b          STRB     r8,[r0,#0xb]          ;1926
000258  2000              MOVS     r0,#0                 ;1928
00025a  e6f7              B        |L8.76|
;;;2006   
                          ENDP

                  |L8.604|
00025c  222a3a3c          DCB      """*:<>?|",127,0
000260  3e3f7c7f
000264  00      
000265  00                DCB      0
000266  00                DCB      0
000267  00                DCB      0
                  |L8.616|
000268  2b2c3b3d          DCB      "+,;=[]",0
00026c  5b5d00  
00026f  00                DCB      0

                          AREA ||i.dec_lock||, CODE, READONLY, ALIGN=2

                  dec_lock PROC
;;;711    static
;;;712    FRESULT dec_lock (	/* Decrement object open counter */
000000  b530              PUSH     {r4,r5,lr}
;;;713    	UINT i			/* Semaphore index (1..) */
;;;714    )
;;;715    {
000002  4602              MOV      r2,r0
;;;716    	WORD n;
;;;717    	FRESULT res;
;;;718    
;;;719    
;;;720    	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
000004  1e53              SUBS     r3,r2,#1
000006  461a              MOV      r2,r3
000008  2b03              CMP      r3,#3
00000a  d21b              BCS      |L9.68|
;;;721    		n = Files[i].ctr;
00000c  eb020342          ADD      r3,r2,r2,LSL #1
000010  4c0d              LDR      r4,|L9.72|
000012  eb040383          ADD      r3,r4,r3,LSL #2
000016  8959              LDRH     r1,[r3,#0xa]
;;;722    		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
000018  f5b17f80          CMP      r1,#0x100
00001c  d100              BNE      |L9.32|
00001e  2100              MOVS     r1,#0
                  |L9.32|
;;;723    		if (n) n--;					/* Decrement read mode open count */
000020  b109              CBZ      r1,|L9.38|
000022  1e4b              SUBS     r3,r1,#1
000024  b299              UXTH     r1,r3
                  |L9.38|
;;;724    		Files[i].ctr = n;
000026  eb020342          ADD      r3,r2,r2,LSL #1
00002a  4c07              LDR      r4,|L9.72|
00002c  eb040383          ADD      r3,r4,r3,LSL #2
000030  8159              STRH     r1,[r3,#0xa]
;;;725    		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
000032  b929              CBNZ     r1,|L9.64|
000034  2300              MOVS     r3,#0
000036  eb020442          ADD      r4,r2,r2,LSL #1
00003a  4d03              LDR      r5,|L9.72|
00003c  f8453024          STR      r3,[r5,r4,LSL #2]
                  |L9.64|
;;;726    		res = FR_OK;
000040  2000              MOVS     r0,#0
000042  e000              B        |L9.70|
                  |L9.68|
;;;727    	} else {
;;;728    		res = FR_INT_ERR;			/* Invalid index nunber */
000044  2002              MOVS     r0,#2
                  |L9.70|
;;;729    	}
;;;730    	return res;
;;;731    }
000046  bd30              POP      {r4,r5,pc}
;;;732    
                          ENDP

                  |L9.72|
                          DCD      Files

                          AREA ||i.dir_alloc||, CODE, READONLY, ALIGN=1

                  dir_alloc PROC
;;;1233   static
;;;1234   FRESULT dir_alloc (
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1235   	DIR* dp,	/* Pointer to the directory object */
;;;1236   	UINT nent	/* Number of contiguous entries to allocate (1-21) */
;;;1237   )
;;;1238   {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
;;;1239   	FRESULT res;
;;;1240   	UINT n;
;;;1241   
;;;1242   
;;;1243   	res = dir_sdi(dp, 0);
000008  2100              MOVS     r1,#0
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       dir_sdi
000010  4605              MOV      r5,r0
;;;1244   	if (res == FR_OK) {
000012  b9ed              CBNZ     r5,|L10.80|
;;;1245   		n = 0;
000014  2700              MOVS     r7,#0
;;;1246   		do {
000016  bf00              NOP      
                  |L10.24|
;;;1247   			res = move_window(dp->fs, dp->sect);
000018  6921              LDR      r1,[r4,#0x10]
00001a  6820              LDR      r0,[r4,#0]
00001c  f7fffffe          BL       move_window
000020  4605              MOV      r5,r0
;;;1248   			if (res != FR_OK) break;
000022  b105              CBZ      r5,|L10.38|
000024  e013              B        |L10.78|
                  |L10.38|
;;;1249   			if (dp->dir[0] == DDE || dp->dir[0] == 0) {	/* Is it a blank entry? */
000026  6960              LDR      r0,[r4,#0x14]
000028  7800              LDRB     r0,[r0,#0]
00002a  28e5              CMP      r0,#0xe5
00002c  d002              BEQ      |L10.52|
00002e  6960              LDR      r0,[r4,#0x14]
000030  7800              LDRB     r0,[r0,#0]
000032  b920              CBNZ     r0,|L10.62|
                  |L10.52|
;;;1250   				if (++n == nent) break;	/* A block of contiguous entries is found */
000034  1c78              ADDS     r0,r7,#1
000036  4607              MOV      r7,r0
000038  42b0              CMP      r0,r6
00003a  d101              BNE      |L10.64|
00003c  e007              B        |L10.78|
                  |L10.62|
;;;1251   			} else {
;;;1252   				n = 0;					/* Not a blank entry. Restart to search */
00003e  2700              MOVS     r7,#0
                  |L10.64|
;;;1253   			}
;;;1254   			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
000040  2101              MOVS     r1,#1
000042  4620              MOV      r0,r4
000044  f7fffffe          BL       dir_next
000048  4605              MOV      r5,r0
;;;1255   		} while (res == FR_OK);
00004a  2d00              CMP      r5,#0
00004c  d0e4              BEQ      |L10.24|
                  |L10.78|
00004e  bf00              NOP                            ;1248
                  |L10.80|
;;;1256   	}
;;;1257   	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
000050  2d04              CMP      r5,#4
000052  d100              BNE      |L10.86|
000054  2507              MOVS     r5,#7
                  |L10.86|
;;;1258   	return res;
000056  4628              MOV      r0,r5
;;;1259   }
000058  e8bd81f0          POP      {r4-r8,pc}
;;;1260   #endif
                          ENDP


                          AREA ||i.dir_find||, CODE, READONLY, ALIGN=1

                  dir_find PROC
;;;1489   static
;;;1490   FRESULT dir_find (
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;1491   	DIR* dp			/* Pointer to the directory object linked to the file name */
;;;1492   )
;;;1493   {
000004  4604              MOV      r4,r0
;;;1494   	FRESULT res;
;;;1495   	BYTE c, *dir;
;;;1496   #if _USE_LFN
;;;1497   	BYTE a, ord, sum;
;;;1498   #endif
;;;1499   
;;;1500   	res = dir_sdi(dp, 0);			/* Rewind directory object */
000006  2100              MOVS     r1,#0
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       dir_sdi
00000e  4607              MOV      r7,r0
;;;1501   	if (res != FR_OK) return res;
000010  b117              CBZ      r7,|L11.24|
000012  4638              MOV      r0,r7
                  |L11.20|
;;;1502   
;;;1503   #if _USE_LFN
;;;1504   	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
;;;1505   #endif
;;;1506   	do {
;;;1507   		res = move_window(dp->fs, dp->sect);
;;;1508   		if (res != FR_OK) break;
;;;1509   		dir = dp->dir;					/* Ptr to the directory entry of current index */
;;;1510   		c = dir[DIR_Name];
;;;1511   		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
;;;1512   #if _USE_LFN	/* LFN configuration */
;;;1513   		a = dir[DIR_Attr] & AM_MASK;
;;;1514   		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
;;;1515   			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
;;;1516   		} else {
;;;1517   			if (a == AM_LFN) {			/* An LFN entry is found */
;;;1518   				if (dp->lfn) {
;;;1519   					if (c & LLE) {		/* Is it start of LFN sequence? */
;;;1520   						sum = dir[LDIR_Chksum];
;;;1521   						c &= ~LLE; ord = c;	/* LFN start order */
;;;1522   						dp->lfn_idx = dp->index;	/* Start index of LFN */
;;;1523   					}
;;;1524   					/* Check validity of the LFN entry and compare it with given name */
;;;1525   					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
;;;1526   				}
;;;1527   			} else {					/* An SFN entry is found */
;;;1528   				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
;;;1529   				if (!(dp->fn[NS] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
;;;1530   				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
;;;1531   			}
;;;1532   		}
;;;1533   #else		/* Non LFN configuration */
;;;1534   		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
;;;1535   			break;
;;;1536   #endif
;;;1537   		res = dir_next(dp, 0);		/* Next entry */
;;;1538   	} while (res == FR_OK);
;;;1539   
;;;1540   	return res;
;;;1541   }
000014  e8bd87f0          POP      {r4-r10,pc}
                  |L11.24|
000018  f04f09ff          MOV      r9,#0xff              ;1504
00001c  46ca              MOV      r10,r9                ;1504
00001e  f64f70ff          MOV      r0,#0xffff            ;1504
000022  84a0              STRH     r0,[r4,#0x24]         ;1504
000024  bf00              NOP                            ;1506
                  |L11.38|
000026  6921              LDR      r1,[r4,#0x10]         ;1507
000028  6820              LDR      r0,[r4,#0]            ;1507
00002a  f7fffffe          BL       move_window
00002e  4607              MOV      r7,r0                 ;1507
000030  b107              CBZ      r7,|L11.52|
000032  e057              B        |L11.228|
                  |L11.52|
000034  6965              LDR      r5,[r4,#0x14]         ;1509
000036  782e              LDRB     r6,[r5,#0]            ;1510
000038  b90e              CBNZ     r6,|L11.62|
00003a  2704              MOVS     r7,#4                 ;1511
00003c  e052              B        |L11.228|
                  |L11.62|
00003e  7ae8              LDRB     r0,[r5,#0xb]          ;1513
000040  f000083f          AND      r8,r0,#0x3f           ;1513
000044  2ee5              CMP      r6,#0xe5              ;1514
000046  d005              BEQ      |L11.84|
000048  f0080008          AND      r0,r8,#8              ;1514
00004c  b140              CBZ      r0,|L11.96|
00004e  f1b80f0f          CMP      r8,#0xf               ;1514
000052  d005              BEQ      |L11.96|
                  |L11.84|
000054  f04f09ff          MOV      r9,#0xff              ;1515
000058  f64f70ff          MOV      r0,#0xffff            ;1515
00005c  84a0              STRH     r0,[r4,#0x24]         ;1515
00005e  e03a              B        |L11.214|
                  |L11.96|
000060  f1b80f0f          CMP      r8,#0xf               ;1517
000064  d11c              BNE      |L11.160|
000066  6a20              LDR      r0,[r4,#0x20]         ;1518
000068  b378              CBZ      r0,|L11.202|
00006a  f0060040          AND      r0,r6,#0x40           ;1519
00006e  b130              CBZ      r0,|L11.126|
000070  f895a00d          LDRB     r10,[r5,#0xd]         ;1520
000074  f0260640          BIC      r6,r6,#0x40           ;1521
000078  46b1              MOV      r9,r6                 ;1521
00007a  88e0              LDRH     r0,[r4,#6]            ;1522
00007c  84a0              STRH     r0,[r4,#0x24]         ;1522
                  |L11.126|
00007e  454e              CMP      r6,r9                 ;1525
000080  d10a              BNE      |L11.152|
000082  7b68              LDRB     r0,[r5,#0xd]          ;1525
000084  4550              CMP      r0,r10                ;1525
000086  d107              BNE      |L11.152|
000088  4629              MOV      r1,r5                 ;1525
00008a  6a20              LDR      r0,[r4,#0x20]         ;1525
00008c  f7fffffe          BL       cmp_lfn
000090  b110              CBZ      r0,|L11.152|
000092  f1a90001          SUB      r0,r9,#1              ;1525
000096  e000              B        |L11.154|
                  |L11.152|
000098  20ff              MOVS     r0,#0xff              ;1525
                  |L11.154|
00009a  f00009ff          AND      r9,r0,#0xff           ;1525
00009e  e01a              B        |L11.214|
                  |L11.160|
0000a0  f1b90f00          CMP      r9,#0                 ;1528
0000a4  d105              BNE      |L11.178|
0000a6  4628              MOV      r0,r5                 ;1528
0000a8  f7fffffe          BL       sum_sfn
0000ac  4550              CMP      r0,r10                ;1528
0000ae  d100              BNE      |L11.178|
0000b0  e018              B        |L11.228|
                  |L11.178|
0000b2  69a0              LDR      r0,[r4,#0x18]         ;1529
0000b4  7ac0              LDRB     r0,[r0,#0xb]          ;1529
0000b6  f0000001          AND      r0,r0,#1              ;1529
0000ba  b938              CBNZ     r0,|L11.204|
0000bc  220b              MOVS     r2,#0xb               ;1529
0000be  4628              MOV      r0,r5                 ;1529
0000c0  69a1              LDR      r1,[r4,#0x18]         ;1529
0000c2  f7fffffe          BL       mem_cmp
0000c6  b908              CBNZ     r0,|L11.204|
0000c8  e00c              B        |L11.228|
                  |L11.202|
0000ca  e004              B        |L11.214|
                  |L11.204|
0000cc  f04f09ff          MOV      r9,#0xff              ;1530
0000d0  f64f70ff          MOV      r0,#0xffff            ;1530
0000d4  84a0              STRH     r0,[r4,#0x24]         ;1530
                  |L11.214|
0000d6  2100              MOVS     r1,#0                 ;1537
0000d8  4620              MOV      r0,r4                 ;1537
0000da  f7fffffe          BL       dir_next
0000de  4607              MOV      r7,r0                 ;1537
0000e0  2f00              CMP      r7,#0                 ;1538
0000e2  d0a0              BEQ      |L11.38|
                  |L11.228|
0000e4  bf00              NOP                            ;1508
0000e6  4638              MOV      r0,r7                 ;1540
0000e8  e794              B        |L11.20|
;;;1542   
                          ENDP


                          AREA ||i.dir_next||, CODE, READONLY, ALIGN=1

                  dir_next PROC
;;;1164   static
;;;1165   FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1166   	DIR* dp,		/* Pointer to the directory object */
;;;1167   	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
;;;1168   )
;;;1169   {
000004  4604              MOV      r4,r0
000006  4688              MOV      r8,r1
;;;1170   	DWORD clst;
;;;1171   	UINT i;
;;;1172   
;;;1173   
;;;1174   	i = dp->index + 1;
000008  88e0              LDRH     r0,[r4,#6]
00000a  1c46              ADDS     r6,r0,#1
;;;1175   	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
00000c  b2b0              UXTH     r0,r6
00000e  b108              CBZ      r0,|L12.20|
000010  6920              LDR      r0,[r4,#0x10]
000012  b910              CBNZ     r0,|L12.26|
                  |L12.20|
;;;1176   		return FR_NO_FILE;
000014  2004              MOVS     r0,#4
                  |L12.22|
;;;1177   
;;;1178   	if (!(i % (SS(dp->fs) / SZ_DIR))) {	/* Sector changed? */
;;;1179   		dp->sect++;					/* Next sector */
;;;1180   
;;;1181   		if (!dp->clust) {		/* Static table */
;;;1182   			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
;;;1183   				return FR_NO_FILE;
;;;1184   		}
;;;1185   		else {					/* Dynamic table */
;;;1186   			if (((i / (SS(dp->fs) / SZ_DIR)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
;;;1187   				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
;;;1188   				if (clst <= 1) return FR_INT_ERR;
;;;1189   				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
;;;1190   				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
;;;1191   #if !_FS_READONLY
;;;1192   					UINT c;
;;;1193   					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
;;;1194   					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
;;;1195   					if (clst == 0) return FR_DENIED;			/* No free cluster */
;;;1196   					if (clst == 1) return FR_INT_ERR;
;;;1197   					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
;;;1198   					/* Clean-up stretched table */
;;;1199   					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
;;;1200   					mem_set(dp->fs->win, 0, SS(dp->fs));		/* Clear window buffer */
;;;1201   					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
;;;1202   					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
;;;1203   						dp->fs->wflag = 1;
;;;1204   						if (sync_window(dp->fs)) return FR_DISK_ERR;
;;;1205   						dp->fs->winsect++;
;;;1206   					}
;;;1207   					dp->fs->winsect -= c;						/* Rewind window offset */
;;;1208   #else
;;;1209   					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
;;;1210   					return FR_NO_FILE;							/* Report EOT */
;;;1211   #endif
;;;1212   				}
;;;1213   				dp->clust = clst;				/* Initialize data for new cluster */
;;;1214   				dp->sect = clust2sect(dp->fs, clst);
;;;1215   			}
;;;1216   		}
;;;1217   	}
;;;1218   
;;;1219   	dp->index = (WORD)i;	/* Current index */
;;;1220   	dp->dir = dp->fs->win + (i % (SS(dp->fs) / SZ_DIR)) * SZ_DIR;	/* Current entry in the window */
;;;1221   
;;;1222   	return FR_OK;
;;;1223   }
000016  e8bd81f0          POP      {r4-r8,pc}
                  |L12.26|
00001a  6821              LDR      r1,[r4,#0]            ;1178
00001c  8948              LDRH     r0,[r1,#0xa]          ;1178
00001e  17c1              ASRS     r1,r0,#31             ;1178
000020  eb0061d1          ADD      r1,r0,r1,LSR #27      ;1178
000024  1149              ASRS     r1,r1,#5              ;1178
000026  fbb6f2f1          UDIV     r2,r6,r1              ;1178
00002a  fb016112          MLS      r1,r1,r2,r6           ;1178
00002e  2900              CMP      r1,#0                 ;1178
000030  d172              BNE      |L12.280|
000032  6920              LDR      r0,[r4,#0x10]         ;1179
000034  1c40              ADDS     r0,r0,#1              ;1179
000036  6120              STR      r0,[r4,#0x10]         ;1179
000038  68e0              LDR      r0,[r4,#0xc]          ;1181
00003a  b928              CBNZ     r0,|L12.72|
00003c  6820              LDR      r0,[r4,#0]            ;1182
00003e  8900              LDRH     r0,[r0,#8]            ;1182
000040  42b0              CMP      r0,r6                 ;1182
000042  d869              BHI      |L12.280|
000044  2004              MOVS     r0,#4                 ;1183
000046  e7e6              B        |L12.22|
                  |L12.72|
000048  6821              LDR      r1,[r4,#0]            ;1186
00004a  8948              LDRH     r0,[r1,#0xa]          ;1186
00004c  17c1              ASRS     r1,r0,#31             ;1186
00004e  eb0061d1          ADD      r1,r0,r1,LSR #27      ;1186
000052  1149              ASRS     r1,r1,#5              ;1186
000054  fbb6f1f1          UDIV     r1,r6,r1              ;1186
000058  6822              LDR      r2,[r4,#0]            ;1186
00005a  7892              LDRB     r2,[r2,#2]            ;1186
00005c  1e52              SUBS     r2,r2,#1              ;1186
00005e  4011              ANDS     r1,r1,r2              ;1186
000060  2900              CMP      r1,#0                 ;1186
000062  d159              BNE      |L12.280|
000064  68e1              LDR      r1,[r4,#0xc]          ;1187
000066  6820              LDR      r0,[r4,#0]            ;1187
000068  f7fffffe          BL       get_fat
00006c  4605              MOV      r5,r0                 ;1187
00006e  2d01              CMP      r5,#1                 ;1188
000070  d801              BHI      |L12.118|
000072  2002              MOVS     r0,#2                 ;1188
000074  e7cf              B        |L12.22|
                  |L12.118|
000076  1c68              ADDS     r0,r5,#1              ;1189
000078  b908              CBNZ     r0,|L12.126|
00007a  2001              MOVS     r0,#1                 ;1189
00007c  e7cb              B        |L12.22|
                  |L12.126|
00007e  6820              LDR      r0,[r4,#0]            ;1190
000080  6940              LDR      r0,[r0,#0x14]         ;1190
000082  42a8              CMP      r0,r5                 ;1190
000084  d842              BHI      |L12.268|
000086  f1b80f00          CMP      r8,#0                 ;1193
00008a  d101              BNE      |L12.144|
00008c  2004              MOVS     r0,#4                 ;1193
00008e  e7c2              B        |L12.22|
                  |L12.144|
000090  68e1              LDR      r1,[r4,#0xc]          ;1194
000092  6820              LDR      r0,[r4,#0]            ;1194
000094  f7fffffe          BL       create_chain
000098  4605              MOV      r5,r0                 ;1194
00009a  b90d              CBNZ     r5,|L12.160|
00009c  2007              MOVS     r0,#7                 ;1195
00009e  e7ba              B        |L12.22|
                  |L12.160|
0000a0  2d01              CMP      r5,#1                 ;1196
0000a2  d101              BNE      |L12.168|
0000a4  2002              MOVS     r0,#2                 ;1196
0000a6  e7b6              B        |L12.22|
                  |L12.168|
0000a8  1c68              ADDS     r0,r5,#1              ;1197
0000aa  b908              CBNZ     r0,|L12.176|
0000ac  2001              MOVS     r0,#1                 ;1197
0000ae  e7b2              B        |L12.22|
                  |L12.176|
0000b0  6820              LDR      r0,[r4,#0]            ;1199
0000b2  f7fffffe          BL       sync_window
0000b6  b108              CBZ      r0,|L12.188|
0000b8  2001              MOVS     r0,#1                 ;1199
0000ba  e7ac              B        |L12.22|
                  |L12.188|
0000bc  6821              LDR      r1,[r4,#0]            ;1200
0000be  894a              LDRH     r2,[r1,#0xa]          ;1200
0000c0  f1010030          ADD      r0,r1,#0x30           ;1200
0000c4  2100              MOVS     r1,#0                 ;1200
0000c6  f7fffffe          BL       mem_set
0000ca  4629              MOV      r1,r5                 ;1201
0000cc  6820              LDR      r0,[r4,#0]            ;1201
0000ce  f7fffffe          BL       clust2sect
0000d2  6821              LDR      r1,[r4,#0]            ;1201
0000d4  62c8              STR      r0,[r1,#0x2c]         ;1201
0000d6  2700              MOVS     r7,#0                 ;1202
0000d8  e00e              B        |L12.248|
                  |L12.218|
0000da  2001              MOVS     r0,#1                 ;1203
0000dc  6821              LDR      r1,[r4,#0]            ;1203
0000de  7108              STRB     r0,[r1,#4]            ;1203
0000e0  6820              LDR      r0,[r4,#0]            ;1204
0000e2  f7fffffe          BL       sync_window
0000e6  b108              CBZ      r0,|L12.236|
0000e8  2001              MOVS     r0,#1                 ;1204
0000ea  e794              B        |L12.22|
                  |L12.236|
0000ec  6820              LDR      r0,[r4,#0]            ;1205
0000ee  6ac0              LDR      r0,[r0,#0x2c]         ;1205
0000f0  1c40              ADDS     r0,r0,#1              ;1205
0000f2  6821              LDR      r1,[r4,#0]            ;1205
0000f4  62c8              STR      r0,[r1,#0x2c]         ;1205
0000f6  1c7f              ADDS     r7,r7,#1              ;1202
                  |L12.248|
0000f8  6820              LDR      r0,[r4,#0]            ;1202
0000fa  7880              LDRB     r0,[r0,#2]            ;1202
0000fc  42b8              CMP      r0,r7                 ;1202
0000fe  d8ec              BHI      |L12.218|
000100  6820              LDR      r0,[r4,#0]            ;1207
000102  6ac0              LDR      r0,[r0,#0x2c]         ;1207
000104  1bc0              SUBS     r0,r0,r7              ;1207
000106  6821              LDR      r1,[r4,#0]            ;1207
000108  62c8              STR      r0,[r1,#0x2c]         ;1207
00010a  bf00              NOP                            ;1212
                  |L12.268|
00010c  60e5              STR      r5,[r4,#0xc]          ;1213
00010e  4629              MOV      r1,r5                 ;1214
000110  6820              LDR      r0,[r4,#0]            ;1214
000112  f7fffffe          BL       clust2sect
000116  6120              STR      r0,[r4,#0x10]         ;1214
                  |L12.280|
000118  80e6              STRH     r6,[r4,#6]            ;1219
00011a  6821              LDR      r1,[r4,#0]            ;1220
00011c  8948              LDRH     r0,[r1,#0xa]          ;1220
00011e  17c1              ASRS     r1,r0,#31             ;1220
000120  eb0061d1          ADD      r1,r0,r1,LSR #27      ;1220
000124  1149              ASRS     r1,r1,#5              ;1220
000126  fbb6f2f1          UDIV     r2,r6,r1              ;1220
00012a  fb016112          MLS      r1,r1,r2,r6           ;1220
00012e  6822              LDR      r2,[r4,#0]            ;1220
000130  3230              ADDS     r2,r2,#0x30           ;1220
000132  eb021141          ADD      r1,r2,r1,LSL #5       ;1220
000136  6161              STR      r1,[r4,#0x14]         ;1220
000138  2000              MOVS     r0,#0                 ;1222
00013a  e76c              B        |L12.22|
;;;1224   
                          ENDP


                          AREA ||i.dir_read||, CODE, READONLY, ALIGN=1

                  dir_read PROC
;;;1550   static
;;;1551   FRESULT dir_read (
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;1552   	DIR* dp,		/* Pointer to the directory object */
;;;1553   	int vol			/* Filtered by 0:file/directory or 1:volume label */
;;;1554   )
;;;1555   {
000004  4604              MOV      r4,r0
000006  468a              MOV      r10,r1
;;;1556   	FRESULT res;
;;;1557   	BYTE a, c, *dir;
;;;1558   #if _USE_LFN
;;;1559   	BYTE ord = 0xFF, sum = 0xFF;
000008  f04f09ff          MOV      r9,#0xff
00000c  46cb              MOV      r11,r9
;;;1560   #endif
;;;1561   
;;;1562   	res = FR_NO_FILE;
00000e  2704              MOVS     r7,#4
;;;1563   	while (dp->sect) {
000010  e04e              B        |L13.176|
                  |L13.18|
;;;1564   		res = move_window(dp->fs, dp->sect);
000012  6921              LDR      r1,[r4,#0x10]
000014  6820              LDR      r0,[r4,#0]
000016  f7fffffe          BL       move_window
00001a  4607              MOV      r7,r0
;;;1565   		if (res != FR_OK) break;
00001c  b107              CBZ      r7,|L13.32|
00001e  e04a              B        |L13.182|
                  |L13.32|
;;;1566   		dir = dp->dir;					/* Ptr to the directory entry of current index */
000020  6966              LDR      r6,[r4,#0x14]
;;;1567   		c = dir[DIR_Name];
000022  7835              LDRB     r5,[r6,#0]
;;;1568   		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
000024  b90d              CBNZ     r5,|L13.42|
000026  2704              MOVS     r7,#4
000028  e045              B        |L13.182|
                  |L13.42|
;;;1569   		a = dir[DIR_Attr] & AM_MASK;
00002a  7af0              LDRB     r0,[r6,#0xb]
00002c  f000083f          AND      r8,r0,#0x3f
;;;1570   #if _USE_LFN	/* LFN configuration */
;;;1571   		if (c == DDE || (!_FS_RPATH && c == '.') || (int)(a == AM_VOL) != vol) {	/* An entry without valid data */
000030  2de5              CMP      r5,#0xe5
000032  d009              BEQ      |L13.72|
000034  2d2e              CMP      r5,#0x2e
000036  d007              BEQ      |L13.72|
000038  f1b80f08          CMP      r8,#8
00003c  d101              BNE      |L13.66|
00003e  2001              MOVS     r0,#1
000040  e000              B        |L13.68|
                  |L13.66|
000042  2000              MOVS     r0,#0
                  |L13.68|
000044  4550              CMP      r0,r10
000046  d002              BEQ      |L13.78|
                  |L13.72|
;;;1572   			ord = 0xFF;
000048  f04f09ff          MOV      r9,#0xff
00004c  e029              B        |L13.162|
                  |L13.78|
;;;1573   		} else {
;;;1574   			if (a == AM_LFN) {			/* An LFN entry is found */
00004e  f1b80f0f          CMP      r8,#0xf
000052  d11a              BNE      |L13.138|
;;;1575   				if (c & LLE) {			/* Is it start of LFN sequence? */
000054  f0050040          AND      r0,r5,#0x40
000058  b130              CBZ      r0,|L13.104|
;;;1576   					sum = dir[LDIR_Chksum];
00005a  f896b00d          LDRB     r11,[r6,#0xd]
;;;1577   					c &= ~LLE; ord = c;
00005e  f0250540          BIC      r5,r5,#0x40
000062  46a9              MOV      r9,r5
;;;1578   					dp->lfn_idx = dp->index;
000064  88e0              LDRH     r0,[r4,#6]
000066  84a0              STRH     r0,[r4,#0x24]
                  |L13.104|
;;;1579   				}
;;;1580   				/* Check LFN validity and capture it */
;;;1581   				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
000068  454d              CMP      r5,r9
00006a  d10a              BNE      |L13.130|
00006c  7b70              LDRB     r0,[r6,#0xd]
00006e  4558              CMP      r0,r11
000070  d107              BNE      |L13.130|
000072  4631              MOV      r1,r6
000074  6a20              LDR      r0,[r4,#0x20]
000076  f7fffffe          BL       pick_lfn
00007a  b110              CBZ      r0,|L13.130|
00007c  f1a90001          SUB      r0,r9,#1
000080  e000              B        |L13.132|
                  |L13.130|
000082  20ff              MOVS     r0,#0xff
                  |L13.132|
000084  f00009ff          AND      r9,r0,#0xff
000088  e00b              B        |L13.162|
                  |L13.138|
;;;1582   			} else {					/* An SFN entry is found */
;;;1583   				if (ord || sum != sum_sfn(dir))	/* Is there a valid LFN? */
00008a  f1b90f00          CMP      r9,#0
00008e  d104              BNE      |L13.154|
000090  4630              MOV      r0,r6
000092  f7fffffe          BL       sum_sfn
000096  4558              CMP      r0,r11
000098  d002              BEQ      |L13.160|
                  |L13.154|
;;;1584   					dp->lfn_idx = 0xFFFF;		/* It has no LFN. */
00009a  f64f70ff          MOV      r0,#0xffff
00009e  84a0              STRH     r0,[r4,#0x24]
                  |L13.160|
;;;1585   				break;
0000a0  e009              B        |L13.182|
                  |L13.162|
;;;1586   			}
;;;1587   		}
;;;1588   #else		/* Non LFN configuration */
;;;1589   		if (c != DDE && (_FS_RPATH || c != '.') && a != AM_LFN && (int)(a == AM_VOL) == vol)	/* Is it a valid entry? */
;;;1590   			break;
;;;1591   #endif
;;;1592   		res = dir_next(dp, 0);				/* Next entry */
0000a2  2100              MOVS     r1,#0
0000a4  4620              MOV      r0,r4
0000a6  f7fffffe          BL       dir_next
0000aa  4607              MOV      r7,r0
;;;1593   		if (res != FR_OK) break;
0000ac  b107              CBZ      r7,|L13.176|
0000ae  e002              B        |L13.182|
                  |L13.176|
0000b0  6920              LDR      r0,[r4,#0x10]         ;1563
0000b2  2800              CMP      r0,#0                 ;1563
0000b4  d1ad              BNE      |L13.18|
                  |L13.182|
0000b6  bf00              NOP                            ;1565
;;;1594   	}
;;;1595   
;;;1596   	if (res != FR_OK) dp->sect = 0;
0000b8  b10f              CBZ      r7,|L13.190|
0000ba  2000              MOVS     r0,#0
0000bc  6120              STR      r0,[r4,#0x10]
                  |L13.190|
;;;1597   
;;;1598   	return res;
0000be  4638              MOV      r0,r7
;;;1599   }
0000c0  e8bd9ff0          POP      {r4-r12,pc}
;;;1600   #endif	/* _FS_MINIMIZE <= 1 || _USE_LABEL || _FS_RPATH >= 2 */
                          ENDP


                          AREA ||i.dir_register||, CODE, READONLY, ALIGN=1

                  dir_register PROC
;;;1609   static
;;;1610   FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
000000  e92d4ffe          PUSH     {r1-r11,lr}
;;;1611   	DIR* dp				/* Target directory with object name to be created */
;;;1612   )
;;;1613   {
000004  4604              MOV      r4,r0
;;;1614   	FRESULT res;
;;;1615   #if _USE_LFN	/* LFN configuration */
;;;1616   	UINT n, nent;
;;;1617   	BYTE sn[12], *fn, sum;
;;;1618   	WCHAR *lfn;
;;;1619   
;;;1620   
;;;1621   	fn = dp->fn; lfn = dp->lfn;
000006  f8d48018          LDR      r8,[r4,#0x18]
00000a  f8d49020          LDR      r9,[r4,#0x20]
;;;1622   	mem_cpy(sn, fn, 12);
00000e  220c              MOVS     r2,#0xc
000010  4641              MOV      r1,r8
000012  4668              MOV      r0,sp
000014  f7fffffe          BL       mem_cpy
;;;1623   
;;;1624   	if (_FS_RPATH && (sn[NS] & NS_DOT))		/* Cannot create dot entry */
000018  bf00              NOP      
;;;1625   		return FR_INVALID_NAME;
;;;1626   
;;;1627   	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
00001a  f89d000b          LDRB     r0,[sp,#0xb]
00001e  f0000001          AND      r0,r0,#1
000022  b320              CBZ      r0,|L14.110|
;;;1628   		fn[NS] = 0; dp->lfn = 0;			/* Find only SFN */
000024  2000              MOVS     r0,#0
000026  f888000b          STRB     r0,[r8,#0xb]
00002a  6220              STR      r0,[r4,#0x20]
;;;1629   		for (n = 1; n < 100; n++) {
00002c  2601              MOVS     r6,#1
00002e  e00c              B        |L14.74|
                  |L14.48|
;;;1630   			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
000030  4633              MOV      r3,r6
000032  464a              MOV      r2,r9
000034  4669              MOV      r1,sp
000036  4640              MOV      r0,r8
000038  f7fffffe          BL       gen_numname
;;;1631   			res = dir_find(dp);				/* Check if the name collides with existing SFN */
00003c  4620              MOV      r0,r4
00003e  f7fffffe          BL       dir_find
000042  4605              MOV      r5,r0
;;;1632   			if (res != FR_OK) break;
000044  b105              CBZ      r5,|L14.72|
000046  e002              B        |L14.78|
                  |L14.72|
000048  1c76              ADDS     r6,r6,#1              ;1629
                  |L14.74|
00004a  2e64              CMP      r6,#0x64              ;1629
00004c  d3f0              BCC      |L14.48|
                  |L14.78|
00004e  bf00              NOP      
;;;1633   		}
;;;1634   		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
000050  2e64              CMP      r6,#0x64
000052  d102              BNE      |L14.90|
000054  2007              MOVS     r0,#7
                  |L14.86|
;;;1635   		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
;;;1636   		fn[NS] = sn[NS]; dp->lfn = lfn;
;;;1637   	}
;;;1638   
;;;1639   	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
;;;1640   		for (n = 0; lfn[n]; n++) ;
;;;1641   		nent = (n + 25) / 13;
;;;1642   	} else {						/* Otherwise allocate an entry for an SFN  */
;;;1643   		nent = 1;
;;;1644   	}
;;;1645   	res = dir_alloc(dp, nent);		/* Allocate entries */
;;;1646   
;;;1647   	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
;;;1648   		res = dir_sdi(dp, dp->index - nent);
;;;1649   		if (res == FR_OK) {
;;;1650   			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
;;;1651   			do {					/* Store LFN entries in bottom first */
;;;1652   				res = move_window(dp->fs, dp->sect);
;;;1653   				if (res != FR_OK) break;
;;;1654   				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
;;;1655   				dp->fs->wflag = 1;
;;;1656   				res = dir_next(dp, 0);	/* Next entry */
;;;1657   			} while (res == FR_OK && --nent);
;;;1658   		}
;;;1659   	}
;;;1660   #else	/* Non LFN configuration */
;;;1661   	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
;;;1662   #endif
;;;1663   
;;;1664   	if (res == FR_OK) {				/* Set SFN entry */
;;;1665   		res = move_window(dp->fs, dp->sect);
;;;1666   		if (res == FR_OK) {
;;;1667   			mem_set(dp->dir, 0, SZ_DIR);	/* Clean the entry */
;;;1668   			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
;;;1669   #if _USE_LFN
;;;1670   			dp->dir[DIR_NTres] = dp->fn[NS] & (NS_BODY | NS_EXT);	/* Put NT flag */
;;;1671   #endif
;;;1672   			dp->fs->wflag = 1;
;;;1673   		}
;;;1674   	}
;;;1675   
;;;1676   	return res;
;;;1677   }
000056  e8bd8ffe          POP      {r1-r11,pc}
                  |L14.90|
00005a  2d04              CMP      r5,#4                 ;1635
00005c  d001              BEQ      |L14.98|
00005e  4628              MOV      r0,r5                 ;1635
000060  e7f9              B        |L14.86|
                  |L14.98|
000062  f89d000b          LDRB     r0,[sp,#0xb]          ;1636
000066  f888000b          STRB     r0,[r8,#0xb]          ;1636
00006a  f8c49020          STR      r9,[r4,#0x20]         ;1636
                  |L14.110|
00006e  f89d000b          LDRB     r0,[sp,#0xb]          ;1639
000072  f0000002          AND      r0,r0,#2              ;1639
000076  b160              CBZ      r0,|L14.146|
000078  2600              MOVS     r6,#0                 ;1640
00007a  e000              B        |L14.126|
                  |L14.124|
00007c  1c76              ADDS     r6,r6,#1              ;1640
                  |L14.126|
00007e  f8390016          LDRH     r0,[r9,r6,LSL #1]     ;1640
000082  2800              CMP      r0,#0                 ;1640
000084  d1fa              BNE      |L14.124|
000086  f1060019          ADD      r0,r6,#0x19           ;1641
00008a  210d              MOVS     r1,#0xd               ;1641
00008c  fbb0f7f1          UDIV     r7,r0,r1              ;1641
000090  e000              B        |L14.148|
                  |L14.146|
000092  2701              MOVS     r7,#1                 ;1643
                  |L14.148|
000094  4639              MOV      r1,r7                 ;1645
000096  4620              MOV      r0,r4                 ;1645
000098  f7fffffe          BL       dir_alloc
00009c  4605              MOV      r5,r0                 ;1645
00009e  bb45              CBNZ     r5,|L14.242|
0000a0  1e78              SUBS     r0,r7,#1              ;1647
0000a2  1e07              SUBS     r7,r0,#0              ;1647
0000a4  d025              BEQ      |L14.242|
0000a6  88e0              LDRH     r0,[r4,#6]            ;1648
0000a8  1bc1              SUBS     r1,r0,r7              ;1648
0000aa  4620              MOV      r0,r4                 ;1648
0000ac  f7fffffe          BL       dir_sdi
0000b0  4605              MOV      r5,r0                 ;1648
0000b2  b9f5              CBNZ     r5,|L14.242|
0000b4  69a0              LDR      r0,[r4,#0x18]         ;1650
0000b6  f7fffffe          BL       sum_sfn
0000ba  4682              MOV      r10,r0                ;1650
0000bc  bf00              NOP                            ;1651
                  |L14.190|
0000be  6921              LDR      r1,[r4,#0x10]         ;1652
0000c0  6820              LDR      r0,[r4,#0]            ;1652
0000c2  f7fffffe          BL       move_window
0000c6  4605              MOV      r5,r0                 ;1652
0000c8  b105              CBZ      r5,|L14.204|
0000ca  e011              B        |L14.240|
                  |L14.204|
0000cc  b2fa              UXTB     r2,r7                 ;1654
0000ce  4653              MOV      r3,r10                ;1654
0000d0  6961              LDR      r1,[r4,#0x14]         ;1654
0000d2  6a20              LDR      r0,[r4,#0x20]         ;1654
0000d4  f7fffffe          BL       fit_lfn
0000d8  2001              MOVS     r0,#1                 ;1655
0000da  6821              LDR      r1,[r4,#0]            ;1655
0000dc  7108              STRB     r0,[r1,#4]            ;1655
0000de  2100              MOVS     r1,#0                 ;1656
0000e0  4620              MOV      r0,r4                 ;1656
0000e2  f7fffffe          BL       dir_next
0000e6  4605              MOV      r5,r0                 ;1656
0000e8  b915              CBNZ     r5,|L14.240|
0000ea  1e78              SUBS     r0,r7,#1              ;1657
0000ec  1e07              SUBS     r7,r0,#0              ;1657
0000ee  d1e6              BNE      |L14.190|
                  |L14.240|
0000f0  bf00              NOP                            ;1653
                  |L14.242|
0000f2  b9c5              CBNZ     r5,|L14.294|
0000f4  6921              LDR      r1,[r4,#0x10]         ;1665
0000f6  6820              LDR      r0,[r4,#0]            ;1665
0000f8  f7fffffe          BL       move_window
0000fc  4605              MOV      r5,r0                 ;1665
0000fe  b995              CBNZ     r5,|L14.294|
000100  2220              MOVS     r2,#0x20              ;1667
000102  2100              MOVS     r1,#0                 ;1667
000104  6960              LDR      r0,[r4,#0x14]         ;1667
000106  f7fffffe          BL       mem_set
00010a  220b              MOVS     r2,#0xb               ;1668
00010c  e9d40105          LDRD     r0,r1,[r4,#0x14]      ;1668
000110  f7fffffe          BL       mem_cpy
000114  69a0              LDR      r0,[r4,#0x18]         ;1670
000116  7ac0              LDRB     r0,[r0,#0xb]          ;1670
000118  f0000018          AND      r0,r0,#0x18           ;1670
00011c  6961              LDR      r1,[r4,#0x14]         ;1670
00011e  7308              STRB     r0,[r1,#0xc]          ;1670
000120  2001              MOVS     r0,#1                 ;1672
000122  6821              LDR      r1,[r4,#0]            ;1672
000124  7108              STRB     r0,[r1,#4]            ;1672
                  |L14.294|
000126  4628              MOV      r0,r5                 ;1676
000128  e795              B        |L14.86|
;;;1678   #endif /* !_FS_READONLY */
                          ENDP


                          AREA ||i.dir_remove||, CODE, READONLY, ALIGN=1

                  dir_remove PROC
;;;1687   static
;;;1688   FRESULT dir_remove (	/* FR_OK: Successful, FR_DISK_ERR: A disk error */
000000  b570              PUSH     {r4-r6,lr}
;;;1689   	DIR* dp				/* Directory object pointing the entry to be removed */
;;;1690   )
;;;1691   {
000002  4604              MOV      r4,r0
;;;1692   	FRESULT res;
;;;1693   #if _USE_LFN	/* LFN configuration */
;;;1694   	UINT i;
;;;1695   
;;;1696   	i = dp->index;	/* SFN index */
000004  88e6              LDRH     r6,[r4,#6]
;;;1697   	res = dir_sdi(dp, (dp->lfn_idx == 0xFFFF) ? i : dp->lfn_idx);	/* Goto the SFN or top of the LFN entries */
000006  8ca0              LDRH     r0,[r4,#0x24]
000008  f64f72ff          MOV      r2,#0xffff
00000c  4290              CMP      r0,r2
00000e  d101              BNE      |L15.20|
000010  4630              MOV      r0,r6
000012  e000              B        |L15.22|
                  |L15.20|
000014  8ca0              LDRH     r0,[r4,#0x24]
                  |L15.22|
000016  4601              MOV      r1,r0
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       dir_sdi
00001e  4605              MOV      r5,r0
;;;1698   	if (res == FR_OK) {
000020  bb0d              CBNZ     r5,|L15.102|
;;;1699   		do {
000022  bf00              NOP      
                  |L15.36|
;;;1700   			res = move_window(dp->fs, dp->sect);
000024  6921              LDR      r1,[r4,#0x10]
000026  6820              LDR      r0,[r4,#0]
000028  f7fffffe          BL       move_window
00002c  4605              MOV      r5,r0
;;;1701   			if (res != FR_OK) break;
00002e  b105              CBZ      r5,|L15.50|
000030  e015              B        |L15.94|
                  |L15.50|
;;;1702   			mem_set(dp->dir, 0, SZ_DIR);	/* Clear and mark the entry "deleted" */
000032  2220              MOVS     r2,#0x20
000034  2100              MOVS     r1,#0
000036  6960              LDR      r0,[r4,#0x14]
000038  f7fffffe          BL       mem_set
;;;1703   			*dp->dir = DDE;
00003c  20e5              MOVS     r0,#0xe5
00003e  6961              LDR      r1,[r4,#0x14]
000040  7008              STRB     r0,[r1,#0]
;;;1704   			dp->fs->wflag = 1;
000042  2001              MOVS     r0,#1
000044  6821              LDR      r1,[r4,#0]
000046  7108              STRB     r0,[r1,#4]
;;;1705   			if (dp->index >= i) break;	/* When reached SFN, all entries of the object has been deleted. */
000048  88e0              LDRH     r0,[r4,#6]
00004a  42b0              CMP      r0,r6
00004c  d300              BCC      |L15.80|
00004e  e006              B        |L15.94|
                  |L15.80|
;;;1706   			res = dir_next(dp, 0);		/* Next entry */
000050  2100              MOVS     r1,#0
000052  4620              MOV      r0,r4
000054  f7fffffe          BL       dir_next
000058  4605              MOV      r5,r0
;;;1707   		} while (res == FR_OK);
00005a  2d00              CMP      r5,#0
00005c  d0e2              BEQ      |L15.36|
                  |L15.94|
00005e  bf00              NOP                            ;1701
;;;1708   		if (res == FR_NO_FILE) res = FR_INT_ERR;
000060  2d04              CMP      r5,#4
000062  d100              BNE      |L15.102|
000064  2502              MOVS     r5,#2
                  |L15.102|
;;;1709   	}
;;;1710   
;;;1711   #else			/* Non LFN configuration */
;;;1712   	res = dir_sdi(dp, dp->index);
;;;1713   	if (res == FR_OK) {
;;;1714   		res = move_window(dp->fs, dp->sect);
;;;1715   		if (res == FR_OK) {
;;;1716   			mem_set(dp->dir, 0, SZ_DIR);	/* Clear and mark the entry "deleted" */
;;;1717   			*dp->dir = DDE;
;;;1718   			dp->fs->wflag = 1;
;;;1719   		}
;;;1720   	}
;;;1721   #endif
;;;1722   
;;;1723   	return res;
000066  4628              MOV      r0,r5
;;;1724   }
000068  bd70              POP      {r4-r6,pc}
;;;1725   #endif /* !_FS_READONLY */
                          ENDP


                          AREA ||i.dir_sdi||, CODE, READONLY, ALIGN=1

                  dir_sdi PROC
;;;1116   static
;;;1117   FRESULT dir_sdi (
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1118   	DIR* dp,		/* Pointer to directory object */
;;;1119   	UINT idx		/* Index of directory table */
;;;1120   )
;;;1121   {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
;;;1122   	DWORD clst, sect;
;;;1123   	UINT ic;
;;;1124   
;;;1125   
;;;1126   	dp->index = (WORD)idx;	/* Current index */
000008  80e6              STRH     r6,[r4,#6]
;;;1127   	clst = dp->sclust;		/* Table start cluster (0:root) */
00000a  68a5              LDR      r5,[r4,#8]
;;;1128   	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
00000c  2d01              CMP      r5,#1
00000e  d003              BEQ      |L16.24|
000010  6820              LDR      r0,[r4,#0]
000012  6940              LDR      r0,[r0,#0x14]
000014  42a8              CMP      r0,r5
000016  d802              BHI      |L16.30|
                  |L16.24|
;;;1129   		return FR_INT_ERR;
000018  2002              MOVS     r0,#2
                  |L16.26|
;;;1130   	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
;;;1131   		clst = dp->fs->dirbase;
;;;1132   
;;;1133   	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
;;;1134   		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
;;;1135   			return FR_INT_ERR;
;;;1136   		sect = dp->fs->dirbase;
;;;1137   	}
;;;1138   	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
;;;1139   		ic = SS(dp->fs) / SZ_DIR * dp->fs->csize;	/* Entries per cluster */
;;;1140   		while (idx >= ic) {	/* Follow cluster chain */
;;;1141   			clst = get_fat(dp->fs, clst);				/* Get next cluster */
;;;1142   			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
;;;1143   			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
;;;1144   				return FR_INT_ERR;
;;;1145   			idx -= ic;
;;;1146   		}
;;;1147   		sect = clust2sect(dp->fs, clst);
;;;1148   	}
;;;1149   	dp->clust = clst;	/* Current cluster# */
;;;1150   	if (!sect) return FR_INT_ERR;
;;;1151   	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIR);					/* Sector# of the directory entry */
;;;1152   	dp->dir = dp->fs->win + (idx % (SS(dp->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
;;;1153   
;;;1154   	return FR_OK;
;;;1155   }
00001a  e8bd81f0          POP      {r4-r8,pc}
                  |L16.30|
00001e  b92d              CBNZ     r5,|L16.44|
000020  6820              LDR      r0,[r4,#0]            ;1130
000022  7800              LDRB     r0,[r0,#0]            ;1130
000024  2803              CMP      r0,#3                 ;1130
000026  d101              BNE      |L16.44|
000028  6820              LDR      r0,[r4,#0]            ;1131
00002a  6a45              LDR      r5,[r0,#0x24]         ;1131
                  |L16.44|
00002c  b945              CBNZ     r5,|L16.64|
00002e  6820              LDR      r0,[r4,#0]            ;1134
000030  8900              LDRH     r0,[r0,#8]            ;1134
000032  42b0              CMP      r0,r6                 ;1134
000034  d801              BHI      |L16.58|
000036  2002              MOVS     r0,#2                 ;1135
000038  e7ef              B        |L16.26|
                  |L16.58|
00003a  6820              LDR      r0,[r4,#0]            ;1136
00003c  6a47              LDR      r7,[r0,#0x24]         ;1136
00003e  e024              B        |L16.138|
                  |L16.64|
000040  6821              LDR      r1,[r4,#0]            ;1139
000042  8948              LDRH     r0,[r1,#0xa]          ;1139
000044  17c1              ASRS     r1,r0,#31             ;1139
000046  eb0061d1          ADD      r1,r0,r1,LSR #27      ;1139
00004a  1149              ASRS     r1,r1,#5              ;1139
00004c  6822              LDR      r2,[r4,#0]            ;1139
00004e  7892              LDRB     r2,[r2,#2]            ;1139
000050  fb01f802          MUL      r8,r1,r2              ;1139
000054  e012              B        |L16.124|
                  |L16.86|
000056  4629              MOV      r1,r5                 ;1141
000058  6820              LDR      r0,[r4,#0]            ;1141
00005a  f7fffffe          BL       get_fat
00005e  4605              MOV      r5,r0                 ;1141
000060  1c68              ADDS     r0,r5,#1              ;1142
000062  b908              CBNZ     r0,|L16.104|
000064  2001              MOVS     r0,#1                 ;1142
000066  e7d8              B        |L16.26|
                  |L16.104|
000068  2d02              CMP      r5,#2                 ;1143
00006a  d303              BCC      |L16.116|
00006c  6820              LDR      r0,[r4,#0]            ;1143
00006e  6940              LDR      r0,[r0,#0x14]         ;1143
000070  42a8              CMP      r0,r5                 ;1143
000072  d801              BHI      |L16.120|
                  |L16.116|
000074  2002              MOVS     r0,#2                 ;1144
000076  e7d0              B        |L16.26|
                  |L16.120|
000078  eba60608          SUB      r6,r6,r8              ;1145
                  |L16.124|
00007c  4546              CMP      r6,r8                 ;1140
00007e  d2ea              BCS      |L16.86|
000080  4629              MOV      r1,r5                 ;1147
000082  6820              LDR      r0,[r4,#0]            ;1147
000084  f7fffffe          BL       clust2sect
000088  4607              MOV      r7,r0                 ;1147
                  |L16.138|
00008a  60e5              STR      r5,[r4,#0xc]          ;1149
00008c  b90f              CBNZ     r7,|L16.146|
00008e  2002              MOVS     r0,#2                 ;1150
000090  e7c3              B        |L16.26|
                  |L16.146|
000092  6821              LDR      r1,[r4,#0]            ;1151
000094  8948              LDRH     r0,[r1,#0xa]          ;1151
000096  17c1              ASRS     r1,r0,#31             ;1151
000098  eb0061d1          ADD      r1,r0,r1,LSR #27      ;1151
00009c  1149              ASRS     r1,r1,#5              ;1151
00009e  fbb6f1f1          UDIV     r1,r6,r1              ;1151
0000a2  4439              ADD      r1,r1,r7              ;1151
0000a4  6121              STR      r1,[r4,#0x10]         ;1151
0000a6  6821              LDR      r1,[r4,#0]            ;1152
0000a8  8948              LDRH     r0,[r1,#0xa]          ;1152
0000aa  17c1              ASRS     r1,r0,#31             ;1152
0000ac  eb0061d1          ADD      r1,r0,r1,LSR #27      ;1152
0000b0  1149              ASRS     r1,r1,#5              ;1152
0000b2  fbb6f2f1          UDIV     r2,r6,r1              ;1152
0000b6  fb016112          MLS      r1,r1,r2,r6           ;1152
0000ba  6822              LDR      r2,[r4,#0]            ;1152
0000bc  3230              ADDS     r2,r2,#0x30           ;1152
0000be  eb021141          ADD      r1,r2,r1,LSL #5       ;1152
0000c2  6161              STR      r1,[r4,#0x14]         ;1152
0000c4  2000              MOVS     r0,#0                 ;1154
0000c6  e7a8              B        |L16.26|
;;;1156   
                          ENDP


                          AREA ||i.enq_lock||, CODE, READONLY, ALIGN=2

                  enq_lock PROC
;;;669    static
;;;670    int enq_lock (void)	/* Check if an entry is available for a new object */
000000  2100              MOVS     r1,#0
;;;671    {
;;;672    	UINT i;
;;;673    
;;;674    	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
000002  e000              B        |L17.6|
                  |L17.4|
000004  1c49              ADDS     r1,r1,#1
                  |L17.6|
000006  2903              CMP      r1,#3
000008  d206              BCS      |L17.24|
00000a  eb010041          ADD      r0,r1,r1,LSL #1
00000e  4a05              LDR      r2,|L17.36|
000010  f8520020          LDR      r0,[r2,r0,LSL #2]
000014  2800              CMP      r0,#0
000016  d1f5              BNE      |L17.4|
                  |L17.24|
;;;675    	return (i == _FS_LOCK) ? 0 : 1;
000018  2903              CMP      r1,#3
00001a  d001              BEQ      |L17.32|
00001c  2001              MOVS     r0,#1
                  |L17.30|
;;;676    }
00001e  4770              BX       lr
                  |L17.32|
000020  2000              MOVS     r0,#0                 ;675
000022  e7fc              B        |L17.30|
;;;677    
                          ENDP

                  |L17.36|
                          DCD      Files

                          AREA ||i.f_chmod||, CODE, READONLY, ALIGN=2

                  f_chmod PROC
;;;3585   
;;;3586   FRESULT f_chmod (
000000  b5f7              PUSH     {r0-r2,r4-r7,lr}
;;;3587   	const TCHAR* path,	/* Pointer to the file path */
;;;3588   	BYTE value,			/* Attribute bits */
;;;3589   	BYTE mask			/* Attribute mask to change */
;;;3590   )
;;;3591   {
000002  b08e              SUB      sp,sp,#0x38
000004  460f              MOV      r7,r1
000006  4614              MOV      r4,r2
;;;3592   	FRESULT res;
;;;3593   	DIR dj;
;;;3594   	BYTE *dir;
;;;3595   	DEF_NAMEBUF;
;;;3596   
;;;3597   
;;;3598   	/* Get logical drive number */
;;;3599   	res = find_volume(&dj.fs, &path, 1);
000008  2201              MOVS     r2,#1
00000a  a90e              ADD      r1,sp,#0x38
00000c  a804              ADD      r0,sp,#0x10
00000e  f7fffffe          BL       find_volume
000012  4606              MOV      r6,r0
;;;3600   	if (res == FR_OK) {
000014  b9ee              CBNZ     r6,|L18.82|
;;;3601   		INIT_BUF(dj);
000016  a801              ADD      r0,sp,#4
000018  900a              STR      r0,[sp,#0x28]
00001a  480f              LDR      r0,|L18.88|
00001c  900c              STR      r0,[sp,#0x30]
;;;3602   		res = follow_path(&dj, path);		/* Follow the file path */
00001e  a804              ADD      r0,sp,#0x10
000020  990e              LDR      r1,[sp,#0x38]
000022  f7fffffe          BL       follow_path
000026  4606              MOV      r6,r0
;;;3603   		FREE_BUF();
;;;3604   		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
000028  bf00              NOP      
;;;3605   			res = FR_INVALID_NAME;
;;;3606   		if (res == FR_OK) {
00002a  b996              CBNZ     r6,|L18.82|
;;;3607   			dir = dj.dir;
00002c  9d09              LDR      r5,[sp,#0x24]
;;;3608   			if (!dir) {						/* Is it a root directory? */
00002e  b90d              CBNZ     r5,|L18.52|
;;;3609   				res = FR_INVALID_NAME;
000030  2606              MOVS     r6,#6
000032  e00e              B        |L18.82|
                  |L18.52|
;;;3610   			} else {						/* File or sub directory */
;;;3611   				mask &= AM_RDO|AM_HID|AM_SYS|AM_ARC;	/* Valid attribute mask */
000034  f0040427          AND      r4,r4,#0x27
;;;3612   				dir[DIR_Attr] = (value & mask) | (dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
000038  ea070004          AND      r0,r7,r4
00003c  7ae9              LDRB     r1,[r5,#0xb]
00003e  43a1              BICS     r1,r1,r4
000040  4308              ORRS     r0,r0,r1
000042  72e8              STRB     r0,[r5,#0xb]
;;;3613   				dj.fs->wflag = 1;
000044  2001              MOVS     r0,#1
000046  9904              LDR      r1,[sp,#0x10]
000048  7108              STRB     r0,[r1,#4]
;;;3614   				res = sync_fs(dj.fs);
00004a  9804              LDR      r0,[sp,#0x10]
00004c  f7fffffe          BL       sync_fs
000050  4606              MOV      r6,r0
                  |L18.82|
;;;3615   			}
;;;3616   		}
;;;3617   	}
;;;3618   
;;;3619   	LEAVE_FF(dj.fs, res);
000052  4630              MOV      r0,r6
;;;3620   }
000054  b011              ADD      sp,sp,#0x44
000056  bdf0              POP      {r4-r7,pc}
;;;3621   
                          ENDP

                  |L18.88|
                          DCD      LfnBuf

                          AREA ||i.f_close||, CODE, READONLY, ALIGN=1

                  f_close PROC
;;;2823   
;;;2824   FRESULT f_close (
000000  b570              PUSH     {r4-r6,lr}
;;;2825   	FIL *fp		/* Pointer to the file object to be closed */
;;;2826   )
;;;2827   {
000002  4605              MOV      r5,r0
;;;2828   	FRESULT res;
;;;2829   
;;;2830   
;;;2831   #if !_FS_READONLY
;;;2832   	res = f_sync(fp);					/* Flush cached data */
000004  4628              MOV      r0,r5
000006  f7fffffe          BL       f_sync
00000a  4604              MOV      r4,r0
;;;2833   	if (res == FR_OK)
00000c  b95c              CBNZ     r4,|L19.38|
;;;2834   #endif
;;;2835   	{
;;;2836   		res = validate(fp);				/* Lock volume */
00000e  4628              MOV      r0,r5
000010  f7fffffe          BL       validate
000014  4604              MOV      r4,r0
;;;2837   		if (res == FR_OK) {
000016  b934              CBNZ     r4,|L19.38|
;;;2838   #if _FS_REENTRANT
;;;2839   			FATFS *fs = fp->fs;
;;;2840   #endif
;;;2841   #if _FS_LOCK
;;;2842   			res = dec_lock(fp->lockid);	/* Decrement file open counter */
000018  6a68              LDR      r0,[r5,#0x24]
00001a  f7fffffe          BL       dec_lock
00001e  4604              MOV      r4,r0
;;;2843   			if (res == FR_OK)
000020  b90c              CBNZ     r4,|L19.38|
;;;2844   #endif
;;;2845   				fp->fs = 0;				/* Invalidate file object */
000022  2000              MOVS     r0,#0
000024  6028              STR      r0,[r5,#0]
                  |L19.38|
;;;2846   #if _FS_REENTRANT
;;;2847   			unlock_fs(fs, FR_OK);		/* Unlock volume */
;;;2848   #endif
;;;2849   		}
;;;2850   	}
;;;2851   	return res;
000026  4620              MOV      r0,r4
;;;2852   }
000028  bd70              POP      {r4-r6,pc}
;;;2853   
                          ENDP


                          AREA ||i.f_closedir||, CODE, READONLY, ALIGN=1

                  f_closedir PROC
;;;3209   
;;;3210   FRESULT f_closedir (
000000  b570              PUSH     {r4-r6,lr}
;;;3211   	DIR *dp		/* Pointer to the directory object to be closed */
;;;3212   )
;;;3213   {
000002  4604              MOV      r4,r0
;;;3214   	FRESULT res;
;;;3215   
;;;3216   
;;;3217   	res = validate(dp);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       validate
00000a  4605              MOV      r5,r0
;;;3218   	if (res == FR_OK) {
00000c  b945              CBNZ     r5,|L20.32|
;;;3219   #if _FS_REENTRANT
;;;3220   		FATFS *fs = dp->fs;
;;;3221   #endif
;;;3222   #if _FS_LOCK
;;;3223   		if (dp->lockid)				/* Decrement sub-directory open counter */
00000e  69e0              LDR      r0,[r4,#0x1c]
000010  b118              CBZ      r0,|L20.26|
;;;3224   			res = dec_lock(dp->lockid);
000012  69e0              LDR      r0,[r4,#0x1c]
000014  f7fffffe          BL       dec_lock
000018  4605              MOV      r5,r0
                  |L20.26|
;;;3225   		if (res == FR_OK)
00001a  b90d              CBNZ     r5,|L20.32|
;;;3226   #endif
;;;3227   			dp->fs = 0;				/* Invalidate directory object */
00001c  2000              MOVS     r0,#0
00001e  6020              STR      r0,[r4,#0]
                  |L20.32|
;;;3228   #if _FS_REENTRANT
;;;3229   		unlock_fs(fs, FR_OK);		/* Unlock volume */
;;;3230   #endif
;;;3231   	}
;;;3232   	return res;
000020  4628              MOV      r0,r5
;;;3233   }
000022  bd70              POP      {r4-r6,pc}
;;;3234   
                          ENDP


                          AREA ||i.f_getfree||, CODE, READONLY, ALIGN=1

                  f_getfree PROC
;;;3318   
;;;3319   FRESULT f_getfree (
000000  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;3320   	const TCHAR* path,	/* Path name of the logical drive number */
;;;3321   	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
;;;3322   	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
;;;3323   )
;;;3324   {
000004  b082              SUB      sp,sp,#8
000006  468a              MOV      r10,r1
;;;3325   	FRESULT res;
;;;3326   	FATFS *fs;
;;;3327   	DWORD n, clst, sect, stat;
;;;3328   	UINT i;
;;;3329   	BYTE fat, *p;
;;;3330   
;;;3331   
;;;3332   	/* Get logical drive number */
;;;3333   	res = find_volume(fatfs, &path, 0);
000008  2200              MOVS     r2,#0
00000a  a902              ADD      r1,sp,#8
00000c  9804              LDR      r0,[sp,#0x10]
00000e  f7fffffe          BL       find_volume
000012  9001              STR      r0,[sp,#4]
;;;3334   	fs = *fatfs;
000014  9804              LDR      r0,[sp,#0x10]
000016  6804              LDR      r4,[r0,#0]
;;;3335   	if (res == FR_OK) {
000018  9801              LDR      r0,[sp,#4]
00001a  2800              CMP      r0,#0
00001c  d16d              BNE      |L21.250|
;;;3336   		/* If free_clust is valid, return it without full cluster scan */
;;;3337   		if (fs->free_clust <= fs->n_fatent - 2) {
00001e  e9d41004          LDRD     r1,r0,[r4,#0x10]
000022  1e80              SUBS     r0,r0,#2
000024  4281              CMP      r1,r0
000026  d803              BHI      |L21.48|
;;;3338   			*nclst = fs->free_clust;
000028  6920              LDR      r0,[r4,#0x10]
00002a  f8ca0000          STR      r0,[r10,#0]
00002e  e064              B        |L21.250|
                  |L21.48|
;;;3339   		} else {
;;;3340   			/* Get number of free clusters */
;;;3341   			fat = fs->fs_type;
000030  f894b000          LDRB     r11,[r4,#0]
;;;3342   			n = 0;
000034  2600              MOVS     r6,#0
;;;3343   			if (fat == FS_FAT12) {
000036  f1bb0f01          CMP      r11,#1
00003a  d11c              BNE      |L21.118|
;;;3344   				clst = 2;
00003c  2702              MOVS     r7,#2
;;;3345   				do {
00003e  bf00              NOP      
                  |L21.64|
;;;3346   					stat = get_fat(fs, clst);
000040  4639              MOV      r1,r7
000042  4620              MOV      r0,r4
000044  f7fffffe          BL       get_fat
000048  4680              MOV      r8,r0
;;;3347   					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
00004a  f1080001          ADD      r0,r8,#1
00004e  b910              CBNZ     r0,|L21.86|
000050  2001              MOVS     r0,#1
000052  9001              STR      r0,[sp,#4]
000054  e00e              B        |L21.116|
                  |L21.86|
;;;3348   					if (stat == 1) { res = FR_INT_ERR; break; }
000056  f1b80f01          CMP      r8,#1
00005a  d102              BNE      |L21.98|
00005c  2002              MOVS     r0,#2
00005e  9001              STR      r0,[sp,#4]
000060  e008              B        |L21.116|
                  |L21.98|
;;;3349   					if (stat == 0) n++;
000062  f1b80f00          CMP      r8,#0
000066  d100              BNE      |L21.106|
000068  1c76              ADDS     r6,r6,#1
                  |L21.106|
;;;3350   				} while (++clst < fs->n_fatent);
00006a  1c78              ADDS     r0,r7,#1
00006c  4607              MOV      r7,r0
00006e  6961              LDR      r1,[r4,#0x14]
000070  4288              CMP      r0,r1
000072  d3e5              BCC      |L21.64|
                  |L21.116|
000074  e03a              B        |L21.236|
                  |L21.118|
;;;3351   			} else {
;;;3352   				clst = fs->n_fatent;
000076  6967              LDR      r7,[r4,#0x14]
;;;3353   				sect = fs->fatbase;
000078  6a20              LDR      r0,[r4,#0x20]
00007a  9000              STR      r0,[sp,#0]
;;;3354   				i = 0; p = 0;
00007c  f04f0900          MOV      r9,#0
000080  2500              MOVS     r5,#0
;;;3355   				do {
000082  bf00              NOP      
                  |L21.132|
;;;3356   					if (!i) {
000084  f1b90f00          CMP      r9,#0
000088  d10e              BNE      |L21.168|
;;;3357   						res = move_window(fs, sect++);
00008a  9800              LDR      r0,[sp,#0]
00008c  1c42              ADDS     r2,r0,#1
00008e  4601              MOV      r1,r0
000090  4620              MOV      r0,r4
000092  9200              STR      r2,[sp,#0]
000094  f7fffffe          BL       move_window
000098  9001              STR      r0,[sp,#4]
;;;3358   						if (res != FR_OK) break;
00009a  9801              LDR      r0,[sp,#4]
00009c  b100              CBZ      r0,|L21.160|
00009e  e024              B        |L21.234|
                  |L21.160|
;;;3359   						p = fs->win;
0000a0  f1040530          ADD      r5,r4,#0x30
;;;3360   						i = SS(fs);
0000a4  f8b4900a          LDRH     r9,[r4,#0xa]
                  |L21.168|
;;;3361   					}
;;;3362   					if (fat == FS_FAT16) {
0000a8  f1bb0f02          CMP      r11,#2
0000ac  d109              BNE      |L21.194|
;;;3363   						if (LD_WORD(p) == 0) n++;
0000ae  7828              LDRB     r0,[r5,#0]
0000b0  7869              LDRB     r1,[r5,#1]
0000b2  ea402001          ORR      r0,r0,r1,LSL #8
0000b6  b900              CBNZ     r0,|L21.186|
0000b8  1c76              ADDS     r6,r6,#1
                  |L21.186|
;;;3364   						p += 2; i -= 2;
0000ba  1cad              ADDS     r5,r5,#2
0000bc  f1a90902          SUB      r9,r9,#2
0000c0  e010              B        |L21.228|
                  |L21.194|
;;;3365   					} else {
;;;3366   						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
0000c2  78e8              LDRB     r0,[r5,#3]
0000c4  0600              LSLS     r0,r0,#24
0000c6  78a9              LDRB     r1,[r5,#2]
0000c8  ea404001          ORR      r0,r0,r1,LSL #16
0000cc  7869              LDRB     r1,[r5,#1]
0000ce  ea402001          ORR      r0,r0,r1,LSL #8
0000d2  7829              LDRB     r1,[r5,#0]
0000d4  4308              ORRS     r0,r0,r1
0000d6  f0204070          BIC      r0,r0,#0xf0000000
0000da  b900              CBNZ     r0,|L21.222|
0000dc  1c76              ADDS     r6,r6,#1
                  |L21.222|
;;;3367   						p += 4; i -= 4;
0000de  1d2d              ADDS     r5,r5,#4
0000e0  f1a90904          SUB      r9,r9,#4
                  |L21.228|
;;;3368   					}
;;;3369   				} while (--clst);
0000e4  1e78              SUBS     r0,r7,#1
0000e6  1e07              SUBS     r7,r0,#0
0000e8  d1cc              BNE      |L21.132|
                  |L21.234|
0000ea  bf00              NOP                            ;3358
                  |L21.236|
;;;3370   			}
;;;3371   			fs->free_clust = n;
0000ec  6126              STR      r6,[r4,#0x10]
;;;3372   			fs->fsi_flag |= 1;
0000ee  7960              LDRB     r0,[r4,#5]
0000f0  f0400001          ORR      r0,r0,#1
0000f4  7160              STRB     r0,[r4,#5]
;;;3373   			*nclst = n;
0000f6  f8ca6000          STR      r6,[r10,#0]
                  |L21.250|
;;;3374   		}
;;;3375   	}
;;;3376   	LEAVE_FF(fs, res);
0000fa  9801              LDR      r0,[sp,#4]
;;;3377   }
0000fc  b005              ADD      sp,sp,#0x14
0000fe  e8bd8ff0          POP      {r4-r11,pc}
;;;3378   
                          ENDP


                          AREA ||i.f_lseek||, CODE, READONLY, ALIGN=1

                  f_lseek PROC
;;;2995   
;;;2996   FRESULT f_lseek (
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;2997   	FIL* fp,		/* Pointer to the file object */
;;;2998   	DWORD ofs		/* File pointer from top of file */
;;;2999   )
;;;3000   {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
;;;3001   	FRESULT res;
;;;3002   
;;;3003   
;;;3004   	res = validate(fp);					/* Check validity of the object */
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       validate
00000e  4682              MOV      r10,r0
;;;3005   	if (res != FR_OK) LEAVE_FF(fp->fs, res);
000010  f1ba0f00          CMP      r10,#0
000014  d002              BEQ      |L22.28|
000016  4650              MOV      r0,r10
                  |L22.24|
;;;3006   	if (fp->err)						/* Check error */
;;;3007   		LEAVE_FF(fp->fs, (FRESULT)fp->err);
;;;3008   
;;;3009   #if _USE_FASTSEEK
;;;3010   	if (fp->cltbl) {	/* Fast seek */
;;;3011   		DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
;;;3012   
;;;3013   		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
;;;3014   			tbl = fp->cltbl;
;;;3015   			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
;;;3016   			cl = fp->sclust;			/* Top of the chain */
;;;3017   			if (cl) {
;;;3018   				do {
;;;3019   					/* Get a fragment */
;;;3020   					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
;;;3021   					do {
;;;3022   						pcl = cl; ncl++;
;;;3023   						cl = get_fat(fp->fs, cl);
;;;3024   						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
;;;3025   						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
;;;3026   					} while (cl == pcl + 1);
;;;3027   					if (ulen <= tlen) {		/* Store the length and top of the fragment */
;;;3028   						*tbl++ = ncl; *tbl++ = tcl;
;;;3029   					}
;;;3030   				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
;;;3031   			}
;;;3032   			*fp->cltbl = ulen;	/* Number of items used */
;;;3033   			if (ulen <= tlen)
;;;3034   				*tbl = 0;		/* Terminate table */
;;;3035   			else
;;;3036   				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
;;;3037   
;;;3038   		} else {						/* Fast seek */
;;;3039   			if (ofs > fp->fsize)		/* Clip offset at the file size */
;;;3040   				ofs = fp->fsize;
;;;3041   			fp->fptr = ofs;				/* Set file pointer */
;;;3042   			if (ofs) {
;;;3043   				fp->clust = clmt_clust(fp, ofs - 1);
;;;3044   				dsc = clust2sect(fp->fs, fp->clust);
;;;3045   				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
;;;3046   				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
;;;3047   				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
;;;3048   #if !_FS_TINY
;;;3049   #if !_FS_READONLY
;;;3050   					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
;;;3051   						if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1))
;;;3052   							ABORT(fp->fs, FR_DISK_ERR);
;;;3053   						fp->flag &= ~FA__DIRTY;
;;;3054   					}
;;;3055   #endif
;;;3056   					if (disk_read(fp->fs->drv, fp->buf, dsc, 1))	/* Load current sector */
;;;3057   						ABORT(fp->fs, FR_DISK_ERR);
;;;3058   #endif
;;;3059   					fp->dsect = dsc;
;;;3060   				}
;;;3061   			}
;;;3062   		}
;;;3063   	} else
;;;3064   #endif
;;;3065   
;;;3066   	/* Normal Seek */
;;;3067   	{
;;;3068   		DWORD clst, bcs, nsect, ifptr;
;;;3069   
;;;3070   		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
;;;3071   #if !_FS_READONLY
;;;3072   			 && !(fp->flag & FA_WRITE)
;;;3073   #endif
;;;3074   			) ofs = fp->fsize;
;;;3075   
;;;3076   		ifptr = fp->fptr;
;;;3077   		fp->fptr = nsect = 0;
;;;3078   		if (ofs) {
;;;3079   			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
;;;3080   			if (ifptr > 0 &&
;;;3081   				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
;;;3082   				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
;;;3083   				ofs -= fp->fptr;
;;;3084   				clst = fp->clust;
;;;3085   			} else {									/* When seek to back cluster, */
;;;3086   				clst = fp->sclust;						/* start from the first cluster */
;;;3087   #if !_FS_READONLY
;;;3088   				if (clst == 0) {						/* If no cluster chain, create a new chain */
;;;3089   					clst = create_chain(fp->fs, 0);
;;;3090   					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
;;;3091   					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
;;;3092   					fp->sclust = clst;
;;;3093   				}
;;;3094   #endif
;;;3095   				fp->clust = clst;
;;;3096   			}
;;;3097   			if (clst != 0) {
;;;3098   				while (ofs > bcs) {						/* Cluster following loop */
;;;3099   #if !_FS_READONLY
;;;3100   					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
;;;3101   						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
;;;3102   						if (clst == 0) {				/* When disk gets full, clip file size */
;;;3103   							ofs = bcs; break;
;;;3104   						}
;;;3105   					} else
;;;3106   #endif
;;;3107   						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
;;;3108   					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
;;;3109   					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
;;;3110   					fp->clust = clst;
;;;3111   					fp->fptr += bcs;
;;;3112   					ofs -= bcs;
;;;3113   				}
;;;3114   				fp->fptr += ofs;
;;;3115   				if (ofs % SS(fp->fs)) {
;;;3116   					nsect = clust2sect(fp->fs, clst);	/* Current sector */
;;;3117   					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
;;;3118   					nsect += ofs / SS(fp->fs);
;;;3119   				}
;;;3120   			}
;;;3121   		}
;;;3122   		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
;;;3123   #if !_FS_TINY
;;;3124   #if !_FS_READONLY
;;;3125   			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
;;;3126   				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1))
;;;3127   					ABORT(fp->fs, FR_DISK_ERR);
;;;3128   				fp->flag &= ~FA__DIRTY;
;;;3129   			}
;;;3130   #endif
;;;3131   			if (disk_read(fp->fs->drv, fp->buf, nsect, 1))	/* Fill sector cache */
;;;3132   				ABORT(fp->fs, FR_DISK_ERR);
;;;3133   #endif
;;;3134   			fp->dsect = nsect;
;;;3135   		}
;;;3136   #if !_FS_READONLY
;;;3137   		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
;;;3138   			fp->fsize = fp->fptr;
;;;3139   			fp->flag |= FA__WRITTEN;
;;;3140   		}
;;;3141   #endif
;;;3142   	}
;;;3143   
;;;3144   	LEAVE_FF(fp->fs, res);
;;;3145   }
000018  e8bd87f0          POP      {r4-r10,pc}
                  |L22.28|
00001c  79e0              LDRB     r0,[r4,#7]            ;3006
00001e  b108              CBZ      r0,|L22.36|
000020  79e0              LDRB     r0,[r4,#7]            ;3007
000022  e7f9              B        |L22.24|
                  |L22.36|
000024  68e0              LDR      r0,[r4,#0xc]          ;3070
000026  42b0              CMP      r0,r6                 ;3070
000028  d204              BCS      |L22.52|
00002a  79a0              LDRB     r0,[r4,#6]            ;3072
00002c  f0000002          AND      r0,r0,#2              ;3072
000030  b900              CBNZ     r0,|L22.52|
000032  68e6              LDR      r6,[r4,#0xc]          ;3074
                  |L22.52|
000034  f8d49008          LDR      r9,[r4,#8]            ;3076
000038  f04f0800          MOV      r8,#0                 ;3077
00003c  f8c48008          STR      r8,[r4,#8]            ;3077
000040  2e00              CMP      r6,#0                 ;3078
000042  d071              BEQ      |L22.296|
000044  6820              LDR      r0,[r4,#0]            ;3079
000046  7880              LDRB     r0,[r0,#2]            ;3079
000048  6821              LDR      r1,[r4,#0]            ;3079
00004a  8949              LDRH     r1,[r1,#0xa]          ;3079
00004c  fb00f701          MUL      r7,r0,r1              ;3079
000050  f1b90f00          CMP      r9,#0                 ;3080
000054  d011              BEQ      |L22.122|
000056  1e70              SUBS     r0,r6,#1              ;3081
000058  fbb0f1f7          UDIV     r1,r0,r7              ;3081
00005c  f1a90001          SUB      r0,r9,#1              ;3081
000060  fbb0f0f7          UDIV     r0,r0,r7              ;3081
000064  4281              CMP      r1,r0                 ;3081
000066  d308              BCC      |L22.122|
000068  f1a90001          SUB      r0,r9,#1              ;3082
00006c  1e79              SUBS     r1,r7,#1              ;3082
00006e  4388              BICS     r0,r0,r1              ;3082
000070  60a0              STR      r0,[r4,#8]            ;3082
000072  68a0              LDR      r0,[r4,#8]            ;3083
000074  1a36              SUBS     r6,r6,r0              ;3083
000076  6965              LDR      r5,[r4,#0x14]         ;3084
000078  e012              B        |L22.160|
                  |L22.122|
00007a  6925              LDR      r5,[r4,#0x10]         ;3086
00007c  b97d              CBNZ     r5,|L22.158|
00007e  2100              MOVS     r1,#0                 ;3089
000080  6820              LDR      r0,[r4,#0]            ;3089
000082  f7fffffe          BL       create_chain
000086  4605              MOV      r5,r0                 ;3089
000088  2d01              CMP      r5,#1                 ;3090
00008a  d102              BNE      |L22.146|
00008c  2002              MOVS     r0,#2                 ;3090
00008e  71e0              STRB     r0,[r4,#7]            ;3090
000090  e7c2              B        |L22.24|
                  |L22.146|
000092  1c68              ADDS     r0,r5,#1              ;3091
000094  b910              CBNZ     r0,|L22.156|
000096  2001              MOVS     r0,#1                 ;3091
000098  71e0              STRB     r0,[r4,#7]            ;3091
00009a  e7bd              B        |L22.24|
                  |L22.156|
00009c  6125              STR      r5,[r4,#0x10]         ;3092
                  |L22.158|
00009e  6165              STR      r5,[r4,#0x14]         ;3095
                  |L22.160|
0000a0  2d00              CMP      r5,#0                 ;3097
0000a2  d041              BEQ      |L22.296|
0000a4  e023              B        |L22.238|
                  |L22.166|
0000a6  79a0              LDRB     r0,[r4,#6]            ;3100
0000a8  f0000002          AND      r0,r0,#2              ;3100
0000ac  b138              CBZ      r0,|L22.190|
0000ae  4629              MOV      r1,r5                 ;3101
0000b0  6820              LDR      r0,[r4,#0]            ;3101
0000b2  f7fffffe          BL       create_chain
0000b6  4605              MOV      r5,r0                 ;3101
0000b8  b935              CBNZ     r5,|L22.200|
0000ba  463e              MOV      r6,r7                 ;3103
0000bc  e019              B        |L22.242|
                  |L22.190|
0000be  4629              MOV      r1,r5                 ;3107
0000c0  6820              LDR      r0,[r4,#0]            ;3107
0000c2  f7fffffe          BL       get_fat
0000c6  4605              MOV      r5,r0                 ;3107
                  |L22.200|
0000c8  1c68              ADDS     r0,r5,#1              ;3108
0000ca  b910              CBNZ     r0,|L22.210|
0000cc  2001              MOVS     r0,#1                 ;3108
0000ce  71e0              STRB     r0,[r4,#7]            ;3108
0000d0  e7a2              B        |L22.24|
                  |L22.210|
0000d2  2d01              CMP      r5,#1                 ;3109
0000d4  d903              BLS      |L22.222|
0000d6  6820              LDR      r0,[r4,#0]            ;3109
0000d8  6940              LDR      r0,[r0,#0x14]         ;3109
0000da  42a8              CMP      r0,r5                 ;3109
0000dc  d802              BHI      |L22.228|
                  |L22.222|
0000de  2002              MOVS     r0,#2                 ;3109
0000e0  71e0              STRB     r0,[r4,#7]            ;3109
0000e2  e799              B        |L22.24|
                  |L22.228|
0000e4  6165              STR      r5,[r4,#0x14]         ;3110
0000e6  68a0              LDR      r0,[r4,#8]            ;3111
0000e8  4438              ADD      r0,r0,r7              ;3111
0000ea  60a0              STR      r0,[r4,#8]            ;3111
0000ec  1bf6              SUBS     r6,r6,r7              ;3112
                  |L22.238|
0000ee  42be              CMP      r6,r7                 ;3098
0000f0  d8d9              BHI      |L22.166|
                  |L22.242|
0000f2  bf00              NOP                            ;3103
0000f4  68a0              LDR      r0,[r4,#8]            ;3114
0000f6  4430              ADD      r0,r0,r6              ;3114
0000f8  60a0              STR      r0,[r4,#8]            ;3114
0000fa  6820              LDR      r0,[r4,#0]            ;3115
0000fc  8940              LDRH     r0,[r0,#0xa]          ;3115
0000fe  fbb6f1f0          UDIV     r1,r6,r0              ;3115
000102  fb006011          MLS      r0,r0,r1,r6           ;3115
000106  b178              CBZ      r0,|L22.296|
000108  4629              MOV      r1,r5                 ;3116
00010a  6820              LDR      r0,[r4,#0]            ;3116
00010c  f7fffffe          BL       clust2sect
000110  4680              MOV      r8,r0                 ;3116
000112  f1b80f00          CMP      r8,#0                 ;3117
000116  d102              BNE      |L22.286|
000118  2002              MOVS     r0,#2                 ;3117
00011a  71e0              STRB     r0,[r4,#7]            ;3117
00011c  e77c              B        |L22.24|
                  |L22.286|
00011e  6820              LDR      r0,[r4,#0]            ;3118
000120  8940              LDRH     r0,[r0,#0xa]          ;3118
000122  fbb6f0f0          UDIV     r0,r6,r0              ;3118
000126  4480              ADD      r8,r8,r0              ;3118
                  |L22.296|
000128  6821              LDR      r1,[r4,#0]            ;3122
00012a  8949              LDRH     r1,[r1,#0xa]          ;3122
00012c  68a0              LDR      r0,[r4,#8]            ;3122
00012e  fbb0f2f1          UDIV     r2,r0,r1              ;3122
000132  fb010012          MLS      r0,r1,r2,r0           ;3122
000136  b320              CBZ      r0,|L22.386|
000138  69a0              LDR      r0,[r4,#0x18]         ;3122
00013a  4540              CMP      r0,r8                 ;3122
00013c  d021              BEQ      |L22.386|
00013e  79a0              LDRB     r0,[r4,#6]            ;3125
000140  f0000040          AND      r0,r0,#0x40           ;3125
000144  b178              CBZ      r0,|L22.358|
000146  6821              LDR      r1,[r4,#0]            ;3126
000148  7848              LDRB     r0,[r1,#1]            ;3126
00014a  2301              MOVS     r3,#1                 ;3126
00014c  f1040128          ADD      r1,r4,#0x28           ;3126
000150  69a2              LDR      r2,[r4,#0x18]         ;3126
000152  f7fffffe          BL       disk_write
000156  b110              CBZ      r0,|L22.350|
000158  2001              MOVS     r0,#1                 ;3127
00015a  71e0              STRB     r0,[r4,#7]            ;3127
00015c  e75c              B        |L22.24|
                  |L22.350|
00015e  79a0              LDRB     r0,[r4,#6]            ;3128
000160  f0200040          BIC      r0,r0,#0x40           ;3128
000164  71a0              STRB     r0,[r4,#6]            ;3128
                  |L22.358|
000166  6821              LDR      r1,[r4,#0]            ;3131
000168  7848              LDRB     r0,[r1,#1]            ;3131
00016a  2301              MOVS     r3,#1                 ;3131
00016c  4642              MOV      r2,r8                 ;3131
00016e  f1040128          ADD      r1,r4,#0x28           ;3131
000172  f7fffffe          BL       disk_read
000176  b110              CBZ      r0,|L22.382|
000178  2001              MOVS     r0,#1                 ;3132
00017a  71e0              STRB     r0,[r4,#7]            ;3132
00017c  e74c              B        |L22.24|
                  |L22.382|
00017e  f8c48018          STR      r8,[r4,#0x18]         ;3134
                  |L22.386|
000182  e9d40102          LDRD     r0,r1,[r4,#8]         ;3137
000186  4288              CMP      r0,r1                 ;3137
000188  d905              BLS      |L22.406|
00018a  68a0              LDR      r0,[r4,#8]            ;3138
00018c  60e0              STR      r0,[r4,#0xc]          ;3138
00018e  79a0              LDRB     r0,[r4,#6]            ;3139
000190  f0400020          ORR      r0,r0,#0x20           ;3139
000194  71a0              STRB     r0,[r4,#6]            ;3139
                  |L22.406|
000196  4650              MOV      r0,r10                ;3144
000198  e73e              B        |L22.24|
;;;3146   
                          ENDP


                          AREA ||i.f_mkdir||, CODE, READONLY, ALIGN=2

                  f_mkdir PROC
;;;3511   
;;;3512   FRESULT f_mkdir (
000000  e92d47f1          PUSH     {r0,r4-r10,lr}
;;;3513   	const TCHAR* path		/* Pointer to the directory path */
;;;3514   )
;;;3515   {
000004  b08d              SUB      sp,sp,#0x34
;;;3516   	FRESULT res;
;;;3517   	DIR dj;
;;;3518   	BYTE *dir, n;
;;;3519   	DWORD dsc, dcl, pcl, tm = get_fattime();
000006  f7fffffe          BL       get_fattime
00000a  4606              MOV      r6,r0
;;;3520   	DEF_NAMEBUF;
;;;3521   
;;;3522   
;;;3523   	/* Get logical drive number */
;;;3524   	res = find_volume(&dj.fs, &path, 1);
00000c  2201              MOVS     r2,#1
00000e  a90d              ADD      r1,sp,#0x34
000010  a803              ADD      r0,sp,#0xc
000012  f7fffffe          BL       find_volume
000016  4605              MOV      r5,r0
;;;3525   	if (res == FR_OK) {
000018  2d00              CMP      r5,#0
                  |L23.26|
00001a  d16f              BNE      |L23.252|
;;;3526   		INIT_BUF(dj);
00001c  f8cdd024          STR      sp,[sp,#0x24]
000020  4850              LDR      r0,|L23.356|
000022  900b              STR      r0,[sp,#0x2c]
;;;3527   		res = follow_path(&dj, path);			/* Follow the file path */
000024  a803              ADD      r0,sp,#0xc
000026  990d              LDR      r1,[sp,#0x34]
000028  f7fffffe          BL       follow_path
00002c  4605              MOV      r5,r0
;;;3528   		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
00002e  b905              CBNZ     r5,|L23.50|
000030  2508              MOVS     r5,#8
                  |L23.50|
;;;3529   		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NS] & NS_DOT))
000032  bf00              NOP      
;;;3530   			res = FR_INVALID_NAME;
;;;3531   		if (res == FR_NO_FILE) {				/* Can create a new directory */
000034  2d04              CMP      r5,#4
000036  d1f0              BNE      |L23.26|
;;;3532   			dcl = create_chain(dj.fs, 0);		/* Allocate a cluster for the new directory table */
000038  2100              MOVS     r1,#0
00003a  9803              LDR      r0,[sp,#0xc]
00003c  f7fffffe          BL       create_chain
000040  4607              MOV      r7,r0
;;;3533   			res = FR_OK;
000042  2500              MOVS     r5,#0
;;;3534   			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
000044  b907              CBNZ     r7,|L23.72|
000046  2507              MOVS     r5,#7
                  |L23.72|
;;;3535   			if (dcl == 1) res = FR_INT_ERR;
000048  2f01              CMP      r7,#1
00004a  d100              BNE      |L23.78|
00004c  2502              MOVS     r5,#2
                  |L23.78|
;;;3536   			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
00004e  1c78              ADDS     r0,r7,#1
000050  b900              CBNZ     r0,|L23.84|
000052  2501              MOVS     r5,#1
                  |L23.84|
;;;3537   			if (res == FR_OK)					/* Flush FAT */
000054  b91d              CBNZ     r5,|L23.94|
;;;3538   				res = sync_window(dj.fs);
000056  9803              LDR      r0,[sp,#0xc]
000058  f7fffffe          BL       sync_window
00005c  4605              MOV      r5,r0
                  |L23.94|
;;;3539   			if (res == FR_OK) {					/* Initialize the new directory table */
00005e  2d00              CMP      r5,#0
000060  d15b              BNE      |L23.282|
;;;3540   				dsc = clust2sect(dj.fs, dcl);
000062  4639              MOV      r1,r7
000064  9803              LDR      r0,[sp,#0xc]
000066  f7fffffe          BL       clust2sect
00006a  4681              MOV      r9,r0
;;;3541   				dir = dj.fs->win;
00006c  9803              LDR      r0,[sp,#0xc]
00006e  f1000430          ADD      r4,r0,#0x30
;;;3542   				mem_set(dir, 0, SS(dj.fs));
000072  9803              LDR      r0,[sp,#0xc]
000074  8942              LDRH     r2,[r0,#0xa]
000076  2100              MOVS     r1,#0
000078  4620              MOV      r0,r4
00007a  f7fffffe          BL       mem_set
;;;3543   				mem_set(dir+DIR_Name, ' ', 11);	/* Create "." entry */
00007e  220b              MOVS     r2,#0xb
000080  2120              MOVS     r1,#0x20
000082  4620              MOV      r0,r4
000084  f7fffffe          BL       mem_set
;;;3544   				dir[DIR_Name] = '.';
000088  202e              MOVS     r0,#0x2e
00008a  7020              STRB     r0,[r4,#0]
;;;3545   				dir[DIR_Attr] = AM_DIR;
00008c  2010              MOVS     r0,#0x10
00008e  72e0              STRB     r0,[r4,#0xb]
;;;3546   				ST_DWORD(dir+DIR_WrtTime, tm);
000090  75a6              STRB     r6,[r4,#0x16]
000092  0a31              LSRS     r1,r6,#8
000094  75e1              STRB     r1,[r4,#0x17]
000096  0c31              LSRS     r1,r6,#16
000098  7621              STRB     r1,[r4,#0x18]
00009a  0e31              LSRS     r1,r6,#24
00009c  7661              STRB     r1,[r4,#0x19]
;;;3547   				st_clust(dir, dcl);
00009e  4639              MOV      r1,r7
0000a0  4620              MOV      r0,r4
0000a2  f7fffffe          BL       st_clust
;;;3548   				mem_cpy(dir+SZ_DIR, dir, SZ_DIR); 	/* Create ".." entry */
0000a6  2220              MOVS     r2,#0x20
0000a8  4621              MOV      r1,r4
0000aa  f1040020          ADD      r0,r4,#0x20
0000ae  f7fffffe          BL       mem_cpy
;;;3549   				dir[SZ_DIR+1] = '.'; pcl = dj.sclust;
0000b2  202e              MOVS     r0,#0x2e
0000b4  f8840021          STRB     r0,[r4,#0x21]
0000b8  f8dda014          LDR      r10,[sp,#0x14]
;;;3550   				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
0000bc  9803              LDR      r0,[sp,#0xc]
0000be  7800              LDRB     r0,[r0,#0]
0000c0  2803              CMP      r0,#3
0000c2  d104              BNE      |L23.206|
0000c4  9803              LDR      r0,[sp,#0xc]
0000c6  6a40              LDR      r0,[r0,#0x24]
0000c8  4550              CMP      r0,r10
0000ca  d100              BNE      |L23.206|
;;;3551   					pcl = 0;
0000cc  46aa              MOV      r10,r5
                  |L23.206|
;;;3552   				st_clust(dir+SZ_DIR, pcl);
0000ce  4651              MOV      r1,r10
0000d0  f1040020          ADD      r0,r4,#0x20
0000d4  f7fffffe          BL       st_clust
;;;3553   				for (n = dj.fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
0000d8  9803              LDR      r0,[sp,#0xc]
0000da  f8908002          LDRB     r8,[r0,#2]
0000de  e018              B        |L23.274|
                  |L23.224|
;;;3554   					dj.fs->winsect = dsc++;
0000e0  9803              LDR      r0,[sp,#0xc]
0000e2  f8c0902c          STR      r9,[r0,#0x2c]
0000e6  f1090901          ADD      r9,r9,#1
;;;3555   					dj.fs->wflag = 1;
0000ea  2001              MOVS     r0,#1
0000ec  9903              LDR      r1,[sp,#0xc]
0000ee  7108              STRB     r0,[r1,#4]
;;;3556   					res = sync_window(dj.fs);
0000f0  9803              LDR      r0,[sp,#0xc]
0000f2  f7fffffe          BL       sync_window
0000f6  4605              MOV      r5,r0
;;;3557   					if (res != FR_OK) break;
0000f8  b10d              CBZ      r5,|L23.254|
0000fa  e00d              B        |L23.280|
                  |L23.252|
0000fc  e02d              B        |L23.346|
                  |L23.254|
;;;3558   					mem_set(dir, 0, SS(dj.fs));
0000fe  9803              LDR      r0,[sp,#0xc]
000100  8942              LDRH     r2,[r0,#0xa]
000102  2100              MOVS     r1,#0
000104  4620              MOV      r0,r4
000106  f7fffffe          BL       mem_set
00010a  f1a80001          SUB      r0,r8,#1              ;3553
00010e  f00008ff          AND      r8,r0,#0xff           ;3553
                  |L23.274|
000112  f1b80f00          CMP      r8,#0                 ;3553
000116  d1e3              BNE      |L23.224|
                  |L23.280|
000118  bf00              NOP                            ;3557
                  |L23.282|
;;;3559   				}
;;;3560   			}
;;;3561   			if (res == FR_OK) res = dir_register(&dj);	/* Register the object to the directoy */
00011a  b91d              CBNZ     r5,|L23.292|
00011c  a803              ADD      r0,sp,#0xc
00011e  f7fffffe          BL       dir_register
000122  4605              MOV      r5,r0
                  |L23.292|
;;;3562   			if (res != FR_OK) {
000124  b125              CBZ      r5,|L23.304|
;;;3563   				remove_chain(dj.fs, dcl);			/* Could not register, remove cluster chain */
000126  4639              MOV      r1,r7
000128  9803              LDR      r0,[sp,#0xc]
00012a  f7fffffe          BL       remove_chain
00012e  e014              B        |L23.346|
                  |L23.304|
;;;3564   			} else {
;;;3565   				dir = dj.dir;
000130  9c08              LDR      r4,[sp,#0x20]
;;;3566   				dir[DIR_Attr] = AM_DIR;				/* Attribute */
000132  2010              MOVS     r0,#0x10
000134  72e0              STRB     r0,[r4,#0xb]
;;;3567   				ST_DWORD(dir+DIR_WrtTime, tm);		/* Created time */
000136  75a6              STRB     r6,[r4,#0x16]
000138  0a31              LSRS     r1,r6,#8
00013a  75e1              STRB     r1,[r4,#0x17]
00013c  0c31              LSRS     r1,r6,#16
00013e  7621              STRB     r1,[r4,#0x18]
000140  0e31              LSRS     r1,r6,#24
000142  7661              STRB     r1,[r4,#0x19]
;;;3568   				st_clust(dir, dcl);					/* Table start cluster */
000144  4639              MOV      r1,r7
000146  4620              MOV      r0,r4
000148  f7fffffe          BL       st_clust
;;;3569   				dj.fs->wflag = 1;
00014c  2001              MOVS     r0,#1
00014e  9903              LDR      r1,[sp,#0xc]
000150  7108              STRB     r0,[r1,#4]
;;;3570   				res = sync_fs(dj.fs);
000152  9803              LDR      r0,[sp,#0xc]
000154  f7fffffe          BL       sync_fs
000158  4605              MOV      r5,r0
                  |L23.346|
;;;3571   			}
;;;3572   		}
;;;3573   		FREE_BUF();
;;;3574   	}
;;;3575   
;;;3576   	LEAVE_FF(dj.fs, res);
00015a  4628              MOV      r0,r5
;;;3577   }
00015c  b00e              ADD      sp,sp,#0x38
00015e  e8bd87f0          POP      {r4-r10,pc}
;;;3578   
                          ENDP

000162  0000              DCW      0x0000
                  |L23.356|
                          DCD      LfnBuf

                          AREA ||i.f_mkfs||, CODE, READONLY, ALIGN=2

                  f_mkfs PROC
;;;3977   
;;;3978   FRESULT f_mkfs (
000000  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;3979   	const TCHAR* path,	/* Logical drive number */
;;;3980   	BYTE sfd,			/* Partitioning rule 0:FDISK, 1:SFD */
;;;3981   	UINT au				/* Allocation unit [bytes] */
;;;3982   )
;;;3983   {
000004  b090              SUB      sp,sp,#0x40
000006  4692              MOV      r10,r2
;;;3984   	static const WORD vst[] = { 1024,   512,  256,  128,   64,    32,   16,    8,    4,    2,   0};
;;;3985   	static const WORD cst[] = {32768, 16384, 8192, 4096, 2048, 16384, 8192, 4096, 2048, 1024, 512};
;;;3986   	int vol;
;;;3987   	BYTE fmt, md, sys, *tbl, pdrv, part;
;;;3988   	DWORD n_clst, vs, n, wsect;
;;;3989   	UINT i;
;;;3990   	DWORD b_vol, b_fat, b_dir, b_data;	/* LBA */
;;;3991   	DWORD n_vol, n_rsv, n_fat, n_dir;	/* Size */
;;;3992   	FATFS *fs;
;;;3993   	DSTATUS stat;
;;;3994   
;;;3995   
;;;3996   	/* Check mounted drive and clear work area */
;;;3997   	vol = get_ldnumber(&path);
000008  a810              ADD      r0,sp,#0x40
00000a  f7fffffe          BL       get_ldnumber
00000e  900f              STR      r0,[sp,#0x3c]
;;;3998   	if (vol < 0) return FR_INVALID_DRIVE;
000010  980f              LDR      r0,[sp,#0x3c]
000012  2800              CMP      r0,#0
000014  da03              BGE      |L24.30|
000016  200b              MOVS     r0,#0xb
                  |L24.24|
;;;3999   	if (sfd > 1) return FR_INVALID_PARAMETER;
;;;4000   	if (au & (au - 1)) return FR_INVALID_PARAMETER;
;;;4001   	fs = FatFs[vol];
;;;4002   	if (!fs) return FR_NOT_ENABLED;
;;;4003   	fs->fs_type = 0;
;;;4004   	pdrv = LD2PD(vol);	/* Physical drive */
;;;4005   	part = LD2PT(vol);	/* Partition (0:auto detect, 1-4:get from partition table)*/
;;;4006   
;;;4007   	/* Get disk statics */
;;;4008   	stat = disk_initialize(pdrv);
;;;4009   	if (stat & STA_NOINIT) return FR_NOT_READY;
;;;4010   	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
;;;4011   #if _MAX_SS != _MIN_SS		/* Get disk sector size */
;;;4012   	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK || SS(fs) > _MAX_SS || SS(fs) < _MIN_SS)
;;;4013   		return FR_DISK_ERR;
;;;4014   #endif
;;;4015   	if (_MULTI_PARTITION && part) {
;;;4016   		/* Get partition information from partition table in the MBR */
;;;4017   		if (disk_read(pdrv, fs->win, 0, 1)) return FR_DISK_ERR;
;;;4018   		if (LD_WORD(fs->win+BS_55AA) != 0xAA55) return FR_MKFS_ABORTED;
;;;4019   		tbl = &fs->win[MBR_Table + (part - 1) * SZ_PTE];
;;;4020   		if (!tbl[4]) return FR_MKFS_ABORTED;	/* No partition? */
;;;4021   		b_vol = LD_DWORD(tbl+8);	/* Volume start sector */
;;;4022   		n_vol = LD_DWORD(tbl+12);	/* Volume size */
;;;4023   	} else {
;;;4024   		/* Create a partition in this function */
;;;4025   		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &n_vol) != RES_OK || n_vol < 128)
;;;4026   			return FR_DISK_ERR;
;;;4027   		b_vol = (sfd) ? 0 : 63;		/* Volume start sector */
;;;4028   		n_vol -= b_vol;				/* Volume size */
;;;4029   	}
;;;4030   
;;;4031   	if (!au) {				/* AU auto selection */
;;;4032   		vs = n_vol / (2000 / (SS(fs) / 512));
;;;4033   		for (i = 0; vs < vst[i]; i++) ;
;;;4034   		au = cst[i];
;;;4035   	}
;;;4036   	au /= SS(fs);		/* Number of sectors per cluster */
;;;4037   	if (au == 0) au = 1;
;;;4038   	if (au > 128) au = 128;
;;;4039   
;;;4040   	/* Pre-compute number of clusters and FAT sub-type */
;;;4041   	n_clst = n_vol / au;
;;;4042   	fmt = FS_FAT12;
;;;4043   	if (n_clst >= MIN_FAT16) fmt = FS_FAT16;
;;;4044   	if (n_clst >= MIN_FAT32) fmt = FS_FAT32;
;;;4045   
;;;4046   	/* Determine offset and size of FAT structure */
;;;4047   	if (fmt == FS_FAT32) {
;;;4048   		n_fat = ((n_clst * 4) + 8 + SS(fs) - 1) / SS(fs);
;;;4049   		n_rsv = 32;
;;;4050   		n_dir = 0;
;;;4051   	} else {
;;;4052   		n_fat = (fmt == FS_FAT12) ? (n_clst * 3 + 1) / 2 + 3 : (n_clst * 2) + 4;
;;;4053   		n_fat = (n_fat + SS(fs) - 1) / SS(fs);
;;;4054   		n_rsv = 1;
;;;4055   		n_dir = (DWORD)N_ROOTDIR * SZ_DIR / SS(fs);
;;;4056   	}
;;;4057   	b_fat = b_vol + n_rsv;				/* FAT area start sector */
;;;4058   	b_dir = b_fat + n_fat * N_FATS;		/* Directory area start sector */
;;;4059   	b_data = b_dir + n_dir;				/* Data area start sector */
;;;4060   	if (n_vol < b_data + au - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
;;;4061   
;;;4062   	/* Align data start sector to erase block boundary (for flash memory media) */
;;;4063   	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &n) != RES_OK || !n || n > 32768) n = 1;
;;;4064   	n = (b_data + n - 1) & ~(n - 1);	/* Next nearest erase block from current data start */
;;;4065   	n = (n - b_data) / N_FATS;
;;;4066   	if (fmt == FS_FAT32) {		/* FAT32: Move FAT offset */
;;;4067   		n_rsv += n;
;;;4068   		b_fat += n;
;;;4069   	} else {					/* FAT12/16: Expand FAT size */
;;;4070   		n_fat += n;
;;;4071   	}
;;;4072   
;;;4073   	/* Determine number of clusters and final check of validity of the FAT sub-type */
;;;4074   	n_clst = (n_vol - n_rsv - n_fat * N_FATS - n_dir) / au;
;;;4075   	if (   (fmt == FS_FAT16 && n_clst < MIN_FAT16)
;;;4076   		|| (fmt == FS_FAT32 && n_clst < MIN_FAT32))
;;;4077   		return FR_MKFS_ABORTED;
;;;4078   
;;;4079   	/* Determine system ID in the partition table */
;;;4080   	if (fmt == FS_FAT32) {
;;;4081   		sys = 0x0C;		/* FAT32X */
;;;4082   	} else {
;;;4083   		if (fmt == FS_FAT12 && n_vol < 0x10000) {
;;;4084   			sys = 0x01;	/* FAT12(<65536) */
;;;4085   		} else {
;;;4086   			sys = (n_vol < 0x10000) ? 0x04 : 0x06;	/* FAT16(<65536) : FAT12/16(>=65536) */
;;;4087   		}
;;;4088   	}
;;;4089   
;;;4090   	if (_MULTI_PARTITION && part) {
;;;4091   		/* Update system ID in the partition table */
;;;4092   		tbl = &fs->win[MBR_Table + (part - 1) * SZ_PTE];
;;;4093   		tbl[4] = sys;
;;;4094   		if (disk_write(pdrv, fs->win, 0, 1))	/* Write it to teh MBR */
;;;4095   			return FR_DISK_ERR;
;;;4096   		md = 0xF8;
;;;4097   	} else {
;;;4098   		if (sfd) {	/* No partition table (SFD) */
;;;4099   			md = 0xF0;
;;;4100   		} else {	/* Create partition table (FDISK) */
;;;4101   			mem_set(fs->win, 0, SS(fs));
;;;4102   			tbl = fs->win+MBR_Table;	/* Create partition table for single partition in the drive */
;;;4103   			tbl[1] = 1;						/* Partition start head */
;;;4104   			tbl[2] = 1;						/* Partition start sector */
;;;4105   			tbl[3] = 0;						/* Partition start cylinder */
;;;4106   			tbl[4] = sys;					/* System type */
;;;4107   			tbl[5] = 254;					/* Partition end head */
;;;4108   			n = (b_vol + n_vol) / 63 / 255;
;;;4109   			tbl[6] = (BYTE)(n >> 2 | 63);	/* Partition end sector */
;;;4110   			tbl[7] = (BYTE)n;				/* End cylinder */
;;;4111   			ST_DWORD(tbl+8, 63);			/* Partition start in LBA */
;;;4112   			ST_DWORD(tbl+12, n_vol);		/* Partition size in LBA */
;;;4113   			ST_WORD(fs->win+BS_55AA, 0xAA55);	/* MBR signature */
;;;4114   			if (disk_write(pdrv, fs->win, 0, 1))	/* Write it to the MBR */
;;;4115   				return FR_DISK_ERR;
;;;4116   			md = 0xF8;
;;;4117   		}
;;;4118   	}
;;;4119   
;;;4120   	/* Create BPB in the VBR */
;;;4121   	tbl = fs->win;							/* Clear sector */
;;;4122   	mem_set(tbl, 0, SS(fs));
;;;4123   	mem_cpy(tbl, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code, OEM name */
;;;4124   	i = SS(fs);								/* Sector size */
;;;4125   	ST_WORD(tbl+BPB_BytsPerSec, i);
;;;4126   	tbl[BPB_SecPerClus] = (BYTE)au;			/* Sectors per cluster */
;;;4127   	ST_WORD(tbl+BPB_RsvdSecCnt, n_rsv);		/* Reserved sectors */
;;;4128   	tbl[BPB_NumFATs] = N_FATS;				/* Number of FATs */
;;;4129   	i = (fmt == FS_FAT32) ? 0 : N_ROOTDIR;	/* Number of root directory entries */
;;;4130   	ST_WORD(tbl+BPB_RootEntCnt, i);
;;;4131   	if (n_vol < 0x10000) {					/* Number of total sectors */
;;;4132   		ST_WORD(tbl+BPB_TotSec16, n_vol);
;;;4133   	} else {
;;;4134   		ST_DWORD(tbl+BPB_TotSec32, n_vol);
;;;4135   	}
;;;4136   	tbl[BPB_Media] = md;					/* Media descriptor */
;;;4137   	ST_WORD(tbl+BPB_SecPerTrk, 63);			/* Number of sectors per track */
;;;4138   	ST_WORD(tbl+BPB_NumHeads, 255);			/* Number of heads */
;;;4139   	ST_DWORD(tbl+BPB_HiddSec, b_vol);		/* Hidden sectors */
;;;4140   	n = get_fattime();						/* Use current time as VSN */
;;;4141   	if (fmt == FS_FAT32) {
;;;4142   		ST_DWORD(tbl+BS_VolID32, n);		/* VSN */
;;;4143   		ST_DWORD(tbl+BPB_FATSz32, n_fat);	/* Number of sectors per FAT */
;;;4144   		ST_DWORD(tbl+BPB_RootClus, 2);		/* Root directory start cluster (2) */
;;;4145   		ST_WORD(tbl+BPB_FSInfo, 1);			/* FSINFO record offset (VBR+1) */
;;;4146   		ST_WORD(tbl+BPB_BkBootSec, 6);		/* Backup boot record offset (VBR+6) */
;;;4147   		tbl[BS_DrvNum32] = 0x80;			/* Drive number */
;;;4148   		tbl[BS_BootSig32] = 0x29;			/* Extended boot signature */
;;;4149   		mem_cpy(tbl+BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
;;;4150   	} else {
;;;4151   		ST_DWORD(tbl+BS_VolID, n);			/* VSN */
;;;4152   		ST_WORD(tbl+BPB_FATSz16, n_fat);	/* Number of sectors per FAT */
;;;4153   		tbl[BS_DrvNum] = 0x80;				/* Drive number */
;;;4154   		tbl[BS_BootSig] = 0x29;				/* Extended boot signature */
;;;4155   		mem_cpy(tbl+BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
;;;4156   	}
;;;4157   	ST_WORD(tbl+BS_55AA, 0xAA55);			/* Signature (Offset is fixed here regardless of sector size) */
;;;4158   	if (disk_write(pdrv, tbl, b_vol, 1))	/* Write it to the VBR sector */
;;;4159   		return FR_DISK_ERR;
;;;4160   	if (fmt == FS_FAT32)					/* Write backup VBR if needed (VBR+6) */
;;;4161   		disk_write(pdrv, tbl, b_vol + 6, 1);
;;;4162   
;;;4163   	/* Initialize FAT area */
;;;4164   	wsect = b_fat;
;;;4165   	for (i = 0; i < N_FATS; i++) {		/* Initialize each FAT copy */
;;;4166   		mem_set(tbl, 0, SS(fs));			/* 1st sector of the FAT  */
;;;4167   		n = md;								/* Media descriptor byte */
;;;4168   		if (fmt != FS_FAT32) {
;;;4169   			n |= (fmt == FS_FAT12) ? 0x00FFFF00 : 0xFFFFFF00;
;;;4170   			ST_DWORD(tbl+0, n);				/* Reserve cluster #0-1 (FAT12/16) */
;;;4171   		} else {
;;;4172   			n |= 0xFFFFFF00;
;;;4173   			ST_DWORD(tbl+0, n);				/* Reserve cluster #0-1 (FAT32) */
;;;4174   			ST_DWORD(tbl+4, 0xFFFFFFFF);
;;;4175   			ST_DWORD(tbl+8, 0x0FFFFFFF);	/* Reserve cluster #2 for root directory */
;;;4176   		}
;;;4177   		if (disk_write(pdrv, tbl, wsect++, 1))
;;;4178   			return FR_DISK_ERR;
;;;4179   		mem_set(tbl, 0, SS(fs));			/* Fill following FAT entries with zero */
;;;4180   		for (n = 1; n < n_fat; n++) {		/* This loop may take a time on FAT32 volume due to many single sector writes */
;;;4181   			if (disk_write(pdrv, tbl, wsect++, 1))
;;;4182   				return FR_DISK_ERR;
;;;4183   		}
;;;4184   	}
;;;4185   
;;;4186   	/* Initialize root directory */
;;;4187   	i = (fmt == FS_FAT32) ? au : (UINT)n_dir;
;;;4188   	do {
;;;4189   		if (disk_write(pdrv, tbl, wsect++, 1))
;;;4190   			return FR_DISK_ERR;
;;;4191   	} while (--i);
;;;4192   
;;;4193   #if _USE_ERASE	/* Erase data area if needed */
;;;4194   	{
;;;4195   		DWORD eb[2];
;;;4196   
;;;4197   		eb[0] = wsect; eb[1] = wsect + (n_clst - ((fmt == FS_FAT32) ? 1 : 0)) * au - 1;
;;;4198   		disk_ioctl(pdrv, CTRL_ERASE_SECTOR, eb);
;;;4199   	}
;;;4200   #endif
;;;4201   
;;;4202   	/* Create FSINFO if needed */
;;;4203   	if (fmt == FS_FAT32) {
;;;4204   		ST_DWORD(tbl+FSI_LeadSig, 0x41615252);
;;;4205   		ST_DWORD(tbl+FSI_StrucSig, 0x61417272);
;;;4206   		ST_DWORD(tbl+FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
;;;4207   		ST_DWORD(tbl+FSI_Nxt_Free, 2);				/* Last allocated cluster# */
;;;4208   		ST_WORD(tbl+BS_55AA, 0xAA55);
;;;4209   		disk_write(pdrv, tbl, b_vol + 1, 1);	/* Write original (VBR+1) */
;;;4210   		disk_write(pdrv, tbl, b_vol + 7, 1);	/* Write backup (VBR+7) */
;;;4211   	}
;;;4212   
;;;4213   	return (disk_ioctl(pdrv, CTRL_SYNC, 0) == RES_OK) ? FR_OK : FR_DISK_ERR;
;;;4214   }
000018  b013              ADD      sp,sp,#0x4c
00001a  e8bd8ff0          POP      {r4-r11,pc}
                  |L24.30|
00001e  9811              LDR      r0,[sp,#0x44]         ;3999
000020  2801              CMP      r0,#1                 ;3999
000022  dd01              BLE      |L24.40|
000024  2013              MOVS     r0,#0x13              ;3999
000026  e7f7              B        |L24.24|
                  |L24.40|
000028  f1aa0001          SUB      r0,r10,#1             ;4000
00002c  ea00000a          AND      r0,r0,r10             ;4000
000030  b108              CBZ      r0,|L24.54|
000032  2013              MOVS     r0,#0x13              ;4000
000034  e7f0              B        |L24.24|
                  |L24.54|
000036  49f8              LDR      r1,|L24.1048|
000038  980f              LDR      r0,[sp,#0x3c]         ;4001
00003a  f8515020          LDR      r5,[r1,r0,LSL #2]     ;4001
00003e  b90d              CBNZ     r5,|L24.68|
000040  200c              MOVS     r0,#0xc               ;4002
000042  e7e9              B        |L24.24|
                  |L24.68|
000044  2000              MOVS     r0,#0                 ;4003
000046  7028              STRB     r0,[r5,#0]            ;4003
000048  980f              LDR      r0,[sp,#0x3c]         ;4004
00004a  b2c0              UXTB     r0,r0                 ;4004
00004c  900c              STR      r0,[sp,#0x30]         ;4004
00004e  2000              MOVS     r0,#0                 ;4005
000050  900b              STR      r0,[sp,#0x2c]         ;4005
000052  980c              LDR      r0,[sp,#0x30]         ;4008
000054  f7fffffe          BL       disk_initialize
000058  9001              STR      r0,[sp,#4]            ;4008
00005a  9801              LDR      r0,[sp,#4]            ;4009
00005c  f0000001          AND      r0,r0,#1              ;4009
000060  b108              CBZ      r0,|L24.102|
000062  2003              MOVS     r0,#3                 ;4009
000064  e7d8              B        |L24.24|
                  |L24.102|
000066  9801              LDR      r0,[sp,#4]            ;4010
000068  f0000004          AND      r0,r0,#4              ;4010
00006c  b108              CBZ      r0,|L24.114|
00006e  200a              MOVS     r0,#0xa               ;4010
000070  e7d2              B        |L24.24|
                  |L24.114|
000072  f105020a          ADD      r2,r5,#0xa            ;4012
000076  2102              MOVS     r1,#2                 ;4012
000078  980c              LDR      r0,[sp,#0x30]         ;4012
00007a  f7fffffe          BL       disk_ioctl
00007e  b938              CBNZ     r0,|L24.144|
000080  8968              LDRH     r0,[r5,#0xa]          ;4012
000082  f5b05f80          CMP      r0,#0x1000            ;4012
000086  dc03              BGT      |L24.144|
000088  8968              LDRH     r0,[r5,#0xa]          ;4012
00008a  f5b07f00          CMP      r0,#0x200             ;4012
00008e  da01              BGE      |L24.148|
                  |L24.144|
000090  2001              MOVS     r0,#1                 ;4013
000092  e7c1              B        |L24.24|
                  |L24.148|
000094  bf00              NOP                            ;4015
000096  aa04              ADD      r2,sp,#0x10           ;4025
000098  2101              MOVS     r1,#1                 ;4025
00009a  980c              LDR      r0,[sp,#0x30]         ;4025
00009c  f7fffffe          BL       disk_ioctl
0000a0  b910              CBNZ     r0,|L24.168|
0000a2  9804              LDR      r0,[sp,#0x10]         ;4025
0000a4  2880              CMP      r0,#0x80              ;4025
0000a6  d201              BCS      |L24.172|
                  |L24.168|
0000a8  2001              MOVS     r0,#1                 ;4026
0000aa  e7b5              B        |L24.24|
                  |L24.172|
0000ac  9811              LDR      r0,[sp,#0x44]         ;4027
0000ae  b108              CBZ      r0,|L24.180|
0000b0  2000              MOVS     r0,#0                 ;4027
0000b2  e000              B        |L24.182|
                  |L24.180|
0000b4  203f              MOVS     r0,#0x3f              ;4027
                  |L24.182|
0000b6  4681              MOV      r9,r0                 ;4027
0000b8  9804              LDR      r0,[sp,#0x10]         ;4028
0000ba  eba00009          SUB      r0,r0,r9              ;4028
0000be  9004              STR      r0,[sp,#0x10]         ;4028
0000c0  f1ba0f00          CMP      r10,#0                ;4031
0000c4  d11a              BNE      |L24.252|
0000c6  8968              LDRH     r0,[r5,#0xa]          ;4032
0000c8  17c1              ASRS     r1,r0,#31             ;4032
0000ca  eb0051d1          ADD      r1,r0,r1,LSR #23      ;4032
0000ce  1249              ASRS     r1,r1,#9              ;4032
0000d0  f44f62fa          MOV      r2,#0x7d0             ;4032
0000d4  fb92f1f1          SDIV     r1,r2,r1              ;4032
0000d8  9a04              LDR      r2,[sp,#0x10]         ;4032
0000da  fbb2f1f1          UDIV     r1,r2,r1              ;4032
0000de  910a              STR      r1,[sp,#0x28]         ;4032
0000e0  f04f0b00          MOV      r11,#0                ;4033
0000e4  e001              B        |L24.234|
                  |L24.230|
0000e6  f10b0b01          ADD      r11,r11,#1            ;4033
                  |L24.234|
0000ea  48cc              LDR      r0,|L24.1052|
0000ec  f830101b          LDRH     r1,[r0,r11,LSL #1]    ;4033
0000f0  980a              LDR      r0,[sp,#0x28]         ;4033
0000f2  4281              CMP      r1,r0                 ;4033
0000f4  d8f7              BHI      |L24.230|
0000f6  48ca              LDR      r0,|L24.1056|
0000f8  f830a01b          LDRH     r10,[r0,r11,LSL #1]   ;4034
                  |L24.252|
0000fc  8968              LDRH     r0,[r5,#0xa]          ;4036
0000fe  fbbafaf0          UDIV     r10,r10,r0            ;4036
000102  f1ba0f00          CMP      r10,#0                ;4037
000106  d101              BNE      |L24.268|
000108  f04f0a01          MOV      r10,#1                ;4037
                  |L24.268|
00010c  f1ba0f80          CMP      r10,#0x80             ;4038
000110  d901              BLS      |L24.278|
000112  f04f0a80          MOV      r10,#0x80             ;4038
                  |L24.278|
000116  9804              LDR      r0,[sp,#0x10]         ;4041
000118  fbb0f8fa          UDIV     r8,r0,r10             ;4041
00011c  2601              MOVS     r6,#1                 ;4042
00011e  f64070f6          MOV      r0,#0xff6             ;4043
000122  4580              CMP      r8,r0                 ;4043
000124  d300              BCC      |L24.296|
000126  2602              MOVS     r6,#2                 ;4043
                  |L24.296|
000128  f64f70f6          MOV      r0,#0xfff6            ;4044
00012c  4580              CMP      r8,r0                 ;4044
00012e  d300              BCC      |L24.306|
000130  2603              MOVS     r6,#3                 ;4044
                  |L24.306|
000132  2e03              CMP      r6,#3                 ;4047
000134  d10c              BNE      |L24.336|
000136  2008              MOVS     r0,#8                 ;4048
000138  eb000088          ADD      r0,r0,r8,LSL #2       ;4048
00013c  8969              LDRH     r1,[r5,#0xa]          ;4048
00013e  4408              ADD      r0,r0,r1              ;4048
000140  1e40              SUBS     r0,r0,#1              ;4048
000142  fbb0f7f1          UDIV     r7,r0,r1              ;4048
000146  2020              MOVS     r0,#0x20              ;4049
000148  9003              STR      r0,[sp,#0xc]          ;4049
00014a  2000              MOVS     r0,#0                 ;4050
00014c  9002              STR      r0,[sp,#8]            ;4050
00014e  e019              B        |L24.388|
                  |L24.336|
000150  2e01              CMP      r6,#1                 ;4052
000152  d105              BNE      |L24.352|
000154  eb080048          ADD      r0,r8,r8,LSL #1       ;4052
000158  1c40              ADDS     r0,r0,#1              ;4052
00015a  0840              LSRS     r0,r0,#1              ;4052
00015c  1cc0              ADDS     r0,r0,#3              ;4052
00015e  e002              B        |L24.358|
                  |L24.352|
000160  ea4f0048          LSL      r0,r8,#1              ;4052
000164  1d00              ADDS     r0,r0,#4              ;4052
                  |L24.358|
000166  4607              MOV      r7,r0                 ;4052
000168  8968              LDRH     r0,[r5,#0xa]          ;4053
00016a  4438              ADD      r0,r0,r7              ;4053
00016c  1e40              SUBS     r0,r0,#1              ;4053
00016e  8969              LDRH     r1,[r5,#0xa]          ;4053
000170  fbb0f7f1          UDIV     r7,r0,r1              ;4053
000174  2001              MOVS     r0,#1                 ;4054
000176  9003              STR      r0,[sp,#0xc]          ;4054
000178  8968              LDRH     r0,[r5,#0xa]          ;4055
00017a  f44f4180          MOV      r1,#0x4000            ;4055
00017e  fbb1f0f0          UDIV     r0,r1,r0              ;4055
000182  9002              STR      r0,[sp,#8]            ;4055
                  |L24.388|
000184  9803              LDR      r0,[sp,#0xc]          ;4057
000186  4448              ADD      r0,r0,r9              ;4057
000188  9007              STR      r0,[sp,#0x1c]         ;4057
00018a  9807              LDR      r0,[sp,#0x1c]         ;4058
00018c  4438              ADD      r0,r0,r7              ;4058
00018e  9006              STR      r0,[sp,#0x18]         ;4058
000190  9902              LDR      r1,[sp,#8]            ;4059
000192  9806              LDR      r0,[sp,#0x18]         ;4059
000194  4408              ADD      r0,r0,r1              ;4059
000196  9005              STR      r0,[sp,#0x14]         ;4059
000198  9805              LDR      r0,[sp,#0x14]         ;4060
00019a  4450              ADD      r0,r0,r10             ;4060
00019c  eba00009          SUB      r0,r0,r9              ;4060
0001a0  9904              LDR      r1,[sp,#0x10]         ;4060
0001a2  4288              CMP      r0,r1                 ;4060
0001a4  d901              BLS      |L24.426|
0001a6  200e              MOVS     r0,#0xe               ;4060
0001a8  e736              B        |L24.24|
                  |L24.426|
0001aa  aa09              ADD      r2,sp,#0x24           ;4063
0001ac  2103              MOVS     r1,#3                 ;4063
0001ae  980c              LDR      r0,[sp,#0x30]         ;4063
0001b0  f7fffffe          BL       disk_ioctl
0001b4  b928              CBNZ     r0,|L24.450|
0001b6  9809              LDR      r0,[sp,#0x24]         ;4063
0001b8  b118              CBZ      r0,|L24.450|
0001ba  9809              LDR      r0,[sp,#0x24]         ;4063
0001bc  f5b04f00          CMP      r0,#0x8000            ;4063
0001c0  d901              BLS      |L24.454|
                  |L24.450|
0001c2  2001              MOVS     r0,#1                 ;4063
0001c4  9009              STR      r0,[sp,#0x24]         ;4063
                  |L24.454|
0001c6  9909              LDR      r1,[sp,#0x24]         ;4064
0001c8  9805              LDR      r0,[sp,#0x14]         ;4064
0001ca  4408              ADD      r0,r0,r1              ;4064
0001cc  1e40              SUBS     r0,r0,#1              ;4064
0001ce  1e49              SUBS     r1,r1,#1              ;4064
0001d0  4388              BICS     r0,r0,r1              ;4064
0001d2  9009              STR      r0,[sp,#0x24]         ;4064
0001d4  9909              LDR      r1,[sp,#0x24]         ;4065
0001d6  9805              LDR      r0,[sp,#0x14]         ;4065
0001d8  1a08              SUBS     r0,r1,r0              ;4065
0001da  9009              STR      r0,[sp,#0x24]         ;4065
0001dc  2e03              CMP      r6,#3                 ;4066
0001de  d108              BNE      |L24.498|
0001e0  9909              LDR      r1,[sp,#0x24]         ;4067
0001e2  9803              LDR      r0,[sp,#0xc]          ;4067
0001e4  4408              ADD      r0,r0,r1              ;4067
0001e6  9003              STR      r0,[sp,#0xc]          ;4067
0001e8  9909              LDR      r1,[sp,#0x24]         ;4068
0001ea  9807              LDR      r0,[sp,#0x1c]         ;4068
0001ec  4408              ADD      r0,r0,r1              ;4068
0001ee  9007              STR      r0,[sp,#0x1c]         ;4068
0001f0  e001              B        |L24.502|
                  |L24.498|
0001f2  9809              LDR      r0,[sp,#0x24]         ;4070
0001f4  4407              ADD      r7,r7,r0              ;4070
                  |L24.502|
0001f6  e9dd0103          LDRD     r0,r1,[sp,#0xc]       ;4074
0001fa  1a08              SUBS     r0,r1,r0              ;4074
0001fc  1bc1              SUBS     r1,r0,r7              ;4074
0001fe  9802              LDR      r0,[sp,#8]            ;4074
000200  1a08              SUBS     r0,r1,r0              ;4074
000202  fbb0f8fa          UDIV     r8,r0,r10             ;4074
000206  2e02              CMP      r6,#2                 ;4075
000208  d103              BNE      |L24.530|
00020a  f64070f6          MOV      r0,#0xff6             ;4075
00020e  4580              CMP      r8,r0                 ;4075
000210  d305              BCC      |L24.542|
                  |L24.530|
000212  2e03              CMP      r6,#3                 ;4076
000214  d105              BNE      |L24.546|
000216  f64f70f6          MOV      r0,#0xfff6            ;4076
00021a  4580              CMP      r8,r0                 ;4076
00021c  d201              BCS      |L24.546|
                  |L24.542|
00021e  200e              MOVS     r0,#0xe               ;4077
000220  e6fa              B        |L24.24|
                  |L24.546|
000222  2e03              CMP      r6,#3                 ;4080
000224  d102              BNE      |L24.556|
000226  200c              MOVS     r0,#0xc               ;4081
000228  900d              STR      r0,[sp,#0x34]         ;4081
00022a  e010              B        |L24.590|
                  |L24.556|
00022c  2e01              CMP      r6,#1                 ;4083
00022e  d106              BNE      |L24.574|
000230  9804              LDR      r0,[sp,#0x10]         ;4083
000232  f5b03f80          CMP      r0,#0x10000           ;4083
000236  d202              BCS      |L24.574|
000238  2001              MOVS     r0,#1                 ;4084
00023a  900d              STR      r0,[sp,#0x34]         ;4084
00023c  e007              B        |L24.590|
                  |L24.574|
00023e  9804              LDR      r0,[sp,#0x10]         ;4086
000240  f5b03f80          CMP      r0,#0x10000           ;4086
000244  d201              BCS      |L24.586|
000246  2004              MOVS     r0,#4                 ;4086
000248  e000              B        |L24.588|
                  |L24.586|
00024a  2006              MOVS     r0,#6                 ;4086
                  |L24.588|
00024c  900d              STR      r0,[sp,#0x34]         ;4086
                  |L24.590|
00024e  bf00              NOP                            ;4090
000250  9811              LDR      r0,[sp,#0x44]         ;4098
000252  b110              CBZ      r0,|L24.602|
000254  20f0              MOVS     r0,#0xf0              ;4099
000256  900e              STR      r0,[sp,#0x38]         ;4099
000258  e043              B        |L24.738|
                  |L24.602|
00025a  896a              LDRH     r2,[r5,#0xa]          ;4101
00025c  2100              MOVS     r1,#0                 ;4101
00025e  f1050030          ADD      r0,r5,#0x30           ;4101
000262  f7fffffe          BL       mem_set
000266  f50574f7          ADD      r4,r5,#0x1ee          ;4102
00026a  2001              MOVS     r0,#1                 ;4103
00026c  7060              STRB     r0,[r4,#1]            ;4103
00026e  70a0              STRB     r0,[r4,#2]            ;4104
000270  2000              MOVS     r0,#0                 ;4105
000272  70e0              STRB     r0,[r4,#3]            ;4105
000274  980d              LDR      r0,[sp,#0x34]         ;4106
000276  7120              STRB     r0,[r4,#4]            ;4106
000278  20fe              MOVS     r0,#0xfe              ;4107
00027a  7160              STRB     r0,[r4,#5]            ;4107
00027c  9804              LDR      r0,[sp,#0x10]         ;4108
00027e  4448              ADD      r0,r0,r9              ;4108
000280  213f              MOVS     r1,#0x3f              ;4108
000282  fbb0f0f1          UDIV     r0,r0,r1              ;4108
000286  21ff              MOVS     r1,#0xff              ;4108
000288  fbb0f0f1          UDIV     r0,r0,r1              ;4108
00028c  9009              STR      r0,[sp,#0x24]         ;4108
00028e  213f              MOVS     r1,#0x3f              ;4109
000290  9809              LDR      r0,[sp,#0x24]         ;4109
000292  ea410090          ORR      r0,r1,r0,LSR #2       ;4109
000296  71a0              STRB     r0,[r4,#6]            ;4109
000298  9809              LDR      r0,[sp,#0x24]         ;4110
00029a  71e0              STRB     r0,[r4,#7]            ;4110
00029c  203f              MOVS     r0,#0x3f              ;4111
00029e  7220              STRB     r0,[r4,#8]            ;4111
0002a0  2100              MOVS     r1,#0                 ;4111
0002a2  7261              STRB     r1,[r4,#9]            ;4111
0002a4  72a1              STRB     r1,[r4,#0xa]          ;4111
0002a6  72e1              STRB     r1,[r4,#0xb]          ;4111
0002a8  9804              LDR      r0,[sp,#0x10]         ;4112
0002aa  7320              STRB     r0,[r4,#0xc]          ;4112
0002ac  9804              LDR      r0,[sp,#0x10]         ;4112
0002ae  0a01              LSRS     r1,r0,#8              ;4112
0002b0  7361              STRB     r1,[r4,#0xd]          ;4112
0002b2  9804              LDR      r0,[sp,#0x10]         ;4112
0002b4  0c01              LSRS     r1,r0,#16             ;4112
0002b6  73a1              STRB     r1,[r4,#0xe]          ;4112
0002b8  9804              LDR      r0,[sp,#0x10]         ;4112
0002ba  0e01              LSRS     r1,r0,#24             ;4112
0002bc  73e1              STRB     r1,[r4,#0xf]          ;4112
0002be  2155              MOVS     r1,#0x55              ;4113
0002c0  f885122e          STRB     r1,[r5,#0x22e]        ;4113
0002c4  21aa              MOVS     r1,#0xaa              ;4113
0002c6  f885122f          STRB     r1,[r5,#0x22f]        ;4113
0002ca  2301              MOVS     r3,#1                 ;4114
0002cc  2200              MOVS     r2,#0                 ;4114
0002ce  f1050130          ADD      r1,r5,#0x30           ;4114
0002d2  980c              LDR      r0,[sp,#0x30]         ;4114
0002d4  f7fffffe          BL       disk_write
0002d8  b108              CBZ      r0,|L24.734|
0002da  2001              MOVS     r0,#1                 ;4115
0002dc  e69c              B        |L24.24|
                  |L24.734|
0002de  20f8              MOVS     r0,#0xf8              ;4116
0002e0  900e              STR      r0,[sp,#0x38]         ;4116
                  |L24.738|
0002e2  f1050430          ADD      r4,r5,#0x30           ;4121
0002e6  896a              LDRH     r2,[r5,#0xa]          ;4122
0002e8  2100              MOVS     r1,#0                 ;4122
0002ea  4620              MOV      r0,r4                 ;4122
0002ec  f7fffffe          BL       mem_set
0002f0  220b              MOVS     r2,#0xb               ;4123
0002f2  a14c              ADR      r1,|L24.1060|
0002f4  4620              MOV      r0,r4                 ;4123
0002f6  f7fffffe          BL       mem_cpy
0002fa  f8b5b00a          LDRH     r11,[r5,#0xa]         ;4124
0002fe  f884b00b          STRB     r11,[r4,#0xb]         ;4125
000302  ea4f211b          LSR      r1,r11,#8             ;4125
000306  7321              STRB     r1,[r4,#0xc]          ;4125
000308  f884a00d          STRB     r10,[r4,#0xd]         ;4126
00030c  9803              LDR      r0,[sp,#0xc]          ;4127
00030e  73a0              STRB     r0,[r4,#0xe]          ;4127
000310  9803              LDR      r0,[sp,#0xc]          ;4127
000312  0a01              LSRS     r1,r0,#8              ;4127
000314  73e1              STRB     r1,[r4,#0xf]          ;4127
000316  2001              MOVS     r0,#1                 ;4128
000318  7420              STRB     r0,[r4,#0x10]         ;4128
00031a  2e03              CMP      r6,#3                 ;4129
00031c  d101              BNE      |L24.802|
00031e  2000              MOVS     r0,#0                 ;4129
000320  e001              B        |L24.806|
                  |L24.802|
000322  f44f7000          MOV      r0,#0x200             ;4129
                  |L24.806|
000326  4683              MOV      r11,r0                ;4129
000328  f884b011          STRB     r11,[r4,#0x11]        ;4130
00032c  ea4f211b          LSR      r1,r11,#8             ;4130
000330  74a1              STRB     r1,[r4,#0x12]         ;4130
000332  9804              LDR      r0,[sp,#0x10]         ;4131
000334  f5b03f80          CMP      r0,#0x10000           ;4131
000338  d205              BCS      |L24.838|
00033a  9804              LDR      r0,[sp,#0x10]         ;4132
00033c  74e0              STRB     r0,[r4,#0x13]         ;4132
00033e  9804              LDR      r0,[sp,#0x10]         ;4132
000340  0a01              LSRS     r1,r0,#8              ;4132
000342  7521              STRB     r1,[r4,#0x14]         ;4132
000344  e010              B        |L24.872|
                  |L24.838|
000346  9804              LDR      r0,[sp,#0x10]         ;4134
000348  f8840020          STRB     r0,[r4,#0x20]         ;4134
00034c  9804              LDR      r0,[sp,#0x10]         ;4134
00034e  f3c02107          UBFX     r1,r0,#8,#8           ;4134
000352  2021              MOVS     r0,#0x21              ;4134
000354  5501              STRB     r1,[r0,r4]            ;4134
000356  9804              LDR      r0,[sp,#0x10]         ;4134
000358  f3c04107          UBFX     r1,r0,#16,#8          ;4134
00035c  2022              MOVS     r0,#0x22              ;4134
00035e  5501              STRB     r1,[r0,r4]            ;4134
000360  9804              LDR      r0,[sp,#0x10]         ;4134
000362  0e01              LSRS     r1,r0,#24             ;4134
000364  2023              MOVS     r0,#0x23              ;4134
000366  5501              STRB     r1,[r0,r4]            ;4134
                  |L24.872|
000368  980e              LDR      r0,[sp,#0x38]         ;4136
00036a  7560              STRB     r0,[r4,#0x15]         ;4136
00036c  203f              MOVS     r0,#0x3f              ;4137
00036e  7620              STRB     r0,[r4,#0x18]         ;4137
000370  2100              MOVS     r1,#0                 ;4137
000372  7661              STRB     r1,[r4,#0x19]         ;4137
000374  20ff              MOVS     r0,#0xff              ;4138
000376  76a0              STRB     r0,[r4,#0x1a]         ;4138
000378  76e1              STRB     r1,[r4,#0x1b]         ;4138
00037a  f884901c          STRB     r9,[r4,#0x1c]         ;4139
00037e  ea4f2119          LSR      r1,r9,#8              ;4139
000382  7761              STRB     r1,[r4,#0x1d]         ;4139
000384  ea4f4119          LSR      r1,r9,#16             ;4139
000388  77a1              STRB     r1,[r4,#0x1e]         ;4139
00038a  ea4f6119          LSR      r1,r9,#24             ;4139
00038e  77e1              STRB     r1,[r4,#0x1f]         ;4139
000390  f7fffffe          BL       get_fattime
000394  9009              STR      r0,[sp,#0x24]         ;4140
000396  2e03              CMP      r6,#3                 ;4141
000398  d154              BNE      |L24.1092|
00039a  9809              LDR      r0,[sp,#0x24]         ;4142
00039c  f8840043          STRB     r0,[r4,#0x43]         ;4142
0003a0  9809              LDR      r0,[sp,#0x24]         ;4142
0003a2  f3c02107          UBFX     r1,r0,#8,#8           ;4142
0003a6  2044              MOVS     r0,#0x44              ;4142
0003a8  5501              STRB     r1,[r0,r4]            ;4142
0003aa  9809              LDR      r0,[sp,#0x24]         ;4142
0003ac  f3c04107          UBFX     r1,r0,#16,#8          ;4142
0003b0  2045              MOVS     r0,#0x45              ;4142
0003b2  5501              STRB     r1,[r0,r4]            ;4142
0003b4  9809              LDR      r0,[sp,#0x24]         ;4142
0003b6  0e01              LSRS     r1,r0,#24             ;4142
0003b8  2046              MOVS     r0,#0x46              ;4142
0003ba  5501              STRB     r1,[r0,r4]            ;4142
0003bc  f8847024          STRB     r7,[r4,#0x24]         ;4143
0003c0  f3c72107          UBFX     r1,r7,#8,#8           ;4143
0003c4  2025              MOVS     r0,#0x25              ;4143
0003c6  5501              STRB     r1,[r0,r4]            ;4143
0003c8  f3c74107          UBFX     r1,r7,#16,#8          ;4143
0003cc  2026              MOVS     r0,#0x26              ;4143
0003ce  5501              STRB     r1,[r0,r4]            ;4143
0003d0  0e39              LSRS     r1,r7,#24             ;4143
0003d2  2027              MOVS     r0,#0x27              ;4143
0003d4  5501              STRB     r1,[r0,r4]            ;4143
0003d6  2002              MOVS     r0,#2                 ;4144
0003d8  f884002c          STRB     r0,[r4,#0x2c]         ;4144
0003dc  2100              MOVS     r1,#0                 ;4144
0003de  202d              MOVS     r0,#0x2d              ;4144
0003e0  5501              STRB     r1,[r0,r4]            ;4144
0003e2  202e              MOVS     r0,#0x2e              ;4144
0003e4  5501              STRB     r1,[r0,r4]            ;4144
0003e6  202f              MOVS     r0,#0x2f              ;4144
0003e8  5501              STRB     r1,[r0,r4]            ;4144
0003ea  2001              MOVS     r0,#1                 ;4145
0003ec  f8840030          STRB     r0,[r4,#0x30]         ;4145
0003f0  2031              MOVS     r0,#0x31              ;4145
0003f2  5501              STRB     r1,[r0,r4]            ;4145
0003f4  2006              MOVS     r0,#6                 ;4146
0003f6  f8840032          STRB     r0,[r4,#0x32]         ;4146
0003fa  2033              MOVS     r0,#0x33              ;4146
0003fc  5501              STRB     r1,[r0,r4]            ;4146
0003fe  2080              MOVS     r0,#0x80              ;4147
000400  f8840040          STRB     r0,[r4,#0x40]         ;4147
000404  2029              MOVS     r0,#0x29              ;4148
000406  f8840042          STRB     r0,[r4,#0x42]         ;4148
00040a  2213              MOVS     r2,#0x13              ;4149
00040c  a108              ADR      r1,|L24.1072|
00040e  f1040047          ADD      r0,r4,#0x47           ;4149
000412  f7fffffe          BL       mem_cpy
000416  e035              B        |L24.1156|
                  |L24.1048|
                          DCD      FatFs
                  |L24.1052|
                          DCD      vst
                  |L24.1056|
                          DCD      ||cst||
                  |L24.1060|
000424  ebfe904d          DCB      235,254,144,"MSDOS5.0",0
000428  53444f53
00042c  352e3000
                  |L24.1072|
000430  4e4f204e          DCB      "NO NAME    FAT32   ",0
000434  414d4520
000438  20202046
00043c  41543332
000440  20202000
                  |L24.1092|
000444  9809              LDR      r0,[sp,#0x24]         ;4151
000446  f8840027          STRB     r0,[r4,#0x27]         ;4151
00044a  9809              LDR      r0,[sp,#0x24]         ;4151
00044c  f3c02107          UBFX     r1,r0,#8,#8           ;4151
000450  2028              MOVS     r0,#0x28              ;4151
000452  5501              STRB     r1,[r0,r4]            ;4151
000454  9809              LDR      r0,[sp,#0x24]         ;4151
000456  f3c04107          UBFX     r1,r0,#16,#8          ;4151
00045a  2029              MOVS     r0,#0x29              ;4151
00045c  5501              STRB     r1,[r0,r4]            ;4151
00045e  9809              LDR      r0,[sp,#0x24]         ;4151
000460  0e01              LSRS     r1,r0,#24             ;4151
000462  202a              MOVS     r0,#0x2a              ;4151
000464  5501              STRB     r1,[r0,r4]            ;4151
000466  75a7              STRB     r7,[r4,#0x16]         ;4152
000468  0a39              LSRS     r1,r7,#8              ;4152
00046a  75e1              STRB     r1,[r4,#0x17]         ;4152
00046c  2080              MOVS     r0,#0x80              ;4153
00046e  f8840024          STRB     r0,[r4,#0x24]         ;4153
000472  2029              MOVS     r0,#0x29              ;4154
000474  f8840026          STRB     r0,[r4,#0x26]         ;4154
000478  2213              MOVS     r2,#0x13              ;4155
00047a  a17a              ADR      r1,|L24.1636|
00047c  f104002b          ADD      r0,r4,#0x2b           ;4155
000480  f7fffffe          BL       mem_cpy
                  |L24.1156|
000484  2055              MOVS     r0,#0x55              ;4157
000486  f88401fe          STRB     r0,[r4,#0x1fe]        ;4157
00048a  21aa              MOVS     r1,#0xaa              ;4157
00048c  f24010ff          MOV      r0,#0x1ff             ;4157
000490  5501              STRB     r1,[r0,r4]            ;4157
000492  2301              MOVS     r3,#1                 ;4158
000494  464a              MOV      r2,r9                 ;4158
000496  4621              MOV      r1,r4                 ;4158
000498  980c              LDR      r0,[sp,#0x30]         ;4158
00049a  f7fffffe          BL       disk_write
00049e  b108              CBZ      r0,|L24.1188|
0004a0  2001              MOVS     r0,#1                 ;4159
0004a2  e5b9              B        |L24.24|
                  |L24.1188|
0004a4  2e03              CMP      r6,#3                 ;4160
0004a6  d106              BNE      |L24.1206|
0004a8  2301              MOVS     r3,#1                 ;4161
0004aa  f1090206          ADD      r2,r9,#6              ;4161
0004ae  4621              MOV      r1,r4                 ;4161
0004b0  980c              LDR      r0,[sp,#0x30]         ;4161
0004b2  f7fffffe          BL       disk_write
                  |L24.1206|
0004b6  9807              LDR      r0,[sp,#0x1c]         ;4164
0004b8  9008              STR      r0,[sp,#0x20]         ;4164
0004ba  f04f0b00          MOV      r11,#0                ;4165
0004be  e05f              B        |L24.1408|
                  |L24.1216|
0004c0  896a              LDRH     r2,[r5,#0xa]          ;4166
0004c2  2100              MOVS     r1,#0                 ;4166
0004c4  4620              MOV      r0,r4                 ;4166
0004c6  f7fffffe          BL       mem_set
0004ca  980e              LDR      r0,[sp,#0x38]         ;4167
0004cc  9009              STR      r0,[sp,#0x24]         ;4167
0004ce  2e03              CMP      r6,#3                 ;4168
0004d0  d014              BEQ      |L24.1276|
0004d2  2e01              CMP      r6,#1                 ;4169
0004d4  d101              BNE      |L24.1242|
0004d6  4868              LDR      r0,|L24.1656|
0004d8  e001              B        |L24.1246|
                  |L24.1242|
0004da  f06f00ff          MVN      r0,#0xff              ;4169
                  |L24.1246|
0004de  9909              LDR      r1,[sp,#0x24]         ;4169
0004e0  4308              ORRS     r0,r0,r1              ;4169
0004e2  9009              STR      r0,[sp,#0x24]         ;4169
0004e4  9809              LDR      r0,[sp,#0x24]         ;4170
0004e6  7020              STRB     r0,[r4,#0]            ;4170
0004e8  9809              LDR      r0,[sp,#0x24]         ;4170
0004ea  0a00              LSRS     r0,r0,#8              ;4170
0004ec  7060              STRB     r0,[r4,#1]            ;4170
0004ee  9809              LDR      r0,[sp,#0x24]         ;4170
0004f0  0c00              LSRS     r0,r0,#16             ;4170
0004f2  70a0              STRB     r0,[r4,#2]            ;4170
0004f4  9809              LDR      r0,[sp,#0x24]         ;4170
0004f6  0e00              LSRS     r0,r0,#24             ;4170
0004f8  70e0              STRB     r0,[r4,#3]            ;4170
0004fa  e019              B        |L24.1328|
                  |L24.1276|
0004fc  9809              LDR      r0,[sp,#0x24]         ;4172
0004fe  f06000ff          ORN      r0,r0,#0xff           ;4172
000502  9009              STR      r0,[sp,#0x24]         ;4172
000504  9809              LDR      r0,[sp,#0x24]         ;4173
000506  7020              STRB     r0,[r4,#0]            ;4173
000508  9809              LDR      r0,[sp,#0x24]         ;4173
00050a  0a00              LSRS     r0,r0,#8              ;4173
00050c  7060              STRB     r0,[r4,#1]            ;4173
00050e  9809              LDR      r0,[sp,#0x24]         ;4173
000510  0c00              LSRS     r0,r0,#16             ;4173
000512  70a0              STRB     r0,[r4,#2]            ;4173
000514  9809              LDR      r0,[sp,#0x24]         ;4173
000516  0e00              LSRS     r0,r0,#24             ;4173
000518  70e0              STRB     r0,[r4,#3]            ;4173
00051a  20ff              MOVS     r0,#0xff              ;4174
00051c  7120              STRB     r0,[r4,#4]            ;4174
00051e  21ff              MOVS     r1,#0xff              ;4174
000520  7161              STRB     r1,[r4,#5]            ;4174
000522  71a1              STRB     r1,[r4,#6]            ;4174
000524  71e1              STRB     r1,[r4,#7]            ;4174
000526  7220              STRB     r0,[r4,#8]            ;4175
000528  7261              STRB     r1,[r4,#9]            ;4175
00052a  72a1              STRB     r1,[r4,#0xa]          ;4175
00052c  210f              MOVS     r1,#0xf               ;4175
00052e  72e1              STRB     r1,[r4,#0xb]          ;4175
                  |L24.1328|
000530  9808              LDR      r0,[sp,#0x20]         ;4177
000532  1c41              ADDS     r1,r0,#1              ;4177
000534  4602              MOV      r2,r0                 ;4177
000536  2301              MOVS     r3,#1                 ;4177
000538  9108              STR      r1,[sp,#0x20]         ;4177
00053a  4621              MOV      r1,r4                 ;4177
00053c  980c              LDR      r0,[sp,#0x30]         ;4177
00053e  f7fffffe          BL       disk_write
000542  b108              CBZ      r0,|L24.1352|
000544  2001              MOVS     r0,#1                 ;4178
000546  e567              B        |L24.24|
                  |L24.1352|
000548  896a              LDRH     r2,[r5,#0xa]          ;4179
00054a  2100              MOVS     r1,#0                 ;4179
00054c  4620              MOV      r0,r4                 ;4179
00054e  f7fffffe          BL       mem_set
000552  2001              MOVS     r0,#1                 ;4180
000554  9009              STR      r0,[sp,#0x24]         ;4180
000556  e00e              B        |L24.1398|
                  |L24.1368|
000558  9808              LDR      r0,[sp,#0x20]         ;4181
00055a  1c41              ADDS     r1,r0,#1              ;4181
00055c  4602              MOV      r2,r0                 ;4181
00055e  2301              MOVS     r3,#1                 ;4181
000560  9108              STR      r1,[sp,#0x20]         ;4181
000562  4621              MOV      r1,r4                 ;4181
000564  980c              LDR      r0,[sp,#0x30]         ;4181
000566  f7fffffe          BL       disk_write
00056a  b108              CBZ      r0,|L24.1392|
00056c  2001              MOVS     r0,#1                 ;4182
00056e  e553              B        |L24.24|
                  |L24.1392|
000570  9809              LDR      r0,[sp,#0x24]         ;4180
000572  1c40              ADDS     r0,r0,#1              ;4180
000574  9009              STR      r0,[sp,#0x24]         ;4180
                  |L24.1398|
000576  9809              LDR      r0,[sp,#0x24]         ;4180
000578  42b8              CMP      r0,r7                 ;4180
00057a  d3ed              BCC      |L24.1368|
00057c  f10b0b01          ADD      r11,r11,#1            ;4165
                  |L24.1408|
000580  f1bb0f00          CMP      r11,#0                ;4165
000584  d09c              BEQ      |L24.1216|
000586  2e03              CMP      r6,#3                 ;4187
000588  d101              BNE      |L24.1422|
00058a  4650              MOV      r0,r10                ;4187
00058c  e000              B        |L24.1424|
                  |L24.1422|
00058e  9802              LDR      r0,[sp,#8]            ;4187
                  |L24.1424|
000590  4683              MOV      r11,r0                ;4187
000592  bf00              NOP                            ;4188
                  |L24.1428|
000594  9808              LDR      r0,[sp,#0x20]         ;4189
000596  1c41              ADDS     r1,r0,#1              ;4189
000598  4602              MOV      r2,r0                 ;4189
00059a  2301              MOVS     r3,#1                 ;4189
00059c  9108              STR      r1,[sp,#0x20]         ;4189
00059e  4621              MOV      r1,r4                 ;4189
0005a0  980c              LDR      r0,[sp,#0x30]         ;4189
0005a2  f7fffffe          BL       disk_write
0005a6  b108              CBZ      r0,|L24.1452|
0005a8  2001              MOVS     r0,#1                 ;4190
0005aa  e535              B        |L24.24|
                  |L24.1452|
0005ac  f1ab0001          SUB      r0,r11,#1             ;4191
0005b0  f1b00b00          SUBS     r11,r0,#0             ;4191
0005b4  d1ee              BNE      |L24.1428|
0005b6  2e03              CMP      r6,#3                 ;4203
0005b8  d149              BNE      |L24.1614|
0005ba  2052              MOVS     r0,#0x52              ;4204
0005bc  7020              STRB     r0,[r4,#0]            ;4204
0005be  7060              STRB     r0,[r4,#1]            ;4204
0005c0  2061              MOVS     r0,#0x61              ;4204
0005c2  70a0              STRB     r0,[r4,#2]            ;4204
0005c4  2041              MOVS     r0,#0x41              ;4204
0005c6  70e0              STRB     r0,[r4,#3]            ;4204
0005c8  2072              MOVS     r0,#0x72              ;4205
0005ca  f88401e4          STRB     r0,[r4,#0x1e4]        ;4205
0005ce  2172              MOVS     r1,#0x72              ;4205
0005d0  f24010e5          MOV      r0,#0x1e5             ;4205
0005d4  5501              STRB     r1,[r0,r4]            ;4205
0005d6  2141              MOVS     r1,#0x41              ;4205
0005d8  1c40              ADDS     r0,r0,#1              ;4205
0005da  5501              STRB     r1,[r0,r4]            ;4205
0005dc  2161              MOVS     r1,#0x61              ;4205
0005de  1c40              ADDS     r0,r0,#1              ;4205
0005e0  5501              STRB     r1,[r0,r4]            ;4205
0005e2  f1a80001          SUB      r0,r8,#1              ;4206
0005e6  f88401e8          STRB     r0,[r4,#0x1e8]        ;4206
0005ea  f3c02107          UBFX     r1,r0,#8,#8           ;4206
0005ee  f24010e9          MOV      r0,#0x1e9             ;4206
0005f2  5501              STRB     r1,[r0,r4]            ;4206
0005f4  f1a80001          SUB      r0,r8,#1              ;4206
0005f8  f3c04107          UBFX     r1,r0,#16,#8          ;4206
0005fc  f44f70f5          MOV      r0,#0x1ea             ;4206
000600  5501              STRB     r1,[r0,r4]            ;4206
000602  f1a80001          SUB      r0,r8,#1              ;4206
000606  0e01              LSRS     r1,r0,#24             ;4206
000608  f24010eb          MOV      r0,#0x1eb             ;4206
00060c  5501              STRB     r1,[r0,r4]            ;4206
00060e  2002              MOVS     r0,#2                 ;4207
000610  f88401ec          STRB     r0,[r4,#0x1ec]        ;4207
000614  2100              MOVS     r1,#0                 ;4207
000616  f24010ed          MOV      r0,#0x1ed             ;4207
00061a  5501              STRB     r1,[r0,r4]            ;4207
00061c  1c40              ADDS     r0,r0,#1              ;4207
00061e  5501              STRB     r1,[r0,r4]            ;4207
000620  1c40              ADDS     r0,r0,#1              ;4207
000622  5501              STRB     r1,[r0,r4]            ;4207
000624  2055              MOVS     r0,#0x55              ;4208
000626  f88401fe          STRB     r0,[r4,#0x1fe]        ;4208
00062a  21aa              MOVS     r1,#0xaa              ;4208
00062c  f24010ff          MOV      r0,#0x1ff             ;4208
000630  5501              STRB     r1,[r0,r4]            ;4208
000632  2301              MOVS     r3,#1                 ;4209
000634  f1090201          ADD      r2,r9,#1              ;4209
000638  4621              MOV      r1,r4                 ;4209
00063a  980c              LDR      r0,[sp,#0x30]         ;4209
00063c  f7fffffe          BL       disk_write
000640  2301              MOVS     r3,#1                 ;4210
000642  f1090207          ADD      r2,r9,#7              ;4210
000646  4621              MOV      r1,r4                 ;4210
000648  980c              LDR      r0,[sp,#0x30]         ;4210
00064a  f7fffffe          BL       disk_write
                  |L24.1614|
00064e  2200              MOVS     r2,#0                 ;4213
000650  4611              MOV      r1,r2                 ;4213
000652  980c              LDR      r0,[sp,#0x30]         ;4213
000654  f7fffffe          BL       disk_ioctl
000658  b108              CBZ      r0,|L24.1630|
00065a  2001              MOVS     r0,#1                 ;4213
00065c  e4dc              B        |L24.24|
                  |L24.1630|
00065e  2000              MOVS     r0,#0                 ;4213
000660  e4da              B        |L24.24|
;;;4215   
                          ENDP

000662  0000              DCW      0x0000
                  |L24.1636|
000664  4e4f204e          DCB      "NO NAME    FAT     ",0
000668  414d4520
00066c  20202046
000670  41542020
000674  20202000
                  |L24.1656|
                          DCD      0x00ffff00

                          AREA ||i.f_mount||, CODE, READONLY, ALIGN=2

                  f_mount PROC
;;;2367   
;;;2368   FRESULT f_mount 
000000  b5f7              PUSH     {r0-r2,r4-r7,lr}
;;;2369   (
;;;2370   	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
;;;2371   	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
;;;2372   	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
;;;2373   )
;;;2374   {
000002  b082              SUB      sp,sp,#8
000004  4616              MOV      r6,r2
;;;2375   	FATFS *cfs;
;;;2376   	int vol;
;;;2377   	FRESULT res;
;;;2378   	const TCHAR *rp = path;
000006  9803              LDR      r0,[sp,#0xc]
000008  9001              STR      r0,[sp,#4]
;;;2379   
;;;2380   
;;;2381   	vol = get_ldnumber(&rp);
00000a  a801              ADD      r0,sp,#4
00000c  f7fffffe          BL       get_ldnumber
000010  4605              MOV      r5,r0
;;;2382   	if (vol < 0) return FR_INVALID_DRIVE;
000012  2d00              CMP      r5,#0
000014  da02              BGE      |L25.28|
000016  200b              MOVS     r0,#0xb
                  |L25.24|
;;;2383   	cfs = FatFs[vol];					/* Pointer to fs object */
;;;2384   
;;;2385   	if (cfs) {
;;;2386   #if _FS_LOCK
;;;2387   		clear_lock(cfs);
;;;2388   #endif
;;;2389   #if _FS_REENTRANT						/* Discard sync object of the current volume */
;;;2390   		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
;;;2391   #endif
;;;2392   		cfs->fs_type = 0;				/* Clear old fs object */
;;;2393   	}
;;;2394   
;;;2395   	if (fs) {
;;;2396   		fs->fs_type = 0;				/* Clear new fs object */
;;;2397   #if _FS_REENTRANT						/* Create sync object for the new volume */
;;;2398   		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
;;;2399   #endif
;;;2400   	}
;;;2401   	FatFs[vol] = fs;					/* Register new fs object */
;;;2402   
;;;2403   	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
;;;2404   
;;;2405   	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
;;;2406   	LEAVE_FF(fs, res);
;;;2407   }
000018  b005              ADD      sp,sp,#0x14
00001a  bdf0              POP      {r4-r7,pc}
                  |L25.28|
00001c  480f              LDR      r0,|L25.92|
00001e  f8504025          LDR      r4,[r0,r5,LSL #2]     ;2383
000022  b124              CBZ      r4,|L25.46|
000024  4620              MOV      r0,r4                 ;2387
000026  f7fffffe          BL       clear_lock
00002a  2000              MOVS     r0,#0                 ;2392
00002c  7020              STRB     r0,[r4,#0]            ;2392
                  |L25.46|
00002e  9802              LDR      r0,[sp,#8]            ;2395
000030  b110              CBZ      r0,|L25.56|
000032  2000              MOVS     r0,#0                 ;2396
000034  9902              LDR      r1,[sp,#8]            ;2396
000036  7008              STRB     r0,[r1,#0]            ;2396
                  |L25.56|
000038  4908              LDR      r1,|L25.92|
00003a  9802              LDR      r0,[sp,#8]            ;2401
00003c  f8410025          STR      r0,[r1,r5,LSL #2]     ;2401
000040  9802              LDR      r0,[sp,#8]            ;2403
000042  b108              CBZ      r0,|L25.72|
000044  2e01              CMP      r6,#1                 ;2403
000046  d001              BEQ      |L25.76|
                  |L25.72|
000048  2000              MOVS     r0,#0                 ;2403
00004a  e7e5              B        |L25.24|
                  |L25.76|
00004c  2200              MOVS     r2,#0                 ;2405
00004e  a903              ADD      r1,sp,#0xc            ;2405
000050  a802              ADD      r0,sp,#8              ;2405
000052  f7fffffe          BL       find_volume
000056  4607              MOV      r7,r0                 ;2405
000058  4638              MOV      r0,r7                 ;2406
00005a  e7dd              B        |L25.24|
;;;2408   
                          ENDP

                  |L25.92|
                          DCD      FatFs

                          AREA ||i.f_open||, CODE, READONLY, ALIGN=2

                  f_open PROC
;;;2415   
;;;2416   FRESULT f_open (
000000  e92d43f7          PUSH     {r0-r2,r4-r9,lr}
;;;2417   	FIL* fp,			/* Pointer to the blank file object */
;;;2418   	const TCHAR* path,	/* Pointer to the file name */
;;;2419   	BYTE mode			/* Access mode and file open mode flags */
;;;2420   )
;;;2421   {
000004  b08e              SUB      sp,sp,#0x38
000006  4605              MOV      r5,r0
000008  4616              MOV      r6,r2
;;;2422   	FRESULT res;
;;;2423   	DIR dj;
;;;2424   	BYTE *dir;
;;;2425   	DEF_NAMEBUF;
;;;2426   
;;;2427   
;;;2428   	if (!fp) return FR_INVALID_OBJECT;
00000a  b91d              CBNZ     r5,|L26.20|
00000c  2009              MOVS     r0,#9
                  |L26.14|
;;;2429   	fp->fs = 0;			/* Clear file object */
;;;2430   
;;;2431   	/* Get logical drive number */
;;;2432   #if !_FS_READONLY
;;;2433   	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
;;;2434   	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
;;;2435   #else
;;;2436   	mode &= FA_READ;
;;;2437   	res = find_volume(&dj.fs, &path, 0);
;;;2438   #endif
;;;2439   	if (res == FR_OK) {
;;;2440   		INIT_BUF(dj);
;;;2441   		res = follow_path(&dj, path);	/* Follow the file path */
;;;2442   		dir = dj.dir;
;;;2443   #if !_FS_READONLY	/* R/W configuration */
;;;2444   		if (res == FR_OK) {
;;;2445   			if (!dir)	/* Default directory itself */
;;;2446   				res = FR_INVALID_NAME;
;;;2447   #if _FS_LOCK
;;;2448   			else
;;;2449   				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
;;;2450   #endif
;;;2451   		}
;;;2452   		/* Create or Open a file */
;;;2453   		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
;;;2454   			DWORD dw, cl;
;;;2455   
;;;2456   			if (res != FR_OK) {					/* No file, create new */
;;;2457   				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
;;;2458   #if _FS_LOCK
;;;2459   					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
;;;2460   #else
;;;2461   					res = dir_register(&dj);
;;;2462   #endif
;;;2463   				mode |= FA_CREATE_ALWAYS;		/* File is created */
;;;2464   				dir = dj.dir;					/* New entry */
;;;2465   			}
;;;2466   			else {								/* Any object is already existing */
;;;2467   				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
;;;2468   					res = FR_DENIED;
;;;2469   				} else {
;;;2470   					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
;;;2471   						res = FR_EXIST;
;;;2472   				}
;;;2473   			}
;;;2474   			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
;;;2475   				dw = get_fattime();				/* Created time */
;;;2476   				ST_DWORD(dir+DIR_CrtTime, dw);
;;;2477   				dir[DIR_Attr] = 0;				/* Reset attribute */
;;;2478   				ST_DWORD(dir+DIR_FileSize, 0);	/* size = 0 */
;;;2479   				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
;;;2480   				st_clust(dir, 0);				/* cluster = 0 */
;;;2481   				dj.fs->wflag = 1;
;;;2482   				if (cl) {						/* Remove the cluster chain if exist */
;;;2483   					dw = dj.fs->winsect;
;;;2484   					res = remove_chain(dj.fs, cl);
;;;2485   					if (res == FR_OK) {
;;;2486   						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
;;;2487   						res = move_window(dj.fs, dw);
;;;2488   					}
;;;2489   				}
;;;2490   			}
;;;2491   		}
;;;2492   		else {	/* Open an existing file */
;;;2493   			if (res == FR_OK) {					/* Follow succeeded */
;;;2494   				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
;;;2495   					res = FR_NO_FILE;
;;;2496   				} else {
;;;2497   					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
;;;2498   						res = FR_DENIED;
;;;2499   				}
;;;2500   			}
;;;2501   		}
;;;2502   		if (res == FR_OK) {
;;;2503   			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
;;;2504   				mode |= FA__WRITTEN;
;;;2505   			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
;;;2506   			fp->dir_ptr = dir;
;;;2507   #if _FS_LOCK
;;;2508   			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
;;;2509   			if (!fp->lockid) res = FR_INT_ERR;
;;;2510   #endif
;;;2511   		}
;;;2512   
;;;2513   #else				/* R/O configuration */
;;;2514   		if (res == FR_OK) {					/* Follow succeeded */
;;;2515   			dir = dj.dir;
;;;2516   			if (!dir) {						/* Current directory itself */
;;;2517   				res = FR_INVALID_NAME;
;;;2518   			} else {
;;;2519   				if (dir[DIR_Attr] & AM_DIR)	/* It is a directory */
;;;2520   					res = FR_NO_FILE;
;;;2521   			}
;;;2522   		}
;;;2523   #endif
;;;2524   		FREE_BUF();
;;;2525   
;;;2526   		if (res == FR_OK) {
;;;2527   			fp->flag = mode;					/* File access mode */
;;;2528   			fp->err = 0;						/* Clear error flag */
;;;2529   			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
;;;2530   			fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
;;;2531   			fp->fptr = 0;						/* File pointer */
;;;2532   			fp->dsect = 0;
;;;2533   #if _USE_FASTSEEK
;;;2534   			fp->cltbl = 0;						/* Normal seek mode */
;;;2535   #endif
;;;2536   			fp->fs = dj.fs;	 					/* Validate file object */
;;;2537   			fp->id = fp->fs->id;
;;;2538   		}
;;;2539   	}
;;;2540   
;;;2541   	LEAVE_FF(dj.fs, res);
;;;2542   }
00000e  b011              ADD      sp,sp,#0x44
000010  e8bd83f0          POP      {r4-r9,pc}
                  |L26.20|
000014  2000              MOVS     r0,#0                 ;2429
000016  6028              STR      r0,[r5,#0]            ;2429
000018  f006061f          AND      r6,r6,#0x1f           ;2433
00001c  f0260201          BIC      r2,r6,#1              ;2434
000020  a90f              ADD      r1,sp,#0x3c           ;2434
000022  a804              ADD      r0,sp,#0x10           ;2434
000024  f7fffffe          BL       find_volume
000028  4607              MOV      r7,r0                 ;2434
00002a  2f00              CMP      r7,#0                 ;2439
00002c  d172              BNE      |L26.276|
00002e  a801              ADD      r0,sp,#4              ;2440
000030  900a              STR      r0,[sp,#0x28]         ;2440
000032  485b              LDR      r0,|L26.416|
000034  900c              STR      r0,[sp,#0x30]         ;2440
000036  a804              ADD      r0,sp,#0x10           ;2441
000038  990f              LDR      r1,[sp,#0x3c]         ;2441
00003a  f7fffffe          BL       follow_path
00003e  4607              MOV      r7,r0                 ;2441
000040  9c09              LDR      r4,[sp,#0x24]         ;2442
000042  b96f              CBNZ     r7,|L26.96|
000044  b90c              CBNZ     r4,|L26.74|
000046  2706              MOVS     r7,#6                 ;2446
000048  e00a              B        |L26.96|
                  |L26.74|
00004a  f0260001          BIC      r0,r6,#1              ;2449
00004e  b108              CBZ      r0,|L26.84|
000050  2001              MOVS     r0,#1                 ;2449
000052  e000              B        |L26.86|
                  |L26.84|
000054  2000              MOVS     r0,#0                 ;2449
                  |L26.86|
000056  4601              MOV      r1,r0                 ;2449
000058  a804              ADD      r0,sp,#0x10           ;2449
00005a  f7fffffe          BL       chk_lock
00005e  4607              MOV      r7,r0                 ;2449
                  |L26.96|
000060  f006001c          AND      r0,r6,#0x1c           ;2453
000064  2800              CMP      r0,#0                 ;2453
000066  d056              BEQ      |L26.278|
000068  b177              CBZ      r7,|L26.136|
00006a  2f04              CMP      r7,#4                 ;2457
00006c  d108              BNE      |L26.128|
00006e  f7fffffe          BL       enq_lock
000072  b118              CBZ      r0,|L26.124|
000074  a804              ADD      r0,sp,#0x10           ;2459
000076  f7fffffe          BL       dir_register
00007a  e000              B        |L26.126|
                  |L26.124|
00007c  2012              MOVS     r0,#0x12              ;2459
                  |L26.126|
00007e  4607              MOV      r7,r0                 ;2459
                  |L26.128|
000080  f0460608          ORR      r6,r6,#8              ;2463
000084  9c09              LDR      r4,[sp,#0x24]         ;2464
000086  e009              B        |L26.156|
                  |L26.136|
000088  7ae0              LDRB     r0,[r4,#0xb]          ;2467
00008a  f0000011          AND      r0,r0,#0x11           ;2467
00008e  b108              CBZ      r0,|L26.148|
000090  2707              MOVS     r7,#7                 ;2468
000092  e003              B        |L26.156|
                  |L26.148|
000094  f0060004          AND      r0,r6,#4              ;2470
000098  b100              CBZ      r0,|L26.156|
00009a  2708              MOVS     r7,#8                 ;2471
                  |L26.156|
00009c  2f00              CMP      r7,#0                 ;2474
00009e  d138              BNE      |L26.274|
0000a0  f0060008          AND      r0,r6,#8              ;2474
0000a4  b3a8              CBZ      r0,|L26.274|
0000a6  f7fffffe          BL       get_fattime
0000aa  4680              MOV      r8,r0                 ;2475
0000ac  f884800e          STRB     r8,[r4,#0xe]          ;2476
0000b0  ea4f2118          LSR      r1,r8,#8              ;2476
0000b4  73e1              STRB     r1,[r4,#0xf]          ;2476
0000b6  ea4f4118          LSR      r1,r8,#16             ;2476
0000ba  7421              STRB     r1,[r4,#0x10]         ;2476
0000bc  ea4f6118          LSR      r1,r8,#24             ;2476
0000c0  7461              STRB     r1,[r4,#0x11]         ;2476
0000c2  2000              MOVS     r0,#0                 ;2477
0000c4  72e0              STRB     r0,[r4,#0xb]          ;2477
0000c6  7720              STRB     r0,[r4,#0x1c]         ;2478
0000c8  2100              MOVS     r1,#0                 ;2478
0000ca  7761              STRB     r1,[r4,#0x1d]         ;2478
0000cc  77a1              STRB     r1,[r4,#0x1e]         ;2478
0000ce  77e1              STRB     r1,[r4,#0x1f]         ;2478
0000d0  4621              MOV      r1,r4                 ;2479
0000d2  9804              LDR      r0,[sp,#0x10]         ;2479
0000d4  f7fffffe          BL       ld_clust
0000d8  4681              MOV      r9,r0                 ;2479
0000da  2100              MOVS     r1,#0                 ;2480
0000dc  4620              MOV      r0,r4                 ;2480
0000de  f7fffffe          BL       st_clust
0000e2  2001              MOVS     r0,#1                 ;2481
0000e4  9904              LDR      r1,[sp,#0x10]         ;2481
0000e6  7108              STRB     r0,[r1,#4]            ;2481
0000e8  f1b90f00          CMP      r9,#0                 ;2482
0000ec  d011              BEQ      |L26.274|
0000ee  9804              LDR      r0,[sp,#0x10]         ;2483
0000f0  f8d0802c          LDR      r8,[r0,#0x2c]         ;2483
0000f4  4649              MOV      r1,r9                 ;2484
0000f6  9804              LDR      r0,[sp,#0x10]         ;2484
0000f8  f7fffffe          BL       remove_chain
0000fc  4607              MOV      r7,r0                 ;2484
0000fe  b947              CBNZ     r7,|L26.274|
000100  f1a90001          SUB      r0,r9,#1              ;2486
000104  9904              LDR      r1,[sp,#0x10]         ;2486
000106  60c8              STR      r0,[r1,#0xc]          ;2486
000108  4641              MOV      r1,r8                 ;2487
00010a  9804              LDR      r0,[sp,#0x10]         ;2487
00010c  f7fffffe          BL       move_window
000110  4607              MOV      r7,r0                 ;2487
                  |L26.274|
000112  e00f              B        |L26.308|
                  |L26.276|
000114  e042              B        |L26.412|
                  |L26.278|
000116  b96f              CBNZ     r7,|L26.308|
000118  7ae0              LDRB     r0,[r4,#0xb]          ;2494
00011a  f0000010          AND      r0,r0,#0x10           ;2494
00011e  b108              CBZ      r0,|L26.292|
000120  2704              MOVS     r7,#4                 ;2495
000122  e007              B        |L26.308|
                  |L26.292|
000124  f0060002          AND      r0,r6,#2              ;2497
000128  b120              CBZ      r0,|L26.308|
00012a  7ae0              LDRB     r0,[r4,#0xb]          ;2497
00012c  f0000001          AND      r0,r0,#1              ;2497
000130  b100              CBZ      r0,|L26.308|
000132  2707              MOVS     r7,#7                 ;2498
                  |L26.308|
000134  b9b7              CBNZ     r7,|L26.356|
000136  f0060008          AND      r0,r6,#8              ;2503
00013a  b108              CBZ      r0,|L26.320|
00013c  f0460620          ORR      r6,r6,#0x20           ;2504
                  |L26.320|
000140  9804              LDR      r0,[sp,#0x10]         ;2505
000142  6ac0              LDR      r0,[r0,#0x2c]         ;2505
000144  61e8              STR      r0,[r5,#0x1c]         ;2505
000146  622c              STR      r4,[r5,#0x20]         ;2506
000148  f0260001          BIC      r0,r6,#1              ;2508
00014c  b108              CBZ      r0,|L26.338|
00014e  2001              MOVS     r0,#1                 ;2508
000150  e000              B        |L26.340|
                  |L26.338|
000152  2000              MOVS     r0,#0                 ;2508
                  |L26.340|
000154  4601              MOV      r1,r0                 ;2508
000156  a804              ADD      r0,sp,#0x10           ;2508
000158  f7fffffe          BL       inc_lock
00015c  6268              STR      r0,[r5,#0x24]         ;2508
00015e  6a68              LDR      r0,[r5,#0x24]         ;2509
000160  b900              CBNZ     r0,|L26.356|
000162  2702              MOVS     r7,#2                 ;2509
                  |L26.356|
000164  b9d7              CBNZ     r7,|L26.412|
000166  71ae              STRB     r6,[r5,#6]            ;2527
000168  2000              MOVS     r0,#0                 ;2528
00016a  71e8              STRB     r0,[r5,#7]            ;2528
00016c  4621              MOV      r1,r4                 ;2529
00016e  9804              LDR      r0,[sp,#0x10]         ;2529
000170  f7fffffe          BL       ld_clust
000174  6128              STR      r0,[r5,#0x10]         ;2529
000176  7fe0              LDRB     r0,[r4,#0x1f]         ;2530
000178  0601              LSLS     r1,r0,#24             ;2530
00017a  7fa0              LDRB     r0,[r4,#0x1e]         ;2530
00017c  ea414100          ORR      r1,r1,r0,LSL #16      ;2530
000180  7f60              LDRB     r0,[r4,#0x1d]         ;2530
000182  ea412000          ORR      r0,r1,r0,LSL #8       ;2530
000186  7f21              LDRB     r1,[r4,#0x1c]         ;2530
000188  4308              ORRS     r0,r0,r1              ;2530
00018a  60e8              STR      r0,[r5,#0xc]          ;2530
00018c  2000              MOVS     r0,#0                 ;2531
00018e  60a8              STR      r0,[r5,#8]            ;2531
000190  61a8              STR      r0,[r5,#0x18]         ;2532
000192  9804              LDR      r0,[sp,#0x10]         ;2536
000194  6028              STR      r0,[r5,#0]            ;2536
000196  6828              LDR      r0,[r5,#0]            ;2537
000198  88c0              LDRH     r0,[r0,#6]            ;2537
00019a  80a8              STRH     r0,[r5,#4]            ;2537
                  |L26.412|
00019c  4638              MOV      r0,r7                 ;2541
00019e  e736              B        |L26.14|
;;;2543   
                          ENDP

                  |L26.416|
                          DCD      LfnBuf

                          AREA ||i.f_opendir||, CODE, READONLY, ALIGN=2

                  f_opendir PROC
;;;3153   
;;;3154   FRESULT f_opendir (
000000  b533              PUSH     {r0,r1,r4,r5,lr}
;;;3155   	DIR* dp,			/* Pointer to directory object to create */
;;;3156   	const TCHAR* path	/* Pointer to the directory path */
;;;3157   )
;;;3158   {
000002  b085              SUB      sp,sp,#0x14
000004  4604              MOV      r4,r0
;;;3159   	FRESULT res;
;;;3160   	FATFS* fs;
;;;3161   	DEF_NAMEBUF;
;;;3162   
;;;3163   
;;;3164   	if (!dp) return FR_INVALID_OBJECT;
000006  b914              CBNZ     r4,|L27.14|
000008  2009              MOVS     r0,#9
                  |L27.10|
;;;3165   
;;;3166   	/* Get logical drive number */
;;;3167   	res = find_volume(&fs, &path, 0);
;;;3168   	if (res == FR_OK) {
;;;3169   		dp->fs = fs;
;;;3170   		INIT_BUF(*dp);
;;;3171   		res = follow_path(dp, path);			/* Follow the path to the directory */
;;;3172   		FREE_BUF();
;;;3173   		if (res == FR_OK) {						/* Follow completed */
;;;3174   			if (dp->dir) {						/* It is not the origin directory itself */
;;;3175   				if (dp->dir[DIR_Attr] & AM_DIR)	/* The object is a sub directory */
;;;3176   					dp->sclust = ld_clust(fs, dp->dir);
;;;3177   				else							/* The object is a file */
;;;3178   					res = FR_NO_PATH;
;;;3179   			}
;;;3180   			if (res == FR_OK) {
;;;3181   				dp->id = fs->id;
;;;3182   				res = dir_sdi(dp, 0);			/* Rewind directory */
;;;3183   #if _FS_LOCK
;;;3184   				if (res == FR_OK) {
;;;3185   					if (dp->sclust) {
;;;3186   						dp->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
;;;3187   						if (!dp->lockid)
;;;3188   							res = FR_TOO_MANY_OPEN_FILES;
;;;3189   					} else {
;;;3190   						dp->lockid = 0;	/* Root directory need not to be locked */
;;;3191   					}
;;;3192   				}
;;;3193   #endif
;;;3194   			}
;;;3195   		}
;;;3196   		if (res == FR_NO_FILE) res = FR_NO_PATH;
;;;3197   	}
;;;3198   	if (res != FR_OK) dp->fs = 0;		/* Invalidate the directory object if function faild */
;;;3199   
;;;3200   	LEAVE_FF(fs, res);
;;;3201   }
00000a  b007              ADD      sp,sp,#0x1c
00000c  bd30              POP      {r4,r5,pc}
                  |L27.14|
00000e  2200              MOVS     r2,#0                 ;3167
000010  a906              ADD      r1,sp,#0x18           ;3167
000012  a804              ADD      r0,sp,#0x10           ;3167
000014  f7fffffe          BL       find_volume
000018  4605              MOV      r5,r0                 ;3167
00001a  2d00              CMP      r5,#0                 ;3168
00001c  d133              BNE      |L27.134|
00001e  9804              LDR      r0,[sp,#0x10]         ;3169
000020  6020              STR      r0,[r4,#0]            ;3169
000022  a801              ADD      r0,sp,#4              ;3170
000024  61a0              STR      r0,[r4,#0x18]         ;3170
000026  481a              LDR      r0,|L27.144|
000028  6220              STR      r0,[r4,#0x20]         ;3170
00002a  4620              MOV      r0,r4                 ;3171
00002c  9906              LDR      r1,[sp,#0x18]         ;3171
00002e  f7fffffe          BL       follow_path
000032  4605              MOV      r5,r0                 ;3171
000034  bb0d              CBNZ     r5,|L27.122|
000036  6960              LDR      r0,[r4,#0x14]         ;3174
000038  b158              CBZ      r0,|L27.82|
00003a  6960              LDR      r0,[r4,#0x14]         ;3175
00003c  7ac0              LDRB     r0,[r0,#0xb]          ;3175
00003e  f0000010          AND      r0,r0,#0x10           ;3175
000042  b128              CBZ      r0,|L27.80|
000044  6961              LDR      r1,[r4,#0x14]         ;3176
000046  9804              LDR      r0,[sp,#0x10]         ;3176
000048  f7fffffe          BL       ld_clust
00004c  60a0              STR      r0,[r4,#8]            ;3176
00004e  e000              B        |L27.82|
                  |L27.80|
000050  2505              MOVS     r5,#5                 ;3178
                  |L27.82|
000052  b995              CBNZ     r5,|L27.122|
000054  9804              LDR      r0,[sp,#0x10]         ;3181
000056  88c0              LDRH     r0,[r0,#6]            ;3181
000058  80a0              STRH     r0,[r4,#4]            ;3181
00005a  2100              MOVS     r1,#0                 ;3182
00005c  4620              MOV      r0,r4                 ;3182
00005e  f7fffffe          BL       dir_sdi
000062  4605              MOV      r5,r0                 ;3182
000064  b94d              CBNZ     r5,|L27.122|
000066  68a0              LDR      r0,[r4,#8]            ;3185
000068  b140              CBZ      r0,|L27.124|
00006a  2100              MOVS     r1,#0                 ;3186
00006c  4620              MOV      r0,r4                 ;3186
00006e  f7fffffe          BL       inc_lock
000072  61e0              STR      r0,[r4,#0x1c]         ;3186
000074  69e0              LDR      r0,[r4,#0x1c]         ;3187
000076  b900              CBNZ     r0,|L27.122|
000078  2512              MOVS     r5,#0x12              ;3188
                  |L27.122|
00007a  e001              B        |L27.128|
                  |L27.124|
00007c  2000              MOVS     r0,#0                 ;3190
00007e  61e0              STR      r0,[r4,#0x1c]         ;3190
                  |L27.128|
000080  2d04              CMP      r5,#4                 ;3196
000082  d100              BNE      |L27.134|
000084  2505              MOVS     r5,#5                 ;3196
                  |L27.134|
000086  b10d              CBZ      r5,|L27.140|
000088  2000              MOVS     r0,#0                 ;3198
00008a  6020              STR      r0,[r4,#0]            ;3198
                  |L27.140|
00008c  4628              MOV      r0,r5                 ;3200
00008e  e7bc              B        |L27.10|
;;;3202   
                          ENDP

                  |L27.144|
                          DCD      LfnBuf

                          AREA ||i.f_read||, CODE, READONLY, ALIGN=1

                  f_read PROC
;;;2550   
;;;2551   FRESULT f_read (
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;2552   	FIL* fp, 		/* Pointer to the file object */
;;;2553   	void* buff,		/* Pointer to data buffer */
;;;2554   	UINT btr,		/* Number of bytes to read */
;;;2555   	UINT* br		/* Pointer to number of bytes read */
;;;2556   )
;;;2557   {
000004  b085              SUB      sp,sp,#0x14
000006  4604              MOV      r4,r0
000008  4615              MOV      r5,r2
00000a  469a              MOV      r10,r3
;;;2558   	FRESULT res;
;;;2559   	DWORD clst, sect, remain;
;;;2560   	UINT rcnt, cc;
;;;2561   	BYTE csect, *rbuff = (BYTE*)buff;
00000c  f8ddb018          LDR      r11,[sp,#0x18]
;;;2562   
;;;2563   
;;;2564   	*br = 0;	/* Clear read byte counter */
000010  2000              MOVS     r0,#0
000012  f8ca0000          STR      r0,[r10,#0]
;;;2565   
;;;2566   	res = validate(fp);							/* Check validity */
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       validate
00001c  9004              STR      r0,[sp,#0x10]
;;;2567   	if (res != FR_OK) LEAVE_FF(fp->fs, res);
00001e  9804              LDR      r0,[sp,#0x10]
000020  b118              CBZ      r0,|L28.42|
000022  9804              LDR      r0,[sp,#0x10]
                  |L28.36|
;;;2568   	if (fp->err)								/* Check error */
;;;2569   		LEAVE_FF(fp->fs, (FRESULT)fp->err);
;;;2570   	if (!(fp->flag & FA_READ)) 					/* Check access mode */
;;;2571   		LEAVE_FF(fp->fs, FR_DENIED);
;;;2572   	remain = fp->fsize - fp->fptr;
;;;2573   	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
;;;2574   
;;;2575   	for ( ;  btr;								/* Repeat until all data read */
;;;2576   		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
;;;2577   		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
;;;2578   			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
;;;2579   			if (!csect) {						/* On the cluster boundary? */
;;;2580   				if (fp->fptr == 0) {			/* On the top of the file? */
;;;2581   					clst = fp->sclust;			/* Follow from the origin */
;;;2582   				} else {						/* Middle or end of the file */
;;;2583   #if _USE_FASTSEEK
;;;2584   					if (fp->cltbl)
;;;2585   						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
;;;2586   					else
;;;2587   #endif
;;;2588   						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
;;;2589   				}
;;;2590   				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
;;;2591   				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
;;;2592   				fp->clust = clst;				/* Update current cluster */
;;;2593   			}
;;;2594   			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
;;;2595   			if (!sect) ABORT(fp->fs, FR_INT_ERR);
;;;2596   			sect += csect;
;;;2597   			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
;;;2598   			if (cc) {							/* Read maximum contiguous sectors directly */
;;;2599   				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
;;;2600   					cc = fp->fs->csize - csect;
;;;2601   				if (disk_read(fp->fs->drv, rbuff, sect, cc))
;;;2602   					ABORT(fp->fs, FR_DISK_ERR);
;;;2603   #if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
;;;2604   #if _FS_TINY
;;;2605   				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
;;;2606   					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
;;;2607   #else
;;;2608   				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
;;;2609   					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
;;;2610   #endif
;;;2611   #endif
;;;2612   				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
;;;2613   				continue;
;;;2614   			}
;;;2615   #if !_FS_TINY
;;;2616   			if (fp->dsect != sect) {			/* Load data sector if not in cache */
;;;2617   #if !_FS_READONLY
;;;2618   				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
;;;2619   					if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1))
;;;2620   						ABORT(fp->fs, FR_DISK_ERR);
;;;2621   					fp->flag &= ~FA__DIRTY;
;;;2622   				}
;;;2623   #endif
;;;2624   				if (disk_read(fp->fs->drv, fp->buf, sect, 1))	/* Fill sector cache */
;;;2625   					ABORT(fp->fs, FR_DISK_ERR);
;;;2626   			}
;;;2627   #endif
;;;2628   			fp->dsect = sect;
;;;2629   		}
;;;2630   		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
;;;2631   		if (rcnt > btr) rcnt = btr;
;;;2632   #if _FS_TINY
;;;2633   		if (move_window(fp->fs, fp->dsect))		/* Move sector window */
;;;2634   			ABORT(fp->fs, FR_DISK_ERR);
;;;2635   		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
;;;2636   #else
;;;2637   		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
;;;2638   #endif
;;;2639   	}
;;;2640   
;;;2641   	LEAVE_FF(fp->fs, FR_OK);
;;;2642   }
000024  b009              ADD      sp,sp,#0x24
000026  e8bd8ff0          POP      {r4-r11,pc}
                  |L28.42|
00002a  79e0              LDRB     r0,[r4,#7]            ;2568
00002c  b108              CBZ      r0,|L28.50|
00002e  79e0              LDRB     r0,[r4,#7]            ;2569
000030  e7f8              B        |L28.36|
                  |L28.50|
000032  79a0              LDRB     r0,[r4,#6]            ;2570
000034  f0000001          AND      r0,r0,#1              ;2570
000038  b908              CBNZ     r0,|L28.62|
00003a  2007              MOVS     r0,#7                 ;2571
00003c  e7f2              B        |L28.36|
                  |L28.62|
00003e  e9d41002          LDRD     r1,r0,[r4,#8]         ;2572
000042  1a40              SUBS     r0,r0,r1              ;2572
000044  9002              STR      r0,[sp,#8]            ;2572
000046  9802              LDR      r0,[sp,#8]            ;2573
000048  4285              CMP      r5,r0                 ;2573
00004a  d900              BLS      |L28.78|
00004c  9d02              LDR      r5,[sp,#8]            ;2573
                  |L28.78|
00004e  e0ba              B        |L28.454|
                  |L28.80|
000050  6821              LDR      r1,[r4,#0]            ;2577
000052  8949              LDRH     r1,[r1,#0xa]          ;2577
000054  68a0              LDR      r0,[r4,#8]            ;2577
000056  fbb0f2f1          UDIV     r2,r0,r1              ;2577
00005a  fb010012          MLS      r0,r1,r2,r0           ;2577
00005e  2800              CMP      r0,#0                 ;2577
000060  d177              BNE      |L28.338|
000062  6821              LDR      r1,[r4,#0]            ;2578
000064  8949              LDRH     r1,[r1,#0xa]          ;2578
000066  68a0              LDR      r0,[r4,#8]            ;2578
000068  fbb0f0f1          UDIV     r0,r0,r1              ;2578
00006c  6821              LDR      r1,[r4,#0]            ;2578
00006e  7889              LDRB     r1,[r1,#2]            ;2578
000070  1e49              SUBS     r1,r1,#1              ;2578
000072  4008              ANDS     r0,r0,r1              ;2578
000074  f00009ff          AND      r9,r0,#0xff           ;2578
000078  f1b90f00          CMP      r9,#0                 ;2579
00007c  d117              BNE      |L28.174|
00007e  68a0              LDR      r0,[r4,#8]            ;2580
000080  b910              CBNZ     r0,|L28.136|
000082  6920              LDR      r0,[r4,#0x10]         ;2581
000084  9003              STR      r0,[sp,#0xc]          ;2581
000086  e004              B        |L28.146|
                  |L28.136|
000088  6961              LDR      r1,[r4,#0x14]         ;2588
00008a  6820              LDR      r0,[r4,#0]            ;2588
00008c  f7fffffe          BL       get_fat
000090  9003              STR      r0,[sp,#0xc]          ;2588
                  |L28.146|
000092  9803              LDR      r0,[sp,#0xc]          ;2590
000094  2802              CMP      r0,#2                 ;2590
000096  d202              BCS      |L28.158|
000098  2002              MOVS     r0,#2                 ;2590
00009a  71e0              STRB     r0,[r4,#7]            ;2590
00009c  e7c2              B        |L28.36|
                  |L28.158|
00009e  9803              LDR      r0,[sp,#0xc]          ;2591
0000a0  1c40              ADDS     r0,r0,#1              ;2591
0000a2  b910              CBNZ     r0,|L28.170|
0000a4  2001              MOVS     r0,#1                 ;2591
0000a6  71e0              STRB     r0,[r4,#7]            ;2591
0000a8  e7bc              B        |L28.36|
                  |L28.170|
0000aa  9803              LDR      r0,[sp,#0xc]          ;2592
0000ac  6160              STR      r0,[r4,#0x14]         ;2592
                  |L28.174|
0000ae  6961              LDR      r1,[r4,#0x14]         ;2594
0000b0  6820              LDR      r0,[r4,#0]            ;2594
0000b2  f7fffffe          BL       clust2sect
0000b6  4606              MOV      r6,r0                 ;2594
0000b8  b916              CBNZ     r6,|L28.192|
0000ba  2002              MOVS     r0,#2                 ;2595
0000bc  71e0              STRB     r0,[r4,#7]            ;2595
0000be  e7b1              B        |L28.36|
                  |L28.192|
0000c0  444e              ADD      r6,r6,r9              ;2596
0000c2  6820              LDR      r0,[r4,#0]            ;2597
0000c4  8940              LDRH     r0,[r0,#0xa]          ;2597
0000c6  fbb5f8f0          UDIV     r8,r5,r0              ;2597
0000ca  f1b80f00          CMP      r8,#0                 ;2598
0000ce  d02d              BEQ      |L28.300|
0000d0  eb090008          ADD      r0,r9,r8              ;2599
0000d4  6821              LDR      r1,[r4,#0]            ;2599
0000d6  7889              LDRB     r1,[r1,#2]            ;2599
0000d8  4288              CMP      r0,r1                 ;2599
0000da  d903              BLS      |L28.228|
0000dc  6820              LDR      r0,[r4,#0]            ;2600
0000de  7880              LDRB     r0,[r0,#2]            ;2600
0000e0  eba00809          SUB      r8,r0,r9              ;2600
                  |L28.228|
0000e4  6821              LDR      r1,[r4,#0]            ;2601
0000e6  7848              LDRB     r0,[r1,#1]            ;2601
0000e8  4643              MOV      r3,r8                 ;2601
0000ea  4632              MOV      r2,r6                 ;2601
0000ec  4659              MOV      r1,r11                ;2601
0000ee  f7fffffe          BL       disk_read
0000f2  b110              CBZ      r0,|L28.250|
0000f4  2001              MOVS     r0,#1                 ;2602
0000f6  71e0              STRB     r0,[r4,#7]            ;2602
0000f8  e794              B        |L28.36|
                  |L28.250|
0000fa  79a0              LDRB     r0,[r4,#6]            ;2608
0000fc  f0000040          AND      r0,r0,#0x40           ;2608
000100  b178              CBZ      r0,|L28.290|
000102  69a0              LDR      r0,[r4,#0x18]         ;2608
000104  1b80              SUBS     r0,r0,r6              ;2608
000106  4540              CMP      r0,r8                 ;2608
000108  d20b              BCS      |L28.290|
00010a  69a1              LDR      r1,[r4,#0x18]         ;2609
00010c  1b89              SUBS     r1,r1,r6              ;2609
00010e  6823              LDR      r3,[r4,#0]            ;2609
000110  895b              LDRH     r3,[r3,#0xa]          ;2609
000112  fb01b003          MLA      r0,r1,r3,r11          ;2609
000116  6821              LDR      r1,[r4,#0]            ;2609
000118  894a              LDRH     r2,[r1,#0xa]          ;2609
00011a  f1040128          ADD      r1,r4,#0x28           ;2609
00011e  f7fffffe          BL       mem_cpy
                  |L28.290|
000122  6820              LDR      r0,[r4,#0]            ;2612
000124  8940              LDRH     r0,[r0,#0xa]          ;2612
000126  fb00f708          MUL      r7,r0,r8              ;2612
00012a  e042              B        |L28.434|
                  |L28.300|
00012c  69a0              LDR      r0,[r4,#0x18]         ;2616
00012e  42b0              CMP      r0,r6                 ;2616
000130  d020              BEQ      |L28.372|
000132  79a0              LDRB     r0,[r4,#6]            ;2618
000134  f0000040          AND      r0,r0,#0x40           ;2618
000138  b180              CBZ      r0,|L28.348|
00013a  6821              LDR      r1,[r4,#0]            ;2619
00013c  7848              LDRB     r0,[r1,#1]            ;2619
00013e  2301              MOVS     r3,#1                 ;2619
000140  f1040128          ADD      r1,r4,#0x28           ;2619
000144  69a2              LDR      r2,[r4,#0x18]         ;2619
000146  f7fffffe          BL       disk_write
00014a  b118              CBZ      r0,|L28.340|
00014c  2001              MOVS     r0,#1                 ;2620
00014e  71e0              STRB     r0,[r4,#7]            ;2620
000150  e768              B        |L28.36|
                  |L28.338|
000152  e010              B        |L28.374|
                  |L28.340|
000154  79a0              LDRB     r0,[r4,#6]            ;2621
000156  f0200040          BIC      r0,r0,#0x40           ;2621
00015a  71a0              STRB     r0,[r4,#6]            ;2621
                  |L28.348|
00015c  6821              LDR      r1,[r4,#0]            ;2624
00015e  7848              LDRB     r0,[r1,#1]            ;2624
000160  2301              MOVS     r3,#1                 ;2624
000162  4632              MOV      r2,r6                 ;2624
000164  f1040128          ADD      r1,r4,#0x28           ;2624
000168  f7fffffe          BL       disk_read
00016c  b110              CBZ      r0,|L28.372|
00016e  2001              MOVS     r0,#1                 ;2625
000170  71e0              STRB     r0,[r4,#7]            ;2625
000172  e757              B        |L28.36|
                  |L28.372|
000174  61a6              STR      r6,[r4,#0x18]         ;2628
                  |L28.374|
000176  6821              LDR      r1,[r4,#0]            ;2630
000178  8949              LDRH     r1,[r1,#0xa]          ;2630
00017a  68a0              LDR      r0,[r4,#8]            ;2630
00017c  fbb0f2f1          UDIV     r2,r0,r1              ;2630
000180  fb010012          MLS      r0,r1,r2,r0           ;2630
000184  6821              LDR      r1,[r4,#0]            ;2630
000186  8949              LDRH     r1,[r1,#0xa]          ;2630
000188  1a0f              SUBS     r7,r1,r0              ;2630
00018a  42af              CMP      r7,r5                 ;2631
00018c  d900              BLS      |L28.400|
00018e  462f              MOV      r7,r5                 ;2631
                  |L28.400|
000190  6821              LDR      r1,[r4,#0]            ;2637
000192  8949              LDRH     r1,[r1,#0xa]          ;2637
000194  68a0              LDR      r0,[r4,#8]            ;2637
000196  fbb0f2f1          UDIV     r2,r0,r1              ;2637
00019a  fb010112          MLS      r1,r1,r2,r0           ;2637
00019e  f1040028          ADD      r0,r4,#0x28           ;2637
0001a2  4408              ADD      r0,r0,r1              ;2637
0001a4  463a              MOV      r2,r7                 ;2637
0001a6  4601              MOV      r1,r0                 ;2637
0001a8  9001              STR      r0,[sp,#4]            ;2637
0001aa  4658              MOV      r0,r11                ;2637
0001ac  f7fffffe          BL       mem_cpy
0001b0  bf00              NOP                            ;2613
                  |L28.434|
0001b2  44bb              ADD      r11,r11,r7            ;2576
0001b4  68a0              LDR      r0,[r4,#8]            ;2576
0001b6  4438              ADD      r0,r0,r7              ;2576
0001b8  60a0              STR      r0,[r4,#8]            ;2576
0001ba  f8da0000          LDR      r0,[r10,#0]           ;2576
0001be  4438              ADD      r0,r0,r7              ;2576
0001c0  f8ca0000          STR      r0,[r10,#0]           ;2576
0001c4  1bed              SUBS     r5,r5,r7              ;2576
                  |L28.454|
0001c6  2d00              CMP      r5,#0                 ;2575
0001c8  f47faf42          BNE      |L28.80|
0001cc  2000              MOVS     r0,#0                 ;2641
0001ce  e729              B        |L28.36|
;;;2643   
                          ENDP


                          AREA ||i.f_readdir||, CODE, READONLY, ALIGN=2

                  f_readdir PROC
;;;3241   
;;;3242   FRESULT f_readdir (
000000  b5fe              PUSH     {r1-r7,lr}
;;;3243   	DIR* dp,			/* Pointer to the open directory object */
;;;3244   	FILINFO* fno		/* Pointer to file information to return */
;;;3245   )
;;;3246   {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
;;;3247   	FRESULT res;
;;;3248   	DEF_NAMEBUF;
;;;3249   
;;;3250   
;;;3251   	res = validate(dp);						/* Check validity of the object */
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       validate
00000c  4605              MOV      r5,r0
;;;3252   	if (res == FR_OK) {
00000e  bb1d              CBNZ     r5,|L29.88|
;;;3253   		if (!fno) {
000010  b92e              CBNZ     r6,|L29.30|
;;;3254   			res = dir_sdi(dp, 0);			/* Rewind the directory object */
000012  2100              MOVS     r1,#0
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       dir_sdi
00001a  4605              MOV      r5,r0
00001c  e01c              B        |L29.88|
                  |L29.30|
;;;3255   		} else {
;;;3256   			INIT_BUF(*dp);
00001e  f8c4d018          STR      sp,[r4,#0x18]
000022  480e              LDR      r0,|L29.92|
000024  6220              STR      r0,[r4,#0x20]
;;;3257   			res = dir_read(dp, 0);			/* Read an item */
000026  2100              MOVS     r1,#0
000028  4620              MOV      r0,r4
00002a  f7fffffe          BL       dir_read
00002e  4605              MOV      r5,r0
;;;3258   			if (res == FR_NO_FILE) {		/* Reached end of directory */
000030  2d04              CMP      r5,#4
000032  d102              BNE      |L29.58|
;;;3259   				dp->sect = 0;
000034  2000              MOVS     r0,#0
000036  6120              STR      r0,[r4,#0x10]
;;;3260   				res = FR_OK;
000038  2500              MOVS     r5,#0
                  |L29.58|
;;;3261   			}
;;;3262   			if (res == FR_OK) {				/* A valid entry is found */
00003a  b96d              CBNZ     r5,|L29.88|
;;;3263   				get_fileinfo(dp, fno);		/* Get the object information */
00003c  4631              MOV      r1,r6
00003e  4620              MOV      r0,r4
000040  f7fffffe          BL       get_fileinfo
;;;3264   				res = dir_next(dp, 0);		/* Increment index for next */
000044  2100              MOVS     r1,#0
000046  4620              MOV      r0,r4
000048  f7fffffe          BL       dir_next
00004c  4605              MOV      r5,r0
;;;3265   				if (res == FR_NO_FILE) {
00004e  2d04              CMP      r5,#4
000050  d102              BNE      |L29.88|
;;;3266   					dp->sect = 0;
000052  2000              MOVS     r0,#0
000054  6120              STR      r0,[r4,#0x10]
;;;3267   					res = FR_OK;
000056  2500              MOVS     r5,#0
                  |L29.88|
;;;3268   				}
;;;3269   			}
;;;3270   			FREE_BUF();
;;;3271   		}
;;;3272   	}
;;;3273   
;;;3274   	LEAVE_FF(dp->fs, res);
000058  4628              MOV      r0,r5
;;;3275   }
00005a  bdfe              POP      {r1-r7,pc}
;;;3276   
                          ENDP

                  |L29.92|
                          DCD      LfnBuf

                          AREA ||i.f_rename||, CODE, READONLY, ALIGN=2

                  f_rename PROC
;;;3670   
;;;3671   FRESULT f_rename (
000000  b5f3              PUSH     {r0,r1,r4-r7,lr}
;;;3672   	const TCHAR* path_old,	/* Pointer to the object to be renamed */
;;;3673   	const TCHAR* path_new	/* Pointer to the new name */
;;;3674   )
;;;3675   {
000002  b09d              SUB      sp,sp,#0x74
;;;3676   	FRESULT res;
;;;3677   	DIR djo, djn;
;;;3678   	BYTE buf[21], *dir;
;;;3679   	DWORD dw;
;;;3680   	DEF_NAMEBUF;
;;;3681   
;;;3682   
;;;3683   	/* Get logical drive number of the source object */
;;;3684   	res = find_volume(&djo.fs, &path_old, 1);
000004  2201              MOVS     r2,#1
000006  a91d              ADD      r1,sp,#0x74
000008  a813              ADD      r0,sp,#0x4c
00000a  f7fffffe          BL       find_volume
00000e  4604              MOV      r4,r0
;;;3685   	if (res == FR_OK) {
000010  2c00              CMP      r4,#0
000012  d116              BNE      |L30.66|
;;;3686   		djn.fs = djo.fs;
000014  9813              LDR      r0,[sp,#0x4c]
000016  9009              STR      r0,[sp,#0x24]
;;;3687   		INIT_BUF(djo);
000018  f8cdd064          STR      sp,[sp,#0x64]
00001c  4843              LDR      r0,|L30.300|
00001e  901b              STR      r0,[sp,#0x6c]
;;;3688   		res = follow_path(&djo, path_old);		/* Check old object */
000020  a813              ADD      r0,sp,#0x4c
000022  991d              LDR      r1,[sp,#0x74]
000024  f7fffffe          BL       follow_path
000028  4604              MOV      r4,r0
;;;3689   		if (_FS_RPATH && res == FR_OK && (djo.fn[NS] & NS_DOT))
00002a  bf00              NOP      
;;;3690   			res = FR_INVALID_NAME;
;;;3691   #if _FS_LOCK
;;;3692   		if (res == FR_OK) res = chk_lock(&djo, 2);
00002c  b924              CBNZ     r4,|L30.56|
00002e  2102              MOVS     r1,#2
000030  a813              ADD      r0,sp,#0x4c
000032  f7fffffe          BL       chk_lock
000036  4604              MOV      r4,r0
                  |L30.56|
;;;3693   #endif
;;;3694   		if (res == FR_OK) {						/* Old object is found */
000038  2c00              CMP      r4,#0
00003a  d174              BNE      |L30.294|
;;;3695   			if (!djo.dir) {						/* Is root dir? */
00003c  9818              LDR      r0,[sp,#0x60]
00003e  b908              CBNZ     r0,|L30.68|
;;;3696   				res = FR_NO_FILE;
000040  2404              MOVS     r4,#4
                  |L30.66|
000042  e070              B        |L30.294|
                  |L30.68|
;;;3697   			} else {
;;;3698   				mem_cpy(buf, djo.dir+DIR_Attr, 21);		/* Save the object information except name */
000044  9818              LDR      r0,[sp,#0x60]
000046  f100010b          ADD      r1,r0,#0xb
00004a  2215              MOVS     r2,#0x15
00004c  a803              ADD      r0,sp,#0xc
00004e  f7fffffe          BL       mem_cpy
;;;3699   				mem_cpy(&djn, &djo, sizeof (DIR));		/* Duplicate the directory object */
000052  2228              MOVS     r2,#0x28
000054  a913              ADD      r1,sp,#0x4c
000056  a809              ADD      r0,sp,#0x24
000058  f7fffffe          BL       mem_cpy
;;;3700   				if (get_ldnumber(&path_new) >= 0)		/* Snip drive number off and ignore it */
00005c  a81e              ADD      r0,sp,#0x78
00005e  f7fffffe          BL       get_ldnumber
000062  2800              CMP      r0,#0
000064  db05              BLT      |L30.114|
;;;3701   					res = follow_path(&djn, path_new);	/* and check if new object is exist */
000066  a809              ADD      r0,sp,#0x24
000068  991e              LDR      r1,[sp,#0x78]
00006a  f7fffffe          BL       follow_path
00006e  4604              MOV      r4,r0
000070  e000              B        |L30.116|
                  |L30.114|
;;;3702   				else
;;;3703   					res = FR_INVALID_DRIVE;
000072  240b              MOVS     r4,#0xb
                  |L30.116|
;;;3704   				if (res == FR_OK) res = FR_EXIST;		/* The new object name is already existing */
000074  b904              CBNZ     r4,|L30.120|
000076  2408              MOVS     r4,#8
                  |L30.120|
;;;3705   				if (res == FR_NO_FILE) { 				/* Is it a valid path and no name collision? */
000078  2c04              CMP      r4,#4
00007a  d154              BNE      |L30.294|
;;;3706   /* Start critical section that any interruption can cause a cross-link */
;;;3707   					res = dir_register(&djn);			/* Register the new entry */
00007c  a809              ADD      r0,sp,#0x24
00007e  f7fffffe          BL       dir_register
000082  4604              MOV      r4,r0
;;;3708   					if (res == FR_OK) {
000084  2c00              CMP      r4,#0
000086  d14e              BNE      |L30.294|
;;;3709   						dir = djn.dir;					/* Copy object information except name */
000088  9d0e              LDR      r5,[sp,#0x38]
;;;3710   						mem_cpy(dir+13, buf+2, 19);
00008a  2213              MOVS     r2,#0x13
00008c  f10d010e          ADD      r1,sp,#0xe
000090  f105000d          ADD      r0,r5,#0xd
000094  f7fffffe          BL       mem_cpy
;;;3711   						dir[DIR_Attr] = buf[0] | AM_ARC;
000098  f89d000c          LDRB     r0,[sp,#0xc]
00009c  f0400020          ORR      r0,r0,#0x20
0000a0  72e8              STRB     r0,[r5,#0xb]
;;;3712   						djo.fs->wflag = 1;
0000a2  2001              MOVS     r0,#1
0000a4  9913              LDR      r1,[sp,#0x4c]
0000a6  7108              STRB     r0,[r1,#4]
;;;3713   						if (djo.sclust != djn.sclust && (dir[DIR_Attr] & AM_DIR)) {		/* Update .. entry in the directory if needed */
0000a8  990b              LDR      r1,[sp,#0x2c]
0000aa  9815              LDR      r0,[sp,#0x54]
0000ac  4288              CMP      r0,r1
0000ae  d030              BEQ      |L30.274|
0000b0  7ae8              LDRB     r0,[r5,#0xb]
0000b2  f0000010          AND      r0,r0,#0x10
0000b6  b360              CBZ      r0,|L30.274|
;;;3714   							dw = clust2sect(djo.fs, ld_clust(djo.fs, dir));
0000b8  4629              MOV      r1,r5
0000ba  9813              LDR      r0,[sp,#0x4c]
0000bc  f7fffffe          BL       ld_clust
0000c0  4607              MOV      r7,r0
0000c2  4639              MOV      r1,r7
0000c4  9813              LDR      r0,[sp,#0x4c]
0000c6  f7fffffe          BL       clust2sect
0000ca  4606              MOV      r6,r0
;;;3715   							if (!dw) {
0000cc  b90e              CBNZ     r6,|L30.210|
;;;3716   								res = FR_INT_ERR;
0000ce  2402              MOVS     r4,#2
0000d0  e01f              B        |L30.274|
                  |L30.210|
;;;3717   							} else {
;;;3718   								res = move_window(djo.fs, dw);
0000d2  4631              MOV      r1,r6
0000d4  9813              LDR      r0,[sp,#0x4c]
0000d6  f7fffffe          BL       move_window
0000da  4604              MOV      r4,r0
;;;3719   								dir = djo.fs->win+SZ_DIR;	/* .. entry */
0000dc  9813              LDR      r0,[sp,#0x4c]
0000de  f1000550          ADD      r5,r0,#0x50
;;;3720   								if (res == FR_OK && dir[1] == '.') {
0000e2  b9b4              CBNZ     r4,|L30.274|
0000e4  7868              LDRB     r0,[r5,#1]
0000e6  282e              CMP      r0,#0x2e
0000e8  d113              BNE      |L30.274|
;;;3721   									dw = (djo.fs->fs_type == FS_FAT32 && djn.sclust == djo.fs->dirbase) ? 0 : djn.sclust;
0000ea  9813              LDR      r0,[sp,#0x4c]
0000ec  7800              LDRB     r0,[r0,#0]
0000ee  2803              CMP      r0,#3
0000f0  d106              BNE      |L30.256|
0000f2  9913              LDR      r1,[sp,#0x4c]
0000f4  980b              LDR      r0,[sp,#0x2c]
0000f6  6a49              LDR      r1,[r1,#0x24]
0000f8  4288              CMP      r0,r1
0000fa  d101              BNE      |L30.256|
0000fc  2000              MOVS     r0,#0
0000fe  e000              B        |L30.258|
                  |L30.256|
000100  980b              LDR      r0,[sp,#0x2c]
                  |L30.258|
000102  4606              MOV      r6,r0
;;;3722   									st_clust(dir, dw);
000104  4631              MOV      r1,r6
000106  4628              MOV      r0,r5
000108  f7fffffe          BL       st_clust
;;;3723   									djo.fs->wflag = 1;
00010c  2001              MOVS     r0,#1
00010e  9913              LDR      r1,[sp,#0x4c]
000110  7108              STRB     r0,[r1,#4]
                  |L30.274|
;;;3724   								}
;;;3725   							}
;;;3726   						}
;;;3727   						if (res == FR_OK) {
000112  b944              CBNZ     r4,|L30.294|
;;;3728   							res = dir_remove(&djo);		/* Remove old entry */
000114  a813              ADD      r0,sp,#0x4c
000116  f7fffffe          BL       dir_remove
00011a  4604              MOV      r4,r0
;;;3729   							if (res == FR_OK)
00011c  b91c              CBNZ     r4,|L30.294|
;;;3730   								res = sync_fs(djo.fs);
00011e  9813              LDR      r0,[sp,#0x4c]
000120  f7fffffe          BL       sync_fs
000124  4604              MOV      r4,r0
                  |L30.294|
;;;3731   						}
;;;3732   					}
;;;3733   /* End critical section */
;;;3734   				}
;;;3735   			}
;;;3736   		}
;;;3737   		FREE_BUF();
;;;3738   	}
;;;3739   
;;;3740   	LEAVE_FF(djo.fs, res);
000126  4620              MOV      r0,r4
;;;3741   }
000128  b01f              ADD      sp,sp,#0x7c
00012a  bdf0              POP      {r4-r7,pc}
;;;3742   
                          ENDP

                  |L30.300|
                          DCD      LfnBuf

                          AREA ||i.f_stat||, CODE, READONLY, ALIGN=2

                  f_stat PROC
;;;3283   
;;;3284   FRESULT f_stat (
000000  b533              PUSH     {r0,r1,r4,r5,lr}
;;;3285   	const TCHAR* path,	/* Pointer to the file path */
;;;3286   	FILINFO* fno		/* Pointer to file information to return */
;;;3287   )
;;;3288   {
000002  b08d              SUB      sp,sp,#0x34
000004  460d              MOV      r5,r1
;;;3289   	FRESULT res;
;;;3290   	DIR dj;
;;;3291   	DEF_NAMEBUF;
;;;3292   
;;;3293   
;;;3294   	/* Get logical drive number */
;;;3295   	res = find_volume(&dj.fs, &path, 0);
000006  2200              MOVS     r2,#0
000008  a90d              ADD      r1,sp,#0x34
00000a  a803              ADD      r0,sp,#0xc
00000c  f7fffffe          BL       find_volume
000010  4604              MOV      r4,r0
;;;3296   	if (res == FR_OK) {
000012  b994              CBNZ     r4,|L31.58|
;;;3297   		INIT_BUF(dj);
000014  f8cdd024          STR      sp,[sp,#0x24]
000018  4809              LDR      r0,|L31.64|
00001a  900b              STR      r0,[sp,#0x2c]
;;;3298   		res = follow_path(&dj, path);	/* Follow the file path */
00001c  a803              ADD      r0,sp,#0xc
00001e  990d              LDR      r1,[sp,#0x34]
000020  f7fffffe          BL       follow_path
000024  4604              MOV      r4,r0
;;;3299   		if (res == FR_OK) {				/* Follow completed */
000026  b944              CBNZ     r4,|L31.58|
;;;3300   			if (dj.dir) {		/* Found an object */
000028  9808              LDR      r0,[sp,#0x20]
00002a  b128              CBZ      r0,|L31.56|
;;;3301   				if (fno) get_fileinfo(&dj, fno);
00002c  b12d              CBZ      r5,|L31.58|
00002e  4629              MOV      r1,r5
000030  a803              ADD      r0,sp,#0xc
000032  f7fffffe          BL       get_fileinfo
000036  e000              B        |L31.58|
                  |L31.56|
;;;3302   			} else {			/* It is root directory */
;;;3303   				res = FR_INVALID_NAME;
000038  2406              MOVS     r4,#6
                  |L31.58|
;;;3304   			}
;;;3305   		}
;;;3306   		FREE_BUF();
;;;3307   	}
;;;3308   
;;;3309   	LEAVE_FF(dj.fs, res);
00003a  4620              MOV      r0,r4
;;;3310   }
00003c  b00f              ADD      sp,sp,#0x3c
00003e  bd30              POP      {r4,r5,pc}
;;;3311   
                          ENDP

                  |L31.64|
                          DCD      LfnBuf

                          AREA ||i.f_sync||, CODE, READONLY, ALIGN=1

                  f_sync PROC
;;;2774   
;;;2775   FRESULT f_sync (
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;2776   	FIL* fp		/* Pointer to the file object */
;;;2777   )
;;;2778   {
000004  4604              MOV      r4,r0
;;;2779   	FRESULT res;
;;;2780   	DWORD tm;
;;;2781   	BYTE *dir;
;;;2782   
;;;2783   
;;;2784   	res = validate(fp);					/* Check validity of the object */
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       validate
00000c  4607              MOV      r7,r0
;;;2785   	if (res == FR_OK) {
00000e  2f00              CMP      r7,#0
000010  d14c              BNE      |L32.172|
;;;2786   		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
000012  79a0              LDRB     r0,[r4,#6]
000014  f0000020          AND      r0,r0,#0x20
000018  2800              CMP      r0,#0
00001a  d047              BEQ      |L32.172|
;;;2787   			/* Write-back dirty buffer */
;;;2788   #if !_FS_TINY
;;;2789   			if (fp->flag & FA__DIRTY) {
00001c  79a0              LDRB     r0,[r4,#6]
00001e  f0000040          AND      r0,r0,#0x40
000022  b178              CBZ      r0,|L32.68|
;;;2790   				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1))
000024  6821              LDR      r1,[r4,#0]
000026  7848              LDRB     r0,[r1,#1]
000028  2301              MOVS     r3,#1
00002a  f1040128          ADD      r1,r4,#0x28
00002e  69a2              LDR      r2,[r4,#0x18]
000030  f7fffffe          BL       disk_write
000034  b110              CBZ      r0,|L32.60|
;;;2791   					LEAVE_FF(fp->fs, FR_DISK_ERR);
000036  2001              MOVS     r0,#1
                  |L32.56|
;;;2792   				fp->flag &= ~FA__DIRTY;
;;;2793   			}
;;;2794   #endif
;;;2795   			/* Update the directory entry */
;;;2796   			res = move_window(fp->fs, fp->dir_sect);
;;;2797   			if (res == FR_OK) {
;;;2798   				dir = fp->dir_ptr;
;;;2799   				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
;;;2800   				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
;;;2801   				st_clust(dir, fp->sclust);					/* Update start cluster */
;;;2802   				tm = get_fattime();							/* Update updated time */
;;;2803   				ST_DWORD(dir+DIR_WrtTime, tm);
;;;2804   				ST_WORD(dir+DIR_LstAccDate, 0);
;;;2805   				fp->flag &= ~FA__WRITTEN;
;;;2806   				fp->fs->wflag = 1;
;;;2807   				res = sync_fs(fp->fs);
;;;2808   			}
;;;2809   		}
;;;2810   	}
;;;2811   
;;;2812   	LEAVE_FF(fp->fs, res);
;;;2813   }
000038  e8bd81f0          POP      {r4-r8,pc}
                  |L32.60|
00003c  79a0              LDRB     r0,[r4,#6]            ;2792
00003e  f0200040          BIC      r0,r0,#0x40           ;2792
000042  71a0              STRB     r0,[r4,#6]            ;2792
                  |L32.68|
000044  69e1              LDR      r1,[r4,#0x1c]         ;2796
000046  6820              LDR      r0,[r4,#0]            ;2796
000048  f7fffffe          BL       move_window
00004c  4607              MOV      r7,r0                 ;2796
00004e  2f00              CMP      r7,#0                 ;2797
000050  d12c              BNE      |L32.172|
000052  6a25              LDR      r5,[r4,#0x20]         ;2798
000054  7ae8              LDRB     r0,[r5,#0xb]          ;2799
000056  f0400020          ORR      r0,r0,#0x20           ;2799
00005a  72e8              STRB     r0,[r5,#0xb]          ;2799
00005c  7b20              LDRB     r0,[r4,#0xc]          ;2800
00005e  7728              STRB     r0,[r5,#0x1c]         ;2800
000060  89a0              LDRH     r0,[r4,#0xc]          ;2800
000062  0a01              LSRS     r1,r0,#8              ;2800
000064  7769              STRB     r1,[r5,#0x1d]         ;2800
000066  68e0              LDR      r0,[r4,#0xc]          ;2800
000068  0c01              LSRS     r1,r0,#16             ;2800
00006a  77a9              STRB     r1,[r5,#0x1e]         ;2800
00006c  68e0              LDR      r0,[r4,#0xc]          ;2800
00006e  0e01              LSRS     r1,r0,#24             ;2800
000070  77e9              STRB     r1,[r5,#0x1f]         ;2800
000072  4628              MOV      r0,r5                 ;2801
000074  6921              LDR      r1,[r4,#0x10]         ;2801
000076  f7fffffe          BL       st_clust
00007a  f7fffffe          BL       get_fattime
00007e  4606              MOV      r6,r0                 ;2802
000080  75ae              STRB     r6,[r5,#0x16]         ;2803
000082  0a31              LSRS     r1,r6,#8              ;2803
000084  75e9              STRB     r1,[r5,#0x17]         ;2803
000086  0c31              LSRS     r1,r6,#16             ;2803
000088  7629              STRB     r1,[r5,#0x18]         ;2803
00008a  0e31              LSRS     r1,r6,#24             ;2803
00008c  7669              STRB     r1,[r5,#0x19]         ;2803
00008e  2000              MOVS     r0,#0                 ;2804
000090  74a8              STRB     r0,[r5,#0x12]         ;2804
000092  2100              MOVS     r1,#0                 ;2804
000094  74e9              STRB     r1,[r5,#0x13]         ;2804
000096  79a0              LDRB     r0,[r4,#6]            ;2805
000098  f0200020          BIC      r0,r0,#0x20           ;2805
00009c  71a0              STRB     r0,[r4,#6]            ;2805
00009e  2001              MOVS     r0,#1                 ;2806
0000a0  6821              LDR      r1,[r4,#0]            ;2806
0000a2  7108              STRB     r0,[r1,#4]            ;2806
0000a4  6820              LDR      r0,[r4,#0]            ;2807
0000a6  f7fffffe          BL       sync_fs
0000aa  4607              MOV      r7,r0                 ;2807
                  |L32.172|
0000ac  4638              MOV      r0,r7                 ;2812
0000ae  e7c3              B        |L32.56|
;;;2814   
                          ENDP


                          AREA ||i.f_truncate||, CODE, READONLY, ALIGN=1

                  f_truncate PROC
;;;3385   
;;;3386   FRESULT f_truncate (
000000  b570              PUSH     {r4-r6,lr}
;;;3387   	FIL* fp		/* Pointer to the file object */
;;;3388   )
;;;3389   {
000002  4604              MOV      r4,r0
;;;3390   	FRESULT res;
;;;3391   	DWORD ncl;
;;;3392   
;;;3393   
;;;3394   	res = validate(fp);						/* Check validity of the object */
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       validate
00000a  4605              MOV      r5,r0
;;;3395   	if (res == FR_OK) {
00000c  b945              CBNZ     r5,|L33.32|
;;;3396   		if (fp->err) {						/* Check error */
00000e  79e0              LDRB     r0,[r4,#7]
000010  b108              CBZ      r0,|L33.22|
;;;3397   			res = (FRESULT)fp->err;
000012  79e5              LDRB     r5,[r4,#7]
000014  e004              B        |L33.32|
                  |L33.22|
;;;3398   		} else {
;;;3399   			if (!(fp->flag & FA_WRITE))		/* Check access mode */
000016  79a0              LDRB     r0,[r4,#6]
000018  f0000002          AND      r0,r0,#2
00001c  b900              CBNZ     r0,|L33.32|
;;;3400   				res = FR_DENIED;
00001e  2507              MOVS     r5,#7
                  |L33.32|
;;;3401   		}
;;;3402   	}
;;;3403   	if (res == FR_OK) {
000020  2d00              CMP      r5,#0
000022  d147              BNE      |L33.180|
;;;3404   		if (fp->fsize > fp->fptr) {
000024  e9d41002          LDRD     r1,r0,[r4,#8]
000028  4288              CMP      r0,r1
00002a  d941              BLS      |L33.176|
;;;3405   			fp->fsize = fp->fptr;	/* Set file size to current R/W point */
00002c  68a0              LDR      r0,[r4,#8]
00002e  60e0              STR      r0,[r4,#0xc]
;;;3406   			fp->flag |= FA__WRITTEN;
000030  79a0              LDRB     r0,[r4,#6]
000032  f0400020          ORR      r0,r0,#0x20
000036  71a0              STRB     r0,[r4,#6]
;;;3407   			if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
000038  68a0              LDR      r0,[r4,#8]
00003a  b938              CBNZ     r0,|L33.76|
;;;3408   				res = remove_chain(fp->fs, fp->sclust);
00003c  6921              LDR      r1,[r4,#0x10]
00003e  6820              LDR      r0,[r4,#0]
000040  f7fffffe          BL       remove_chain
000044  4605              MOV      r5,r0
;;;3409   				fp->sclust = 0;
000046  2000              MOVS     r0,#0
000048  6120              STR      r0,[r4,#0x10]
00004a  e01d              B        |L33.136|
                  |L33.76|
;;;3410   			} else {				/* When truncate a part of the file, remove remaining clusters */
;;;3411   				ncl = get_fat(fp->fs, fp->clust);
00004c  6961              LDR      r1,[r4,#0x14]
00004e  6820              LDR      r0,[r4,#0]
000050  f7fffffe          BL       get_fat
000054  4606              MOV      r6,r0
;;;3412   				res = FR_OK;
000056  2500              MOVS     r5,#0
;;;3413   				if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
000058  1c70              ADDS     r0,r6,#1
00005a  b900              CBNZ     r0,|L33.94|
00005c  2501              MOVS     r5,#1
                  |L33.94|
;;;3414   				if (ncl == 1) res = FR_INT_ERR;
00005e  2e01              CMP      r6,#1
000060  d100              BNE      |L33.100|
000062  2502              MOVS     r5,#2
                  |L33.100|
;;;3415   				if (res == FR_OK && ncl < fp->fs->n_fatent) {
000064  b985              CBNZ     r5,|L33.136|
000066  6820              LDR      r0,[r4,#0]
000068  6940              LDR      r0,[r0,#0x14]
00006a  42b0              CMP      r0,r6
00006c  d90c              BLS      |L33.136|
;;;3416   					res = put_fat(fp->fs, fp->clust, 0x0FFFFFFF);
00006e  f06f4270          MVN      r2,#0xf0000000
000072  6961              LDR      r1,[r4,#0x14]
000074  6820              LDR      r0,[r4,#0]
000076  f7fffffe          BL       put_fat
00007a  4605              MOV      r5,r0
;;;3417   					if (res == FR_OK) res = remove_chain(fp->fs, ncl);
00007c  b925              CBNZ     r5,|L33.136|
00007e  4631              MOV      r1,r6
000080  6820              LDR      r0,[r4,#0]
000082  f7fffffe          BL       remove_chain
000086  4605              MOV      r5,r0
                  |L33.136|
;;;3418   				}
;;;3419   			}
;;;3420   #if !_FS_TINY
;;;3421   			if (res == FR_OK && (fp->flag & FA__DIRTY)) {
000088  b995              CBNZ     r5,|L33.176|
00008a  79a0              LDRB     r0,[r4,#6]
00008c  f0000040          AND      r0,r0,#0x40
000090  b170              CBZ      r0,|L33.176|
;;;3422   				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1))
000092  6821              LDR      r1,[r4,#0]
000094  7848              LDRB     r0,[r1,#1]
000096  2301              MOVS     r3,#1
000098  f1040128          ADD      r1,r4,#0x28
00009c  69a2              LDR      r2,[r4,#0x18]
00009e  f7fffffe          BL       disk_write
0000a2  b108              CBZ      r0,|L33.168|
;;;3423   					res = FR_DISK_ERR;
0000a4  2501              MOVS     r5,#1
0000a6  e003              B        |L33.176|
                  |L33.168|
;;;3424   				else
;;;3425   					fp->flag &= ~FA__DIRTY;
0000a8  79a0              LDRB     r0,[r4,#6]
0000aa  f0200040          BIC      r0,r0,#0x40
0000ae  71a0              STRB     r0,[r4,#6]
                  |L33.176|
;;;3426   			}
;;;3427   #endif
;;;3428   		}
;;;3429   		if (res != FR_OK) fp->err = (FRESULT)res;
0000b0  b105              CBZ      r5,|L33.180|
0000b2  71e5              STRB     r5,[r4,#7]
                  |L33.180|
;;;3430   	}
;;;3431   
;;;3432   	LEAVE_FF(fp->fs, res);
0000b4  4628              MOV      r0,r5
;;;3433   }
0000b6  bd70              POP      {r4-r6,pc}
;;;3434   
                          ENDP


                          AREA ||i.f_unlink||, CODE, READONLY, ALIGN=2

                  f_unlink PROC
;;;3441   
;;;3442   FRESULT f_unlink (
000000  b571              PUSH     {r0,r4-r6,lr}
;;;3443   	const TCHAR* path		/* Pointer to the file or directory path */
;;;3444   )
;;;3445   {
000002  b097              SUB      sp,sp,#0x5c
;;;3446   	FRESULT res;
;;;3447   	DIR dj, sdj;
;;;3448   	BYTE *dir;
;;;3449   	DWORD dclst;
;;;3450   	DEF_NAMEBUF;
;;;3451   
;;;3452   
;;;3453   	/* Get logical drive number */
;;;3454   	res = find_volume(&dj.fs, &path, 1);
000004  2201              MOVS     r2,#1
000006  a917              ADD      r1,sp,#0x5c
000008  a80d              ADD      r0,sp,#0x34
00000a  f7fffffe          BL       find_volume
00000e  4604              MOV      r4,r0
;;;3455   	if (res == FR_OK) {
000010  2c00              CMP      r4,#0
000012  d14f              BNE      |L34.180|
;;;3456   		INIT_BUF(dj);
000014  f8cdd04c          STR      sp,[sp,#0x4c]
000018  4828              LDR      r0,|L34.188|
00001a  9015              STR      r0,[sp,#0x54]
;;;3457   		res = follow_path(&dj, path);		/* Follow the file path */
00001c  a80d              ADD      r0,sp,#0x34
00001e  9917              LDR      r1,[sp,#0x5c]
000020  f7fffffe          BL       follow_path
000024  4604              MOV      r4,r0
;;;3458   		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
000026  bf00              NOP      
;;;3459   			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
;;;3460   #if _FS_LOCK
;;;3461   		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Cannot remove open file */
000028  b924              CBNZ     r4,|L34.52|
00002a  2102              MOVS     r1,#2
00002c  a80d              ADD      r0,sp,#0x34
00002e  f7fffffe          BL       chk_lock
000032  4604              MOV      r4,r0
                  |L34.52|
;;;3462   #endif
;;;3463   		if (res == FR_OK) {					/* The object is accessible */
000034  2c00              CMP      r4,#0
000036  d13d              BNE      |L34.180|
;;;3464   			dir = dj.dir;
000038  9e12              LDR      r6,[sp,#0x48]
;;;3465   			if (!dir) {
00003a  b90e              CBNZ     r6,|L34.64|
;;;3466   				res = FR_INVALID_NAME;		/* Cannot remove the start directory */
00003c  2406              MOVS     r4,#6
00003e  e004              B        |L34.74|
                  |L34.64|
;;;3467   			} else {
;;;3468   				if (dir[DIR_Attr] & AM_RDO)
000040  7af0              LDRB     r0,[r6,#0xb]
000042  f0000001          AND      r0,r0,#1
000046  b100              CBZ      r0,|L34.74|
;;;3469   					res = FR_DENIED;		/* Cannot remove R/O object */
000048  2407              MOVS     r4,#7
                  |L34.74|
;;;3470   			}
;;;3471   			dclst = ld_clust(dj.fs, dir);
00004a  4631              MOV      r1,r6
00004c  980d              LDR      r0,[sp,#0x34]
00004e  f7fffffe          BL       ld_clust
000052  4605              MOV      r5,r0
;;;3472   			if (res == FR_OK && (dir[DIR_Attr] & AM_DIR)) {	/* Is it a sub-dir? */
000054  b9ec              CBNZ     r4,|L34.146|
000056  7af0              LDRB     r0,[r6,#0xb]
000058  f0000010          AND      r0,r0,#0x10
00005c  b1c8              CBZ      r0,|L34.146|
;;;3473   				if (dclst < 2) {
00005e  2d02              CMP      r5,#2
000060  d201              BCS      |L34.102|
;;;3474   					res = FR_INT_ERR;
000062  2402              MOVS     r4,#2
000064  e015              B        |L34.146|
                  |L34.102|
;;;3475   				} else {
;;;3476   					mem_cpy(&sdj, &dj, sizeof (DIR));	/* Check if the sub-directory is empty or not */
000066  2228              MOVS     r2,#0x28
000068  a90d              ADD      r1,sp,#0x34
00006a  a803              ADD      r0,sp,#0xc
00006c  f7fffffe          BL       mem_cpy
;;;3477   					sdj.sclust = dclst;
000070  9505              STR      r5,[sp,#0x14]
;;;3478   					res = dir_sdi(&sdj, 2);		/* Exclude dot entries */
000072  2102              MOVS     r1,#2
000074  a803              ADD      r0,sp,#0xc
000076  f7fffffe          BL       dir_sdi
00007a  4604              MOV      r4,r0
;;;3479   					if (res == FR_OK) {
00007c  b94c              CBNZ     r4,|L34.146|
;;;3480   						res = dir_read(&sdj, 0);	/* Read an item */
00007e  2100              MOVS     r1,#0
000080  a803              ADD      r0,sp,#0xc
000082  f7fffffe          BL       dir_read
000086  4604              MOV      r4,r0
;;;3481   						if (res == FR_OK		/* Not empty directory */
000088  b904              CBNZ     r4,|L34.140|
;;;3482   #if _FS_RPATH
;;;3483   						|| dclst == dj.fs->cdir	/* Current directory */
;;;3484   #endif
;;;3485   						) res = FR_DENIED;
00008a  2407              MOVS     r4,#7
                  |L34.140|
;;;3486   						if (res == FR_NO_FILE) res = FR_OK;	/* Empty */
00008c  2c04              CMP      r4,#4
00008e  d100              BNE      |L34.146|
000090  2400              MOVS     r4,#0
                  |L34.146|
;;;3487   					}
;;;3488   				}
;;;3489   			}
;;;3490   			if (res == FR_OK) {
000092  b97c              CBNZ     r4,|L34.180|
;;;3491   				res = dir_remove(&dj);		/* Remove the directory entry */
000094  a80d              ADD      r0,sp,#0x34
000096  f7fffffe          BL       dir_remove
00009a  4604              MOV      r4,r0
;;;3492   				if (res == FR_OK) {
00009c  b954              CBNZ     r4,|L34.180|
;;;3493   					if (dclst)				/* Remove the cluster chain if exist */
00009e  b125              CBZ      r5,|L34.170|
;;;3494   						res = remove_chain(dj.fs, dclst);
0000a0  4629              MOV      r1,r5
0000a2  980d              LDR      r0,[sp,#0x34]
0000a4  f7fffffe          BL       remove_chain
0000a8  4604              MOV      r4,r0
                  |L34.170|
;;;3495   					if (res == FR_OK) res = sync_fs(dj.fs);
0000aa  b91c              CBNZ     r4,|L34.180|
0000ac  980d              LDR      r0,[sp,#0x34]
0000ae  f7fffffe          BL       sync_fs
0000b2  4604              MOV      r4,r0
                  |L34.180|
;;;3496   				}
;;;3497   			}
;;;3498   		}
;;;3499   		FREE_BUF();
;;;3500   	}
;;;3501   
;;;3502   	LEAVE_FF(dj.fs, res);
0000b4  4620              MOV      r0,r4
;;;3503   }
0000b6  b018              ADD      sp,sp,#0x60
0000b8  bd70              POP      {r4-r6,pc}
;;;3504   
                          ENDP

0000ba  0000              DCW      0x0000
                  |L34.188|
                          DCD      LfnBuf

                          AREA ||i.f_utime||, CODE, READONLY, ALIGN=2

                  f_utime PROC
;;;3628   
;;;3629   FRESULT f_utime (
000000  b573              PUSH     {r0,r1,r4-r6,lr}
;;;3630   	const TCHAR* path,	/* Pointer to the file/directory name */
;;;3631   	const FILINFO* fno	/* Pointer to the time stamp to be set */
;;;3632   )
;;;3633   {
000002  b08e              SUB      sp,sp,#0x38
000004  460d              MOV      r5,r1
;;;3634   	FRESULT res;
;;;3635   	DIR dj;
;;;3636   	BYTE *dir;
;;;3637   	DEF_NAMEBUF;
;;;3638   
;;;3639   
;;;3640   	/* Get logical drive number */
;;;3641   	res = find_volume(&dj.fs, &path, 1);
000006  2201              MOVS     r2,#1
000008  a90e              ADD      r1,sp,#0x38
00000a  a804              ADD      r0,sp,#0x10
00000c  f7fffffe          BL       find_volume
000010  4606              MOV      r6,r0
;;;3642   	if (res == FR_OK) {
000012  b9fe              CBNZ     r6,|L35.84|
;;;3643   		INIT_BUF(dj);
000014  a801              ADD      r0,sp,#4
000016  900a              STR      r0,[sp,#0x28]
000018  4810              LDR      r0,|L35.92|
00001a  900c              STR      r0,[sp,#0x30]
;;;3644   		res = follow_path(&dj, path);	/* Follow the file path */
00001c  a804              ADD      r0,sp,#0x10
00001e  990e              LDR      r1,[sp,#0x38]
000020  f7fffffe          BL       follow_path
000024  4606              MOV      r6,r0
;;;3645   		FREE_BUF();
;;;3646   		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
000026  bf00              NOP      
;;;3647   			res = FR_INVALID_NAME;
;;;3648   		if (res == FR_OK) {
000028  b9a6              CBNZ     r6,|L35.84|
;;;3649   			dir = dj.dir;
00002a  9c09              LDR      r4,[sp,#0x24]
;;;3650   			if (!dir) {					/* Root directory */
00002c  b90c              CBNZ     r4,|L35.50|
;;;3651   				res = FR_INVALID_NAME;
00002e  2606              MOVS     r6,#6
000030  e010              B        |L35.84|
                  |L35.50|
;;;3652   			} else {					/* File or sub-directory */
;;;3653   				ST_WORD(dir+DIR_WrtTime, fno->ftime);
000032  79a8              LDRB     r0,[r5,#6]
000034  75a0              STRB     r0,[r4,#0x16]
000036  88e8              LDRH     r0,[r5,#6]
000038  1201              ASRS     r1,r0,#8
00003a  75e1              STRB     r1,[r4,#0x17]
;;;3654   				ST_WORD(dir+DIR_WrtDate, fno->fdate);
00003c  7928              LDRB     r0,[r5,#4]
00003e  7620              STRB     r0,[r4,#0x18]
000040  88a8              LDRH     r0,[r5,#4]
000042  1201              ASRS     r1,r0,#8
000044  7661              STRB     r1,[r4,#0x19]
;;;3655   				dj.fs->wflag = 1;
000046  2001              MOVS     r0,#1
000048  9904              LDR      r1,[sp,#0x10]
00004a  7108              STRB     r0,[r1,#4]
;;;3656   				res = sync_fs(dj.fs);
00004c  9804              LDR      r0,[sp,#0x10]
00004e  f7fffffe          BL       sync_fs
000052  4606              MOV      r6,r0
                  |L35.84|
;;;3657   			}
;;;3658   		}
;;;3659   	}
;;;3660   
;;;3661   	LEAVE_FF(dj.fs, res);
000054  4630              MOV      r0,r6
;;;3662   }
000056  b010              ADD      sp,sp,#0x40
000058  bd70              POP      {r4-r6,pc}
;;;3663   
                          ENDP

00005a  0000              DCW      0x0000
                  |L35.92|
                          DCD      LfnBuf

                          AREA ||i.f_write||, CODE, READONLY, ALIGN=1

                  f_write PROC
;;;2651   
;;;2652   FRESULT f_write (
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;2653   	FIL* fp,			/* Pointer to the file object */
;;;2654   	const void *buff,	/* Pointer to the data to be written */
;;;2655   	UINT btw,			/* Number of bytes to write */
;;;2656   	UINT* bw			/* Pointer to number of bytes written */
;;;2657   )
;;;2658   {
000004  b083              SUB      sp,sp,#0xc
000006  4604              MOV      r4,r0
000008  4615              MOV      r5,r2
00000a  469b              MOV      r11,r3
;;;2659   	FRESULT res;
;;;2660   	DWORD clst, sect;
;;;2661   	UINT wcnt, cc;
;;;2662   	const BYTE *wbuff = (const BYTE*)buff;
00000c  9804              LDR      r0,[sp,#0x10]
00000e  9001              STR      r0,[sp,#4]
;;;2663   	BYTE csect;
;;;2664   
;;;2665   
;;;2666   	*bw = 0;	/* Clear write byte counter */
000010  2000              MOVS     r0,#0
000012  f8cb0000          STR      r0,[r11,#0]
;;;2667   
;;;2668   	res = validate(fp);						/* Check validity */
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       validate
00001c  9002              STR      r0,[sp,#8]
;;;2669   	if (res != FR_OK) LEAVE_FF(fp->fs, res);
00001e  9802              LDR      r0,[sp,#8]
000020  b118              CBZ      r0,|L36.42|
000022  9802              LDR      r0,[sp,#8]
                  |L36.36|
;;;2670   	if (fp->err)							/* Check error */
;;;2671   		LEAVE_FF(fp->fs, (FRESULT)fp->err);
;;;2672   	if (!(fp->flag & FA_WRITE))				/* Check access mode */
;;;2673   		LEAVE_FF(fp->fs, FR_DENIED);
;;;2674   	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
;;;2675   
;;;2676   	for ( ;  btw;							/* Repeat until all data written */
;;;2677   		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
;;;2678   		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
;;;2679   			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
;;;2680   			if (!csect) {					/* On the cluster boundary? */
;;;2681   				if (fp->fptr == 0) {		/* On the top of the file? */
;;;2682   					clst = fp->sclust;		/* Follow from the origin */
;;;2683   					if (clst == 0)			/* When no cluster is allocated, */
;;;2684   						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
;;;2685   				} else {					/* Middle or end of the file */
;;;2686   #if _USE_FASTSEEK
;;;2687   					if (fp->cltbl)
;;;2688   						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
;;;2689   					else
;;;2690   #endif
;;;2691   						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
;;;2692   				}
;;;2693   				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
;;;2694   				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
;;;2695   				if (clst == 0xFFFFFFFF) 
;;;2696   					ABORT(fp->fs, FR_DISK_ERR);
;;;2697   				fp->clust = clst;			/* Update current cluster */
;;;2698   				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
;;;2699   			}
;;;2700   #if _FS_TINY
;;;2701   			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
;;;2702   				ABORT(fp->fs, FR_DISK_ERR);
;;;2703   #else
;;;2704   			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
;;;2705   				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1))
;;;2706   					ABORT(fp->fs, FR_DISK_ERR);
;;;2707   				fp->flag &= ~FA__DIRTY;
;;;2708   			}
;;;2709   #endif
;;;2710   			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
;;;2711   			if (!sect) ABORT(fp->fs, FR_INT_ERR);
;;;2712   			sect += csect;
;;;2713   			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
;;;2714   			if (cc) {						/* Write maximum contiguous sectors directly */
;;;2715   				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
;;;2716   					cc = fp->fs->csize - csect;
;;;2717   				if (disk_write(fp->fs->drv, wbuff, sect, cc))
;;;2718   					ABORT(fp->fs, FR_DISK_ERR);
;;;2719   #if _FS_MINIMIZE <= 2
;;;2720   #if _FS_TINY
;;;2721   				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
;;;2722   					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
;;;2723   					fp->fs->wflag = 0;
;;;2724   				}
;;;2725   #else
;;;2726   				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
;;;2727   					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
;;;2728   					fp->flag &= ~FA__DIRTY;
;;;2729   				}
;;;2730   #endif
;;;2731   #endif
;;;2732   				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
;;;2733   				continue;
;;;2734   			}
;;;2735   #if _FS_TINY
;;;2736   			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
;;;2737   				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
;;;2738   				fp->fs->winsect = sect;
;;;2739   			}
;;;2740   #else
;;;2741   			if (fp->dsect != sect) {		/* Fill sector cache with file data */
;;;2742   				if (fp->fptr < fp->fsize &&
;;;2743   					disk_read(fp->fs->drv, fp->buf, sect, 1))
;;;2744   						ABORT(fp->fs, FR_DISK_ERR);
;;;2745   			}
;;;2746   #endif
;;;2747   			fp->dsect = sect;
;;;2748   		}
;;;2749   		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
;;;2750   		if (wcnt > btw) wcnt = btw;
;;;2751   #if _FS_TINY
;;;2752   		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
;;;2753   			ABORT(fp->fs, FR_DISK_ERR);
;;;2754   		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
;;;2755   		fp->fs->wflag = 1;
;;;2756   #else
;;;2757   		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
;;;2758   		fp->flag |= FA__DIRTY;
;;;2759   #endif
;;;2760   	}
;;;2761   
;;;2762   	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
;;;2763   	fp->flag |= FA__WRITTEN;						/* Set file change flag */
;;;2764   
;;;2765   	LEAVE_FF(fp->fs, FR_OK);
;;;2766   }
000024  b007              ADD      sp,sp,#0x1c
000026  e8bd8ff0          POP      {r4-r11,pc}
                  |L36.42|
00002a  79e0              LDRB     r0,[r4,#7]            ;2670
00002c  b108              CBZ      r0,|L36.50|
00002e  79e0              LDRB     r0,[r4,#7]            ;2671
000030  e7f8              B        |L36.36|
                  |L36.50|
000032  79a0              LDRB     r0,[r4,#6]            ;2672
000034  f0000002          AND      r0,r0,#2              ;2672
000038  b908              CBNZ     r0,|L36.62|
00003a  2007              MOVS     r0,#7                 ;2673
00003c  e7f2              B        |L36.36|
                  |L36.62|
00003e  68a0              LDR      r0,[r4,#8]            ;2674
000040  4428              ADD      r0,r0,r5              ;2674
000042  68a1              LDR      r1,[r4,#8]            ;2674
000044  4288              CMP      r0,r1                 ;2674
000046  d200              BCS      |L36.74|
000048  2500              MOVS     r5,#0                 ;2674
                  |L36.74|
00004a  e0cf              B        |L36.492|
                  |L36.76|
00004c  6821              LDR      r1,[r4,#0]            ;2678
00004e  8949              LDRH     r1,[r1,#0xa]          ;2678
000050  68a0              LDR      r0,[r4,#8]            ;2678
000052  fbb0f2f1          UDIV     r2,r0,r1              ;2678
000056  fb010012          MLS      r0,r1,r2,r0           ;2678
00005a  2800              CMP      r0,#0                 ;2678
00005c  d17e              BNE      |L36.348|
00005e  6821              LDR      r1,[r4,#0]            ;2679
000060  8949              LDRH     r1,[r1,#0xa]          ;2679
000062  68a0              LDR      r0,[r4,#8]            ;2679
000064  fbb0f0f1          UDIV     r0,r0,r1              ;2679
000068  6821              LDR      r1,[r4,#0]            ;2679
00006a  7889              LDRB     r1,[r1,#2]            ;2679
00006c  1e49              SUBS     r1,r1,#1              ;2679
00006e  4008              ANDS     r0,r0,r1              ;2679
000070  f0000aff          AND      r10,r0,#0xff          ;2679
000074  f1ba0f00          CMP      r10,#0                ;2680
000078  d11e              BNE      |L36.184|
00007a  68a0              LDR      r0,[r4,#8]            ;2681
00007c  b938              CBNZ     r0,|L36.142|
00007e  6927              LDR      r7,[r4,#0x10]         ;2682
000080  b957              CBNZ     r7,|L36.152|
000082  2100              MOVS     r1,#0                 ;2684
000084  6820              LDR      r0,[r4,#0]            ;2684
000086  f7fffffe          BL       create_chain
00008a  4607              MOV      r7,r0                 ;2684
00008c  e004              B        |L36.152|
                  |L36.142|
00008e  6961              LDR      r1,[r4,#0x14]         ;2691
000090  6820              LDR      r0,[r4,#0]            ;2691
000092  f7fffffe          BL       create_chain
000096  4607              MOV      r7,r0                 ;2691
                  |L36.152|
000098  b907              CBNZ     r7,|L36.156|
00009a  e0aa              B        |L36.498|
                  |L36.156|
00009c  2f01              CMP      r7,#1                 ;2694
00009e  d102              BNE      |L36.166|
0000a0  2002              MOVS     r0,#2                 ;2694
0000a2  71e0              STRB     r0,[r4,#7]            ;2694
0000a4  e7be              B        |L36.36|
                  |L36.166|
0000a6  1c78              ADDS     r0,r7,#1              ;2695
0000a8  b910              CBNZ     r0,|L36.176|
0000aa  2001              MOVS     r0,#1                 ;2696
0000ac  71e0              STRB     r0,[r4,#7]            ;2696
0000ae  e7b9              B        |L36.36|
                  |L36.176|
0000b0  6167              STR      r7,[r4,#0x14]         ;2697
0000b2  6920              LDR      r0,[r4,#0x10]         ;2698
0000b4  b900              CBNZ     r0,|L36.184|
0000b6  6127              STR      r7,[r4,#0x10]         ;2698
                  |L36.184|
0000b8  79a0              LDRB     r0,[r4,#6]            ;2704
0000ba  f0000040          AND      r0,r0,#0x40           ;2704
0000be  b178              CBZ      r0,|L36.224|
0000c0  6821              LDR      r1,[r4,#0]            ;2705
0000c2  7848              LDRB     r0,[r1,#1]            ;2705
0000c4  2301              MOVS     r3,#1                 ;2705
0000c6  f1040128          ADD      r1,r4,#0x28           ;2705
0000ca  69a2              LDR      r2,[r4,#0x18]         ;2705
0000cc  f7fffffe          BL       disk_write
0000d0  b110              CBZ      r0,|L36.216|
0000d2  2001              MOVS     r0,#1                 ;2706
0000d4  71e0              STRB     r0,[r4,#7]            ;2706
0000d6  e7a5              B        |L36.36|
                  |L36.216|
0000d8  79a0              LDRB     r0,[r4,#6]            ;2707
0000da  f0200040          BIC      r0,r0,#0x40           ;2707
0000de  71a0              STRB     r0,[r4,#6]            ;2707
                  |L36.224|
0000e0  6961              LDR      r1,[r4,#0x14]         ;2710
0000e2  6820              LDR      r0,[r4,#0]            ;2710
0000e4  f7fffffe          BL       clust2sect
0000e8  4606              MOV      r6,r0                 ;2710
0000ea  b916              CBNZ     r6,|L36.242|
0000ec  2002              MOVS     r0,#2                 ;2711
0000ee  71e0              STRB     r0,[r4,#7]            ;2711
0000f0  e798              B        |L36.36|
                  |L36.242|
0000f2  4456              ADD      r6,r6,r10             ;2712
0000f4  6820              LDR      r0,[r4,#0]            ;2713
0000f6  8940              LDRH     r0,[r0,#0xa]          ;2713
0000f8  fbb5f9f0          UDIV     r9,r5,r0              ;2713
0000fc  f1b90f00          CMP      r9,#0                 ;2714
000100  d031              BEQ      |L36.358|
000102  eb0a0009          ADD      r0,r10,r9             ;2715
000106  6821              LDR      r1,[r4,#0]            ;2715
000108  7889              LDRB     r1,[r1,#2]            ;2715
00010a  4288              CMP      r0,r1                 ;2715
00010c  d903              BLS      |L36.278|
00010e  6820              LDR      r0,[r4,#0]            ;2716
000110  7880              LDRB     r0,[r0,#2]            ;2716
000112  eba0090a          SUB      r9,r0,r10             ;2716
                  |L36.278|
000116  6821              LDR      r1,[r4,#0]            ;2717
000118  7848              LDRB     r0,[r1,#1]            ;2717
00011a  464b              MOV      r3,r9                 ;2717
00011c  4632              MOV      r2,r6                 ;2717
00011e  9901              LDR      r1,[sp,#4]            ;2717
000120  f7fffffe          BL       disk_write
000124  b110              CBZ      r0,|L36.300|
000126  2001              MOVS     r0,#1                 ;2718
000128  71e0              STRB     r0,[r4,#7]            ;2718
00012a  e77b              B        |L36.36|
                  |L36.300|
00012c  69a0              LDR      r0,[r4,#0x18]         ;2726
00012e  1b80              SUBS     r0,r0,r6              ;2726
000130  4548              CMP      r0,r9                 ;2726
000132  d211              BCS      |L36.344|
000134  69a0              LDR      r0,[r4,#0x18]         ;2727
000136  1b83              SUBS     r3,r0,r6              ;2727
000138  6820              LDR      r0,[r4,#0]            ;2727
00013a  f8b0c00a          LDRH     r12,[r0,#0xa]         ;2727
00013e  9801              LDR      r0,[sp,#4]            ;2727
000140  fb03010c          MLA      r1,r3,r12,r0          ;2727
000144  6820              LDR      r0,[r4,#0]            ;2727
000146  8942              LDRH     r2,[r0,#0xa]          ;2727
000148  f1040028          ADD      r0,r4,#0x28           ;2727
00014c  f7fffffe          BL       mem_cpy
000150  79a0              LDRB     r0,[r4,#6]            ;2728
000152  f0200040          BIC      r0,r0,#0x40           ;2728
000156  71a0              STRB     r0,[r4,#6]            ;2728
                  |L36.344|
000158  6820              LDR      r0,[r4,#0]            ;2732
00015a  e000              B        |L36.350|
                  |L36.348|
00015c  e017              B        |L36.398|
                  |L36.350|
00015e  8940              LDRH     r0,[r0,#0xa]          ;2732
000160  fb00f809          MUL      r8,r0,r9              ;2732
000164  e035              B        |L36.466|
                  |L36.358|
000166  69a0              LDR      r0,[r4,#0x18]         ;2741
000168  42b0              CMP      r0,r6                 ;2741
00016a  d00f              BEQ      |L36.396|
00016c  e9d40102          LDRD     r0,r1,[r4,#8]         ;2742
000170  4288              CMP      r0,r1                 ;2742
000172  d20b              BCS      |L36.396|
000174  6821              LDR      r1,[r4,#0]            ;2743
000176  7848              LDRB     r0,[r1,#1]            ;2743
000178  2301              MOVS     r3,#1                 ;2743
00017a  4632              MOV      r2,r6                 ;2743
00017c  f1040128          ADD      r1,r4,#0x28           ;2743
000180  f7fffffe          BL       disk_read
000184  b110              CBZ      r0,|L36.396|
000186  2001              MOVS     r0,#1                 ;2744
000188  71e0              STRB     r0,[r4,#7]            ;2744
00018a  e74b              B        |L36.36|
                  |L36.396|
00018c  61a6              STR      r6,[r4,#0x18]         ;2747
                  |L36.398|
00018e  6821              LDR      r1,[r4,#0]            ;2749
000190  8949              LDRH     r1,[r1,#0xa]          ;2749
000192  68a0              LDR      r0,[r4,#8]            ;2749
000194  fbb0f2f1          UDIV     r2,r0,r1              ;2749
000198  fb010012          MLS      r0,r1,r2,r0           ;2749
00019c  6821              LDR      r1,[r4,#0]            ;2749
00019e  8949              LDRH     r1,[r1,#0xa]          ;2749
0001a0  eba10800          SUB      r8,r1,r0              ;2749
0001a4  45a8              CMP      r8,r5                 ;2750
0001a6  d900              BLS      |L36.426|
0001a8  46a8              MOV      r8,r5                 ;2750
                  |L36.426|
0001aa  6821              LDR      r1,[r4,#0]            ;2757
0001ac  8949              LDRH     r1,[r1,#0xa]          ;2757
0001ae  68a0              LDR      r0,[r4,#8]            ;2757
0001b0  fbb0f2f1          UDIV     r2,r0,r1              ;2757
0001b4  fb010112          MLS      r1,r1,r2,r0           ;2757
0001b8  f1040028          ADD      r0,r4,#0x28           ;2757
0001bc  4408              ADD      r0,r0,r1              ;2757
0001be  4642              MOV      r2,r8                 ;2757
0001c0  9000              STR      r0,[sp,#0]            ;2757
0001c2  9901              LDR      r1,[sp,#4]            ;2757
0001c4  f7fffffe          BL       mem_cpy
0001c8  79a0              LDRB     r0,[r4,#6]            ;2758
0001ca  f0400040          ORR      r0,r0,#0x40           ;2758
0001ce  71a0              STRB     r0,[r4,#6]            ;2758
0001d0  bf00              NOP                            ;2733
                  |L36.466|
0001d2  9801              LDR      r0,[sp,#4]            ;2677
0001d4  4440              ADD      r0,r0,r8              ;2677
0001d6  9001              STR      r0,[sp,#4]            ;2677
0001d8  68a0              LDR      r0,[r4,#8]            ;2677
0001da  4440              ADD      r0,r0,r8              ;2677
0001dc  60a0              STR      r0,[r4,#8]            ;2677
0001de  f8db0000          LDR      r0,[r11,#0]           ;2677
0001e2  4440              ADD      r0,r0,r8              ;2677
0001e4  f8cb0000          STR      r0,[r11,#0]           ;2677
0001e8  eba50508          SUB      r5,r5,r8              ;2677
                  |L36.492|
0001ec  2d00              CMP      r5,#0                 ;2676
0001ee  f47faf2d          BNE      |L36.76|
                  |L36.498|
0001f2  bf00              NOP                            ;2693
0001f4  e9d40102          LDRD     r0,r1,[r4,#8]         ;2762
0001f8  4288              CMP      r0,r1                 ;2762
0001fa  d901              BLS      |L36.512|
0001fc  68a0              LDR      r0,[r4,#8]            ;2762
0001fe  60e0              STR      r0,[r4,#0xc]          ;2762
                  |L36.512|
000200  79a0              LDRB     r0,[r4,#6]            ;2763
000202  f0400020          ORR      r0,r0,#0x20           ;2763
000206  71a0              STRB     r0,[r4,#6]            ;2763
000208  2000              MOVS     r0,#0                 ;2765
00020a  e70b              B        |L36.36|
;;;2767   
                          ENDP


                          AREA ||i.find_volume||, CODE, READONLY, ALIGN=2

                  find_volume PROC
;;;2163   static
;;;2164   FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
000000  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;2165   	FATFS** rfs,		/* Pointer to pointer to the found file system object */
;;;2166   	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
;;;2167   	BYTE wmode			/* !=0: Check write protection for write access */
;;;2168   )
;;;2169   {
000004  b088              SUB      sp,sp,#0x20
;;;2170   	BYTE fmt;
;;;2171   	int vol;
;;;2172   	DSTATUS stat;
;;;2173   	DWORD bsect, fasize, tsect, sysect, nclst, szbfat;
;;;2174   	WORD nrsv;
;;;2175   	FATFS *fs;
;;;2176   
;;;2177   
;;;2178   	/* Get logical drive number from the path name */
;;;2179   	*rfs = 0;
000006  2100              MOVS     r1,#0
000008  9808              LDR      r0,[sp,#0x20]
00000a  6001              STR      r1,[r0,#0]
;;;2180   	vol = get_ldnumber(path);
00000c  9809              LDR      r0,[sp,#0x24]
00000e  f7fffffe          BL       get_ldnumber
000012  9007              STR      r0,[sp,#0x1c]
;;;2181   	if (vol < 0) return FR_INVALID_DRIVE;
000014  9807              LDR      r0,[sp,#0x1c]
000016  2800              CMP      r0,#0
000018  da03              BGE      |L37.34|
00001a  200b              MOVS     r0,#0xb
                  |L37.28|
;;;2182   
;;;2183   	/* Check if the file system object is valid or not */
;;;2184   	fs = FatFs[vol];					/* Get pointer to the file system object */
;;;2185   	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
;;;2186   
;;;2187   	ENTER_FF(fs);						/* Lock the volume */
;;;2188   	*rfs = fs;							/* Return pointer to the file system object */
;;;2189   
;;;2190   	if (fs->fs_type) {					/* If the volume has been mounted */
;;;2191   		stat = disk_status(fs->drv);
;;;2192   		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
;;;2193   			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
;;;2194   				return FR_WRITE_PROTECTED;
;;;2195   			return FR_OK;				/* The file system object is valid */
;;;2196   		}
;;;2197   	}
;;;2198   
;;;2199   	/* The file system object is not valid. */
;;;2200   	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */
;;;2201   
;;;2202   	fs->fs_type = 0;					/* Clear the file system object */
;;;2203   	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
;;;2204   	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
;;;2205   	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
;;;2206   		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
;;;2207   	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
;;;2208   		return FR_WRITE_PROTECTED;
;;;2209   #if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
;;;2210   	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
;;;2211   		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
;;;2212   #endif
;;;2213   	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
;;;2214   	bsect = 0;
;;;2215   	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
;;;2216   	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
;;;2217   		UINT i;
;;;2218   		DWORD br[4];
;;;2219   
;;;2220   		for (i = 0; i < 4; i++) {			/* Get partition offset */
;;;2221   			BYTE *pt = fs->win+MBR_Table + i * SZ_PTE;
;;;2222   			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
;;;2223   		}
;;;2224   		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
;;;2225   		if (i) i--;
;;;2226   		do {								/* Find an FAT volume */
;;;2227   			bsect = br[i];
;;;2228   			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
;;;2229   		} while (!LD2PT(vol) && fmt && ++i < 4);
;;;2230   	}
;;;2231   	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
;;;2232   	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
;;;2233   
;;;2234   	/* An FAT volume is found. Following code initializes the file system object */
;;;2235   
;;;2236   	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
;;;2237   		return FR_NO_FILESYSTEM;
;;;2238   
;;;2239   	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
;;;2240   	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
;;;2241   	fs->fsize = fasize;
;;;2242   
;;;2243   	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
;;;2244   	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
;;;2245   		return FR_NO_FILESYSTEM;
;;;2246   	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
;;;2247   
;;;2248   	fs->csize = fs->win[BPB_SecPerClus];				/* Number of sectors per cluster */
;;;2249   	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
;;;2250   		return FR_NO_FILESYSTEM;
;;;2251   
;;;2252   	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
;;;2253   	if (fs->n_rootdir % (SS(fs) / SZ_DIR))				/* (Must be sector aligned) */
;;;2254   		return FR_NO_FILESYSTEM;
;;;2255   
;;;2256   	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
;;;2257   	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
;;;2258   
;;;2259   	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
;;;2260   	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
;;;2261   
;;;2262   	/* Determine the FAT sub type */
;;;2263   	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
;;;2264   	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
;;;2265   	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
;;;2266   	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
;;;2267   	fmt = FS_FAT12;
;;;2268   	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
;;;2269   	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
;;;2270   
;;;2271   	/* Boundaries and Limits */
;;;2272   	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
;;;2273   	fs->volbase = bsect;								/* Volume start sector */
;;;2274   	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
;;;2275   	fs->database = bsect + sysect;						/* Data start sector */
;;;2276   	if (fmt == FS_FAT32) {
;;;2277   		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
;;;2278   		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
;;;2279   		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
;;;2280   	} else {
;;;2281   		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
;;;2282   		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
;;;2283   		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
;;;2284   			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
;;;2285   	}
;;;2286   	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than needed) */
;;;2287   		return FR_NO_FILESYSTEM;
;;;2288   
;;;2289   #if !_FS_READONLY
;;;2290   	/* Initialize cluster allocation information */
;;;2291   	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
;;;2292   
;;;2293   	/* Get fsinfo if available */
;;;2294   	fs->fsi_flag = 0x80;
;;;2295   #if (_FS_NOFSINFO & 3) != 3
;;;2296   	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
;;;2297   		&& LD_WORD(fs->win+BPB_FSInfo) == 1
;;;2298   		&& move_window(fs, bsect + 1) == FR_OK)
;;;2299   	{
;;;2300   		fs->fsi_flag = 0;
;;;2301   		if (LD_WORD(fs->win+BS_55AA) == 0xAA55	/* Load FSINFO data if available */
;;;2302   			&& LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252
;;;2303   			&& LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272)
;;;2304   		{
;;;2305   #if (_FS_NOFSINFO & 1) == 0
;;;2306   			fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
;;;2307   #endif
;;;2308   #if (_FS_NOFSINFO & 2) == 0
;;;2309   			fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
;;;2310   #endif
;;;2311   		}
;;;2312   	}
;;;2313   #endif
;;;2314   #endif
;;;2315   	fs->fs_type = fmt;	/* FAT sub-type */
;;;2316   	fs->id = ++Fsid;	/* File system mount ID */
;;;2317   #if _FS_RPATH
;;;2318   	fs->cdir = 0;		/* Set current directory to root */
;;;2319   #endif
;;;2320   #if _FS_LOCK			/* Clear file lock semaphores */
;;;2321   	clear_lock(fs);
;;;2322   #endif
;;;2323   
;;;2324   	return FR_OK;
;;;2325   }
00001c  b00b              ADD      sp,sp,#0x2c
00001e  e8bd8ff0          POP      {r4-r11,pc}
                  |L37.34|
000022  49e7              LDR      r1,|L37.960|
000024  9807              LDR      r0,[sp,#0x1c]         ;2184
000026  f8514020          LDR      r4,[r1,r0,LSL #2]     ;2184
00002a  b90c              CBNZ     r4,|L37.48|
00002c  200c              MOVS     r0,#0xc               ;2185
00002e  e7f5              B        |L37.28|
                  |L37.48|
000030  9808              LDR      r0,[sp,#0x20]         ;2188
000032  6004              STR      r4,[r0,#0]            ;2188
000034  7820              LDRB     r0,[r4,#0]            ;2190
000036  b178              CBZ      r0,|L37.88|
000038  7860              LDRB     r0,[r4,#1]            ;2191
00003a  f7fffffe          BL       disk_status
00003e  4680              MOV      r8,r0                 ;2191
000040  f0080001          AND      r0,r8,#1              ;2192
000044  b940              CBNZ     r0,|L37.88|
000046  980a              LDR      r0,[sp,#0x28]         ;2193
000048  b120              CBZ      r0,|L37.84|
00004a  f0080004          AND      r0,r8,#4              ;2193
00004e  b108              CBZ      r0,|L37.84|
000050  200a              MOVS     r0,#0xa               ;2194
000052  e7e3              B        |L37.28|
                  |L37.84|
000054  2000              MOVS     r0,#0                 ;2195
000056  e7e1              B        |L37.28|
                  |L37.88|
000058  2000              MOVS     r0,#0                 ;2202
00005a  7020              STRB     r0,[r4,#0]            ;2202
00005c  9807              LDR      r0,[sp,#0x1c]         ;2203
00005e  7060              STRB     r0,[r4,#1]            ;2203
000060  7860              LDRB     r0,[r4,#1]            ;2204
000062  f7fffffe          BL       disk_initialize
000066  4680              MOV      r8,r0                 ;2204
000068  f0080001          AND      r0,r8,#1              ;2205
00006c  b108              CBZ      r0,|L37.114|
00006e  2003              MOVS     r0,#3                 ;2206
000070  e7d4              B        |L37.28|
                  |L37.114|
000072  980a              LDR      r0,[sp,#0x28]         ;2207
000074  b120              CBZ      r0,|L37.128|
000076  f0080004          AND      r0,r8,#4              ;2207
00007a  b108              CBZ      r0,|L37.128|
00007c  200a              MOVS     r0,#0xa               ;2208
00007e  e7cd              B        |L37.28|
                  |L37.128|
000080  7860              LDRB     r0,[r4,#1]            ;2210
000082  f104020a          ADD      r2,r4,#0xa            ;2210
000086  2102              MOVS     r1,#2                 ;2210
000088  f7fffffe          BL       disk_ioctl
00008c  b938              CBNZ     r0,|L37.158|
00008e  8960              LDRH     r0,[r4,#0xa]          ;2211
000090  f5b07f00          CMP      r0,#0x200             ;2211
000094  db03              BLT      |L37.158|
000096  8960              LDRH     r0,[r4,#0xa]          ;2211
000098  f5b05f80          CMP      r0,#0x1000            ;2211
00009c  dd01              BLE      |L37.162|
                  |L37.158|
00009e  2001              MOVS     r0,#1                 ;2211
0000a0  e7bc              B        |L37.28|
                  |L37.162|
0000a2  2700              MOVS     r7,#0                 ;2214
0000a4  4639              MOV      r1,r7                 ;2215
0000a6  4620              MOV      r0,r4                 ;2215
0000a8  f7fffffe          BL       check_fs
0000ac  4605              MOV      r5,r0                 ;2215
0000ae  2d01              CMP      r5,#1                 ;2216
0000b0  d001              BEQ      |L37.182|
0000b2  bb6d              CBNZ     r5,|L37.272|
0000b4  e02c              B        |L37.272|
                  |L37.182|
0000b6  2600              MOVS     r6,#0                 ;2220
0000b8  e014              B        |L37.228|
                  |L37.186|
0000ba  f50471f7          ADD      r1,r4,#0x1ee          ;2221
0000be  eb011006          ADD      r0,r1,r6,LSL #4       ;2221
0000c2  7901              LDRB     r1,[r0,#4]            ;2222
0000c4  b151              CBZ      r1,|L37.220|
0000c6  7ac1              LDRB     r1,[r0,#0xb]          ;2222
0000c8  060a              LSLS     r2,r1,#24             ;2222
0000ca  7a81              LDRB     r1,[r0,#0xa]          ;2222
0000cc  ea424201          ORR      r2,r2,r1,LSL #16      ;2222
0000d0  7a41              LDRB     r1,[r0,#9]            ;2222
0000d2  ea422101          ORR      r1,r2,r1,LSL #8       ;2222
0000d6  7a02              LDRB     r2,[r0,#8]            ;2222
0000d8  4311              ORRS     r1,r1,r2              ;2222
0000da  e000              B        |L37.222|
                  |L37.220|
0000dc  2100              MOVS     r1,#0                 ;2222
                  |L37.222|
0000de  f84d1026          STR      r1,[sp,r6,LSL #2]     ;2222
0000e2  1c76              ADDS     r6,r6,#1              ;2220
                  |L37.228|
0000e4  2e04              CMP      r6,#4                 ;2220
0000e6  d3e8              BCC      |L37.186|
0000e8  2600              MOVS     r6,#0                 ;2224
0000ea  b106              CBZ      r6,|L37.238|
0000ec  1e76              SUBS     r6,r6,#1              ;2225
                  |L37.238|
0000ee  bf00              NOP                            ;2226
                  |L37.240|
0000f0  f85d7026          LDR      r7,[sp,r6,LSL #2]     ;2227
0000f4  b127              CBZ      r7,|L37.256|
0000f6  4639              MOV      r1,r7                 ;2228
0000f8  4620              MOV      r0,r4                 ;2228
0000fa  f7fffffe          BL       check_fs
0000fe  e000              B        |L37.258|
                  |L37.256|
000100  2002              MOVS     r0,#2                 ;2228
                  |L37.258|
000102  4605              MOV      r5,r0                 ;2228
000104  b11d              CBZ      r5,|L37.270|
000106  1c70              ADDS     r0,r6,#1              ;2229
000108  4606              MOV      r6,r0                 ;2229
00010a  2804              CMP      r0,#4                 ;2229
00010c  d3f0              BCC      |L37.240|
                  |L37.270|
00010e  bf00              NOP                            ;2230
                  |L37.272|
000110  2d03              CMP      r5,#3                 ;2231
000112  d101              BNE      |L37.280|
000114  2001              MOVS     r0,#1                 ;2231
000116  e781              B        |L37.28|
                  |L37.280|
000118  b10d              CBZ      r5,|L37.286|
00011a  200d              MOVS     r0,#0xd               ;2232
00011c  e77e              B        |L37.28|
                  |L37.286|
00011e  203b              MOVS     r0,#0x3b              ;2236
000120  5d01              LDRB     r1,[r0,r4]            ;2236
000122  f894003c          LDRB     r0,[r4,#0x3c]         ;2236
000126  ea412000          ORR      r0,r1,r0,LSL #8       ;2236
00012a  8961              LDRH     r1,[r4,#0xa]          ;2236
00012c  4288              CMP      r0,r1                 ;2236
00012e  d001              BEQ      |L37.308|
000130  200d              MOVS     r0,#0xd               ;2237
000132  e773              B        |L37.28|
                  |L37.308|
000134  2046              MOVS     r0,#0x46              ;2239
000136  5d01              LDRB     r1,[r0,r4]            ;2239
000138  f8940047          LDRB     r0,[r4,#0x47]         ;2239
00013c  ea412900          ORR      r9,r1,r0,LSL #8       ;2239
000140  f1b90f00          CMP      r9,#0                 ;2240
000144  d10e              BNE      |L37.356|
000146  f8940057          LDRB     r0,[r4,#0x57]         ;2240
00014a  0601              LSLS     r1,r0,#24             ;2240
00014c  f8940056          LDRB     r0,[r4,#0x56]         ;2240
000150  ea414100          ORR      r1,r1,r0,LSL #16      ;2240
000154  f8940055          LDRB     r0,[r4,#0x55]         ;2240
000158  ea412000          ORR      r0,r1,r0,LSL #8       ;2240
00015c  f8941054          LDRB     r1,[r4,#0x54]         ;2240
000160  ea400901          ORR      r9,r0,r1              ;2240
                  |L37.356|
000164  f8c49018          STR      r9,[r4,#0x18]         ;2241
000168  2040              MOVS     r0,#0x40              ;2243
00016a  5d00              LDRB     r0,[r0,r4]            ;2243
00016c  70e0              STRB     r0,[r4,#3]            ;2243
00016e  78e0              LDRB     r0,[r4,#3]            ;2244
000170  2801              CMP      r0,#1                 ;2244
000172  d004              BEQ      |L37.382|
000174  78e0              LDRB     r0,[r4,#3]            ;2244
000176  2802              CMP      r0,#2                 ;2244
000178  d001              BEQ      |L37.382|
00017a  200d              MOVS     r0,#0xd               ;2245
00017c  e74e              B        |L37.28|
                  |L37.382|
00017e  78e0              LDRB     r0,[r4,#3]            ;2246
000180  fb09f900          MUL      r9,r9,r0              ;2246
000184  203d              MOVS     r0,#0x3d              ;2248
000186  5d00              LDRB     r0,[r0,r4]            ;2248
000188  70a0              STRB     r0,[r4,#2]            ;2248
00018a  78a0              LDRB     r0,[r4,#2]            ;2249
00018c  b118              CBZ      r0,|L37.406|
00018e  78a0              LDRB     r0,[r4,#2]            ;2249
000190  1e41              SUBS     r1,r0,#1              ;2249
000192  4008              ANDS     r0,r0,r1              ;2249
000194  b108              CBZ      r0,|L37.410|
                  |L37.406|
000196  200d              MOVS     r0,#0xd               ;2250
000198  e740              B        |L37.28|
                  |L37.410|
00019a  2041              MOVS     r0,#0x41              ;2252
00019c  5d01              LDRB     r1,[r0,r4]            ;2252
00019e  f8940042          LDRB     r0,[r4,#0x42]         ;2252
0001a2  ea412000          ORR      r0,r1,r0,LSL #8       ;2252
0001a6  8120              STRH     r0,[r4,#8]            ;2252
0001a8  8960              LDRH     r0,[r4,#0xa]          ;2253
0001aa  17c1              ASRS     r1,r0,#31             ;2253
0001ac  eb0061d1          ADD      r1,r0,r1,LSR #27      ;2253
0001b0  1149              ASRS     r1,r1,#5              ;2253
0001b2  8922              LDRH     r2,[r4,#8]            ;2253
0001b4  fb92f3f1          SDIV     r3,r2,r1              ;2253
0001b8  fb012113          MLS      r1,r1,r3,r2           ;2253
0001bc  b109              CBZ      r1,|L37.450|
0001be  200d              MOVS     r0,#0xd               ;2254
0001c0  e72c              B        |L37.28|
                  |L37.450|
0001c2  2043              MOVS     r0,#0x43              ;2256
0001c4  5d01              LDRB     r1,[r0,r4]            ;2256
0001c6  f8940044          LDRB     r0,[r4,#0x44]         ;2256
0001ca  ea412b00          ORR      r11,r1,r0,LSL #8      ;2256
0001ce  f1bb0f00          CMP      r11,#0                ;2257
0001d2  d10e              BNE      |L37.498|
0001d4  f8940053          LDRB     r0,[r4,#0x53]         ;2257
0001d8  0601              LSLS     r1,r0,#24             ;2257
0001da  f8940052          LDRB     r0,[r4,#0x52]         ;2257
0001de  ea414100          ORR      r1,r1,r0,LSL #16      ;2257
0001e2  f8940051          LDRB     r0,[r4,#0x51]         ;2257
0001e6  ea412000          ORR      r0,r1,r0,LSL #8       ;2257
0001ea  f8941050          LDRB     r1,[r4,#0x50]         ;2257
0001ee  ea400b01          ORR      r11,r0,r1             ;2257
                  |L37.498|
0001f2  203e              MOVS     r0,#0x3e              ;2259
0001f4  5d01              LDRB     r1,[r0,r4]            ;2259
0001f6  f894003f          LDRB     r0,[r4,#0x3f]         ;2259
0001fa  ea412000          ORR      r0,r1,r0,LSL #8       ;2259
0001fe  9004              STR      r0,[sp,#0x10]         ;2259
000200  9804              LDR      r0,[sp,#0x10]         ;2260
000202  b908              CBNZ     r0,|L37.520|
000204  200d              MOVS     r0,#0xd               ;2260
000206  e709              B        |L37.28|
                  |L37.520|
000208  8960              LDRH     r0,[r4,#0xa]          ;2263
00020a  17c1              ASRS     r1,r0,#31             ;2263
00020c  eb0061d1          ADD      r1,r0,r1,LSR #27      ;2263
000210  1149              ASRS     r1,r1,#5              ;2263
000212  8922              LDRH     r2,[r4,#8]            ;2263
000214  fb92f2f1          SDIV     r2,r2,r1              ;2263
000218  9904              LDR      r1,[sp,#0x10]         ;2263
00021a  4449              ADD      r1,r1,r9              ;2263
00021c  4411              ADD      r1,r1,r2              ;2263
00021e  9106              STR      r1,[sp,#0x18]         ;2263
000220  9906              LDR      r1,[sp,#0x18]         ;2264
000222  458b              CMP      r11,r1                ;2264
000224  d201              BCS      |L37.554|
000226  200d              MOVS     r0,#0xd               ;2264
000228  e6f8              B        |L37.28|
                  |L37.554|
00022a  9806              LDR      r0,[sp,#0x18]         ;2265
00022c  ebab0000          SUB      r0,r11,r0             ;2265
000230  78a1              LDRB     r1,[r4,#2]            ;2265
000232  fbb0faf1          UDIV     r10,r0,r1             ;2265
000236  f1ba0f00          CMP      r10,#0                ;2266
00023a  d101              BNE      |L37.576|
00023c  200d              MOVS     r0,#0xd               ;2266
00023e  e6ed              B        |L37.28|
                  |L37.576|
000240  2501              MOVS     r5,#1                 ;2267
000242  f64070f6          MOV      r0,#0xff6             ;2268
000246  4582              CMP      r10,r0                ;2268
000248  d300              BCC      |L37.588|
00024a  2502              MOVS     r5,#2                 ;2268
                  |L37.588|
00024c  f64f70f6          MOV      r0,#0xfff6            ;2269
000250  4582              CMP      r10,r0                ;2269
000252  d300              BCC      |L37.598|
000254  2503              MOVS     r5,#3                 ;2269
                  |L37.598|
000256  f10a0002          ADD      r0,r10,#2             ;2272
00025a  6160              STR      r0,[r4,#0x14]         ;2272
00025c  61e7              STR      r7,[r4,#0x1c]         ;2273
00025e  9804              LDR      r0,[sp,#0x10]         ;2274
000260  4438              ADD      r0,r0,r7              ;2274
000262  6220              STR      r0,[r4,#0x20]         ;2274
000264  9806              LDR      r0,[sp,#0x18]         ;2275
000266  4438              ADD      r0,r0,r7              ;2275
000268  62a0              STR      r0,[r4,#0x28]         ;2275
00026a  2d03              CMP      r5,#3                 ;2276
00026c  d116              BNE      |L37.668|
00026e  8920              LDRH     r0,[r4,#8]            ;2277
000270  b108              CBZ      r0,|L37.630|
000272  200d              MOVS     r0,#0xd               ;2277
000274  e6d2              B        |L37.28|
                  |L37.630|
000276  f894005f          LDRB     r0,[r4,#0x5f]         ;2278
00027a  0601              LSLS     r1,r0,#24             ;2278
00027c  f894005e          LDRB     r0,[r4,#0x5e]         ;2278
000280  ea414100          ORR      r1,r1,r0,LSL #16      ;2278
000284  f894005d          LDRB     r0,[r4,#0x5d]         ;2278
000288  ea412000          ORR      r0,r1,r0,LSL #8       ;2278
00028c  f894105c          LDRB     r1,[r4,#0x5c]         ;2278
000290  4308              ORRS     r0,r0,r1              ;2278
000292  6260              STR      r0,[r4,#0x24]         ;2278
000294  6960              LDR      r0,[r4,#0x14]         ;2279
000296  0080              LSLS     r0,r0,#2              ;2279
000298  9005              STR      r0,[sp,#0x14]         ;2279
00029a  e014              B        |L37.710|
                  |L37.668|
00029c  8920              LDRH     r0,[r4,#8]            ;2281
00029e  b908              CBNZ     r0,|L37.676|
0002a0  200d              MOVS     r0,#0xd               ;2281
0002a2  e6bb              B        |L37.28|
                  |L37.676|
0002a4  6a20              LDR      r0,[r4,#0x20]         ;2282
0002a6  4448              ADD      r0,r0,r9              ;2282
0002a8  6260              STR      r0,[r4,#0x24]         ;2282
0002aa  2d02              CMP      r5,#2                 ;2283
0002ac  d102              BNE      |L37.692|
0002ae  6960              LDR      r0,[r4,#0x14]         ;2284
0002b0  0040              LSLS     r0,r0,#1              ;2284
0002b2  e007              B        |L37.708|
                  |L37.692|
0002b4  7d20              LDRB     r0,[r4,#0x14]         ;2284
0002b6  f0000001          AND      r0,r0,#1              ;2284
0002ba  6961              LDR      r1,[r4,#0x14]         ;2284
0002bc  eb010141          ADD      r1,r1,r1,LSL #1       ;2284
0002c0  eb000051          ADD      r0,r0,r1,LSR #1       ;2284
                  |L37.708|
0002c4  9005              STR      r0,[sp,#0x14]         ;2284
                  |L37.710|
0002c6  8960              LDRH     r0,[r4,#0xa]          ;2286
0002c8  1e40              SUBS     r0,r0,#1              ;2286
0002ca  9905              LDR      r1,[sp,#0x14]         ;2286
0002cc  4408              ADD      r0,r0,r1              ;2286
0002ce  8961              LDRH     r1,[r4,#0xa]          ;2286
0002d0  fbb0f0f1          UDIV     r0,r0,r1              ;2286
0002d4  69a1              LDR      r1,[r4,#0x18]         ;2286
0002d6  4288              CMP      r0,r1                 ;2286
0002d8  d901              BLS      |L37.734|
0002da  200d              MOVS     r0,#0xd               ;2287
0002dc  e69e              B        |L37.28|
                  |L37.734|
0002de  f04f30ff          MOV      r0,#0xffffffff        ;2291
0002e2  6120              STR      r0,[r4,#0x10]         ;2291
0002e4  60e0              STR      r0,[r4,#0xc]          ;2291
0002e6  2080              MOVS     r0,#0x80              ;2294
0002e8  7160              STRB     r0,[r4,#5]            ;2294
0002ea  2d03              CMP      r5,#3                 ;2296
0002ec  d15a              BNE      |L37.932|
0002ee  f8941060          LDRB     r1,[r4,#0x60]         ;2297
0002f2  f8940061          LDRB     r0,[r4,#0x61]         ;2297
0002f6  ea412000          ORR      r0,r1,r0,LSL #8       ;2297
0002fa  2801              CMP      r0,#1                 ;2297
0002fc  d152              BNE      |L37.932|
0002fe  1c79              ADDS     r1,r7,#1              ;2298
000300  4620              MOV      r0,r4                 ;2298
000302  f7fffffe          BL       move_window
000306  bbe8              CBNZ     r0,|L37.900|
000308  2000              MOVS     r0,#0                 ;2300
00030a  7160              STRB     r0,[r4,#5]            ;2300
00030c  f894122e          LDRB     r1,[r4,#0x22e]        ;2301
000310  f894022f          LDRB     r0,[r4,#0x22f]        ;2301
000314  ea412000          ORR      r0,r1,r0,LSL #8       ;2301
000318  f64a2155          MOV      r1,#0xaa55            ;2301
00031c  4288              CMP      r0,r1                 ;2301
00031e  d141              BNE      |L37.932|
000320  2033              MOVS     r0,#0x33              ;2302
000322  5d00              LDRB     r0,[r0,r4]            ;2302
000324  0601              LSLS     r1,r0,#24             ;2302
000326  2032              MOVS     r0,#0x32              ;2302
000328  5d00              LDRB     r0,[r0,r4]            ;2302
00032a  ea414100          ORR      r1,r1,r0,LSL #16      ;2302
00032e  2031              MOVS     r0,#0x31              ;2302
000330  5d00              LDRB     r0,[r0,r4]            ;2302
000332  ea412000          ORR      r0,r1,r0,LSL #8       ;2302
000336  f8941030          LDRB     r1,[r4,#0x30]         ;2302
00033a  4308              ORRS     r0,r0,r1              ;2302
00033c  4921              LDR      r1,|L37.964|
00033e  4288              CMP      r0,r1                 ;2302
000340  d130              BNE      |L37.932|
000342  f8940217          LDRB     r0,[r4,#0x217]        ;2303
000346  0601              LSLS     r1,r0,#24             ;2303
000348  f8940216          LDRB     r0,[r4,#0x216]        ;2303
00034c  ea414100          ORR      r1,r1,r0,LSL #16      ;2303
000350  f8940215          LDRB     r0,[r4,#0x215]        ;2303
000354  ea412000          ORR      r0,r1,r0,LSL #8       ;2303
000358  f8941214          LDRB     r1,[r4,#0x214]        ;2303
00035c  4308              ORRS     r0,r0,r1              ;2303
00035e  491a              LDR      r1,|L37.968|
000360  4288              CMP      r0,r1                 ;2303
000362  d11f              BNE      |L37.932|
000364  f894021b          LDRB     r0,[r4,#0x21b]        ;2306
000368  0601              LSLS     r1,r0,#24             ;2306
00036a  f894021a          LDRB     r0,[r4,#0x21a]        ;2306
00036e  ea414100          ORR      r1,r1,r0,LSL #16      ;2306
000372  f8940219          LDRB     r0,[r4,#0x219]        ;2306
000376  ea412000          ORR      r0,r1,r0,LSL #8       ;2306
00037a  f8941218          LDRB     r1,[r4,#0x218]        ;2306
00037e  4308              ORRS     r0,r0,r1              ;2306
000380  6120              STR      r0,[r4,#0x10]         ;2306
000382  e000              B        |L37.902|
                  |L37.900|
000384  e00e              B        |L37.932|
                  |L37.902|
000386  f894021f          LDRB     r0,[r4,#0x21f]        ;2309
00038a  0601              LSLS     r1,r0,#24             ;2309
00038c  f894021e          LDRB     r0,[r4,#0x21e]        ;2309
000390  ea414100          ORR      r1,r1,r0,LSL #16      ;2309
000394  f894021d          LDRB     r0,[r4,#0x21d]        ;2309
000398  ea412000          ORR      r0,r1,r0,LSL #8       ;2309
00039c  f894121c          LDRB     r1,[r4,#0x21c]        ;2309
0003a0  4308              ORRS     r0,r0,r1              ;2309
0003a2  60e0              STR      r0,[r4,#0xc]          ;2309
                  |L37.932|
0003a4  7025              STRB     r5,[r4,#0]            ;2315
0003a6  4809              LDR      r0,|L37.972|
0003a8  8800              LDRH     r0,[r0,#0]            ;2316  ; Fsid
0003aa  1c40              ADDS     r0,r0,#1              ;2316
0003ac  b280              UXTH     r0,r0                 ;2316
0003ae  4907              LDR      r1,|L37.972|
0003b0  8008              STRH     r0,[r1,#0]            ;2316
0003b2  80e0              STRH     r0,[r4,#6]            ;2316
0003b4  4620              MOV      r0,r4                 ;2321
0003b6  f7fffffe          BL       clear_lock
0003ba  2000              MOVS     r0,#0                 ;2324
0003bc  e62e              B        |L37.28|
;;;2326   
                          ENDP

0003be  0000              DCW      0x0000
                  |L37.960|
                          DCD      FatFs
                  |L37.964|
                          DCD      0x41615252
                  |L37.968|
                          DCD      0x61417272
                  |L37.972|
                          DCD      Fsid

                          AREA ||i.fit_lfn||, CODE, READONLY, ALIGN=2

                  fit_lfn PROC
;;;1372   static
;;;1373   void fit_lfn (
000000  b5f0              PUSH     {r4-r7,lr}
;;;1374   	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
;;;1375   	BYTE* dir,				/* Pointer to the directory entry */
;;;1376   	BYTE ord,				/* LFN order (1-20) */
;;;1377   	BYTE sum				/* SFN sum */
;;;1378   )
;;;1379   {
000002  4604              MOV      r4,r0
000004  461d              MOV      r5,r3
;;;1380   	UINT i, s;
;;;1381   	WCHAR wc;
;;;1382   
;;;1383   
;;;1384   	dir[LDIR_Chksum] = sum;			/* Set check sum */
000006  734d              STRB     r5,[r1,#0xd]
;;;1385   	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
000008  270f              MOVS     r7,#0xf
00000a  72cf              STRB     r7,[r1,#0xb]
;;;1386   	dir[LDIR_Type] = 0;
00000c  2700              MOVS     r7,#0
00000e  730f              STRB     r7,[r1,#0xc]
;;;1387   	ST_WORD(dir+LDIR_FstClusLO, 0);
000010  768f              STRB     r7,[r1,#0x1a]
000012  46bc              MOV      r12,r7
000014  f881c01b          STRB     r12,[r1,#0x1b]
;;;1388   
;;;1389   	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
000018  1e57              SUBS     r7,r2,#1
00001a  eb070c87          ADD      r12,r7,r7,LSL #2
00001e  eb0c06c7          ADD      r6,r12,r7,LSL #3
;;;1390   	s = wc = 0;
000022  2700              MOVS     r7,#0
000024  4638              MOV      r0,r7
000026  463b              MOV      r3,r7
;;;1391   	do {
000028  bf00              NOP      
                  |L38.42|
;;;1392   		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
00002a  f64f77ff          MOV      r7,#0xffff
00002e  42b8              CMP      r0,r7
000030  d003              BEQ      |L38.58|
000032  4637              MOV      r7,r6
000034  1c76              ADDS     r6,r6,#1
000036  f8340017          LDRH     r0,[r4,r7,LSL #1]
                  |L38.58|
;;;1393   		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
00003a  f8dfc040          LDR      r12,|L38.124|
00003e  f81cc003          LDRB     r12,[r12,r3]
000042  f801000c          STRB     r0,[r1,r12]
000046  1207              ASRS     r7,r0,#8
000048  f8dfc030          LDR      r12,|L38.124|
00004c  f81cc003          LDRB     r12,[r12,r3]
000050  448c              ADD      r12,r12,r1
000052  f88c7001          STRB     r7,[r12,#1]
;;;1394   		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
000056  b908              CBNZ     r0,|L38.92|
000058  f64f70ff          MOV      r0,#0xffff
                  |L38.92|
;;;1395   	} while (++s < 13);
00005c  1c5f              ADDS     r7,r3,#1
00005e  463b              MOV      r3,r7
000060  2f0d              CMP      r7,#0xd
000062  d3e2              BCC      |L38.42|
;;;1396   	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
000064  f64f77ff          MOV      r7,#0xffff
000068  42b8              CMP      r0,r7
00006a  d002              BEQ      |L38.114|
00006c  f8347016          LDRH     r7,[r4,r6,LSL #1]
000070  b90f              CBNZ     r7,|L38.118|
                  |L38.114|
000072  f0420240          ORR      r2,r2,#0x40
                  |L38.118|
;;;1397   	dir[LDIR_Ord] = ord;			/* Set the LFN order */
000076  700a              STRB     r2,[r1,#0]
;;;1398   }
000078  bdf0              POP      {r4-r7,pc}
;;;1399   
                          ENDP

00007a  0000              DCW      0x0000
                  |L38.124|
                          DCD      LfnOfs

                          AREA ||i.follow_path||, CODE, READONLY, ALIGN=1

                  follow_path PROC
;;;2014   static
;;;2015   FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
000000  e92d41f3          PUSH     {r0,r1,r4-r8,lr}
;;;2016   	DIR* dp,			/* Directory object to return last directory and found object */
;;;2017   	const TCHAR* path	/* Full-path string to find a file or directory */
;;;2018   )
;;;2019   {
000004  4604              MOV      r4,r0
;;;2020   	FRESULT res;
;;;2021   	BYTE *dir, ns;
;;;2022   
;;;2023   
;;;2024   #if _FS_RPATH
;;;2025   	if (*path == '/' || *path == '\\') {	/* There is a heading separator */
;;;2026   		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
;;;2027   	} else {								/* No heading separator */
;;;2028   		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
;;;2029   	}
;;;2030   #else
;;;2031   	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
000006  9801              LDR      r0,[sp,#4]
000008  7800              LDRB     r0,[r0,#0]
00000a  282f              CMP      r0,#0x2f
00000c  d003              BEQ      |L39.22|
00000e  9801              LDR      r0,[sp,#4]
000010  7800              LDRB     r0,[r0,#0]
000012  285c              CMP      r0,#0x5c
000014  d102              BNE      |L39.28|
                  |L39.22|
;;;2032   		path++;
000016  9801              LDR      r0,[sp,#4]
000018  1c40              ADDS     r0,r0,#1
00001a  9001              STR      r0,[sp,#4]
                  |L39.28|
;;;2033   	dp->sclust = 0;							/* Always start from the root directory */
00001c  2000              MOVS     r0,#0
00001e  60a0              STR      r0,[r4,#8]
;;;2034   #endif
;;;2035   
;;;2036   	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
000020  9801              LDR      r0,[sp,#4]
000022  7800              LDRB     r0,[r0,#0]
000024  2820              CMP      r0,#0x20
000026  d207              BCS      |L39.56|
;;;2037   		res = dir_sdi(dp, 0);
000028  2100              MOVS     r1,#0
00002a  4620              MOV      r0,r4
00002c  f7fffffe          BL       dir_sdi
000030  4605              MOV      r5,r0
;;;2038   		dp->dir = 0;
000032  2000              MOVS     r0,#0
000034  6160              STR      r0,[r4,#0x14]
000036  e028              B        |L39.138|
                  |L39.56|
;;;2039   	} else {								/* Follow path */
;;;2040   		for (;;) {
000038  bf00              NOP      
                  |L39.58|
;;;2041   			res = create_name(dp, &path);	/* Get a segment name of the path */
00003a  a901              ADD      r1,sp,#4
00003c  4620              MOV      r0,r4
00003e  f7fffffe          BL       create_name
000042  4605              MOV      r5,r0
;;;2042   			if (res != FR_OK) break;
000044  b105              CBZ      r5,|L39.72|
000046  e01f              B        |L39.136|
                  |L39.72|
;;;2043   			res = dir_find(dp);				/* Find an object with the sagment name */
000048  4620              MOV      r0,r4
00004a  f7fffffe          BL       dir_find
00004e  4605              MOV      r5,r0
;;;2044   			ns = dp->fn[NS];
000050  69a0              LDR      r0,[r4,#0x18]
000052  7ac6              LDRB     r6,[r0,#0xb]
;;;2045   			if (res != FR_OK) {				/* Failed to find the object */
000054  b13d              CBZ      r5,|L39.102|
;;;2046   				if (res == FR_NO_FILE) {	/* Object is not found */
000056  2d04              CMP      r5,#4
000058  d104              BNE      |L39.100|
;;;2047   					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
00005a  bf00              NOP      
;;;2048   						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
;;;2049   						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
;;;2050   						res = FR_OK;					/* Ended at the root directroy. Function completed. */
;;;2051   					} else {							/* Could not find the object */
;;;2052   						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
00005c  f0060004          AND      r0,r6,#4
000060  b900              CBNZ     r0,|L39.100|
000062  2505              MOVS     r5,#5
                  |L39.100|
;;;2053   					}
;;;2054   				}
;;;2055   				break;
000064  e010              B        |L39.136|
                  |L39.102|
;;;2056   			}
;;;2057   			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
000066  f0060004          AND      r0,r6,#4
00006a  b100              CBZ      r0,|L39.110|
00006c  e00c              B        |L39.136|
                  |L39.110|
;;;2058   			dir = dp->dir;						/* Follow the sub-directory */
00006e  6967              LDR      r7,[r4,#0x14]
;;;2059   			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
000070  7af8              LDRB     r0,[r7,#0xb]
000072  f0000010          AND      r0,r0,#0x10
000076  b908              CBNZ     r0,|L39.124|
;;;2060   				res = FR_NO_PATH; break;
000078  2505              MOVS     r5,#5
00007a  e005              B        |L39.136|
                  |L39.124|
;;;2061   			}
;;;2062   			dp->sclust = ld_clust(dp->fs, dir);
00007c  4639              MOV      r1,r7
00007e  6820              LDR      r0,[r4,#0]
000080  f7fffffe          BL       ld_clust
000084  60a0              STR      r0,[r4,#8]
000086  e7d8              B        |L39.58|
                  |L39.136|
000088  bf00              NOP                            ;2042
                  |L39.138|
;;;2063   		}
;;;2064   	}
;;;2065   
;;;2066   	return res;
00008a  4628              MOV      r0,r5
;;;2067   }
00008c  e8bd81fc          POP      {r2-r8,pc}
;;;2068   
                          ENDP


                          AREA ||i.gen_numname||, CODE, READONLY, ALIGN=2

                  gen_numname PROC
;;;1410   static
;;;1411   void gen_numname (
000000  e92d47fc          PUSH     {r2-r10,lr}
;;;1412   	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
;;;1413   	const BYTE* src,	/* Pointer to SFN */
;;;1414   	const WCHAR* lfn,	/* Pointer to LFN */
;;;1415   	UINT seq			/* Sequence number */
;;;1416   )
;;;1417   {
000004  4607              MOV      r7,r0
000006  468a              MOV      r10,r1
000008  4690              MOV      r8,r2
00000a  461e              MOV      r6,r3
;;;1418   	BYTE ns[8], c;
;;;1419   	UINT i, j;
;;;1420   
;;;1421   
;;;1422   	mem_cpy(dst, src, 11);
00000c  220b              MOVS     r2,#0xb
00000e  4651              MOV      r1,r10
000010  4638              MOV      r0,r7
000012  f7fffffe          BL       mem_cpy
;;;1423   
;;;1424   	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
000016  2e05              CMP      r6,#5
000018  d918              BLS      |L40.76|
;;;1425   		WCHAR wc;
;;;1426   		DWORD sr = seq;
00001a  4630              MOV      r0,r6
;;;1427   
;;;1428   		while (*lfn) {	/* Create a CRC */
00001c  e010              B        |L40.64|
                  |L40.30|
;;;1429   			wc = *lfn++;
00001e  f8381b02          LDRH     r1,[r8],#2
;;;1430   			for (i = 0; i < 16; i++) {
000022  2500              MOVS     r5,#0
000024  e00a              B        |L40.60|
                  |L40.38|
;;;1431   				sr = (sr << 1) + (wc & 1);
000026  460a              MOV      r2,r1
000028  f360025f          BFI      r2,r0,#1,#31
00002c  4610              MOV      r0,r2
;;;1432   				wc >>= 1;
00002e  1049              ASRS     r1,r1,#1
;;;1433   				if (sr & 0x10000) sr ^= 0x11021;
000030  f4003280          AND      r2,r0,#0x10000
000034  b10a              CBZ      r2,|L40.58|
000036  4a23              LDR      r2,|L40.196|
000038  4050              EORS     r0,r0,r2
                  |L40.58|
00003a  1c6d              ADDS     r5,r5,#1              ;1430
                  |L40.60|
00003c  2d10              CMP      r5,#0x10              ;1430
00003e  d3f2              BCC      |L40.38|
                  |L40.64|
000040  f8b82000          LDRH     r2,[r8,#0]            ;1428
000044  2a00              CMP      r2,#0                 ;1428
000046  d1ea              BNE      |L40.30|
;;;1434   			}
;;;1435   		}
;;;1436   		seq = (UINT)sr;
000048  4606              MOV      r6,r0
;;;1437   	}
00004a  bf00              NOP      
                  |L40.76|
;;;1438   
;;;1439   	/* itoa (hexdecimal) */
;;;1440   	i = 7;
00004c  2507              MOVS     r5,#7
;;;1441   	do {
00004e  bf00              NOP      
                  |L40.80|
;;;1442   		c = (seq % 16) + '0';
000050  f006000f          AND      r0,r6,#0xf
000054  f1000930          ADD      r9,r0,#0x30
;;;1443   		if (c > '9') c += 7;
000058  f1b90f39          CMP      r9,#0x39
00005c  dd03              BLE      |L40.102|
00005e  f1090007          ADD      r0,r9,#7
000062  f00009ff          AND      r9,r0,#0xff
                  |L40.102|
;;;1444   		ns[i--] = c;
000066  4628              MOV      r0,r5
000068  1e6d              SUBS     r5,r5,#1
00006a  f80d9000          STRB     r9,[sp,r0]
;;;1445   		seq /= 16;
00006e  0936              LSRS     r6,r6,#4
;;;1446   	} while (seq);
000070  2e00              CMP      r6,#0
000072  d1ed              BNE      |L40.80|
;;;1447   	ns[i] = '~';
000074  207e              MOVS     r0,#0x7e
000076  f80d0005          STRB     r0,[sp,r5]
;;;1448   
;;;1449   	/* Append the number */
;;;1450   	for (j = 0; j < i && dst[j] != ' '; j++) {
00007a  2400              MOVS     r4,#0
00007c  e00b              B        |L40.150|
                  |L40.126|
;;;1451   		if (IsDBCS1(dst[j])) {
00007e  5d38              LDRB     r0,[r7,r4]
000080  2881              CMP      r0,#0x81
000082  db07              BLT      |L40.148|
000084  5d38              LDRB     r0,[r7,r4]
000086  28fe              CMP      r0,#0xfe
000088  dc04              BGT      |L40.148|
;;;1452   			if (j == i - 1) break;
00008a  1e68              SUBS     r0,r5,#1
00008c  42a0              CMP      r0,r4
00008e  d100              BNE      |L40.146|
000090  e006              B        |L40.160|
                  |L40.146|
;;;1453   			j++;
000092  1c64              ADDS     r4,r4,#1
                  |L40.148|
000094  1c64              ADDS     r4,r4,#1              ;1450
                  |L40.150|
000096  42ac              CMP      r4,r5                 ;1450
000098  d202              BCS      |L40.160|
00009a  5d38              LDRB     r0,[r7,r4]            ;1450
00009c  2820              CMP      r0,#0x20              ;1450
00009e  d1ee              BNE      |L40.126|
                  |L40.160|
0000a0  bf00              NOP                            ;1452
;;;1454   		}
;;;1455   	}
;;;1456   	do {
0000a2  bf00              NOP      
                  |L40.164|
;;;1457   		dst[j++] = (i < 8) ? ns[i++] : ' ';
0000a4  2d08              CMP      r5,#8
0000a6  d204              BCS      |L40.178|
0000a8  4628              MOV      r0,r5
0000aa  1c6d              ADDS     r5,r5,#1
0000ac  f81d1000          LDRB     r1,[sp,r0]
0000b0  e000              B        |L40.180|
                  |L40.178|
0000b2  2120              MOVS     r1,#0x20
                  |L40.180|
0000b4  4620              MOV      r0,r4
0000b6  1c64              ADDS     r4,r4,#1
0000b8  5439              STRB     r1,[r7,r0]
;;;1458   	} while (j < 8);
0000ba  2c08              CMP      r4,#8
0000bc  d3f2              BCC      |L40.164|
;;;1459   }
0000be  e8bd87fc          POP      {r2-r10,pc}
;;;1460   #endif
                          ENDP

0000c2  0000              DCW      0x0000
                  |L40.196|
                          DCD      0x00011021

                          AREA ||i.get_fat||, CODE, READONLY, ALIGN=1

                  get_fat PROC
;;;864    
;;;865    DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;866    	FATFS* fs,	/* File system object */
;;;867    	DWORD clst	/* Cluster# to get the link information */
;;;868    )
;;;869    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;870    	UINT wc, bc;
;;;871    	BYTE *p;
;;;872    
;;;873    
;;;874    	if (clst < 2 || clst >= fs->n_fatent)	/* Check range */
000008  2d02              CMP      r5,#2
00000a  d302              BCC      |L41.18|
00000c  6960              LDR      r0,[r4,#0x14]
00000e  42a8              CMP      r0,r5
000010  d802              BHI      |L41.24|
                  |L41.18|
;;;875    		return 1;
000012  2001              MOVS     r0,#1
                  |L41.20|
;;;876    
;;;877    	switch (fs->fs_type) {
;;;878    	case FS_FAT12 :
;;;879    		bc = (UINT)clst; bc += bc / 2;
;;;880    		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
;;;881    		wc = fs->win[bc % SS(fs)]; bc++;
;;;882    		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
;;;883    		wc |= fs->win[bc % SS(fs)] << 8;
;;;884    		return clst & 1 ? wc >> 4 : (wc & 0xFFF);
;;;885    
;;;886    	case FS_FAT16 :
;;;887    		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
;;;888    		p = &fs->win[clst * 2 % SS(fs)];
;;;889    		return LD_WORD(p);
;;;890    
;;;891    	case FS_FAT32 :
;;;892    		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
;;;893    		p = &fs->win[clst * 4 % SS(fs)];
;;;894    		return LD_DWORD(p) & 0x0FFFFFFF;
;;;895    
;;;896    	default:
;;;897    		return 1;
;;;898    	}
;;;899    
;;;900    	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
;;;901    }
000014  e8bd87f0          POP      {r4-r10,pc}
                  |L41.24|
000018  7820              LDRB     r0,[r4,#0]            ;877
00001a  2801              CMP      r0,#1                 ;877
00001c  d004              BEQ      |L41.40|
00001e  2802              CMP      r0,#2                 ;877
000020  d03a              BEQ      |L41.152|
000022  2803              CMP      r0,#3                 ;877
000024  d17f              BNE      |L41.294|
000026  e055              B        |L41.212|
                  |L41.40|
000028  462f              MOV      r7,r5                 ;879
00002a  eb070757          ADD      r7,r7,r7,LSR #1       ;879
00002e  8960              LDRH     r0,[r4,#0xa]          ;880
000030  fbb7f0f0          UDIV     r0,r7,r0              ;880
000034  6a21              LDR      r1,[r4,#0x20]         ;880
000036  eb000901          ADD      r9,r0,r1              ;880
00003a  4649              MOV      r1,r9                 ;880
00003c  4620              MOV      r0,r4                 ;880
00003e  f7fffffe          BL       move_window
000042  b100              CBZ      r0,|L41.70|
000044  e071              B        |L41.298|
                  |L41.70|
000046  8960              LDRH     r0,[r4,#0xa]          ;881
000048  fbb7f1f0          UDIV     r1,r7,r0              ;881
00004c  fb007111          MLS      r1,r0,r1,r7           ;881
000050  f1040030          ADD      r0,r4,#0x30           ;881
000054  f8108001          LDRB     r8,[r0,r1]            ;881
000058  1c7f              ADDS     r7,r7,#1              ;881
00005a  8960              LDRH     r0,[r4,#0xa]          ;882
00005c  fbb7f0f0          UDIV     r0,r7,r0              ;882
000060  6a21              LDR      r1,[r4,#0x20]         ;882
000062  eb000901          ADD      r9,r0,r1              ;882
000066  4649              MOV      r1,r9                 ;882
000068  4620              MOV      r0,r4                 ;882
00006a  f7fffffe          BL       move_window
00006e  b100              CBZ      r0,|L41.114|
000070  e05b              B        |L41.298|
                  |L41.114|
000072  8960              LDRH     r0,[r4,#0xa]          ;883
000074  fbb7f1f0          UDIV     r1,r7,r0              ;883
000078  fb007111          MLS      r1,r0,r1,r7           ;883
00007c  f1040030          ADD      r0,r4,#0x30           ;883
000080  5c40              LDRB     r0,[r0,r1]            ;883
000082  ea482800          ORR      r8,r8,r0,LSL #8       ;883
000086  f0050001          AND      r0,r5,#1              ;884
00008a  b110              CBZ      r0,|L41.146|
00008c  ea4f1018          LSR      r0,r8,#4              ;884
000090  e7c0              B        |L41.20|
                  |L41.146|
000092  f3c8000b          UBFX     r0,r8,#0,#12          ;884
000096  e7bd              B        |L41.20|
                  |L41.152|
000098  f8b4900a          LDRH     r9,[r4,#0xa]          ;887
00009c  eb0970d9          ADD      r0,r9,r9,LSR #31      ;887
0000a0  1040              ASRS     r0,r0,#1              ;887
0000a2  fbb5f0f0          UDIV     r0,r5,r0              ;887
0000a6  6a21              LDR      r1,[r4,#0x20]         ;887
0000a8  eb000a01          ADD      r10,r0,r1             ;887
0000ac  4651              MOV      r1,r10                ;887
0000ae  4620              MOV      r0,r4                 ;887
0000b0  f7fffffe          BL       move_window
0000b4  b100              CBZ      r0,|L41.184|
0000b6  e038              B        |L41.298|
                  |L41.184|
0000b8  0068              LSLS     r0,r5,#1              ;888
0000ba  8961              LDRH     r1,[r4,#0xa]          ;888
0000bc  fbb0f2f1          UDIV     r2,r0,r1              ;888
0000c0  fb010112          MLS      r1,r1,r2,r0           ;888
0000c4  f1040030          ADD      r0,r4,#0x30           ;888
0000c8  180e              ADDS     r6,r1,r0              ;888
0000ca  7830              LDRB     r0,[r6,#0]            ;889
0000cc  7871              LDRB     r1,[r6,#1]            ;889
0000ce  ea402001          ORR      r0,r0,r1,LSL #8       ;889
0000d2  e79f              B        |L41.20|
                  |L41.212|
0000d4  f8b4900a          LDRH     r9,[r4,#0xa]          ;892
0000d8  ea4f70e9          ASR      r0,r9,#31             ;892
0000dc  eb097090          ADD      r0,r9,r0,LSR #30      ;892
0000e0  1080              ASRS     r0,r0,#2              ;892
0000e2  fbb5f0f0          UDIV     r0,r5,r0              ;892
0000e6  6a21              LDR      r1,[r4,#0x20]         ;892
0000e8  eb000a01          ADD      r10,r0,r1             ;892
0000ec  4651              MOV      r1,r10                ;892
0000ee  4620              MOV      r0,r4                 ;892
0000f0  f7fffffe          BL       move_window
0000f4  b100              CBZ      r0,|L41.248|
0000f6  e018              B        |L41.298|
                  |L41.248|
0000f8  00a8              LSLS     r0,r5,#2              ;893
0000fa  8961              LDRH     r1,[r4,#0xa]          ;893
0000fc  fbb0f2f1          UDIV     r2,r0,r1              ;893
000100  fb010112          MLS      r1,r1,r2,r0           ;893
000104  f1040030          ADD      r0,r4,#0x30           ;893
000108  180e              ADDS     r6,r1,r0              ;893
00010a  78f0              LDRB     r0,[r6,#3]            ;894
00010c  0600              LSLS     r0,r0,#24             ;894
00010e  78b1              LDRB     r1,[r6,#2]            ;894
000110  ea404001          ORR      r0,r0,r1,LSL #16      ;894
000114  7871              LDRB     r1,[r6,#1]            ;894
000116  ea402001          ORR      r0,r0,r1,LSL #8       ;894
00011a  7831              LDRB     r1,[r6,#0]            ;894
00011c  4308              ORRS     r0,r0,r1              ;894
00011e  f0204070          BIC      r0,r0,#0xf0000000     ;894
000122  e777              B        |L41.20|
000124  e7ff              B        |L41.294|
                  |L41.294|
000126  2001              MOVS     r0,#1                 ;897
000128  e774              B        |L41.20|
                  |L41.298|
00012a  bf00              NOP                            ;880
00012c  f04f30ff          MOV      r0,#0xffffffff        ;900
000130  e770              B        |L41.20|
;;;902    
                          ENDP


                          AREA ||i.get_fileinfo||, CODE, READONLY, ALIGN=1

                  get_fileinfo PROC
;;;1734   static
;;;1735   void get_fileinfo (		/* No return code */
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;1736   	DIR* dp,			/* Pointer to the directory object */
;;;1737   	FILINFO* fno	 	/* Pointer to the file information to be filled */
;;;1738   )
;;;1739   {
000004  4607              MOV      r7,r0
000006  460c              MOV      r4,r1
;;;1740   	UINT i;
;;;1741   	TCHAR *p, c;
;;;1742   
;;;1743   
;;;1744   	p = fno->fname;
000008  f1040609          ADD      r6,r4,#9
;;;1745   	if (dp->sect) {		/* Get SFN */
00000c  6938              LDR      r0,[r7,#0x10]
00000e  2800              CMP      r0,#0
000010  d043              BEQ      |L42.154|
;;;1746   		BYTE *dir = dp->dir;
000012  6978              LDR      r0,[r7,#0x14]
;;;1747   
;;;1748   		i = 0;
000014  2500              MOVS     r5,#0
;;;1749   		while (i < 11) {		/* Copy name body and extension */
000016  e026              B        |L42.102|
                  |L42.24|
;;;1750   			c = (TCHAR)dir[i++];
000018  4629              MOV      r1,r5
00001a  1c6d              ADDS     r5,r5,#1
00001c  f8108001          LDRB     r8,[r0,r1]
;;;1751   			if (c == ' ') continue;			/* Skip padding spaces */
000020  f1b80f20          CMP      r8,#0x20
000024  d100              BNE      |L42.40|
000026  e01e              B        |L42.102|
                  |L42.40|
;;;1752   			if (c == NDDE) c = (TCHAR)DDE;	/* Restore replaced DDE character */
000028  f1b80f05          CMP      r8,#5
00002c  d101              BNE      |L42.50|
00002e  f04f08e5          MOV      r8,#0xe5
                  |L42.50|
;;;1753   			if (i == 9) *p++ = '.';			/* Insert a . if extension is exist */
000032  2d09              CMP      r5,#9
000034  d102              BNE      |L42.60|
000036  212e              MOVS     r1,#0x2e
000038  f8061b01          STRB     r1,[r6],#1
                  |L42.60|
;;;1754   #if _USE_LFN
;;;1755   			if (IsUpper(c) && (dir[DIR_NTres] & (i >= 9 ? NS_EXT : NS_BODY)))
00003c  f1b80f41          CMP      r8,#0x41
000040  db0e              BLT      |L42.96|
000042  f1b80f5a          CMP      r8,#0x5a
000046  dc0b              BGT      |L42.96|
000048  7b01              LDRB     r1,[r0,#0xc]
00004a  2d09              CMP      r5,#9
00004c  d301              BCC      |L42.82|
00004e  2210              MOVS     r2,#0x10
000050  e000              B        |L42.84|
                  |L42.82|
000052  2208              MOVS     r2,#8
                  |L42.84|
000054  4011              ANDS     r1,r1,r2
000056  b119              CBZ      r1,|L42.96|
;;;1756   				c += 0x20;			/* To lower */
000058  f1080120          ADD      r1,r8,#0x20
00005c  f00108ff          AND      r8,r1,#0xff
                  |L42.96|
;;;1757   #if _LFN_UNICODE
;;;1758   			if (IsDBCS1(c) && i != 8 && i != 11 && IsDBCS2(dir[i]))
;;;1759   				c = c << 8 | dir[i++];
;;;1760   			c = ff_convert(c, 1);	/* OEM -> Unicode */
;;;1761   			if (!c) c = '?';
;;;1762   #endif
;;;1763   #endif
;;;1764   			*p++ = c;
000060  f8068b01          STRB     r8,[r6],#1
000064  bf00              NOP                            ;1751
                  |L42.102|
000066  2d0b              CMP      r5,#0xb               ;1749
000068  d3d6              BCC      |L42.24|
;;;1765   		}
;;;1766   		fno->fattrib = dir[DIR_Attr];				/* Attribute */
00006a  7ac1              LDRB     r1,[r0,#0xb]
00006c  7221              STRB     r1,[r4,#8]
;;;1767   		fno->fsize = LD_DWORD(dir+DIR_FileSize);	/* Size */
00006e  7fc1              LDRB     r1,[r0,#0x1f]
000070  060a              LSLS     r2,r1,#24
000072  7f81              LDRB     r1,[r0,#0x1e]
000074  ea424201          ORR      r2,r2,r1,LSL #16
000078  7f41              LDRB     r1,[r0,#0x1d]
00007a  ea422101          ORR      r1,r2,r1,LSL #8
00007e  7f02              LDRB     r2,[r0,#0x1c]
000080  4311              ORRS     r1,r1,r2
000082  6021              STR      r1,[r4,#0]
;;;1768   		fno->fdate = LD_WORD(dir+DIR_WrtDate);		/* Date */
000084  7e02              LDRB     r2,[r0,#0x18]
000086  7e41              LDRB     r1,[r0,#0x19]
000088  ea422101          ORR      r1,r2,r1,LSL #8
00008c  80a1              STRH     r1,[r4,#4]
;;;1769   		fno->ftime = LD_WORD(dir+DIR_WrtTime);		/* Time */
00008e  7d82              LDRB     r2,[r0,#0x16]
000090  7dc1              LDRB     r1,[r0,#0x17]
000092  ea422101          ORR      r1,r2,r1,LSL #8
000096  80e1              STRH     r1,[r4,#6]
;;;1770   	}
000098  bf00              NOP      
                  |L42.154|
;;;1771   	*p = 0;		/* Terminate SFN string by a \0 */
00009a  2000              MOVS     r0,#0
00009c  7030              STRB     r0,[r6,#0]
;;;1772   
;;;1773   #if _USE_LFN
;;;1774   	if (fno->lfname) {
00009e  69a0              LDR      r0,[r4,#0x18]
0000a0  b390              CBZ      r0,|L42.264|
;;;1775   		WCHAR w, *lfn;
;;;1776   
;;;1777   		i = 0; p = fno->lfname;
0000a2  2500              MOVS     r5,#0
0000a4  69a6              LDR      r6,[r4,#0x18]
;;;1778   		if (dp->sect && fno->lfsize && dp->lfn_idx != 0xFFFF) {	/* Get LFN if available */
0000a6  6938              LDR      r0,[r7,#0x10]
0000a8  b358              CBZ      r0,|L42.258|
0000aa  69e0              LDR      r0,[r4,#0x1c]
0000ac  b348              CBZ      r0,|L42.258|
0000ae  8cb8              LDRH     r0,[r7,#0x24]
0000b0  f64f71ff          MOV      r1,#0xffff
0000b4  4288              CMP      r0,r1
0000b6  d024              BEQ      |L42.258|
;;;1779   			lfn = dp->lfn;
0000b8  f8d7a020          LDR      r10,[r7,#0x20]
;;;1780   			while ((w = *lfn++) != 0) {		/* Get an LFN character */
0000bc  e01b              B        |L42.246|
                  |L42.190|
;;;1781   #if !_LFN_UNICODE
;;;1782   				w = ff_convert(w, 0);		/* Unicode -> OEM */
0000be  2100              MOVS     r1,#0
0000c0  4648              MOV      r0,r9
0000c2  f7fffffe          BL       ff_convert
0000c6  4681              MOV      r9,r0
;;;1783   				if (!w) { i = 0; break; }	/* No LFN if it could not be converted */
0000c8  f1b90f00          CMP      r9,#0
0000cc  d101              BNE      |L42.210|
0000ce  2500              MOVS     r5,#0
0000d0  e016              B        |L42.256|
                  |L42.210|
;;;1784   				if (_DF1S && w >= 0x100)	/* Put 1st byte if it is a DBC (always false on SBCS cfg) */
0000d2  f1b90fff          CMP      r9,#0xff
0000d6  dd04              BLE      |L42.226|
;;;1785   					p[i++] = (TCHAR)(w >> 8);
0000d8  ea4f2229          ASR      r2,r9,#8
0000dc  4628              MOV      r0,r5
0000de  1c6d              ADDS     r5,r5,#1
0000e0  5432              STRB     r2,[r6,r0]
                  |L42.226|
;;;1786   #endif
;;;1787   				if (i >= fno->lfsize - 1) { i = 0; break; }	/* No LFN if buffer overflow */
0000e2  69e0              LDR      r0,[r4,#0x1c]
0000e4  1e40              SUBS     r0,r0,#1
0000e6  42a8              CMP      r0,r5
0000e8  d801              BHI      |L42.238|
0000ea  2500              MOVS     r5,#0
0000ec  e008              B        |L42.256|
                  |L42.238|
;;;1788   				p[i++] = (TCHAR)w;
0000ee  4628              MOV      r0,r5
0000f0  1c6d              ADDS     r5,r5,#1
0000f2  f8069000          STRB     r9,[r6,r0]
                  |L42.246|
0000f6  f83a1b02          LDRH     r1,[r10],#2           ;1780
0000fa  f1b10900          SUBS     r9,r1,#0              ;1780
0000fe  d1de              BNE      |L42.190|
                  |L42.256|
000100  bf00              NOP                            ;1783
                  |L42.258|
;;;1789   			}
;;;1790   		}
;;;1791   		p[i] = 0;	/* Terminate LFN string by a \0 */
000102  2000              MOVS     r0,#0
000104  5570              STRB     r0,[r6,r5]
;;;1792   	}
000106  bf00              NOP      
                  |L42.264|
;;;1793   #endif
;;;1794   }
000108  e8bd87f0          POP      {r4-r10,pc}
;;;1795   #endif /* _FS_MINIMIZE <= 1 || _FS_RPATH >= 2*/
                          ENDP


                          AREA ||i.get_ldnumber||, CODE, READONLY, ALIGN=1

                  get_ldnumber PROC
;;;2076   static
;;;2077   int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
000000  b570              PUSH     {r4-r6,lr}
;;;2078   	const TCHAR** path	/* Pointer to pointer to the path name */
;;;2079   )
;;;2080   {
000002  4602              MOV      r2,r0
;;;2081   	const TCHAR *tp, *tt;
;;;2082   	UINT i;
;;;2083   	int vol = -1;
000004  f04f30ff          MOV      r0,#0xffffffff
;;;2084   
;;;2085   
;;;2086   	if (*path) {	/* If the pointer is not a null */
000008  6815              LDR      r5,[r2,#0]
00000a  b1e5              CBZ      r5,|L43.70|
;;;2087   		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
00000c  6811              LDR      r1,[r2,#0]
00000e  e000              B        |L43.18|
                  |L43.16|
000010  1c49              ADDS     r1,r1,#1
                  |L43.18|
000012  780d              LDRB     r5,[r1,#0]
000014  2d20              CMP      r5,#0x20
000016  d302              BCC      |L43.30|
000018  780d              LDRB     r5,[r1,#0]
00001a  2d3a              CMP      r5,#0x3a
00001c  d1f8              BNE      |L43.16|
                  |L43.30|
;;;2088   		if (*tt == ':') {	/* If a ':' is exist in the path name */
00001e  780d              LDRB     r5,[r1,#0]
000020  2d3a              CMP      r5,#0x3a
000022  d10f              BNE      |L43.68|
;;;2089   			tp = *path;
000024  6814              LDR      r4,[r2,#0]
;;;2090   			i = *tp++ - '0'; 
000026  f8145b01          LDRB     r5,[r4],#1
00002a  f1a50330          SUB      r3,r5,#0x30
;;;2091   			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
00002e  2b0a              CMP      r3,#0xa
000030  d207              BCS      |L43.66|
000032  428c              CMP      r4,r1
000034  d105              BNE      |L43.66|
;;;2092   				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
000036  2b02              CMP      r3,#2
000038  d203              BCS      |L43.66|
;;;2093   					vol = (int)i;
00003a  4618              MOV      r0,r3
;;;2094   					*path = ++tt;
00003c  1c4d              ADDS     r5,r1,#1
00003e  4629              MOV      r1,r5
000040  6015              STR      r5,[r2,#0]
                  |L43.66|
;;;2095   				}
;;;2096   			} else {	/* No numeric drive number */
;;;2097   #if _STR_VOLUME_ID		/* Find string drive id */
;;;2098   				static const char* const str[] = {_VOLUME_STRS};
;;;2099   				const char *sp;
;;;2100   				char c;
;;;2101   				TCHAR tc;
;;;2102   
;;;2103   				i = 0; tt++;
;;;2104   				do {
;;;2105   					sp = str[i]; tp = *path;
;;;2106   					do {	/* Compare a string drive id with path name */
;;;2107   						c = *sp++; tc = *tp++;
;;;2108   						if (IsLower(tc)) tc -= 0x20;
;;;2109   					} while (c && (TCHAR)c == tc);
;;;2110   				} while ((c || tp != tt) && ++i < _VOLUMES);	/* Repeat for each id until pattern match */
;;;2111   				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
;;;2112   					vol = (int)i;
;;;2113   					*path = tt;
;;;2114   				}
;;;2115   #endif
;;;2116   			}
;;;2117   			return vol;
;;;2118   		}
;;;2119   #if _FS_RPATH && _VOLUMES >= 2
;;;2120   		vol = CurrVol;	/* Current drive */
;;;2121   #else
;;;2122   		vol = 0;		/* Drive 0 */
;;;2123   #endif
;;;2124   	}
;;;2125   	return vol;
;;;2126   }
000042  bd70              POP      {r4-r6,pc}
                  |L43.68|
000044  2000              MOVS     r0,#0                 ;2122
                  |L43.70|
000046  bf00              NOP                            ;2125
000048  e7fb              B        |L43.66|
;;;2127   
                          ENDP


                          AREA ||i.inc_lock||, CODE, READONLY, ALIGN=2

                  inc_lock PROC
;;;679    static
;;;680    UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
000000  b530              PUSH     {r4,r5,lr}
;;;681    	DIR* dp,	/* Directory object pointing the file to register or increment */
;;;682    	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
;;;683    )
;;;684    {
000002  4602              MOV      r2,r0
000004  460b              MOV      r3,r1
;;;685    	UINT i;
;;;686    
;;;687    
;;;688    	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
000006  2100              MOVS     r1,#0
000008  e01b              B        |L44.66|
                  |L44.10|
;;;689    		if (Files[i].fs == dp->fs &&
00000a  eb010041          ADD      r0,r1,r1,LSL #1
00000e  4c32              LDR      r4,|L44.216|
000010  f8540020          LDR      r0,[r4,r0,LSL #2]
000014  6814              LDR      r4,[r2,#0]
000016  42a0              CMP      r0,r4
000018  d112              BNE      |L44.64|
;;;690    			Files[i].clu == dp->sclust &&
00001a  eb010041          ADD      r0,r1,r1,LSL #1
00001e  4c2e              LDR      r4,|L44.216|
000020  eb040080          ADD      r0,r4,r0,LSL #2
000024  6840              LDR      r0,[r0,#4]
000026  6894              LDR      r4,[r2,#8]
000028  42a0              CMP      r0,r4
00002a  d109              BNE      |L44.64|
;;;691    			Files[i].idx == dp->index) break;
00002c  eb010041          ADD      r0,r1,r1,LSL #1
000030  4c29              LDR      r4,|L44.216|
000032  eb040080          ADD      r0,r4,r0,LSL #2
000036  8900              LDRH     r0,[r0,#8]
000038  88d4              LDRH     r4,[r2,#6]
00003a  42a0              CMP      r0,r4
00003c  d100              BNE      |L44.64|
00003e  e002              B        |L44.70|
                  |L44.64|
000040  1c49              ADDS     r1,r1,#1              ;688
                  |L44.66|
000042  2903              CMP      r1,#3                 ;688
000044  d3e1              BCC      |L44.10|
                  |L44.70|
000046  bf00              NOP      
;;;692    	}
;;;693    
;;;694    	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
000048  2903              CMP      r1,#3
00004a  d127              BNE      |L44.156|
;;;695    		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
00004c  2100              MOVS     r1,#0
00004e  e000              B        |L44.82|
                  |L44.80|
000050  1c49              ADDS     r1,r1,#1
                  |L44.82|
000052  2903              CMP      r1,#3
000054  d206              BCS      |L44.100|
000056  eb010041          ADD      r0,r1,r1,LSL #1
00005a  4c1f              LDR      r4,|L44.216|
00005c  f8540020          LDR      r0,[r4,r0,LSL #2]
000060  2800              CMP      r0,#0
000062  d1f5              BNE      |L44.80|
                  |L44.100|
;;;696    		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
000064  2903              CMP      r1,#3
000066  d101              BNE      |L44.108|
000068  2000              MOVS     r0,#0
                  |L44.106|
;;;697    		Files[i].fs = dp->fs;
;;;698    		Files[i].clu = dp->sclust;
;;;699    		Files[i].idx = dp->index;
;;;700    		Files[i].ctr = 0;
;;;701    	}
;;;702    
;;;703    	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
;;;704    
;;;705    	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
;;;706    
;;;707    	return i + 1;
;;;708    }
00006a  bd30              POP      {r4,r5,pc}
                  |L44.108|
00006c  eb010441          ADD      r4,r1,r1,LSL #1       ;697
000070  4d19              LDR      r5,|L44.216|
000072  6810              LDR      r0,[r2,#0]            ;697
000074  f8450024          STR      r0,[r5,r4,LSL #2]     ;697
000078  eb010441          ADD      r4,r1,r1,LSL #1       ;698
00007c  eb050484          ADD      r4,r5,r4,LSL #2       ;698
000080  6890              LDR      r0,[r2,#8]            ;698
000082  6060              STR      r0,[r4,#4]            ;698
000084  88d0              LDRH     r0,[r2,#6]            ;699
000086  eb010441          ADD      r4,r1,r1,LSL #1       ;699
00008a  eb050484          ADD      r4,r5,r4,LSL #2       ;699
00008e  8120              STRH     r0,[r4,#8]            ;699
000090  2000              MOVS     r0,#0                 ;700
000092  eb010441          ADD      r4,r1,r1,LSL #1       ;700
000096  eb050484          ADD      r4,r5,r4,LSL #2       ;700
00009a  8160              STRH     r0,[r4,#0xa]          ;700
                  |L44.156|
00009c  b143              CBZ      r3,|L44.176|
00009e  eb010041          ADD      r0,r1,r1,LSL #1       ;703
0000a2  4c0d              LDR      r4,|L44.216|
0000a4  eb040080          ADD      r0,r4,r0,LSL #2       ;703
0000a8  8940              LDRH     r0,[r0,#0xa]          ;703
0000aa  b108              CBZ      r0,|L44.176|
0000ac  2000              MOVS     r0,#0                 ;703
0000ae  e7dc              B        |L44.106|
                  |L44.176|
0000b0  b113              CBZ      r3,|L44.184|
0000b2  f44f7080          MOV      r0,#0x100             ;705
0000b6  e006              B        |L44.198|
                  |L44.184|
0000b8  eb010041          ADD      r0,r1,r1,LSL #1       ;705
0000bc  4c06              LDR      r4,|L44.216|
0000be  eb040080          ADD      r0,r4,r0,LSL #2       ;705
0000c2  8940              LDRH     r0,[r0,#0xa]          ;705
0000c4  1c40              ADDS     r0,r0,#1              ;705
                  |L44.198|
0000c6  eb010441          ADD      r4,r1,r1,LSL #1       ;705
0000ca  4d03              LDR      r5,|L44.216|
0000cc  eb050484          ADD      r4,r5,r4,LSL #2       ;705
0000d0  8160              STRH     r0,[r4,#0xa]          ;705
0000d2  1c48              ADDS     r0,r1,#1              ;707
0000d4  e7c9              B        |L44.106|
;;;709    
                          ENDP

0000d6  0000              DCW      0x0000
                  |L44.216|
                          DCD      Files

                          AREA ||i.ld_clust||, CODE, READONLY, ALIGN=1

                  ld_clust PROC
;;;1269   static
;;;1270   DWORD ld_clust (
000000  b510              PUSH     {r4,lr}
;;;1271   	FATFS* fs,	/* Pointer to the fs object */
;;;1272   	BYTE* dir	/* Pointer to the directory entry */
;;;1273   )
;;;1274   {
000002  4602              MOV      r2,r0
;;;1275   	DWORD cl;
;;;1276   
;;;1277   	cl = LD_WORD(dir+DIR_FstClusLO);
000004  7e8c              LDRB     r4,[r1,#0x1a]
000006  7ecb              LDRB     r3,[r1,#0x1b]
000008  ea442003          ORR      r0,r4,r3,LSL #8
;;;1278   	if (fs->fs_type == FS_FAT32)
00000c  7813              LDRB     r3,[r2,#0]
00000e  2b03              CMP      r3,#3
000010  d105              BNE      |L45.30|
;;;1279   		cl |= (DWORD)LD_WORD(dir+DIR_FstClusHI) << 16;
000012  7d0c              LDRB     r4,[r1,#0x14]
000014  7d4b              LDRB     r3,[r1,#0x15]
000016  ea442303          ORR      r3,r4,r3,LSL #8
00001a  ea404003          ORR      r0,r0,r3,LSL #16
                  |L45.30|
;;;1280   
;;;1281   	return cl;
;;;1282   }
00001e  bd10              POP      {r4,pc}
;;;1283   
                          ENDP


                          AREA ||i.mem_cmp||, CODE, READONLY, ALIGN=1

                  mem_cmp PROC
;;;587    static
;;;588    int mem_cmp (const void* dst, const void* src, UINT cnt) {
000000  b5f0              PUSH     {r4-r7,lr}
000002  4603              MOV      r3,r0
;;;589    	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
000004  461c              MOV      r4,r3
000006  460d              MOV      r5,r1
;;;590    	int r = 0;
000008  2000              MOVS     r0,#0
;;;591    
;;;592    	while (cnt-- && (r = *d++ - *s++) == 0) ;
00000a  bf00              NOP      
                  |L46.12|
00000c  1e16              SUBS     r6,r2,#0
00000e  f1a20201          SUB      r2,r2,#1
000012  d007              BEQ      |L46.36|
000014  f8147b01          LDRB     r7,[r4],#1
000018  f815cb01          LDRB     r12,[r5],#1
00001c  eba7060c          SUB      r6,r7,r12
000020  1e30              SUBS     r0,r6,#0
000022  d0f3              BEQ      |L46.12|
                  |L46.36|
;;;593    	return r;
;;;594    }
000024  bdf0              POP      {r4-r7,pc}
;;;595    
                          ENDP


                          AREA ||i.mem_cpy||, CODE, READONLY, ALIGN=1

                  mem_cpy PROC
;;;561    static
;;;562    void mem_cpy (void* dst, const void* src, UINT cnt) {
000000  b570              PUSH     {r4-r6,lr}
;;;563    	BYTE *d = (BYTE*)dst;
000002  4603              MOV      r3,r0
;;;564    	const BYTE *s = (const BYTE*)src;
000004  460c              MOV      r4,r1
;;;565    
;;;566    #if _WORD_ACCESS == 1
;;;567    	while (cnt >= sizeof (int)) {
;;;568    		*(int*)d = *(int*)s;
;;;569    		d += sizeof (int); s += sizeof (int);
;;;570    		cnt -= sizeof (int);
;;;571    	}
;;;572    #endif
;;;573    	while (cnt--)
000006  e003              B        |L47.16|
                  |L47.8|
;;;574    		*d++ = *s++;
000008  f8145b01          LDRB     r5,[r4],#1
00000c  f8035b01          STRB     r5,[r3],#1
                  |L47.16|
000010  1e15              SUBS     r5,r2,#0              ;573
000012  f1a20201          SUB      r2,r2,#1              ;573
000016  d1f7              BNE      |L47.8|
;;;575    }
000018  bd70              POP      {r4-r6,pc}
;;;576    
                          ENDP


                          AREA ||i.mem_set||, CODE, READONLY, ALIGN=1

                  mem_set PROC
;;;578    static
;;;579    void mem_set (void* dst, int val, UINT cnt) {
000000  b530              PUSH     {r4,r5,lr}
;;;580    	BYTE *d = (BYTE*)dst;
000002  4603              MOV      r3,r0
;;;581    
;;;582    	while (cnt--)
000004  e001              B        |L48.10|
                  |L48.6|
;;;583    		*d++ = (BYTE)val;
000006  f8031b01          STRB     r1,[r3],#1
                  |L48.10|
00000a  1e14              SUBS     r4,r2,#0              ;582
00000c  f1a20201          SUB      r2,r2,#1              ;582
000010  d1f9              BNE      |L48.6|
;;;584    }
000012  bd30              POP      {r4,r5,pc}
;;;585    
                          ENDP


                          AREA ||i.move_window||, CODE, READONLY, ALIGN=1

                  move_window PROC
;;;780    static
;;;781    FRESULT move_window (
000000  b570              PUSH     {r4-r6,lr}
;;;782    	FATFS* fs,		/* File system object */
;;;783    	DWORD sector	/* Sector number to make appearance in the fs->win[] */
;;;784    )
;;;785    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;786    	if (sector != fs->winsect) {	/* Changed current window */
000006  6ae0              LDR      r0,[r4,#0x2c]
000008  42a8              CMP      r0,r5
00000a  d010              BEQ      |L49.46|
;;;787    #if !_FS_READONLY
;;;788    		if (sync_window(fs) != FR_OK)
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       sync_window
000012  b108              CBZ      r0,|L49.24|
;;;789    			return FR_DISK_ERR;
000014  2001              MOVS     r0,#1
                  |L49.22|
;;;790    #endif
;;;791    		if (disk_read(fs->drv, fs->win, sector, 1))
;;;792    			return FR_DISK_ERR;
;;;793    		fs->winsect = sector;
;;;794    	}
;;;795    
;;;796    	return FR_OK;
;;;797    }
000016  bd70              POP      {r4-r6,pc}
                  |L49.24|
000018  7860              LDRB     r0,[r4,#1]            ;791
00001a  2301              MOVS     r3,#1                 ;791
00001c  462a              MOV      r2,r5                 ;791
00001e  f1040130          ADD      r1,r4,#0x30           ;791
000022  f7fffffe          BL       disk_read
000026  b108              CBZ      r0,|L49.44|
000028  2001              MOVS     r0,#1                 ;792
00002a  e7f4              B        |L49.22|
                  |L49.44|
00002c  62e5              STR      r5,[r4,#0x2c]         ;793
                  |L49.46|
00002e  2000              MOVS     r0,#0                 ;796
000030  e7f1              B        |L49.22|
;;;798    
                          ENDP


                          AREA ||i.pick_lfn||, CODE, READONLY, ALIGN=2

                  pick_lfn PROC
;;;1339   static
;;;1340   int pick_lfn (			/* 1:Succeeded, 0:Buffer overflow */
000000  b5f0              PUSH     {r4-r7,lr}
;;;1341   	WCHAR* lfnbuf,		/* Pointer to the Unicode-LFN buffer */
;;;1342   	BYTE* dir			/* Pointer to the directory entry */
;;;1343   )
;;;1344   {
000002  4603              MOV      r3,r0
;;;1345   	UINT i, s;
;;;1346   	WCHAR wc, uc;
;;;1347   
;;;1348   
;;;1349   	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
000004  7808              LDRB     r0,[r1,#0]
000006  f000003f          AND      r0,r0,#0x3f
00000a  1e40              SUBS     r0,r0,#1
00000c  eb000780          ADD      r7,r0,r0,LSL #2
000010  eb0702c0          ADD      r2,r7,r0,LSL #3
;;;1350   
;;;1351   	s = 0; wc = 1;
000014  2500              MOVS     r5,#0
000016  2601              MOVS     r6,#1
;;;1352   	do {
000018  bf00              NOP      
                  |L50.26|
;;;1353   		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
00001a  4815              LDR      r0,|L50.112|
00001c  5d40              LDRB     r0,[r0,r5]
00001e  5c08              LDRB     r0,[r1,r0]
000020  4f13              LDR      r7,|L50.112|
000022  5d7f              LDRB     r7,[r7,r5]
000024  440f              ADD      r7,r7,r1
000026  787f              LDRB     r7,[r7,#1]
000028  ea402407          ORR      r4,r0,r7,LSL #8
;;;1354   		if (wc) {	/* Last character has not been processed */
00002c  b14e              CBZ      r6,|L50.66|
;;;1355   			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
00002e  2aff              CMP      r2,#0xff
000030  d301              BCC      |L50.54|
000032  2000              MOVS     r0,#0
                  |L50.52|
;;;1356   			lfnbuf[i++] = wc = uc;			/* Store it */
;;;1357   		} else {
;;;1358   			if (uc != 0xFFFF) return 0;		/* Check filler */
;;;1359   		}
;;;1360   	} while (++s < 13);						/* Read all character in the entry */
;;;1361   
;;;1362   	if (dir[LDIR_Ord] & LLE) {				/* Put terminator if it is the last LFN part */
;;;1363   		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
;;;1364   		lfnbuf[i] = 0;
;;;1365   	}
;;;1366   
;;;1367   	return 1;
;;;1368   }
000034  bdf0              POP      {r4-r7,pc}
                  |L50.54|
000036  4626              MOV      r6,r4                 ;1356
000038  4610              MOV      r0,r2                 ;1356
00003a  1c52              ADDS     r2,r2,#1              ;1356
00003c  f8234010          STRH     r4,[r3,r0,LSL #1]     ;1356
000040  e005              B        |L50.78|
                  |L50.66|
000042  f64f70ff          MOV      r0,#0xffff            ;1358
000046  4284              CMP      r4,r0                 ;1358
000048  d001              BEQ      |L50.78|
00004a  2000              MOVS     r0,#0                 ;1358
00004c  e7f2              B        |L50.52|
                  |L50.78|
00004e  1c68              ADDS     r0,r5,#1              ;1360
000050  4605              MOV      r5,r0                 ;1360
000052  280d              CMP      r0,#0xd               ;1360
000054  d3e1              BCC      |L50.26|
000056  7808              LDRB     r0,[r1,#0]            ;1362
000058  f0000040          AND      r0,r0,#0x40           ;1362
00005c  b130              CBZ      r0,|L50.108|
00005e  2aff              CMP      r2,#0xff              ;1363
000060  d301              BCC      |L50.102|
000062  2000              MOVS     r0,#0                 ;1363
000064  e7e6              B        |L50.52|
                  |L50.102|
000066  2000              MOVS     r0,#0                 ;1364
000068  f8230012          STRH     r0,[r3,r2,LSL #1]     ;1364
                  |L50.108|
00006c  2001              MOVS     r0,#1                 ;1367
00006e  e7e1              B        |L50.52|
;;;1369   
                          ENDP

                  |L50.112|
                          DCD      LfnOfs

                          AREA ||i.put_fat||, CODE, READONLY, ALIGN=1

                  put_fat PROC
;;;910    
;;;911    FRESULT put_fat (
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;912    	FATFS* fs,	/* File system object */
;;;913    	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
;;;914    	DWORD val	/* New value to mark the cluster */
;;;915    )
;;;916    {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
;;;917    	UINT bc;
;;;918    	BYTE *p;
;;;919    	FRESULT res;
;;;920    
;;;921    
;;;922    	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
00000a  2e02              CMP      r6,#2
00000c  d302              BCC      |L51.20|
00000e  6960              LDR      r0,[r4,#0x14]
000010  42b0              CMP      r0,r6
000012  d802              BHI      |L51.26|
                  |L51.20|
;;;923    		res = FR_INT_ERR;
000014  f04f0802          MOV      r8,#2
000018  e0af              B        |L51.378|
                  |L51.26|
;;;924    
;;;925    	} else {
;;;926    		switch (fs->fs_type) {
00001a  7820              LDRB     r0,[r4,#0]
00001c  2801              CMP      r0,#1
00001e  d004              BEQ      |L51.42|
000020  2802              CMP      r0,#2
000022  d04f              BEQ      |L51.196|
000024  2803              CMP      r0,#3
000026  d17c              BNE      |L51.290|
000028  e06c              B        |L51.260|
                  |L51.42|
;;;927    		case FS_FAT12 :
;;;928    			bc = (UINT)clst; bc += bc / 2;
00002a  46b1              MOV      r9,r6
00002c  eb090959          ADD      r9,r9,r9,LSR #1
;;;929    			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
000030  8960              LDRH     r0,[r4,#0xa]
000032  fbb9f0f0          UDIV     r0,r9,r0
000036  6a21              LDR      r1,[r4,#0x20]
000038  eb000a01          ADD      r10,r0,r1
00003c  4651              MOV      r1,r10
00003e  4620              MOV      r0,r4
000040  f7fffffe          BL       move_window
000044  4680              MOV      r8,r0
;;;930    			if (res != FR_OK) break;
000046  f1b80f00          CMP      r8,#0
00004a  d000              BEQ      |L51.78|
00004c  e092              B        |L51.372|
                  |L51.78|
;;;931    			p = &fs->win[bc % SS(fs)];
00004e  8960              LDRH     r0,[r4,#0xa]
000050  fbb9f1f0          UDIV     r1,r9,r0
000054  fb009111          MLS      r1,r0,r1,r9
000058  f1040030          ADD      r0,r4,#0x30
00005c  180d              ADDS     r5,r1,r0
;;;932    			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
00005e  f0060001          AND      r0,r6,#1
000062  b120              CBZ      r0,|L51.110|
000064  b2f9              UXTB     r1,r7
000066  7828              LDRB     r0,[r5,#0]
000068  f361101f          BFI      r0,r1,#4,#28
00006c  e000              B        |L51.112|
                  |L51.110|
00006e  4638              MOV      r0,r7
                  |L51.112|
000070  7028              STRB     r0,[r5,#0]
;;;933    			bc++;
000072  f1090901          ADD      r9,r9,#1
;;;934    			fs->wflag = 1;
000076  2001              MOVS     r0,#1
000078  7120              STRB     r0,[r4,#4]
;;;935    			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
00007a  8960              LDRH     r0,[r4,#0xa]
00007c  fbb9f0f0          UDIV     r0,r9,r0
000080  6a21              LDR      r1,[r4,#0x20]
000082  eb000a01          ADD      r10,r0,r1
000086  4651              MOV      r1,r10
000088  4620              MOV      r0,r4
00008a  f7fffffe          BL       move_window
00008e  4680              MOV      r8,r0
;;;936    			if (res != FR_OK) break;
000090  f1b80f00          CMP      r8,#0
000094  d000              BEQ      |L51.152|
000096  e06d              B        |L51.372|
                  |L51.152|
;;;937    			p = &fs->win[bc % SS(fs)];
000098  8960              LDRH     r0,[r4,#0xa]
00009a  fbb9f1f0          UDIV     r1,r9,r0
00009e  fb009111          MLS      r1,r0,r1,r9
0000a2  f1040030          ADD      r0,r4,#0x30
0000a6  180d              ADDS     r5,r1,r0
;;;938    			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
0000a8  f0060001          AND      r0,r6,#1
0000ac  b110              CBZ      r0,|L51.180|
0000ae  f3c71007          UBFX     r0,r7,#4,#8
0000b2  e005              B        |L51.192|
                  |L51.180|
0000b4  7828              LDRB     r0,[r5,#0]
0000b6  f00000f0          AND      r0,r0,#0xf0
0000ba  f3c72103          UBFX     r1,r7,#8,#4
0000be  4308              ORRS     r0,r0,r1
                  |L51.192|
0000c0  7028              STRB     r0,[r5,#0]
;;;939    			break;
0000c2  e057              B        |L51.372|
                  |L51.196|
;;;940    
;;;941    		case FS_FAT16 :
;;;942    			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
0000c4  f8b4a00a          LDRH     r10,[r4,#0xa]
0000c8  eb0a70da          ADD      r0,r10,r10,LSR #31
0000cc  1040              ASRS     r0,r0,#1
0000ce  fbb6f0f0          UDIV     r0,r6,r0
0000d2  6a21              LDR      r1,[r4,#0x20]
0000d4  eb000b01          ADD      r11,r0,r1
0000d8  4659              MOV      r1,r11
0000da  4620              MOV      r0,r4
0000dc  f7fffffe          BL       move_window
0000e0  4680              MOV      r8,r0
;;;943    			if (res != FR_OK) break;
0000e2  f1b80f00          CMP      r8,#0
0000e6  d000              BEQ      |L51.234|
0000e8  e044              B        |L51.372|
                  |L51.234|
;;;944    			p = &fs->win[clst * 2 % SS(fs)];
0000ea  0070              LSLS     r0,r6,#1
0000ec  8961              LDRH     r1,[r4,#0xa]
0000ee  fbb0f2f1          UDIV     r2,r0,r1
0000f2  fb010112          MLS      r1,r1,r2,r0
0000f6  f1040030          ADD      r0,r4,#0x30
0000fa  180d              ADDS     r5,r1,r0
;;;945    			ST_WORD(p, (WORD)val);
0000fc  702f              STRB     r7,[r5,#0]
0000fe  0a38              LSRS     r0,r7,#8
000100  7068              STRB     r0,[r5,#1]
;;;946    			break;
000102  e037              B        |L51.372|
                  |L51.260|
;;;947    
;;;948    		case FS_FAT32 :
;;;949    			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
000104  f8b4a00a          LDRH     r10,[r4,#0xa]
000108  ea4f70ea          ASR      r0,r10,#31
00010c  eb0a7090          ADD      r0,r10,r0,LSR #30
000110  1080              ASRS     r0,r0,#2
000112  fbb6f0f0          UDIV     r0,r6,r0
000116  6a21              LDR      r1,[r4,#0x20]
000118  eb000b01          ADD      r11,r0,r1
00011c  4659              MOV      r1,r11
00011e  4620              MOV      r0,r4
000120  e000              B        |L51.292|
                  |L51.290|
000122  e024              B        |L51.366|
                  |L51.292|
000124  f7fffffe          BL       move_window
000128  4680              MOV      r8,r0
;;;950    			if (res != FR_OK) break;
00012a  f1b80f00          CMP      r8,#0
00012e  d000              BEQ      |L51.306|
000130  e020              B        |L51.372|
                  |L51.306|
;;;951    			p = &fs->win[clst * 4 % SS(fs)];
000132  00b0              LSLS     r0,r6,#2
000134  8961              LDRH     r1,[r4,#0xa]
000136  fbb0f2f1          UDIV     r2,r0,r1
00013a  fb010112          MLS      r1,r1,r2,r0
00013e  f1040030          ADD      r0,r4,#0x30
000142  180d              ADDS     r5,r1,r0
;;;952    			val |= LD_DWORD(p) & 0xF0000000;
000144  78e8              LDRB     r0,[r5,#3]
000146  0600              LSLS     r0,r0,#24
000148  78a9              LDRB     r1,[r5,#2]
00014a  ea404001          ORR      r0,r0,r1,LSL #16
00014e  7869              LDRB     r1,[r5,#1]
000150  ea402001          ORR      r0,r0,r1,LSL #8
000154  7829              LDRB     r1,[r5,#0]
000156  4308              ORRS     r0,r0,r1
000158  f0004070          AND      r0,r0,#0xf0000000
00015c  4307              ORRS     r7,r7,r0
;;;953    			ST_DWORD(p, val);
00015e  702f              STRB     r7,[r5,#0]
000160  0a38              LSRS     r0,r7,#8
000162  7068              STRB     r0,[r5,#1]
000164  0c38              LSRS     r0,r7,#16
000166  70a8              STRB     r0,[r5,#2]
000168  0e38              LSRS     r0,r7,#24
00016a  70e8              STRB     r0,[r5,#3]
;;;954    			break;
00016c  e002              B        |L51.372|
                  |L51.366|
;;;955    
;;;956    		default :
;;;957    			res = FR_INT_ERR;
00016e  f04f0802          MOV      r8,#2
000172  bf00              NOP                            ;926
                  |L51.372|
000174  bf00              NOP                            ;930
;;;958    		}
;;;959    		fs->wflag = 1;
000176  2001              MOVS     r0,#1
000178  7120              STRB     r0,[r4,#4]
                  |L51.378|
;;;960    	}
;;;961    
;;;962    	return res;
00017a  4640              MOV      r0,r8
;;;963    }
00017c  e8bd9ff0          POP      {r4-r12,pc}
;;;964    #endif /* !_FS_READONLY */
                          ENDP


                          AREA ||i.remove_chain||, CODE, READONLY, ALIGN=1

                  remove_chain PROC
;;;973    static
;;;974    FRESULT remove_chain (
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;975    	FATFS* fs,			/* File system object */
;;;976    	DWORD clst			/* Cluster# to remove a chain from */
;;;977    )
;;;978    {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
;;;979    	FRESULT res;
;;;980    	DWORD nxt;
;;;981    #if _USE_ERASE
;;;982    	DWORD scl = clst, ecl = clst, rt[2];
;;;983    #endif
;;;984    
;;;985    	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
000008  2e02              CMP      r6,#2
00000a  d302              BCC      |L52.18|
00000c  6960              LDR      r0,[r4,#0x14]
00000e  42b0              CMP      r0,r6
000010  d801              BHI      |L52.22|
                  |L52.18|
;;;986    		res = FR_INT_ERR;
000012  2702              MOVS     r7,#2
000014  e027              B        |L52.102|
                  |L52.22|
;;;987    
;;;988    	} else {
;;;989    		res = FR_OK;
000016  2700              MOVS     r7,#0
;;;990    		while (clst < fs->n_fatent) {			/* Not a last link? */
000018  e021              B        |L52.94|
                  |L52.26|
;;;991    			nxt = get_fat(fs, clst);			/* Get cluster status */
00001a  4631              MOV      r1,r6
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       get_fat
000022  4605              MOV      r5,r0
;;;992    			if (nxt == 0) break;				/* Empty cluster? */
000024  b905              CBNZ     r5,|L52.40|
000026  e01d              B        |L52.100|
                  |L52.40|
;;;993    			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
000028  2d01              CMP      r5,#1
00002a  d101              BNE      |L52.48|
00002c  2702              MOVS     r7,#2
00002e  e019              B        |L52.100|
                  |L52.48|
;;;994    			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
000030  1c68              ADDS     r0,r5,#1
000032  b908              CBNZ     r0,|L52.56|
000034  2701              MOVS     r7,#1
000036  e015              B        |L52.100|
                  |L52.56|
;;;995    			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
000038  2200              MOVS     r2,#0
00003a  4631              MOV      r1,r6
00003c  4620              MOV      r0,r4
00003e  f7fffffe          BL       put_fat
000042  4607              MOV      r7,r0
;;;996    			if (res != FR_OK) break;
000044  b107              CBZ      r7,|L52.72|
000046  e00d              B        |L52.100|
                  |L52.72|
;;;997    			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
000048  6920              LDR      r0,[r4,#0x10]
00004a  1c40              ADDS     r0,r0,#1
00004c  b130              CBZ      r0,|L52.92|
;;;998    				fs->free_clust++;
00004e  6920              LDR      r0,[r4,#0x10]
000050  1c40              ADDS     r0,r0,#1
000052  6120              STR      r0,[r4,#0x10]
;;;999    				fs->fsi_flag |= 1;
000054  7960              LDRB     r0,[r4,#5]
000056  f0400001          ORR      r0,r0,#1
00005a  7160              STRB     r0,[r4,#5]
                  |L52.92|
;;;1000   			}
;;;1001   #if _USE_ERASE
;;;1002   			if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
;;;1003   				ecl = nxt;
;;;1004   			} else {				/* End of contiguous clusters */ 
;;;1005   				rt[0] = clust2sect(fs, scl);					/* Start sector */
;;;1006   				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
;;;1007   				disk_ioctl(fs->drv, CTRL_ERASE_SECTOR, rt);		/* Erase the block */
;;;1008   				scl = ecl = nxt;
;;;1009   			}
;;;1010   #endif
;;;1011   			clst = nxt;	/* Next cluster */
00005c  462e              MOV      r6,r5
                  |L52.94|
00005e  6960              LDR      r0,[r4,#0x14]         ;990
000060  42b0              CMP      r0,r6                 ;990
000062  d8da              BHI      |L52.26|
                  |L52.100|
000064  bf00              NOP                            ;992
                  |L52.102|
;;;1012   		}
;;;1013   	}
;;;1014   
;;;1015   	return res;
000066  4638              MOV      r0,r7
;;;1016   }
000068  e8bd81f0          POP      {r4-r8,pc}
;;;1017   #endif
                          ENDP


                          AREA ||i.st_clust||, CODE, READONLY, ALIGN=1

                  st_clust PROC
;;;1286   static
;;;1287   void st_clust (
000000  7681              STRB     r1,[r0,#0x1a]
;;;1288   	BYTE* dir,	/* Pointer to the directory entry */
;;;1289   	DWORD cl	/* Value to be set */
;;;1290   )
;;;1291   {
;;;1292   	ST_WORD(dir+DIR_FstClusLO, cl);
000002  0a0b              LSRS     r3,r1,#8
000004  76c3              STRB     r3,[r0,#0x1b]
;;;1293   	ST_WORD(dir+DIR_FstClusHI, cl >> 16);
000006  0c0a              LSRS     r2,r1,#16
000008  7502              STRB     r2,[r0,#0x14]
00000a  0e0b              LSRS     r3,r1,#24
00000c  7543              STRB     r3,[r0,#0x15]
;;;1294   }
00000e  4770              BX       lr
;;;1295   #endif
                          ENDP


                          AREA ||i.sum_sfn||, CODE, READONLY, ALIGN=1

                  sum_sfn PROC
;;;1469   static
;;;1470   BYTE sum_sfn (
000000  b530              PUSH     {r4,r5,lr}
;;;1471   	const BYTE* dir		/* Pointer to the SFN entry */
;;;1472   )
;;;1473   {
000002  4601              MOV      r1,r0
;;;1474   	BYTE sum = 0;
000004  2000              MOVS     r0,#0
;;;1475   	UINT n = 11;
000006  220b              MOVS     r2,#0xb
;;;1476   
;;;1477   	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
000008  bf00              NOP      
                  |L54.10|
00000a  1043              ASRS     r3,r0,#1
00000c  eb0314c0          ADD      r4,r3,r0,LSL #7
000010  f8115b01          LDRB     r5,[r1],#1
000014  1963              ADDS     r3,r4,r5
000016  b2d8              UXTB     r0,r3
000018  1e53              SUBS     r3,r2,#1
00001a  1e1a              SUBS     r2,r3,#0
00001c  d1f5              BNE      |L54.10|
;;;1478   	return sum;
;;;1479   }
00001e  bd30              POP      {r4,r5,pc}
;;;1480   #endif
                          ENDP


                          AREA ||i.sync_fs||, CODE, READONLY, ALIGN=1

                  sync_fs PROC
;;;806    static
;;;807    FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
000000  b570              PUSH     {r4-r6,lr}
;;;808    	FATFS* fs		/* File system object */
;;;809    )
;;;810    {
000002  4604              MOV      r4,r0
;;;811    	FRESULT res;
;;;812    
;;;813    
;;;814    	res = sync_window(fs);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       sync_window
00000a  4605              MOV      r5,r0
;;;815    	if (res == FR_OK) {
00000c  2d00              CMP      r5,#0
00000e  d159              BNE      |L55.196|
;;;816    		/* Update FSINFO sector if needed */
;;;817    		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
000010  7820              LDRB     r0,[r4,#0]
000012  2803              CMP      r0,#3
000014  d14f              BNE      |L55.182|
000016  7960              LDRB     r0,[r4,#5]
000018  2801              CMP      r0,#1
00001a  d14c              BNE      |L55.182|
;;;818    			/* Create FSINFO structure */
;;;819    			mem_set(fs->win, 0, SS(fs));
00001c  8962              LDRH     r2,[r4,#0xa]
00001e  2100              MOVS     r1,#0
000020  f1040030          ADD      r0,r4,#0x30
000024  f7fffffe          BL       mem_set
;;;820    			ST_WORD(fs->win+BS_55AA, 0xAA55);
000028  2155              MOVS     r1,#0x55
00002a  f884122e          STRB     r1,[r4,#0x22e]
00002e  21aa              MOVS     r1,#0xaa
000030  f884122f          STRB     r1,[r4,#0x22f]
;;;821    			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
000034  2052              MOVS     r0,#0x52
000036  f8840030          STRB     r0,[r4,#0x30]
00003a  2152              MOVS     r1,#0x52
00003c  2031              MOVS     r0,#0x31
00003e  5501              STRB     r1,[r0,r4]
000040  2161              MOVS     r1,#0x61
000042  2032              MOVS     r0,#0x32
000044  5501              STRB     r1,[r0,r4]
000046  2141              MOVS     r1,#0x41
000048  2033              MOVS     r0,#0x33
00004a  5501              STRB     r1,[r0,r4]
;;;822    			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
00004c  2172              MOVS     r1,#0x72
00004e  f8841214          STRB     r1,[r4,#0x214]
000052  f8841215          STRB     r1,[r4,#0x215]
000056  2141              MOVS     r1,#0x41
000058  f8841216          STRB     r1,[r4,#0x216]
00005c  2161              MOVS     r1,#0x61
00005e  f8841217          STRB     r1,[r4,#0x217]
;;;823    			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
000062  7c21              LDRB     r1,[r4,#0x10]
000064  f8841218          STRB     r1,[r4,#0x218]
000068  8a20              LDRH     r0,[r4,#0x10]
00006a  0a01              LSRS     r1,r0,#8
00006c  f8841219          STRB     r1,[r4,#0x219]
000070  6920              LDR      r0,[r4,#0x10]
000072  0c01              LSRS     r1,r0,#16
000074  f884121a          STRB     r1,[r4,#0x21a]
000078  6920              LDR      r0,[r4,#0x10]
00007a  0e01              LSRS     r1,r0,#24
00007c  f884121b          STRB     r1,[r4,#0x21b]
;;;824    			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
000080  7b21              LDRB     r1,[r4,#0xc]
000082  f884121c          STRB     r1,[r4,#0x21c]
000086  89a0              LDRH     r0,[r4,#0xc]
000088  0a01              LSRS     r1,r0,#8
00008a  f884121d          STRB     r1,[r4,#0x21d]
00008e  68e0              LDR      r0,[r4,#0xc]
000090  0c01              LSRS     r1,r0,#16
000092  f884121e          STRB     r1,[r4,#0x21e]
000096  68e0              LDR      r0,[r4,#0xc]
000098  0e01              LSRS     r1,r0,#24
00009a  f884121f          STRB     r1,[r4,#0x21f]
;;;825    			/* Write it into the FSINFO sector */
;;;826    			fs->winsect = fs->volbase + 1;
00009e  69e0              LDR      r0,[r4,#0x1c]
0000a0  1c40              ADDS     r0,r0,#1
0000a2  62e0              STR      r0,[r4,#0x2c]
;;;827    			disk_write(fs->drv, fs->win, fs->winsect, 1);
0000a4  7860              LDRB     r0,[r4,#1]
0000a6  2301              MOVS     r3,#1
0000a8  f1040130          ADD      r1,r4,#0x30
0000ac  6ae2              LDR      r2,[r4,#0x2c]
0000ae  f7fffffe          BL       disk_write
;;;828    			fs->fsi_flag = 0;
0000b2  2000              MOVS     r0,#0
0000b4  7160              STRB     r0,[r4,#5]
                  |L55.182|
;;;829    		}
;;;830    		/* Make sure that no pending write process in the physical drive */
;;;831    		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
0000b6  7860              LDRB     r0,[r4,#1]
0000b8  2200              MOVS     r2,#0
0000ba  4611              MOV      r1,r2
0000bc  f7fffffe          BL       disk_ioctl
0000c0  b100              CBZ      r0,|L55.196|
;;;832    			res = FR_DISK_ERR;
0000c2  2501              MOVS     r5,#1
                  |L55.196|
;;;833    	}
;;;834    
;;;835    	return res;
0000c4  4628              MOV      r0,r5
;;;836    }
0000c6  bd70              POP      {r4-r6,pc}
;;;837    #endif
                          ENDP


                          AREA ||i.sync_window||, CODE, READONLY, ALIGN=1

                  sync_window PROC
;;;754    static
;;;755    FRESULT sync_window (
000000  b570              PUSH     {r4-r6,lr}
;;;756    	FATFS* fs		/* File system object */
;;;757    )
;;;758    {
000002  4604              MOV      r4,r0
;;;759    	DWORD wsect;
;;;760    	UINT nf;
;;;761    
;;;762    
;;;763    	if (fs->wflag) {	/* Write back the sector if it is dirty */
000004  7920              LDRB     r0,[r4,#4]
000006  b1f8              CBZ      r0,|L56.72|
;;;764    		wsect = fs->winsect;	/* Current sector number */
000008  6ae5              LDR      r5,[r4,#0x2c]
;;;765    		if (disk_write(fs->drv, fs->win, wsect, 1))
00000a  7860              LDRB     r0,[r4,#1]
00000c  2301              MOVS     r3,#1
00000e  462a              MOV      r2,r5
000010  f1040130          ADD      r1,r4,#0x30
000014  f7fffffe          BL       disk_write
000018  b108              CBZ      r0,|L56.30|
;;;766    			return FR_DISK_ERR;
00001a  2001              MOVS     r0,#1
                  |L56.28|
;;;767    		fs->wflag = 0;
;;;768    		if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
;;;769    			for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
;;;770    				wsect += fs->fsize;
;;;771    				disk_write(fs->drv, fs->win, wsect, 1);
;;;772    			}
;;;773    		}
;;;774    	}
;;;775    	return FR_OK;
;;;776    }
00001c  bd70              POP      {r4-r6,pc}
                  |L56.30|
00001e  2000              MOVS     r0,#0                 ;767
000020  7120              STRB     r0,[r4,#4]            ;767
000022  6a20              LDR      r0,[r4,#0x20]         ;768
000024  1a28              SUBS     r0,r5,r0              ;768
000026  69a1              LDR      r1,[r4,#0x18]         ;768
000028  4288              CMP      r0,r1                 ;768
00002a  d20d              BCS      |L56.72|
00002c  78e6              LDRB     r6,[r4,#3]            ;769
00002e  e009              B        |L56.68|
                  |L56.48|
000030  69a0              LDR      r0,[r4,#0x18]         ;770
000032  4405              ADD      r5,r5,r0              ;770
000034  7860              LDRB     r0,[r4,#1]            ;771
000036  2301              MOVS     r3,#1                 ;771
000038  462a              MOV      r2,r5                 ;771
00003a  f1040130          ADD      r1,r4,#0x30           ;771
00003e  f7fffffe          BL       disk_write
000042  1e76              SUBS     r6,r6,#1              ;769
                  |L56.68|
000044  2e02              CMP      r6,#2                 ;769
000046  d2f3              BCS      |L56.48|
                  |L56.72|
000048  2000              MOVS     r0,#0                 ;775
00004a  e7e7              B        |L56.28|
;;;777    #endif
                          ENDP


                          AREA ||i.validate||, CODE, READONLY, ALIGN=1

                  validate PROC
;;;2334   static
;;;2335   FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
000000  b570              PUSH     {r4-r6,lr}
;;;2336   	void* obj		/* Pointer to the object FIL/DIR to check validity */
;;;2337   )
;;;2338   {
000002  4605              MOV      r5,r0
;;;2339   	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
000004  462c              MOV      r4,r5
;;;2340   
;;;2341   
;;;2342   	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id)
000006  b14c              CBZ      r4,|L57.28|
000008  6820              LDR      r0,[r4,#0]
00000a  b138              CBZ      r0,|L57.28|
00000c  6820              LDR      r0,[r4,#0]
00000e  7800              LDRB     r0,[r0,#0]
000010  b120              CBZ      r0,|L57.28|
000012  6820              LDR      r0,[r4,#0]
000014  88c0              LDRH     r0,[r0,#6]
000016  88a1              LDRH     r1,[r4,#4]
000018  4288              CMP      r0,r1
00001a  d001              BEQ      |L57.32|
                  |L57.28|
;;;2343   		return FR_INVALID_OBJECT;
00001c  2009              MOVS     r0,#9
                  |L57.30|
;;;2344   
;;;2345   	ENTER_FF(fil->fs);		/* Lock file system */
;;;2346   
;;;2347   	if (disk_status(fil->fs->drv) & STA_NOINIT)
;;;2348   		return FR_NOT_READY;
;;;2349   
;;;2350   	return FR_OK;
;;;2351   }
00001e  bd70              POP      {r4-r6,pc}
                  |L57.32|
000020  6821              LDR      r1,[r4,#0]            ;2347
000022  7848              LDRB     r0,[r1,#1]            ;2347
000024  f7fffffe          BL       disk_status
000028  f0000001          AND      r0,r0,#1              ;2347
00002c  b108              CBZ      r0,|L57.50|
00002e  2003              MOVS     r0,#3                 ;2348
000030  e7f5              B        |L57.30|
                  |L57.50|
000032  2000              MOVS     r0,#0                 ;2350
000034  e7f3              B        |L57.30|
;;;2352   
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  Files
                          %        36
                  LfnBuf
                          %        512

                          AREA ||.constdata||, DATA, READONLY, ALIGN=1

                  LfnOfs
000000  01030507          DCB      0x01,0x03,0x05,0x07
000004  090e1012          DCB      0x09,0x0e,0x10,0x12
000008  1416181c          DCB      0x14,0x16,0x18,0x1c
00000c  1e00              DCB      0x1e,0x00
                  vst
00000e  0400              DCW      0x0400
000010  02000100          DCW      0x0200,0x0100
000014  00800040          DCW      0x0080,0x0040
000018  00200010          DCW      0x0020,0x0010
00001c  00080004          DCW      0x0008,0x0004
000020  00020000          DCW      0x0002,0x0000
                  ||cst||
000024  80004000          DCW      0x8000,0x4000
000028  20001000          DCW      0x2000,0x1000
00002c  08004000          DCW      0x0800,0x4000
000030  20001000          DCW      0x2000,0x1000
000034  08000400          DCW      0x0800,0x0400
000038  0200              DCW      0x0200

                          AREA ||.data||, DATA, ALIGN=2

                  FatFs
                          %        8
                  Fsid
000008  0000              DCB      0x00,0x00
