; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\obj\bsp_led.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\bsp_led.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\Libraries\CMSIS\Include -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User\app\inc -I..\..\User\FatFS\src -I..\..\User\Mass_Storage\inc -I..\..\User\LCD_Driver -I..\..\User\SYSTEM\sys -I..\..\User\Debugprintf -I..\..\User\LogDebug -I..\..\User\app\inc -I..\..\User\app\src -I..\..\User\bsp\inc -I..\..\User\bsp\src -I.\RTE\_Flash -ID:\Keil_v5\ARM\Packs\ARM\CMSIS\5.5.1\CMSIS\Core\Include -ID:\Keil_v5\ARM\Packs\Keil\STM32F1xx_DFP\2.1.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=527 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\flash\obj\bsp_led.crf ..\..\User\bsp\src\bsp_led.c]
                          THUMB

                          AREA ||i.RunWaterLed||, CODE, READONLY, ALIGN=2

                  RunWaterLed PROC
;;;225    */
;;;226    void RunWaterLed(void)
000000  b510              PUSH     {r4,lr}
;;;227    {
;;;228    	uint8_t led_no = 1;		/* LED指示灯序号 1-4 */
000002  2401              MOVS     r4,#1
;;;229    	
;;;230    	bsp_StartTimer(0, 10000);		/* 定时器0是5000ms 单次定时器 */
000004  f2427110          MOV      r1,#0x2710
000008  2000              MOVS     r0,#0
00000a  f7fffffe          BL       bsp_StartTimer
;;;231    	bsp_StartAutoTimer(1, 200);		/* 定时器1是500ms 自动重装定时器, 控制LED1按1Hz频率翻转闪烁 */
00000e  21c8              MOVS     r1,#0xc8
000010  2001              MOVS     r0,#1
000012  f7fffffe          BL       bsp_StartAutoTimer
;;;232    	bsp_LedOn(1);
000016  2001              MOVS     r0,#1
000018  f7fffffe          BL       bsp_LedOn
;;;233    	led_no = 1;
00001c  bf00              NOP      
;;;234    	while (1)
00001e  e01f              B        |L1.96|
                  |L1.32|
;;;235    	{			
;;;236    		bsp_Idle();		/* CPU空闲时执行的函数，在 bsp.c */
000020  f7fffffe          BL       bsp_Idle
;;;237    		
;;;238    		/* 这个地方可以插入其他任务 */		
;;;239    		
;;;240    		/* 检查定时器0时间是否到 */
;;;241    		if (bsp_CheckTimer(0))
000024  2000              MOVS     r0,#0
000026  f7fffffe          BL       bsp_CheckTimer
00002a  b100              CBZ      r0,|L1.46|
;;;242    		{
;;;243    			break;
00002c  e019              B        |L1.98|
                  |L1.46|
;;;244    		}
;;;245    
;;;246    		if (bsp_CheckTimer(1))		/* 检查自动定时器2，间隔200ms翻转一次LED1 */
00002e  2001              MOVS     r0,#1
000030  f7fffffe          BL       bsp_CheckTimer
000034  b1a0              CBZ      r0,|L1.96|
;;;247    		{
;;;248    			/* 先关闭所有的LED，然后在打开其中一个 */
;;;249    			bsp_LedOff(1);
000036  2001              MOVS     r0,#1
000038  f7fffffe          BL       bsp_LedOff
;;;250    			bsp_LedOff(2);
00003c  2002              MOVS     r0,#2
00003e  f7fffffe          BL       bsp_LedOff
;;;251    			bsp_LedOff(3);
000042  2003              MOVS     r0,#3
000044  f7fffffe          BL       bsp_LedOff
;;;252    			bsp_LedOff(4);
000048  2004              MOVS     r0,#4
00004a  f7fffffe          BL       bsp_LedOff
;;;253    			
;;;254    			if (++led_no == 5)
00004e  1c60              ADDS     r0,r4,#1
000050  b2c0              UXTB     r0,r0
000052  4604              MOV      r4,r0
000054  2805              CMP      r0,#5
000056  d100              BNE      |L1.90|
;;;255    			{
;;;256    				led_no = 1;
000058  2401              MOVS     r4,#1
                  |L1.90|
;;;257    			}
;;;258    
;;;259    			bsp_LedOn(led_no);	/* 点亮其中一个LED */	
00005a  4620              MOV      r0,r4
00005c  f7fffffe          BL       bsp_LedOn
                  |L1.96|
000060  e7de              B        |L1.32|
                  |L1.98|
000062  bf00              NOP                            ;243
;;;260    		}		
;;;261    	}
;;;262    	
;;;263    	/* 任务结束时，应该关闭定时器，因为他们会占用后台的资源 */
;;;264    	//bsp_StopTimer(0);	 单次定时器如果超时到过一次后，可以不必关闭
;;;265    	bsp_StopTimer(1);
000064  2001              MOVS     r0,#1
000066  f7fffffe          BL       bsp_StopTimer
;;;266    	bsp_LedOff(1);
00006a  2001              MOVS     r0,#1
00006c  f7fffffe          BL       bsp_LedOff
;;;267    	bsp_LedOff(2);
000070  2002              MOVS     r0,#2
000072  f7fffffe          BL       bsp_LedOff
;;;268    	bsp_LedOff(3);
000076  2003              MOVS     r0,#3
000078  f7fffffe          BL       bsp_LedOff
;;;269    	bsp_LedOff(4);
00007c  2004              MOVS     r0,#4
00007e  f7fffffe          BL       bsp_LedOff
;;;270    	printf("流水灯测试结束\r\n");
000082  a003              ADR      r0,|L1.144|
000084  f7fffffe          BL       __2printf
;;;271    	printf("*************************************************************\n\r");
000088  a006              ADR      r0,|L1.164|
00008a  f7fffffe          BL       __2printf
;;;272    }
00008e  bd10              POP      {r4,pc}
;;;273    
                          ENDP

                  |L1.144|
000090  c1f7cbae          DCB      193,247,203,174,181,198,178,226,202,212,189,225,202,248,"\r"
000094  b5c6b2e2
000098  cad4bde1
00009c  caf80d  
00009f  0a00              DCB      "\n",0
0000a1  00                DCB      0
0000a2  00                DCB      0
0000a3  00                DCB      0
                  |L1.164|
0000a4  2a2a2a2a          DCB      "*******************************************************"
0000a8  2a2a2a2a
0000ac  2a2a2a2a
0000b0  2a2a2a2a
0000b4  2a2a2a2a
0000b8  2a2a2a2a
0000bc  2a2a2a2a
0000c0  2a2a2a2a
0000c4  2a2a2a2a
0000c8  2a2a2a2a
0000cc  2a2a2a2a
0000d0  2a2a2a2a
0000d4  2a2a2a2a
0000d8  2a2a2a  
0000db  2a2a2a2a          DCB      "******\n\r",0
0000df  2a2a0a0d
0000e3  00      

                          AREA ||i.bsp_InitLed||, CODE, READONLY, ALIGN=2

                  bsp_InitLed PROC
;;;48     */
;;;49     void bsp_InitLed(void)
000000  b508              PUSH     {r3,lr}
;;;50     {
;;;51     	GPIO_InitTypeDef GPIO_InitStructure;
;;;52     
;;;53     	/* 打开GPIO时钟 */
;;;54     	RCC_APB2PeriphClockCmd(RCC_ALL_LED, ENABLE);
000002  2101              MOVS     r1,#1
000004  2008              MOVS     r0,#8
000006  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;55     
;;;56     	/*
;;;57     		配置所有的LED指示灯GPIO为推挽输出模式
;;;58     		由于将GPIO设置为输出时，GPIO输出寄存器的值缺省是0，因此会驱动LED点亮.
;;;59     		这是我不希望的，因此在改变GPIO为输出前，先关闭LED指示灯
;;;60     	*/
;;;61     		bsp_LedOff(1);
00000a  2001              MOVS     r0,#1
00000c  f7fffffe          BL       bsp_LedOff
;;;62     		bsp_LedOff(2);
000010  2002              MOVS     r0,#2
000012  f7fffffe          BL       bsp_LedOff
;;;63     //	bsp_LedOff(1);
;;;64     //	bsp_LedOff(2);
;;;65     //	bsp_LedOff(3);
;;;66     //	bsp_LedOff(4);
;;;67     
;;;68     	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000016  2003              MOVS     r0,#3
000018  f88d0002          STRB     r0,[sp,#2]
;;;69     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;	/* 推挽输出模式 */
00001c  2010              MOVS     r0,#0x10
00001e  f88d0003          STRB     r0,[sp,#3]
;;;70     	
;;;71     	GPIO_InitStructure.GPIO_Pin = GPIO_PIN_LED1;
000022  0200              LSLS     r0,r0,#8
000024  f8ad0000          STRH     r0,[sp,#0]
;;;72     	GPIO_Init(GPIO_PORT_LED1, &GPIO_InitStructure);
000028  4669              MOV      r1,sp
00002a  4806              LDR      r0,|L2.68|
00002c  f7fffffe          BL       GPIO_Init
;;;73     
;;;74     	GPIO_InitStructure.GPIO_Pin = GPIO_PIN_LED2;
000030  f44f5000          MOV      r0,#0x2000
000034  f8ad0000          STRH     r0,[sp,#0]
;;;75     	GPIO_Init(GPIO_PORT_LED2, &GPIO_InitStructure);
000038  4669              MOV      r1,sp
00003a  4802              LDR      r0,|L2.68|
00003c  f7fffffe          BL       GPIO_Init
;;;76     
;;;77     //	GPIO_InitStructure.GPIO_Pin = GPIO_PIN_LED3;
;;;78     //	GPIO_Init(GPIO_PORT_LED3, &GPIO_InitStructure);
;;;79     
;;;80     //	GPIO_InitStructure.GPIO_Pin = GPIO_PIN_LED4;
;;;81     //	GPIO_Init(GPIO_PORT_LED4, &GPIO_InitStructure);
;;;82     }
000040  bd08              POP      {r3,pc}
;;;83     
                          ENDP

000042  0000              DCW      0x0000
                  |L2.68|
                          DCD      0x40010c00

                          AREA ||i.bsp_IsLedOn||, CODE, READONLY, ALIGN=2

                  bsp_IsLedOn PROC
;;;179    */
;;;180    uint8_t bsp_IsLedOn(uint8_t _no)
000000  4601              MOV      r1,r0
;;;181    {
;;;182    	if (_no == 1)
000002  2901              CMP      r1,#1
000004  d108              BNE      |L3.24|
;;;183    	{
;;;184    		if ((GPIO_PORT_LED1->ODR & GPIO_PIN_LED1) == 0)
000006  480b              LDR      r0,|L3.52|
000008  6800              LDR      r0,[r0,#0]
00000a  f4005080          AND      r0,r0,#0x1000
00000e  b908              CBNZ     r0,|L3.20|
;;;185    		{
;;;186    			return 1;
000010  2001              MOVS     r0,#1
                  |L3.18|
;;;187    		}
;;;188    		return 0;
;;;189    	}
;;;190    	else if (_no == 2)
;;;191    	{
;;;192    		if ((GPIO_PORT_LED2->ODR & GPIO_PIN_LED2) == 0)
;;;193    		{
;;;194    			return 1;
;;;195    		}
;;;196    		return 0;
;;;197    	}
;;;198    //	else if (_no == 3)
;;;199    //	{
;;;200    //		if ((GPIO_PORT_LED3->ODR & GPIO_PIN_LED3) == 0)
;;;201    //		{
;;;202    //			return 1;
;;;203    //		}
;;;204    //		return 0;
;;;205    //	}
;;;206    //	else if (_no == 4)
;;;207    //	{
;;;208    //		if ((GPIO_PORT_LED4->ODR & GPIO_PIN_LED4) == 0)
;;;209    //		{
;;;210    //			return 1;
;;;211    //		}
;;;212    //		return 0;
;;;213    //	}
;;;214    
;;;215    	return 0;
;;;216    }
000012  4770              BX       lr
                  |L3.20|
000014  2000              MOVS     r0,#0                 ;188
000016  e7fc              B        |L3.18|
                  |L3.24|
000018  2902              CMP      r1,#2                 ;190
00001a  d108              BNE      |L3.46|
00001c  4805              LDR      r0,|L3.52|
00001e  6800              LDR      r0,[r0,#0]            ;192
000020  f4005000          AND      r0,r0,#0x2000         ;192
000024  b908              CBNZ     r0,|L3.42|
000026  2001              MOVS     r0,#1                 ;194
000028  e7f3              B        |L3.18|
                  |L3.42|
00002a  2000              MOVS     r0,#0                 ;196
00002c  e7f1              B        |L3.18|
                  |L3.46|
00002e  2000              MOVS     r0,#0                 ;215
000030  e7ef              B        |L3.18|
;;;217    
                          ENDP

000032  0000              DCW      0x0000
                  |L3.52|
                          DCD      0x40010c0c

                          AREA ||i.bsp_LedOff||, CODE, READONLY, ALIGN=2

                  bsp_LedOff PROC
;;;91     */
;;;92     void bsp_LedOff(uint8_t _no)
000000  1e41              SUBS     r1,r0,#1
;;;93     {
;;;94     	_no--;
000002  b2c8              UXTB     r0,r1
;;;95     
;;;96     	if (_no == 0)
000004  b920              CBNZ     r0,|L4.16|
;;;97     	{
;;;98     		GPIO_PORT_LED1->BRR = GPIO_PIN_LED1;
000006  f44f5180          MOV      r1,#0x1000
00000a  4a04              LDR      r2,|L4.28|
00000c  6011              STR      r1,[r2,#0]
00000e  e004              B        |L4.26|
                  |L4.16|
;;;99     	}
;;;100    	else if (_no == 1)
000010  2801              CMP      r0,#1
000012  d102              BNE      |L4.26|
;;;101    	{
;;;102    		GPIO_PORT_LED2->BRR = GPIO_PIN_LED2;
000014  0341              LSLS     r1,r0,#13
000016  4a01              LDR      r2,|L4.28|
000018  6011              STR      r1,[r2,#0]
                  |L4.26|
;;;103    	}
;;;104    //	else if (_no == 2)
;;;105    //	{
;;;106    //		GPIO_PORT_LED3->BRR = GPIO_PIN_LED3;
;;;107    //	}
;;;108    //	else if (_no == 3)
;;;109    //	{
;;;110    //		GPIO_PORT_LED4->BRR = GPIO_PIN_LED4;
;;;111    //	}
;;;112    }
00001a  4770              BX       lr
;;;113    
                          ENDP

                  |L4.28|
                          DCD      0x40010c14

                          AREA ||i.bsp_LedOn||, CODE, READONLY, ALIGN=2

                  bsp_LedOn PROC
;;;121    */
;;;122    void bsp_LedOn(uint8_t _no)
000000  1e41              SUBS     r1,r0,#1
;;;123    {
;;;124    	_no--;
000002  b2c8              UXTB     r0,r1
;;;125    
;;;126    	if (_no == 0)
000004  b920              CBNZ     r0,|L5.16|
;;;127    	{
;;;128    		GPIO_PORT_LED1->BSRR = GPIO_PIN_LED1;
000006  f44f5180          MOV      r1,#0x1000
00000a  4a04              LDR      r2,|L5.28|
00000c  6011              STR      r1,[r2,#0]
00000e  e004              B        |L5.26|
                  |L5.16|
;;;129    	}
;;;130    	else if (_no == 1)
000010  2801              CMP      r0,#1
000012  d102              BNE      |L5.26|
;;;131    	{
;;;132    		GPIO_PORT_LED2->BSRR = GPIO_PIN_LED2;
000014  0341              LSLS     r1,r0,#13
000016  4a01              LDR      r2,|L5.28|
000018  6011              STR      r1,[r2,#0]
                  |L5.26|
;;;133    	}
;;;134    //	else if (_no == 2)
;;;135    //	{
;;;136    //		GPIO_PORT_LED3->BSRR = GPIO_PIN_LED3;
;;;137    //	}
;;;138    //	else if (_no == 3)
;;;139    //	{
;;;140    //		GPIO_PORT_LED4->BSRR = GPIO_PIN_LED4;
;;;141    //	}
;;;142    }
00001a  4770              BX       lr
;;;143    
                          ENDP

                  |L5.28|
                          DCD      0x40010c10

                          AREA ||i.bsp_LedToggle||, CODE, READONLY, ALIGN=2

                  bsp_LedToggle PROC
;;;151    */
;;;152    void bsp_LedToggle(uint8_t _no)
000000  2801              CMP      r0,#1
;;;153    {
;;;154    	if (_no == 1)
000002  d106              BNE      |L6.18|
;;;155    	{
;;;156    		GPIO_PORT_LED1->ODR ^= GPIO_PIN_LED1;  //异或 相同为0，不同为1
000004  4907              LDR      r1,|L6.36|
000006  6809              LDR      r1,[r1,#0]
000008  f4815180          EOR      r1,r1,#0x1000
00000c  4a05              LDR      r2,|L6.36|
00000e  6011              STR      r1,[r2,#0]
000010  e007              B        |L6.34|
                  |L6.18|
;;;157    	}
;;;158    	else if (_no == 2)
000012  2802              CMP      r0,#2
000014  d105              BNE      |L6.34|
;;;159    	{
;;;160    		GPIO_PORT_LED2->ODR ^= GPIO_PIN_LED2;
000016  4903              LDR      r1,|L6.36|
000018  6809              LDR      r1,[r1,#0]
00001a  f4815100          EOR      r1,r1,#0x2000
00001e  4a01              LDR      r2,|L6.36|
000020  6011              STR      r1,[r2,#0]
                  |L6.34|
;;;161    	}
;;;162    //	else if (_no == 3)
;;;163    //	{
;;;164    //		GPIO_PORT_LED3->ODR ^= GPIO_PIN_LED3;
;;;165    //	}
;;;166    //	else if (_no == 4)
;;;167    //	{
;;;168    //		GPIO_PORT_LED4->ODR ^= GPIO_PIN_LED4;
;;;169    //	}
;;;170    }
000022  4770              BX       lr
;;;171    
                          ENDP

                  |L6.36|
                          DCD      0x40010c0c

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\bsp\\src\\bsp_led.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___9_bsp_led_c_ba23b041____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___9_bsp_led_c_ba23b041____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___9_bsp_led_c_ba23b041____REVSH|
#line 128
|__asm___9_bsp_led_c_ba23b041____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
