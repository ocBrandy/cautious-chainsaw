; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\obj\vgus_lcd.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\vgus_lcd.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\Libraries\CMSIS\Include -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User\app\inc -I..\..\User\FatFS\src -I..\..\User\Mass_Storage\inc -I..\..\User\LCD_Driver -I..\..\User\SYSTEM\sys -I..\..\User\Debugprintf -I..\..\User\LogDebug -I..\..\User\app\inc -I..\..\User\app\src -I..\..\User\bsp\inc -I..\..\User\bsp\src -I.\RTE\_Flash -ID:\Keil_v5\ARM\Packs\ARM\CMSIS\5.5.1\CMSIS\Core\Include -ID:\Keil_v5\ARM\Packs\Keil\STM32F1xx_DFP\2.1.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=527 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\flash\obj\vgus_lcd.crf ..\..\User\app\src\VGUS_LCD.c]
                          THUMB

                          AREA ||i.ButtonClear||, CODE, READONLY, ALIGN=2

                  ButtonClear PROC
;;;426    
;;;427    void ButtonClear(uint8_t id)///压力KEEP（全清）
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;428    {
000004  b087              SUB      sp,sp,#0x1c
000006  4604              MOV      r4,r0
;;;429        uint16_t addr = 0,x,y,rx,ry,color;
000008  2500              MOVS     r5,#0
;;;430        uint16_t addr1 = 0,x1,y1,rx1,ry1,color1;
00000a  2000              MOVS     r0,#0
00000c  9006              STR      r0,[sp,#0x18]
;;;431        
;;;432        if(id >= 5) {return;}
00000e  2c05              CMP      r4,#5
000010  db02              BLT      |L1.24|
                  |L1.18|
;;;433        
;;;434        addr    = button_table[id][0].addr;
;;;435        x       = button_table[id][0].x;
;;;436        y       = button_table[id][0].y;
;;;437        rx      = button_table[id][0].x1;
;;;438        ry      = button_table[id][0].y1;
;;;439        color   = button_table[id][0].default_color;
;;;440        
;;;441        addr1   = button_table[id][1].addr;
;;;442        x1      = button_table[id][1].x;
;;;443        y1      = button_table[id][1].y;
;;;444        rx1     = button_table[id][1].x1;
;;;445        ry1     = button_table[id][1].y1;
;;;446        color1  = button_table[id][1].default_color;
;;;447                
;;;448        if(addr != 0)
;;;449        {
;;;450            RectangleFill(addr,x,y,rx,ry,color);
;;;451        }
;;;452        if(addr1 != 0)
;;;453        {
;;;454            RectangleFill(addr1,x1,y1,rx1,ry1,color1);
;;;455        }
;;;456    }
000012  b007              ADD      sp,sp,#0x1c
000014  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.24|
000018  eb040044          ADD      r0,r4,r4,LSL #1       ;434
00001c  492c              LDR      r1,|L1.208|
00001e  f8315030          LDRH     r5,[r1,r0,LSL #3]     ;434
000022  eb040044          ADD      r0,r4,r4,LSL #1       ;435
000026  eb0100c0          ADD      r0,r1,r0,LSL #3       ;435
00002a  8846              LDRH     r6,[r0,#2]            ;435
00002c  eb040044          ADD      r0,r4,r4,LSL #1       ;436
000030  eb0100c0          ADD      r0,r1,r0,LSL #3       ;436
000034  8887              LDRH     r7,[r0,#4]            ;436
000036  eb040044          ADD      r0,r4,r4,LSL #1       ;437
00003a  eb0100c0          ADD      r0,r1,r0,LSL #3       ;437
00003e  f8b08006          LDRH     r8,[r0,#6]            ;437
000042  eb040044          ADD      r0,r4,r4,LSL #1       ;438
000046  eb0100c0          ADD      r0,r1,r0,LSL #3       ;438
00004a  f8b09008          LDRH     r9,[r0,#8]            ;438
00004e  eb040044          ADD      r0,r4,r4,LSL #1       ;439
000052  eb0100c0          ADD      r0,r1,r0,LSL #3       ;439
000056  f8b0a00a          LDRH     r10,[r0,#0xa]         ;439
00005a  eb040044          ADD      r0,r4,r4,LSL #1       ;441
00005e  eb0100c0          ADD      r0,r1,r0,LSL #3       ;441
000062  8980              LDRH     r0,[r0,#0xc]          ;441
000064  9006              STR      r0,[sp,#0x18]         ;441
000066  eb040044          ADD      r0,r4,r4,LSL #1       ;442
00006a  eb0100c0          ADD      r0,r1,r0,LSL #3       ;442
00006e  89c0              LDRH     r0,[r0,#0xe]          ;442
000070  9005              STR      r0,[sp,#0x14]         ;442
000072  eb040044          ADD      r0,r4,r4,LSL #1       ;443
000076  eb0100c0          ADD      r0,r1,r0,LSL #3       ;443
00007a  8a00              LDRH     r0,[r0,#0x10]         ;443
00007c  9004              STR      r0,[sp,#0x10]         ;443
00007e  eb040044          ADD      r0,r4,r4,LSL #1       ;444
000082  eb0100c0          ADD      r0,r1,r0,LSL #3       ;444
000086  8a40              LDRH     r0,[r0,#0x12]         ;444
000088  9003              STR      r0,[sp,#0xc]          ;444
00008a  eb040044          ADD      r0,r4,r4,LSL #1       ;445
00008e  eb0100c0          ADD      r0,r1,r0,LSL #3       ;445
000092  8a80              LDRH     r0,[r0,#0x14]         ;445
000094  9002              STR      r0,[sp,#8]            ;445
000096  eb040044          ADD      r0,r4,r4,LSL #1       ;446
00009a  eb0100c0          ADD      r0,r1,r0,LSL #3       ;446
00009e  f8b0b016          LDRH     r11,[r0,#0x16]        ;446
0000a2  b13d              CBZ      r5,|L1.180|
0000a4  4643              MOV      r3,r8                 ;450
0000a6  463a              MOV      r2,r7                 ;450
0000a8  4631              MOV      r1,r6                 ;450
0000aa  4628              MOV      r0,r5                 ;450
0000ac  e9cd9a00          STRD     r9,r10,[sp,#0]        ;450
0000b0  f7fffffe          BL       RectangleFill
                  |L1.180|
0000b4  9806              LDR      r0,[sp,#0x18]         ;452
0000b6  b140              CBZ      r0,|L1.202|
0000b8  9802              LDR      r0,[sp,#8]            ;454
0000ba  e9cd0b00          STRD     r0,r11,[sp,#0]        ;454
0000be  e9dd3203          LDRD     r3,r2,[sp,#0xc]       ;454
0000c2  e9dd1005          LDRD     r1,r0,[sp,#0x14]      ;454
0000c6  f7fffffe          BL       RectangleFill
                  |L1.202|
0000ca  bf00              NOP      
0000cc  e7a1              B        |L1.18|
;;;457    
                          ENDP

0000ce  0000              DCW      0x0000
                  |L1.208|
                          DCD      button_table

                          AREA ||i.ButtonDeepGreen||, CODE, READONLY, ALIGN=2

                  ButtonDeepGreen PROC
;;;457    
;;;458     void ButtonDeepGreen(uint8_t id,uint8_t up_or_down)//井下数据回应，按键色块变深
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;459    {
000004  b089              SUB      sp,sp,#0x24
000006  4604              MOV      r4,r0
000008  460d              MOV      r5,r1
;;;460        uint16_t addr = 0,x,y,rx,ry,color;
00000a  2600              MOVS     r6,#0
;;;461        uint16_t addr1 = 0,x1,y1,rx1,ry1,color1;
00000c  2700              MOVS     r7,#0
;;;462        
;;;463        addr    = button_table[id][0].addr;
00000e  eb040044          ADD      r0,r4,r4,LSL #1
000012  4933              LDR      r1,|L2.224|
000014  f8316030          LDRH     r6,[r1,r0,LSL #3]
;;;464        x       = button_table[id][0].x;
000018  eb040044          ADD      r0,r4,r4,LSL #1
00001c  eb0100c0          ADD      r0,r1,r0,LSL #3
000020  8840              LDRH     r0,[r0,#2]
000022  9008              STR      r0,[sp,#0x20]
;;;465        y       = button_table[id][0].y;
000024  eb040044          ADD      r0,r4,r4,LSL #1
000028  eb0100c0          ADD      r0,r1,r0,LSL #3
00002c  8880              LDRH     r0,[r0,#4]
00002e  9007              STR      r0,[sp,#0x1c]
;;;466        rx      = button_table[id][0].x1;
000030  eb040044          ADD      r0,r4,r4,LSL #1
000034  eb0100c0          ADD      r0,r1,r0,LSL #3
000038  88c0              LDRH     r0,[r0,#6]
00003a  9006              STR      r0,[sp,#0x18]
;;;467        ry      = button_table[id][0].y1;
00003c  eb040044          ADD      r0,r4,r4,LSL #1
000040  eb0100c0          ADD      r0,r1,r0,LSL #3
000044  8900              LDRH     r0,[r0,#8]
000046  9005              STR      r0,[sp,#0x14]
;;;468        color   = (up_or_down != 0) ? COLOR_DEEP_GREEN : button_table[id][0].default_color;
000048  b115              CBZ      r5,|L2.80|
00004a  f44f7078          MOV      r0,#0x3e0
00004e  e005              B        |L2.92|
                  |L2.80|
000050  eb040044          ADD      r0,r4,r4,LSL #1
000054  4922              LDR      r1,|L2.224|
000056  eb0100c0          ADD      r0,r1,r0,LSL #3
00005a  8940              LDRH     r0,[r0,#0xa]
                  |L2.92|
00005c  9004              STR      r0,[sp,#0x10]
;;;469        
;;;470        addr1   = button_table[id][1].addr;
00005e  eb040044          ADD      r0,r4,r4,LSL #1
000062  491f              LDR      r1,|L2.224|
000064  eb0100c0          ADD      r0,r1,r0,LSL #3
000068  8987              LDRH     r7,[r0,#0xc]
;;;471        x1      = button_table[id][1].x;
00006a  eb040044          ADD      r0,r4,r4,LSL #1
00006e  eb0100c0          ADD      r0,r1,r0,LSL #3
000072  f8b0800e          LDRH     r8,[r0,#0xe]
;;;472        y1      = button_table[id][1].y;
000076  eb040044          ADD      r0,r4,r4,LSL #1
00007a  eb0100c0          ADD      r0,r1,r0,LSL #3
00007e  f8b09010          LDRH     r9,[r0,#0x10]
;;;473        rx1     = button_table[id][1].x1;
000082  eb040044          ADD      r0,r4,r4,LSL #1
000086  eb0100c0          ADD      r0,r1,r0,LSL #3
00008a  f8b0a012          LDRH     r10,[r0,#0x12]
;;;474        ry1     = button_table[id][1].y1;
00008e  eb040044          ADD      r0,r4,r4,LSL #1
000092  eb0100c0          ADD      r0,r1,r0,LSL #3
000096  f8b0b014          LDRH     r11,[r0,#0x14]
;;;475        color1  = (up_or_down != 0) ? button_table[id][1].default_color : COLOR_DEEP_GREEN;
00009a  b12d              CBZ      r5,|L2.168|
00009c  eb040044          ADD      r0,r4,r4,LSL #1
0000a0  eb0100c0          ADD      r0,r1,r0,LSL #3
0000a4  8ac0              LDRH     r0,[r0,#0x16]
0000a6  e001              B        |L2.172|
                  |L2.168|
0000a8  f44f7078          MOV      r0,#0x3e0
                  |L2.172|
0000ac  9003              STR      r0,[sp,#0xc]
;;;476                
;;;477        if(addr != 0)
0000ae  b14e              CBZ      r6,|L2.196|
;;;478        {
;;;479            RectangleFill(addr,x,y,rx,ry,color);
0000b0  e9dd1004          LDRD     r1,r0,[sp,#0x10]
0000b4  e9cd0100          STRD     r0,r1,[sp,#0]
0000b8  4630              MOV      r0,r6
0000ba  e9dd3206          LDRD     r3,r2,[sp,#0x18]
0000be  9908              LDR      r1,[sp,#0x20]
0000c0  f7fffffe          BL       RectangleFill
                  |L2.196|
;;;480        }
;;;481        if(addr1 != 0)
0000c4  b147              CBZ      r7,|L2.216|
;;;482        {
;;;483            RectangleFill(addr1,x1,y1,rx1,ry1,color1);
0000c6  9803              LDR      r0,[sp,#0xc]
0000c8  4653              MOV      r3,r10
0000ca  464a              MOV      r2,r9
0000cc  4641              MOV      r1,r8
0000ce  e9cdb000          STRD     r11,r0,[sp,#0]
0000d2  4638              MOV      r0,r7
0000d4  f7fffffe          BL       RectangleFill
                  |L2.216|
;;;484        }
;;;485    }
0000d8  b009              ADD      sp,sp,#0x24
0000da  e8bd8ff0          POP      {r4-r11,pc}
;;;486    /*
                          ENDP

0000de  0000              DCW      0x0000
                  |L2.224|
                          DCD      button_table

                          AREA ||i.ButtonRed||, CODE, READONLY, ALIGN=2

                  ButtonRed PROC
;;;517    /*色块显示红色*/
;;;518     void ButtonRed(uint8_t id,uint8_t up_or_down)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;519    {
000004  b089              SUB      sp,sp,#0x24
000006  4604              MOV      r4,r0
000008  460d              MOV      r5,r1
;;;520        uint16_t addr = 0,x,y,rx,ry,color;
00000a  2600              MOVS     r6,#0
;;;521        uint16_t addr1 = 0,x1,y1,rx1,ry1,color1;
00000c  2700              MOVS     r7,#0
;;;522        
;;;523        addr    = button_table[id][0].addr;
00000e  eb040044          ADD      r0,r4,r4,LSL #1
000012  4933              LDR      r1,|L3.224|
000014  f8316030          LDRH     r6,[r1,r0,LSL #3]
;;;524        x       = button_table[id][0].x;
000018  eb040044          ADD      r0,r4,r4,LSL #1
00001c  eb0100c0          ADD      r0,r1,r0,LSL #3
000020  8840              LDRH     r0,[r0,#2]
000022  9008              STR      r0,[sp,#0x20]
;;;525        y       = button_table[id][0].y;
000024  eb040044          ADD      r0,r4,r4,LSL #1
000028  eb0100c0          ADD      r0,r1,r0,LSL #3
00002c  8880              LDRH     r0,[r0,#4]
00002e  9007              STR      r0,[sp,#0x1c]
;;;526        rx      = button_table[id][0].x1;
000030  eb040044          ADD      r0,r4,r4,LSL #1
000034  eb0100c0          ADD      r0,r1,r0,LSL #3
000038  88c0              LDRH     r0,[r0,#6]
00003a  9006              STR      r0,[sp,#0x18]
;;;527        ry      = button_table[id][0].y1;
00003c  eb040044          ADD      r0,r4,r4,LSL #1
000040  eb0100c0          ADD      r0,r1,r0,LSL #3
000044  8900              LDRH     r0,[r0,#8]
000046  9005              STR      r0,[sp,#0x14]
;;;528        color   = (up_or_down != 0) ? COLOR_RED : button_table[id][0].default_color;
000048  b115              CBZ      r5,|L3.80|
00004a  f44f4078          MOV      r0,#0xf800
00004e  e005              B        |L3.92|
                  |L3.80|
000050  eb040044          ADD      r0,r4,r4,LSL #1
000054  4922              LDR      r1,|L3.224|
000056  eb0100c0          ADD      r0,r1,r0,LSL #3
00005a  8940              LDRH     r0,[r0,#0xa]
                  |L3.92|
00005c  9004              STR      r0,[sp,#0x10]
;;;529        
;;;530        addr1   = button_table[id][1].addr;
00005e  eb040044          ADD      r0,r4,r4,LSL #1
000062  491f              LDR      r1,|L3.224|
000064  eb0100c0          ADD      r0,r1,r0,LSL #3
000068  8987              LDRH     r7,[r0,#0xc]
;;;531        x1      = button_table[id][1].x;
00006a  eb040044          ADD      r0,r4,r4,LSL #1
00006e  eb0100c0          ADD      r0,r1,r0,LSL #3
000072  f8b0800e          LDRH     r8,[r0,#0xe]
;;;532        y1      = button_table[id][1].y;
000076  eb040044          ADD      r0,r4,r4,LSL #1
00007a  eb0100c0          ADD      r0,r1,r0,LSL #3
00007e  f8b09010          LDRH     r9,[r0,#0x10]
;;;533        rx1     = button_table[id][1].x1;
000082  eb040044          ADD      r0,r4,r4,LSL #1
000086  eb0100c0          ADD      r0,r1,r0,LSL #3
00008a  f8b0a012          LDRH     r10,[r0,#0x12]
;;;534        ry1     = button_table[id][1].y1;
00008e  eb040044          ADD      r0,r4,r4,LSL #1
000092  eb0100c0          ADD      r0,r1,r0,LSL #3
000096  f8b0b014          LDRH     r11,[r0,#0x14]
;;;535        color1  = (up_or_down != 0) ? button_table[id][1].default_color : COLOR_RED;
00009a  b12d              CBZ      r5,|L3.168|
00009c  eb040044          ADD      r0,r4,r4,LSL #1
0000a0  eb0100c0          ADD      r0,r1,r0,LSL #3
0000a4  8ac0              LDRH     r0,[r0,#0x16]
0000a6  e001              B        |L3.172|
                  |L3.168|
0000a8  f44f4078          MOV      r0,#0xf800
                  |L3.172|
0000ac  9003              STR      r0,[sp,#0xc]
;;;536                
;;;537        if(addr != 0)
0000ae  b14e              CBZ      r6,|L3.196|
;;;538        {
;;;539            RectangleFill(addr,x,y,rx,ry,color);
0000b0  e9dd1004          LDRD     r1,r0,[sp,#0x10]
0000b4  e9cd0100          STRD     r0,r1,[sp,#0]
0000b8  4630              MOV      r0,r6
0000ba  e9dd3206          LDRD     r3,r2,[sp,#0x18]
0000be  9908              LDR      r1,[sp,#0x20]
0000c0  f7fffffe          BL       RectangleFill
                  |L3.196|
;;;540        }
;;;541        if(addr1 != 0)
0000c4  b147              CBZ      r7,|L3.216|
;;;542        {
;;;543            RectangleFill(addr1,x1,y1,rx1,ry1,color1);
0000c6  9803              LDR      r0,[sp,#0xc]
0000c8  4653              MOV      r3,r10
0000ca  464a              MOV      r2,r9
0000cc  4641              MOV      r1,r8
0000ce  e9cdb000          STRD     r11,r0,[sp,#0]
0000d2  4638              MOV      r0,r7
0000d4  f7fffffe          BL       RectangleFill
                  |L3.216|
;;;544        }
;;;545    }
0000d8  b009              ADD      sp,sp,#0x24
0000da  e8bd8ff0          POP      {r4-r11,pc}
;;;546    
                          ENDP

0000de  0000              DCW      0x0000
                  |L3.224|
                          DCD      button_table

                          AREA ||i.LCD_Updata||, CODE, READONLY, ALIGN=2

                  LCD_Updata PROC
;;;621    extern	uint16_t TwoBytesReverse(uint16_t src);
;;;622    void LCD_Updata(void)
000000  b510              PUSH     {r4,lr}
;;;623    {
;;;624    	/*温度*/
;;;625    	RefreshNumber(TEMPERATURE1_ADDR,send_data.elect_ext_temperature); //井下电源温度（电子节外部温度）
000002  485f              LDR      r0,|L4.384|
000004  7e81              LDRB     r1,[r0,#0x1a]  ; send_data
000006  f44f6001          MOV      r0,#0x810
00000a  f7fffffe          BL       RefreshNumber
;;;626    	RefreshNumber(TEMPERATURE2_ADDR,send_data.Pump_Oil_temperature);//泵液压油
00000e  485c              LDR      r0,|L4.384|
000010  7e01              LDRB     r1,[r0,#0x18]  ; send_data
000012  f44f6005          MOV      r0,#0x850
000016  f7fffffe          BL       RefreshNumber
;;;627    	RefreshNumber(TEMPERATURE3_ADDR,send_data.Small_Motor_temperature);//液压节电机温度
00001a  4859              LDR      r0,|L4.384|
00001c  7f01              LDRB     r1,[r0,#0x1c]  ; send_data
00001e  f44f6004          MOV      r0,#0x840
000022  f7fffffe          BL       RefreshNumber
;;;628    	RefreshNumber(TEMPERATURE4_ADDR,send_data.Stepper_motor_temperature);//步进电机
000026  4856              LDR      r0,|L4.384|
000028  7ec1              LDRB     r1,[r0,#0x1b]  ; send_data
00002a  f44f6003          MOV      r0,#0x830
00002e  f7fffffe          BL       RefreshNumber
;;;629    	RefreshNumber(TEMPERATURE5_ADDR,send_data.Cable_Head_Tension_temperature);//3981
000032  4853              LDR      r0,|L4.384|
000034  7e41              LDRB     r1,[r0,#0x19]  ; send_data
000036  f44f60ae          MOV      r0,#0x570
00003a  f7fffffe          BL       RefreshNumber
;;;630    	RefreshNumber(TEMPERATURE_BOARD_ADDR,send_data.temperature);//保温瓶温度（已经计算）
00003e  4850              LDR      r0,|L4.384|
000040  7b81              LDRB     r1,[r0,#0xe]  ; send_data
000042  f44f6002          MOV      r0,#0x820
000046  f7fffffe          BL       RefreshNumber
;;;631    	
;;;632    	RefreshNumber(VARIABLE_FREQ_MACHINE_BOX_TEMPERATURE_ADDR,send_data.data.BP_temperature/10);//变频机箱温度
00004a  484d              LDR      r0,|L4.384|
00004c  f8b00033          LDRH     r0,[r0,#0x33]
000050  210a              MOVS     r1,#0xa
000052  fb90f0f1          SDIV     r0,r0,r1
000056  b284              UXTH     r4,r0
000058  4621              MOV      r1,r4
00005a  f44f5040          MOV      r0,#0x3000
00005e  f7fffffe          BL       RefreshNumber
;;;633      /*电压*/
;;;634    	RefreshNumber(AC_VOLTAGE_ADDR,send_data.AC_voltage_of_underground_motor);//大电机交流电压
000062  4847              LDR      r0,|L4.384|
000064  8ac1              LDRH     r1,[r0,#0x16]  ; send_data
000066  f44f60c4          MOV      r0,#0x620
00006a  f7fffffe          BL       RefreshNumber
;;;635    	RefreshNumber(CABLE_VOLTAGE_ADDR,send_data.cable_head_voltage);//缆头电压（控制电压）
00006e  4844              LDR      r0,|L4.384|
000070  f8b01011          LDRH     r1,[r0,#0x11]  ; send_data
000074  f44f60c6          MOV      r0,#0x630
000078  f7fffffe          BL       RefreshNumber
;;;636      /*压力*///已经计算过
;;;637      RefreshNumber(BIG_PUMP_ADDR,send_data.large_pump_pressure);//大泵压力
00007c  4840              LDR      r0,|L4.384|
00007e  f8b0101f          LDRH     r1,[r0,#0x1f]  ; send_data
000082  f44f60f2          MOV      r0,#0x790
000086  f7fffffe          BL       RefreshNumber
;;;638    	RefreshNumber(PUSH_PRESSURE_ADDR,send_data.push_pressure);//推靠压力
00008a  483d              LDR      r0,|L4.384|
00008c  f8b0101d          LDRH     r1,[r0,#0x1d]  ; send_data
000090  f44f60b2          MOV      r0,#0x590
000094  f7fffffe          BL       RefreshNumber
;;;639    	RefreshNumber(SMALL_PUMP_ADDR,send_data.small_pump_pressure);//小泵压力
000098  4839              LDR      r0,|L4.384|
00009a  f8b01021          LDRH     r1,[r0,#0x21]  ; send_data
00009e  f44f60c0          MOV      r0,#0x600
0000a2  f7fffffe          BL       RefreshNumber
;;;640       /*位移*/
;;;641    	RefreshNumber(BIT_PROCESS_DISPLACEMENT,send_data.drill_bit_process);//钻进位移（数据）
0000a6  4836              LDR      r0,|L4.384|
0000a8  7d41              LDRB     r1,[r0,#0x15]  ; send_data
0000aa  f44f60ce          MOV      r0,#0x670
0000ae  f7fffffe          BL       RefreshNumber
;;;642    	RefreshNumber(OIL_POSITION_DISPLACEMENT,send_data.oil_position);//油位位移（数据）
0000b2  4833              LDR      r0,|L4.384|
0000b4  8c81              LDRH     r1,[r0,#0x24]  ; send_data
0000b6  f44f60cc          MOV      r0,#0x660
0000ba  f7fffffe          BL       RefreshNumber
;;;643    	RefreshNumber(CORE_LENGTH_DISPLACEMENT,send_data.core_length);//心长位移（数据）
0000be  4830              LDR      r0,|L4.384|
0000c0  f8901023          LDRB     r1,[r0,#0x23]  ; send_data
0000c4  f44f6000          MOV      r0,#0x800
0000c8  f7fffffe          BL       RefreshNumber
;;;644      /* 其他 */        
;;;645    	RefreshNumber(GMMA_ADDR,send_data.gmma_cnt);//伽马计数（井下）
0000cc  482c              LDR      r0,|L4.384|
0000ce  f8b0100f          LDRH     r1,[r0,#0xf]  ; send_data
0000d2  f44f60b0          MOV      r0,#0x580
0000d6  f7fffffe          BL       RefreshNumber
;;;646    	RefreshNumber(TENSION_ADDR,send_data.tension); //张力（井下）
0000da  4829              LDR      r0,|L4.384|
0000dc  f8b01013          LDRH     r1,[r0,#0x13]  ; send_data
0000e0  f44f60ca          MOV      r0,#0x650
0000e4  f7fffffe          BL       RefreshNumber
;;;647    	RefreshNumber(ERROR_CODE_ADDR,Error_timer);//误码
0000e8  4826              LDR      r0,|L4.388|
0000ea  8801              LDRH     r1,[r0,#0]  ; Error_timer
0000ec  f44f60a2          MOV      r0,#0x510
0000f0  f7fffffe          BL       RefreshNumber
;;;648    	RefreshNumber(TIME_OUT_ADDR,DH_data_timer);//超时时间
0000f4  4824              LDR      r0,|L4.392|
0000f6  8801              LDRH     r1,[r0,#0]  ; DH_data_timer
0000f8  f44f60a4          MOV      r0,#0x520
0000fc  f7fffffe          BL       RefreshNumber
;;;649    	RefreshNumber(MOTOR_CYCLE_ADDR,motorcycle_FWD_count);//电机转数
000100  4822              LDR      r0,|L4.396|
000102  7801              LDRB     r1,[r0,#0]  ; motorcycle_FWD_count
000104  f44f7088          MOV      r0,#0x110
000108  f7fffffe          BL       RefreshNumber
;;;650    	RefreshNumber(TOR_UPHOLE,tor_uphole);//扭矩tor_uphole
00010c  4820              LDR      r0,|L4.400|
00010e  8801              LDRH     r1,[r0,#0]  ; tor_uphole
000110  f64f70d0          MOV      r0,#0xffd0
000114  f7fffffe          BL       RefreshNumber
;;;651    	RefreshNumber(TSPE_UPHOLE,tspe_uphole);//转速
000118  481e              LDR      r0,|L4.404|
00011a  8801              LDRH     r1,[r0,#0]  ; tspe_uphole
00011c  f64f70e0          MOV      r0,#0xffe0
000120  f7fffffe          BL       RefreshNumber
;;;652    
;;;653    	RefreshNumber(MOTOR_CURRENT_ADDR,Motor_Current);//ADC采集 电机电流 屏幕显示一位小数
000124  481c              LDR      r0,|L4.408|
000126  8801              LDRH     r1,[r0,#0]  ; Motor_Current
000128  f44f7014          MOV      r0,#0x250
00012c  f7fffffe          BL       RefreshNumber
;;;654    	RefreshNumber(CABLE_CURRENT_ADDR,ctrl_current/10);//ADC采集 缆头电流（控制电流）屏幕显示一位小数
000130  481a              LDR      r0,|L4.412|
000132  8800              LDRH     r0,[r0,#0]  ; ctrl_current
000134  210a              MOVS     r1,#0xa
000136  fb90f0f1          SDIV     r0,r0,r1
00013a  b284              UXTH     r4,r0
00013c  4621              MOV      r1,r4
00013e  f44f6006          MOV      r0,#0x860
000142  f7fffffe          BL       RefreshNumber
;;;655    	
;;;656    	RefreshNumber(VARIABLE_FREQ_ADDR,send_data.data.real_freq/100);//变频机箱频率
000146  480e              LDR      r0,|L4.384|
000148  f8b0002b          LDRH     r0,[r0,#0x2b]
00014c  2164              MOVS     r1,#0x64
00014e  fb90f0f1          SDIV     r0,r0,r1
000152  b284              UXTH     r4,r0
000154  4621              MOV      r1,r4
000156  f44f407f          MOV      r0,#0xff00
00015a  f7fffffe          BL       RefreshNumber
;;;657    	RefreshNumber(CABLE_LENGTH_ADDR,send_data.data.Ad_ParmLimitLength);//电缆长度
00015e  4808              LDR      r0,|L4.384|
000160  f8b01043          LDRH     r1,[r0,#0x43]
000164  f44f7090          MOV      r0,#0x120
000168  f7fffffe          BL       RefreshNumber
;;;658    	onTimeUpdata(push_timer);///刷新时分秒
00016c  480c              LDR      r0,|L4.416|
00016e  6800              LDR      r0,[r0,#0]  ; push_timer
000170  f7fffffe          BL       onTimeUpdata
;;;659    
;;;660    	onDisplacementUpdata_Text();///心长，钻进（文本显示）
000174  f7fffffe          BL       onDisplacementUpdata_Text
;;;661    	onDisplacementUpdata_Rect();//心长，钻进（矩形填充）
000178  f7fffffe          BL       onDisplacementUpdata_Rect
;;;662    	//按键色块显示,按键扫描后立即下发
;;;663    }
00017c  bd10              POP      {r4,pc}
;;;664    
                          ENDP

00017e  0000              DCW      0x0000
                  |L4.384|
                          DCD      send_data
                  |L4.388|
                          DCD      Error_timer
                  |L4.392|
                          DCD      DH_data_timer
                  |L4.396|
                          DCD      motorcycle_FWD_count
                  |L4.400|
                          DCD      tor_uphole
                  |L4.404|
                          DCD      tspe_uphole
                  |L4.408|
                          DCD      Motor_Current
                  |L4.412|
                          DCD      ctrl_current
                  |L4.416|
                          DCD      push_timer

                          AREA ||i.RectangleFill||, CODE, READONLY, ALIGN=2

                  RectangleFill PROC
;;;295    ********************************************************************************************************/
;;;296    void RectangleFill(uint16_t addr,uint16_t ltx,uint16_t lty,uint16_t rdx,uint16_t rdy,uint16_t color)//矩形填充
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;297    {
000004  b09a              SUB      sp,sp,#0x68
000006  4604              MOV      r4,r0
000008  460d              MOV      r5,r1
00000a  4616              MOV      r6,r2
00000c  461f              MOV      r7,r3
00000e  e9dd8922          LDRD     r8,r9,[sp,#0x88]
;;;298        uint8_t length = 17;
000012  f04f0a11          MOV      r10,#0x11
;;;299        uint8_t temp_buf[MAX_LCD_UART_CMD_LENGTH];
;;;300        temp_buf[0] = common_header[0];
000016  4824              LDR      r0,|L5.168|
000018  7800              LDRB     r0,[r0,#0]  ; common_header
00001a  f88d0004          STRB     r0,[sp,#4]
;;;301    		temp_buf[1] = common_header[1];
00001e  4822              LDR      r0,|L5.168|
000020  7840              LDRB     r0,[r0,#1]  ; common_header
000022  f88d0005          STRB     r0,[sp,#5]
;;;302        
;;;303        temp_buf[2] = length;
000026  f88da006          STRB     r10,[sp,#6]
;;;304        temp_buf[3] = CMD_WRITE_REG;
00002a  2082              MOVS     r0,#0x82
00002c  f88d0007          STRB     r0,[sp,#7]
;;;305        temp_buf[4] = addr >> 8;
000030  1220              ASRS     r0,r4,#8
000032  f88d0008          STRB     r0,[sp,#8]
;;;306        temp_buf[5] = addr;
000036  b2e0              UXTB     r0,r4
000038  f88d0009          STRB     r0,[sp,#9]
;;;307        temp_buf[6] = RECT_FILL_CMD >> 8;
00003c  2000              MOVS     r0,#0
00003e  f88d000a          STRB     r0,[sp,#0xa]
;;;308        temp_buf[7] = RECT_FILL_CMD;
000042  2004              MOVS     r0,#4
000044  f88d000b          STRB     r0,[sp,#0xb]
;;;309        temp_buf[8] = 0x00;
000048  2000              MOVS     r0,#0
00004a  f88d000c          STRB     r0,[sp,#0xc]
;;;310        temp_buf[9] = 0x01; // one rectangle once 
00004e  2001              MOVS     r0,#1
000050  f88d000d          STRB     r0,[sp,#0xd]
;;;311        
;;;312        temp_buf[10] = ltx >> 8;
000054  1228              ASRS     r0,r5,#8
000056  f88d000e          STRB     r0,[sp,#0xe]
;;;313        temp_buf[11] = ltx;
00005a  b2e8              UXTB     r0,r5
00005c  f88d000f          STRB     r0,[sp,#0xf]
;;;314        temp_buf[12] = lty >> 8;
000060  1230              ASRS     r0,r6,#8
000062  f88d0010          STRB     r0,[sp,#0x10]
;;;315        temp_buf[13] = lty;
000066  b2f0              UXTB     r0,r6
000068  f88d0011          STRB     r0,[sp,#0x11]
;;;316        temp_buf[14] = rdx >> 8;
00006c  1238              ASRS     r0,r7,#8
00006e  f88d0012          STRB     r0,[sp,#0x12]
;;;317        temp_buf[15] = rdx;
000072  b2f8              UXTB     r0,r7
000074  f88d0013          STRB     r0,[sp,#0x13]
;;;318        temp_buf[16] = rdy >> 8;
000078  ea4f2028          ASR      r0,r8,#8
00007c  f88d0014          STRB     r0,[sp,#0x14]
;;;319        temp_buf[17] = rdy;
000080  f00800ff          AND      r0,r8,#0xff
000084  f88d0015          STRB     r0,[sp,#0x15]
;;;320        
;;;321        temp_buf[18] = color >> 8;
000088  ea4f2029          ASR      r0,r9,#8
00008c  f88d0016          STRB     r0,[sp,#0x16]
;;;322        temp_buf[19] = color;
000090  f00900ff          AND      r0,r9,#0xff
000094  f88d0017          STRB     r0,[sp,#0x17]
;;;323        
;;;324        comSendBuf(COM3,temp_buf,20);
000098  2214              MOVS     r2,#0x14
00009a  a901              ADD      r1,sp,#4
00009c  2002              MOVS     r0,#2
00009e  f7fffffe          BL       comSendBuf
;;;325    }
0000a2  b01a              ADD      sp,sp,#0x68
0000a4  e8bd87f0          POP      {r4-r10,pc}
;;;326    /**********************************************************************************************************
                          ENDP

                  |L5.168|
                          DCD      common_header

                          AREA ||i.RefreshNumber||, CODE, READONLY, ALIGN=2

                  RefreshNumber PROC
;;;214    *****************************************************************************/
;;;215    void RefreshNumber(uint16_t addr,uint16_t number) ///刷新数据   A5 /5A / 数据长度（写寄存器+地址+数据）/ 82（写）/地址/数据 
000000  b5f0              PUSH     {r4-r7,lr}
;;;216    {
000002  b099              SUB      sp,sp,#0x64
000004  4606              MOV      r6,r0
000006  460d              MOV      r5,r1
;;;217    	if(number > 65535)
000008  f5b53f80          CMP      r5,#0x10000
00000c  db01              BLT      |L6.18|
;;;218        {
;;;219          number = 65535;
00000e  f64f75ff          MOV      r5,#0xffff
                  |L6.18|
;;;220        }
;;;221    		uint8_t len = 0;
000012  2400              MOVS     r4,#0
;;;222        uint8_t length = 5;
000014  2705              MOVS     r7,#5
;;;223        uint8_t temp_buf[MAX_LCD_UART_CMD_LENGTH];
;;;224    		temp_buf[len++] = common_header[0];
000016  481c              LDR      r0,|L6.136|
000018  7802              LDRB     r2,[r0,#0]  ; common_header
00001a  4621              MOV      r1,r4
00001c  1c64              ADDS     r4,r4,#1
00001e  f80d2001          STRB     r2,[sp,r1]
;;;225    		temp_buf[len++] = common_header[1]; 
000022  7842              LDRB     r2,[r0,#1]  ; common_header
000024  4621              MOV      r1,r4
000026  1c64              ADDS     r4,r4,#1
000028  f80d2001          STRB     r2,[sp,r1]
;;;226        temp_buf[len++] = length;//数据长度
00002c  4621              MOV      r1,r4
00002e  1c64              ADDS     r4,r4,#1
000030  f80d7001          STRB     r7,[sp,r1]
;;;227        temp_buf[len++] = CMD_WRITE_REG;   //0x82(写)
000034  2282              MOVS     r2,#0x82
000036  4621              MOV      r1,r4
000038  1c64              ADDS     r4,r4,#1
00003a  f80d2001          STRB     r2,[sp,r1]
;;;228        temp_buf[len++] = addr >> 8;
00003e  1232              ASRS     r2,r6,#8
000040  4621              MOV      r1,r4
000042  1c64              ADDS     r4,r4,#1
000044  f80d2001          STRB     r2,[sp,r1]
;;;229        temp_buf[len++] = addr;
000048  b2f2              UXTB     r2,r6
00004a  4621              MOV      r1,r4
00004c  1c64              ADDS     r4,r4,#1
00004e  f80d2001          STRB     r2,[sp,r1]
;;;230        temp_buf[len++] = number >> 8;
000052  122a              ASRS     r2,r5,#8
000054  4621              MOV      r1,r4
000056  1c64              ADDS     r4,r4,#1
000058  f80d2001          STRB     r2,[sp,r1]
;;;231        temp_buf[len++] = number;    
00005c  b2ea              UXTB     r2,r5
00005e  4620              MOV      r0,r4
000060  1c61              ADDS     r1,r4,#1
000062  b2cc              UXTB     r4,r1
000064  f80d2000          STRB     r2,[sp,r0]
;;;232    		comSendBuf(COM3,temp_buf,len);
000068  4622              MOV      r2,r4
00006a  4669              MOV      r1,sp
00006c  2002              MOVS     r0,#2
00006e  f7fffffe          BL       comSendBuf
;;;233    		for(uint8_t i = 0;i < len;i++)//清空数组
000072  2000              MOVS     r0,#0
000074  e004              B        |L6.128|
                  |L6.118|
;;;234    			{
;;;235    				temp_buf[i] = 0;
000076  2100              MOVS     r1,#0
000078  f80d1000          STRB     r1,[sp,r0]
00007c  1c41              ADDS     r1,r0,#1              ;233
00007e  b2c8              UXTB     r0,r1                 ;233
                  |L6.128|
000080  42a0              CMP      r0,r4                 ;233
000082  dbf8              BLT      |L6.118|
;;;236    			}
;;;237    		
;;;238    }
000084  b019              ADD      sp,sp,#0x64
000086  bdf0              POP      {r4-r7,pc}
;;;239    /*****************************************************************************
                          ENDP

                  |L6.136|
                          DCD      common_header

                          AREA ||i.RefreshText||, CODE, READONLY, ALIGN=2

                  RefreshText PROC
;;;245    *****************************************************************************/
;;;246    uint8_t RefreshText(uint16_t addr,char * p_string,uint16_t color_addr,uint16_t color)//刷新文本  A5 5A 
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;247    {
000004  b0b2              SUB      sp,sp,#0xc8
000006  4680              MOV      r8,r0
000008  460e              MOV      r6,r1
00000a  4691              MOV      r9,r2
00000c  469a              MOV      r10,r3
;;;248        uint8_t length,string_length,i;
;;;249        uint8_t temp_buf[MAX_LCD_UART_CMD_LENGTH];
;;;250        uint8_t color_buf[MAX_LCD_UART_CMD_LENGTH];
;;;251        temp_buf[0] = common_header[0];
00000e  4832              LDR      r0,|L7.216|
000010  7800              LDRB     r0,[r0,#0]  ; common_header
000012  f88d0064          STRB     r0,[sp,#0x64]
;;;252    		temp_buf[1] = common_header[1];
000016  4830              LDR      r0,|L7.216|
000018  7840              LDRB     r0,[r0,#1]  ; common_header
00001a  f88d0065          STRB     r0,[sp,#0x65]
;;;253        
;;;254        if(p_string == X_Null) {return X_False;}
00001e  b91e              CBNZ     r6,|L7.40|
000020  2000              MOVS     r0,#0
                  |L7.34|
;;;255        string_length = strlen(p_string);
;;;256        if(string_length == 0 || string_length > (MAX_LCD_UART_CMD_LENGTH - 30)) {return X_False;}
;;;257        
;;;258        temp_buf[3] = CMD_WRITE_REG;
;;;259        temp_buf[4] = addr >> 8;
;;;260        temp_buf[5] = (uint8_t)addr;
;;;261        
;;;262        for(i=0;i<string_length;i++)
;;;263    			{
;;;264    				temp_buf[6+i] = p_string[i]; //填充文本low normal warning
;;;265    			}
;;;266        
;;;267        length = 5 + i;
;;;268        
;;;269        /************************************************************************************/
;;;270        color_buf[0] = common_header[0];
;;;271    		color_buf[1] = common_header[1];
;;;272        color_buf[2] = 5;
;;;273        color_buf[3] = CMD_WRITE_REG;
;;;274        color_buf[4] = (color_addr + 3) >> 8;
;;;275        color_buf[5] = (uint8_t)(color_addr + 3);
;;;276        color_buf[6] = color >> 8;
;;;277        color_buf[7] = color;
;;;278    		comSendBuf(COM3,color_buf,8);
;;;279        /************************************************************************************/
;;;280        
;;;281        if((length + 3) <= MAX_LCD_UART_CMD_LENGTH)
;;;282        {
;;;283            temp_buf[2] = length;  
;;;284            temp_buf[length + 3 - 2] = 0xFF;
;;;285            temp_buf[length + 4 - 2] = 0xFF;
;;;286            comSendBuf(COM3,temp_buf,length + 3);
;;;287        }
;;;288    		return X_False;
;;;289    }
000022  b032              ADD      sp,sp,#0xc8
000024  e8bd87f0          POP      {r4-r10,pc}
                  |L7.40|
000028  4630              MOV      r0,r6                 ;255
00002a  f7fffffe          BL       strlen
00002e  b2c7              UXTB     r7,r0                 ;255
000030  b10f              CBZ      r7,|L7.54|
000032  2f46              CMP      r7,#0x46              ;256
000034  dd01              BLE      |L7.58|
                  |L7.54|
000036  2000              MOVS     r0,#0                 ;256
000038  e7f3              B        |L7.34|
                  |L7.58|
00003a  2082              MOVS     r0,#0x82              ;258
00003c  f88d0067          STRB     r0,[sp,#0x67]         ;258
000040  ea4f2028          ASR      r0,r8,#8              ;259
000044  f88d0068          STRB     r0,[sp,#0x68]         ;259
000048  f00800ff          AND      r0,r8,#0xff           ;260
00004c  f88d0069          STRB     r0,[sp,#0x69]         ;260
000050  2500              MOVS     r5,#0                 ;262
000052  e005              B        |L7.96|
                  |L7.84|
000054  5d71              LDRB     r1,[r6,r5]            ;264
000056  1da8              ADDS     r0,r5,#6              ;264
000058  aa19              ADD      r2,sp,#0x64           ;264
00005a  5411              STRB     r1,[r2,r0]            ;264
00005c  1c68              ADDS     r0,r5,#1              ;262
00005e  b2c5              UXTB     r5,r0                 ;262
                  |L7.96|
000060  42bd              CMP      r5,r7                 ;262
000062  dbf7              BLT      |L7.84|
000064  1d68              ADDS     r0,r5,#5              ;267
000066  b2c4              UXTB     r4,r0                 ;267
000068  481b              LDR      r0,|L7.216|
00006a  7800              LDRB     r0,[r0,#0]            ;270  ; common_header
00006c  f88d0000          STRB     r0,[sp,#0]            ;270
000070  4819              LDR      r0,|L7.216|
000072  7840              LDRB     r0,[r0,#1]            ;271  ; common_header
000074  f88d0001          STRB     r0,[sp,#1]            ;271
000078  2005              MOVS     r0,#5                 ;272
00007a  f88d0002          STRB     r0,[sp,#2]            ;272
00007e  2082              MOVS     r0,#0x82              ;273
000080  f88d0003          STRB     r0,[sp,#3]            ;273
000084  f1090003          ADD      r0,r9,#3              ;274
000088  0a00              LSRS     r0,r0,#8              ;274
00008a  f88d0004          STRB     r0,[sp,#4]            ;274
00008e  f1090003          ADD      r0,r9,#3              ;275
000092  b2c0              UXTB     r0,r0                 ;275
000094  f88d0005          STRB     r0,[sp,#5]            ;275
000098  ea4f202a          ASR      r0,r10,#8             ;276
00009c  f88d0006          STRB     r0,[sp,#6]            ;276
0000a0  f00a00ff          AND      r0,r10,#0xff          ;277
0000a4  f88d0007          STRB     r0,[sp,#7]            ;277
0000a8  2208              MOVS     r2,#8                 ;278
0000aa  4669              MOV      r1,sp                 ;278
0000ac  2002              MOVS     r0,#2                 ;278
0000ae  f7fffffe          BL       comSendBuf
0000b2  1ce0              ADDS     r0,r4,#3              ;281
0000b4  2864              CMP      r0,#0x64              ;281
0000b6  dc0c              BGT      |L7.210|
0000b8  f88d4066          STRB     r4,[sp,#0x66]         ;283
0000bc  21ff              MOVS     r1,#0xff              ;284
0000be  1c60              ADDS     r0,r4,#1              ;284
0000c0  aa19              ADD      r2,sp,#0x64           ;284
0000c2  5411              STRB     r1,[r2,r0]            ;284
0000c4  1ca0              ADDS     r0,r4,#2              ;285
0000c6  5411              STRB     r1,[r2,r0]            ;285
0000c8  1ce2              ADDS     r2,r4,#3              ;286
0000ca  a919              ADD      r1,sp,#0x64           ;286
0000cc  2002              MOVS     r0,#2                 ;286
0000ce  f7fffffe          BL       comSendBuf
                  |L7.210|
0000d2  2000              MOVS     r0,#0                 ;288
0000d4  e7a5              B        |L7.34|
;;;290    /**********************************************************************************************************
                          ENDP

0000d6  0000              DCW      0x0000
                  |L7.216|
                          DCD      common_header

                          AREA ||i.ResetLCD||, CODE, READONLY, ALIGN=1

                  ResetLCD PROC
;;;87     ****************************************************************/
;;;88     void ResetLCD(void)  
000000  b51c              PUSH     {r2-r4,lr}
;;;89     {  
;;;90     	//清空数据
;;;91         RefreshNumber(TEMPERATURE1_ADDR,0);
000002  2100              MOVS     r1,#0
000004  f44f6001          MOV      r0,#0x810
000008  f7fffffe          BL       RefreshNumber
;;;92         RefreshNumber(TEMPERATURE2_ADDR,0);
00000c  2100              MOVS     r1,#0
00000e  f44f6005          MOV      r0,#0x850
000012  f7fffffe          BL       RefreshNumber
;;;93         RefreshNumber(TEMPERATURE3_ADDR,0);
000016  2100              MOVS     r1,#0
000018  f44f6004          MOV      r0,#0x840
00001c  f7fffffe          BL       RefreshNumber
;;;94         RefreshNumber(TEMPERATURE4_ADDR,0);
000020  2100              MOVS     r1,#0
000022  f44f6003          MOV      r0,#0x830
000026  f7fffffe          BL       RefreshNumber
;;;95         RefreshNumber(TEMPERATURE5_ADDR,0);
00002a  2100              MOVS     r1,#0
00002c  f44f60ae          MOV      r0,#0x570
000030  f7fffffe          BL       RefreshNumber
;;;96         RefreshNumber(TEMPERATURE_BOARD_ADDR,0);
000034  2100              MOVS     r1,#0
000036  f44f6002          MOV      r0,#0x820
00003a  f7fffffe          BL       RefreshNumber
;;;97         
;;;98         RefreshNumber(AC_VOLTAGE_ADDR,0);
00003e  2100              MOVS     r1,#0
000040  f44f60c4          MOV      r0,#0x620
000044  f7fffffe          BL       RefreshNumber
;;;99         RefreshNumber(CABLE_VOLTAGE_ADDR,0);
000048  2100              MOVS     r1,#0
00004a  f44f60c6          MOV      r0,#0x630
00004e  f7fffffe          BL       RefreshNumber
;;;100    	   /*新增补充的*/
;;;101    		RefreshNumber(CABLE_VOLTAGE_ADDR,0);
000052  2100              MOVS     r1,#0
000054  f44f60c6          MOV      r0,#0x630
000058  f7fffffe          BL       RefreshNumber
;;;102    		RefreshNumber(MOTOR_CYCLE_ADDR,0);
00005c  2100              MOVS     r1,#0
00005e  f44f7088          MOV      r0,#0x110
000062  f7fffffe          BL       RefreshNumber
;;;103        RefreshNumber(VARIABLE_FREQ_ADDR,0);
000066  2100              MOVS     r1,#0
000068  f44f407f          MOV      r0,#0xff00
00006c  f7fffffe          BL       RefreshNumber
;;;104    		RefreshNumber(VARIABLE_FREQ_MACHINE_BOX_TEMPERATURE_ADDR,0);
000070  2100              MOVS     r1,#0
000072  f44f5040          MOV      r0,#0x3000
000076  f7fffffe          BL       RefreshNumber
;;;105        RefreshNumber(CABLE_CURRENT_ADDR,0);
00007a  2100              MOVS     r1,#0
00007c  f44f6006          MOV      r0,#0x860
000080  f7fffffe          BL       RefreshNumber
;;;106    		RefreshNumber(MOTOR_CURRENT_ADDR,0);
000084  2100              MOVS     r1,#0
000086  f44f7014          MOV      r0,#0x250
00008a  f7fffffe          BL       RefreshNumber
;;;107        RefreshNumber(CABLE_LENGTH_ADDR,0);
00008e  2100              MOVS     r1,#0
000090  f44f7090          MOV      r0,#0x120
000094  f7fffffe          BL       RefreshNumber
;;;108    	
;;;109        RefreshNumber(BIG_PUMP_ADDR,0);
000098  2100              MOVS     r1,#0
00009a  f44f60f2          MOV      r0,#0x790
00009e  f7fffffe          BL       RefreshNumber
;;;110        RefreshNumber(PUSH_PRESSURE_ADDR,0);
0000a2  2100              MOVS     r1,#0
0000a4  f44f60b2          MOV      r0,#0x590
0000a8  f7fffffe          BL       RefreshNumber
;;;111        RefreshNumber(SMALL_PUMP_ADDR,0);
0000ac  2100              MOVS     r1,#0
0000ae  f44f60c0          MOV      r0,#0x600
0000b2  f7fffffe          BL       RefreshNumber
;;;112        
;;;113        RefreshNumber(BIT_PROCESS_DISPLACEMENT,0);
0000b6  2100              MOVS     r1,#0
0000b8  f44f60ce          MOV      r0,#0x670
0000bc  f7fffffe          BL       RefreshNumber
;;;114        RefreshNumber(OIL_POSITION_DISPLACEMENT,0);
0000c0  2100              MOVS     r1,#0
0000c2  f44f60cc          MOV      r0,#0x660
0000c6  f7fffffe          BL       RefreshNumber
;;;115        RefreshNumber(CORE_LENGTH_DISPLACEMENT,0);
0000ca  2100              MOVS     r1,#0
0000cc  f44f6000          MOV      r0,#0x800
0000d0  f7fffffe          BL       RefreshNumber
;;;116        
;;;117        RefreshNumber(GMMA_ADDR,0);
0000d4  2100              MOVS     r1,#0
0000d6  f44f60b0          MOV      r0,#0x580
0000da  f7fffffe          BL       RefreshNumber
;;;118        RefreshNumber(TENSION_ADDR,0);
0000de  2100              MOVS     r1,#0
0000e0  f44f60ca          MOV      r0,#0x650
0000e4  f7fffffe          BL       RefreshNumber
;;;119        RefreshNumber(ERROR_CODE_ADDR,0);
0000e8  2100              MOVS     r1,#0
0000ea  f44f60a2          MOV      r0,#0x510
0000ee  f7fffffe          BL       RefreshNumber
;;;120        RefreshNumber(TIME_OUT_ADDR,0);
0000f2  2100              MOVS     r1,#0
0000f4  f44f60a4          MOV      r0,#0x520
0000f8  f7fffffe          BL       RefreshNumber
;;;121        
;;;122        RefreshNumber(HOUR_ADDR,0);
0000fc  2100              MOVS     r1,#0
0000fe  f44f60d0          MOV      r0,#0x680
000102  f7fffffe          BL       RefreshNumber
;;;123        RefreshNumber(MINUTE_ADDR,0);
000106  2100              MOVS     r1,#0
000108  f44f60d2          MOV      r0,#0x690
00010c  f7fffffe          BL       RefreshNumber
;;;124        RefreshNumber(SECOND_ADDR,0); 
000110  2100              MOVS     r1,#0
000112  f44f60e2          MOV      r0,#0x710
000116  f7fffffe          BL       RefreshNumber
;;;125    		
;;;126    		Text_ResetLCD();//清空文本
00011a  f7fffffe          BL       Text_ResetLCD
;;;127    		//清空进度条，按键的矩形填充保留
;;;128    		/*钻进*/
;;;129    		RectangleFill(PROCESS_BAR_UP_ADDR,
00011e  f64a70ff          MOV      r0,#0xafff
000122  11c1              ASRS     r1,r0,#7
000124  238b              MOVS     r3,#0x8b
000126  460a              MOV      r2,r1
000128  e9cd1000          STRD     r1,r0,[sp,#0]
00012c  4619              MOV      r1,r3
00012e  f44f4050          MOV      r0,#0xd000
000132  f7fffffe          BL       RectangleFill
;;;130                        PB_UP_LT_POSITION_X,PB_UP_LT_POSITION_Y,
;;;131                        PB_UP_LT_POSITION_X,PB_UP_LT_POSITION_Y,
;;;132                        COLOR_LIGHT_BLUE);
;;;133    		/*心长*/								
;;;134    		RectangleFill(PROCESS_BAR_MIDDLE_ADDR,
000136  f64a70ff          MOV      r0,#0xafff
00013a  f2401187          MOV      r1,#0x187
00013e  238b              MOVS     r3,#0x8b
000140  460a              MOV      r2,r1
000142  e9cd1000          STRD     r1,r0,[sp,#0]
000146  4619              MOV      r1,r3
000148  1c40              ADDS     r0,r0,#1
00014a  f7fffffe          BL       RectangleFill
;;;135                        PB_MIDDLE_LT_POSITION_X,PB_MIDDLE_LT_POSITION_Y,
;;;136                        PB_MIDDLE_LT_POSITION_X,PB_MIDDLE_LT_POSITION_Y,
;;;137                        COLOR_LIGHT_BLUE);
;;;138    		
;;;139    }
00014e  bd1c              POP      {r2-r4,pc}
;;;140    
                          ENDP


                          AREA ||i.Text_ResetLCD||, CODE, READONLY, ALIGN=2

                  Text_ResetLCD PROC
;;;201    ****************************************************************/
;;;202    void Text_ResetLCD(void)
000000  b510              PUSH     {r4,lr}
;;;203    {
;;;204    	RefreshText(TEXT_CORE_LENGTH_ADDR,"low",TEXT_CORE_LENGTH_POINTER_ADDR,COLOR_BLUE);
000002  231f              MOVS     r3,#0x1f
000004  f44f7280          MOV      r2,#0x100
000008  a105              ADR      r1,|L9.32|
00000a  2001              MOVS     r0,#1
00000c  f7fffffe          BL       RefreshText
;;;205    	RefreshText(TEXT_BIT_PROCESS_ADDR,"low",TEXT_BIT_PROCESS_POINTER_ADDR,COLOR_BLUE);
000010  231f              MOVS     r3,#0x1f
000012  f44f7240          MOV      r2,#0x300
000016  a102              ADR      r1,|L9.32|
000018  2021              MOVS     r0,#0x21
00001a  f7fffffe          BL       RefreshText
;;;206    }
00001e  bd10              POP      {r4,pc}
;;;207    
                          ENDP

                  |L9.32|
000020  6c6f7700          DCB      "low",0

                          AREA ||i.Timeout_ResetLCD||, CODE, READONLY, ALIGN=1

                  Timeout_ResetLCD PROC
;;;147    extern uint8_t resetLCD_flag;
;;;148    void Timeout_ResetLCD(void)  
000000  b51c              PUSH     {r2-r4,lr}
;;;149    {  
;;;150    		
;;;151    	//清井下数据
;;;152        RefreshNumber(TEMPERATURE1_ADDR,0);// 电子节外部温度
000002  2100              MOVS     r1,#0
000004  f44f6001          MOV      r0,#0x810
000008  f7fffffe          BL       RefreshNumber
;;;153        RefreshNumber(TEMPERATURE2_ADDR,0);// 步进电机驱动温度
00000c  2100              MOVS     r1,#0
00000e  f44f6005          MOV      r0,#0x850
000012  f7fffffe          BL       RefreshNumber
;;;154        RefreshNumber(TEMPERATURE3_ADDR,0);// 液压节电机温度
000016  2100              MOVS     r1,#0
000018  f44f6004          MOV      r0,#0x840
00001c  f7fffffe          BL       RefreshNumber
;;;155        RefreshNumber(TEMPERATURE4_ADDR,0);// 泵液压油温度
000020  2100              MOVS     r1,#0
000022  f44f6003          MOV      r0,#0x830
000026  f7fffffe          BL       RefreshNumber
;;;156        RefreshNumber(TEMPERATURE5_ADDR,0);// 3981温度
00002a  2100              MOVS     r1,#0
00002c  f44f60ae          MOV      r0,#0x570
000030  f7fffffe          BL       RefreshNumber
;;;157        RefreshNumber(TEMPERATURE_BOARD_ADDR,0);// 保温瓶内部温度
000034  2100              MOVS     r1,#0
000036  f44f6002          MOV      r0,#0x820
00003a  f7fffffe          BL       RefreshNumber
;;;158        
;;;159    
;;;160    	
;;;161        RefreshNumber(AC_VOLTAGE_ADDR,0);//井下电机电压
00003e  2100              MOVS     r1,#0
000040  f44f60c4          MOV      r0,#0x620
000044  f7fffffe          BL       RefreshNumber
;;;162        RefreshNumber(CABLE_VOLTAGE_ADDR,0);//控制电压
000048  2100              MOVS     r1,#0
00004a  f44f60c6          MOV      r0,#0x630
00004e  f7fffffe          BL       RefreshNumber
;;;163        
;;;164        RefreshNumber(BIG_PUMP_ADDR,0);//小泵压力
000052  2100              MOVS     r1,#0
000054  f44f60f2          MOV      r0,#0x790
000058  f7fffffe          BL       RefreshNumber
;;;165        RefreshNumber(PUSH_PRESSURE_ADDR,0);//大泵压力
00005c  2100              MOVS     r1,#0
00005e  f44f60b2          MOV      r0,#0x590
000062  f7fffffe          BL       RefreshNumber
;;;166        RefreshNumber(SMALL_PUMP_ADDR,0);//推靠压力
000066  2100              MOVS     r1,#0
000068  f44f60c0          MOV      r0,#0x600
00006c  f7fffffe          BL       RefreshNumber
;;;167        
;;;168        RefreshNumber(BIT_PROCESS_DISPLACEMENT,0);//钻进位移
000070  2100              MOVS     r1,#0
000072  f44f60ce          MOV      r0,#0x670
000076  f7fffffe          BL       RefreshNumber
;;;169    		RefreshNumber(OIL_POSITION_DISPLACEMENT,0);//油位位移
00007a  2100              MOVS     r1,#0
00007c  f44f60cc          MOV      r0,#0x660
000080  f7fffffe          BL       RefreshNumber
;;;170        RefreshNumber(CORE_LENGTH_DISPLACEMENT,0);//心长位移
000084  2100              MOVS     r1,#0
000086  f44f6000          MOV      r0,#0x800
00008a  f7fffffe          BL       RefreshNumber
;;;171        
;;;172        RefreshNumber(GMMA_ADDR,0);//伽马
00008e  2100              MOVS     r1,#0
000090  f44f60b0          MOV      r0,#0x580
000094  f7fffffe          BL       RefreshNumber
;;;173        RefreshNumber(TENSION_ADDR,0);//张力
000098  2100              MOVS     r1,#0
00009a  f44f60ca          MOV      r0,#0x650
00009e  f7fffffe          BL       RefreshNumber
;;;174    //////////    RefreshNumber(ERROR_CODE_ADDR,0);
;;;175    //////////    RefreshNumber(TIME_OUT_ADDR,0);
;;;176    		
;;;177        RefreshNumber(MOTOR_CYCLE_ADDR,0);//步进电机转数
0000a2  2100              MOVS     r1,#0
0000a4  f44f7088          MOV      r0,#0x110
0000a8  f7fffffe          BL       RefreshNumber
;;;178        RefreshNumber(HOUR_ADDR,0);//时分秒
0000ac  2100              MOVS     r1,#0
0000ae  f44f60d0          MOV      r0,#0x680
0000b2  f7fffffe          BL       RefreshNumber
;;;179        RefreshNumber(MINUTE_ADDR,0);
0000b6  2100              MOVS     r1,#0
0000b8  f44f60d2          MOV      r0,#0x690
0000bc  f7fffffe          BL       RefreshNumber
;;;180        RefreshNumber(SECOND_ADDR,0);
0000c0  2100              MOVS     r1,#0
0000c2  f44f60e2          MOV      r0,#0x710
0000c6  f7fffffe          BL       RefreshNumber
;;;181        //清空进度条
;;;182    		/*钻进*/
;;;183    		RectangleFill(PROCESS_BAR_UP_ADDR,
0000ca  f64a70ff          MOV      r0,#0xafff
0000ce  11c1              ASRS     r1,r0,#7
0000d0  238b              MOVS     r3,#0x8b
0000d2  460a              MOV      r2,r1
0000d4  e9cd1000          STRD     r1,r0,[sp,#0]
0000d8  4619              MOV      r1,r3
0000da  f44f4050          MOV      r0,#0xd000
0000de  f7fffffe          BL       RectangleFill
;;;184                        PB_UP_LT_POSITION_X,PB_UP_LT_POSITION_Y,
;;;185                        PB_UP_LT_POSITION_X,PB_UP_LT_POSITION_Y,
;;;186                        COLOR_LIGHT_BLUE);
;;;187    		/*心长*/								
;;;188    		RectangleFill(PROCESS_BAR_MIDDLE_ADDR,
0000e2  f64a70ff          MOV      r0,#0xafff
0000e6  f2401187          MOV      r1,#0x187
0000ea  238b              MOVS     r3,#0x8b
0000ec  460a              MOV      r2,r1
0000ee  e9cd1000          STRD     r1,r0,[sp,#0]
0000f2  4619              MOV      r1,r3
0000f4  1c40              ADDS     r0,r0,#1
0000f6  f7fffffe          BL       RectangleFill
;;;189                        PB_MIDDLE_LT_POSITION_X,PB_MIDDLE_LT_POSITION_Y,
;;;190                        PB_MIDDLE_LT_POSITION_X,PB_MIDDLE_LT_POSITION_Y,
;;;191                        COLOR_LIGHT_BLUE);
;;;192    		//清空文本							
;;;193    		Text_ResetLCD();	
0000fa  f7fffffe          BL       Text_ResetLCD
;;;194    	
;;;195    }
0000fe  bd1c              POP      {r2-r4,pc}
;;;196    /*************************************************************
                          ENDP


                          AREA ||i.VGUS_Init||, CODE, READONLY, ALIGN=1

                  VGUS_Init PROC
;;;677    
;;;678    void VGUS_Init(void)
000000  b510              PUSH     {r4,lr}
;;;679    {
;;;680    	ResetLCD();
000002  f7fffffe          BL       ResetLCD
;;;681    }
000006  bd10              POP      {r4,pc}
                          ENDP


                          AREA ||i.bit_processHandle||, CODE, READONLY, ALIGN=1

                  bit_processHandle PROC
;;;373    
;;;374    static void bit_processHandle(uint16_t bit_process_value) //钻进 淡蓝
000000  b57c              PUSH     {r2-r6,lr}
;;;375    {
000002  4604              MOV      r4,r0
;;;376        uint32_t process;
;;;377        if(bit_process_value >= BIT_PROCESS_LIMIT) {process = PB_UP_LENGTH;}
000004  2cff              CMP      r4,#0xff
000006  db01              BLT      |L12.12|
000008  25ec              MOVS     r5,#0xec
00000a  e005              B        |L12.24|
                  |L12.12|
;;;378        else{
;;;379            process = PB_UP_LENGTH * bit_process_value;
00000c  20ec              MOVS     r0,#0xec
00000e  fb04f500          MUL      r5,r4,r0
;;;380            process/= BIT_PROCESS_LIMIT;
000012  20ff              MOVS     r0,#0xff
000014  fbb5f5f0          UDIV     r5,r5,r0
                  |L12.24|
;;;381        }
;;;382        RectangleFill(PROCESS_BAR_UP_ADDR,
000018  200e              MOVS     r0,#0xe
00001a  f240117f          MOV      r1,#0x17f
00001e  e9cd1000          STRD     r1,r0,[sp,#0]
000022  f105008b          ADD      r0,r5,#0x8b
000026  b283              UXTH     r3,r0
000028  f240125f          MOV      r2,#0x15f
00002c  218b              MOVS     r1,#0x8b
00002e  f44f4050          MOV      r0,#0xd000
000032  f7fffffe          BL       RectangleFill
;;;383                        PB_UP_LT_POSITION_X,PB_UP_LT_POSITION_Y,
;;;384                        PB_UP_LT_POSITION_X + process,PB_UP_LT_POSITION_Y + PB_UP_WIDTH,
;;;385                        COLOR_DEEP_BLUE);
;;;386    }
000036  bd7c              POP      {r2-r6,pc}
;;;387    
                          ENDP


                          AREA ||i.core_lengthHandle||, CODE, READONLY, ALIGN=1

                  core_lengthHandle PROC
;;;387    
;;;388    static void core_lengthHandle(uint16_t core_length_value) //心长 绿
000000  b57c              PUSH     {r2-r6,lr}
;;;389    {
000002  4604              MOV      r4,r0
;;;390        uint32_t process;
;;;391        if(core_length_value >= CORE_LENGTH_LIMIT) {process = PB_MIDDLE_LENGTH;}
000004  2c4b              CMP      r4,#0x4b
000006  db01              BLT      |L13.12|
000008  25ec              MOVS     r5,#0xec
00000a  e005              B        |L13.24|
                  |L13.12|
;;;392        else
;;;393    			{
;;;394            process = PB_MIDDLE_LENGTH * core_length_value;
00000c  20ec              MOVS     r0,#0xec
00000e  fb04f500          MUL      r5,r4,r0
;;;395            process/= CORE_LENGTH_LIMIT;
000012  204b              MOVS     r0,#0x4b
000014  fbb5f5f0          UDIV     r5,r5,r0
                  |L13.24|
;;;396    			}
;;;397        RectangleFill(PROCESS_BAR_MIDDLE_ADDR,
000018  f44f60fc          MOV      r0,#0x7e0
00001c  f24011a7          MOV      r1,#0x1a7
000020  e9cd1000          STRD     r1,r0,[sp,#0]
000024  f105008b          ADD      r0,r5,#0x8b
000028  b283              UXTH     r3,r0
00002a  f2401287          MOV      r2,#0x187
00002e  218b              MOVS     r1,#0x8b
000030  f44f4030          MOV      r0,#0xb000
000034  f7fffffe          BL       RectangleFill
;;;398                        PB_MIDDLE_LT_POSITION_X,PB_MIDDLE_LT_POSITION_Y,
;;;399                        PB_MIDDLE_LT_POSITION_X + process,PB_MIDDLE_LT_POSITION_Y + PB_MIDDLE_WIDTH,
;;;400                        COLOR_GREEN);
;;;401    }
000038  bd7c              POP      {r2-r6,pc}
;;;402    void onDisplacementUpdata_Rect(void)/////心长，钻进 矩形填充
                          ENDP


                          AREA ||i.onButtonUpdata_Rect||, CODE, READONLY, ALIGN=2

                  onButtonUpdata_Rect PROC
;;;546    
;;;547    void onButtonUpdata_Rect(uint8_t id,uint16_t temp,uint16_t lcd_color)//按键动作，上下行色块变化
000000  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;548    {
000004  b088              SUB      sp,sp,#0x20
000006  4604              MOV      r4,r0
;;;549    	uint16_t addr = 0,x,y,rx,ry,color;
000008  2000              MOVS     r0,#0
00000a  9007              STR      r0,[sp,#0x1c]
;;;550    	uint16_t addr1 = 0,x1,y1,rx1,ry1,color1;
00000c  9006              STR      r0,[sp,#0x18]
;;;551    	if(temp == open)////按键按下，上排先变绿，下排清色，反之，按下弹起，下排变绿，上排清色
00000e  9809              LDR      r0,[sp,#0x24]
000010  2801              CMP      r0,#1
000012  d141              BNE      |L14.152|
;;;552        {
;;;553            addr    = button_table[id][0].addr;
000014  eb040044          ADD      r0,r4,r4,LSL #1
000018  4971              LDR      r1,|L14.480|
00001a  f8310030          LDRH     r0,[r1,r0,LSL #3]
00001e  9007              STR      r0,[sp,#0x1c]
;;;554            x       = button_table[id][0].x;
000020  eb040044          ADD      r0,r4,r4,LSL #1
000024  eb0100c0          ADD      r0,r1,r0,LSL #3
000028  8845              LDRH     r5,[r0,#2]
;;;555            y       = button_table[id][0].y;
00002a  eb040044          ADD      r0,r4,r4,LSL #1
00002e  eb0100c0          ADD      r0,r1,r0,LSL #3
000032  8886              LDRH     r6,[r0,#4]
;;;556            rx      = button_table[id][0].x1;
000034  eb040044          ADD      r0,r4,r4,LSL #1
000038  eb0100c0          ADD      r0,r1,r0,LSL #3
00003c  88c7              LDRH     r7,[r0,#6]
;;;557            ry      = button_table[id][0].y1;
00003e  eb040044          ADD      r0,r4,r4,LSL #1
000042  eb0100c0          ADD      r0,r1,r0,LSL #3
000046  f8b08008          LDRH     r8,[r0,#8]
;;;558            color   = lcd_color;
00004a  f8dd9028          LDR      r9,[sp,#0x28]
;;;559            
;;;560            addr1   = button_table[id][1].addr;
00004e  eb040044          ADD      r0,r4,r4,LSL #1
000052  eb0100c0          ADD      r0,r1,r0,LSL #3
000056  8980              LDRH     r0,[r0,#0xc]
000058  9006              STR      r0,[sp,#0x18]
;;;561            x1      = button_table[id][1].x;
00005a  eb040044          ADD      r0,r4,r4,LSL #1
00005e  eb0100c0          ADD      r0,r1,r0,LSL #3
000062  f8b0a00e          LDRH     r10,[r0,#0xe]
;;;562            y1      = button_table[id][1].y;
000066  eb040044          ADD      r0,r4,r4,LSL #1
00006a  eb0100c0          ADD      r0,r1,r0,LSL #3
00006e  f8b0b010          LDRH     r11,[r0,#0x10]
;;;563            rx1     = button_table[id][1].x1;
000072  eb040044          ADD      r0,r4,r4,LSL #1
000076  eb0100c0          ADD      r0,r1,r0,LSL #3
00007a  8a40              LDRH     r0,[r0,#0x12]
00007c  9005              STR      r0,[sp,#0x14]
;;;564            ry1     = button_table[id][1].y1;
00007e  eb040044          ADD      r0,r4,r4,LSL #1
000082  eb0100c0          ADD      r0,r1,r0,LSL #3
000086  8a80              LDRH     r0,[r0,#0x14]
000088  9004              STR      r0,[sp,#0x10]
;;;565            color1  = button_table[id][1].default_color;
00008a  eb040044          ADD      r0,r4,r4,LSL #1
00008e  eb0100c0          ADD      r0,r1,r0,LSL #3
000092  8ac0              LDRH     r0,[r0,#0x16]
000094  9003              STR      r0,[sp,#0xc]
000096  e08a              B        |L14.430|
                  |L14.152|
;;;566        }
;;;567        else if(temp == close)
000098  9809              LDR      r0,[sp,#0x24]
00009a  bbe8              CBNZ     r0,|L14.280|
;;;568        {
;;;569            addr    = button_table[id][1].addr;
00009c  eb040044          ADD      r0,r4,r4,LSL #1
0000a0  494f              LDR      r1,|L14.480|
0000a2  eb0100c0          ADD      r0,r1,r0,LSL #3
0000a6  8980              LDRH     r0,[r0,#0xc]
0000a8  9007              STR      r0,[sp,#0x1c]
;;;570            x       = button_table[id][1].x;
0000aa  eb040044          ADD      r0,r4,r4,LSL #1
0000ae  eb0100c0          ADD      r0,r1,r0,LSL #3
0000b2  89c5              LDRH     r5,[r0,#0xe]
;;;571            y       = button_table[id][1].y;
0000b4  eb040044          ADD      r0,r4,r4,LSL #1
0000b8  eb0100c0          ADD      r0,r1,r0,LSL #3
0000bc  8a06              LDRH     r6,[r0,#0x10]
;;;572            rx     = button_table[id][1].x1;
0000be  eb040044          ADD      r0,r4,r4,LSL #1
0000c2  eb0100c0          ADD      r0,r1,r0,LSL #3
0000c6  8a47              LDRH     r7,[r0,#0x12]
;;;573            ry     = button_table[id][1].y1;
0000c8  eb040044          ADD      r0,r4,r4,LSL #1
0000cc  eb0100c0          ADD      r0,r1,r0,LSL #3
0000d0  f8b08014          LDRH     r8,[r0,#0x14]
;;;574            color   = lcd_color;
0000d4  f8dd9028          LDR      r9,[sp,#0x28]
;;;575            
;;;576            addr1    = button_table[id][0].addr;
0000d8  eb040044          ADD      r0,r4,r4,LSL #1
0000dc  f8310030          LDRH     r0,[r1,r0,LSL #3]
0000e0  9006              STR      r0,[sp,#0x18]
;;;577            x1       = button_table[id][0].x;
0000e2  eb040044          ADD      r0,r4,r4,LSL #1
0000e6  eb0100c0          ADD      r0,r1,r0,LSL #3
0000ea  f8b0a002          LDRH     r10,[r0,#2]
;;;578            y1       = button_table[id][0].y;
0000ee  eb040044          ADD      r0,r4,r4,LSL #1
0000f2  eb0100c0          ADD      r0,r1,r0,LSL #3
0000f6  f8b0b004          LDRH     r11,[r0,#4]
;;;579            rx1     = button_table[id][0].x1;
0000fa  eb040044          ADD      r0,r4,r4,LSL #1
0000fe  eb0100c0          ADD      r0,r1,r0,LSL #3
000102  88c0              LDRH     r0,[r0,#6]
000104  9005              STR      r0,[sp,#0x14]
;;;580            ry1      = button_table[id][0].y1;
000106  eb040044          ADD      r0,r4,r4,LSL #1
00010a  eb0100c0          ADD      r0,r1,r0,LSL #3
00010e  8900              LDRH     r0,[r0,#8]
000110  9004              STR      r0,[sp,#0x10]
;;;581            color1   = button_table[id][0].default_color;
000112  eb040044          ADD      r0,r4,r4,LSL #1
000116  e000              B        |L14.282|
                  |L14.280|
000118  e004              B        |L14.292|
                  |L14.282|
00011a  eb0100c0          ADD      r0,r1,r0,LSL #3
00011e  8940              LDRH     r0,[r0,#0xa]
000120  9003              STR      r0,[sp,#0xc]
000122  e044              B        |L14.430|
                  |L14.292|
;;;582            
;;;583            
;;;584        }
;;;585        else
;;;586        {
;;;587            addr    = button_table[id][0].addr;
000124  eb040044          ADD      r0,r4,r4,LSL #1
000128  492d              LDR      r1,|L14.480|
00012a  f8310030          LDRH     r0,[r1,r0,LSL #3]
00012e  9007              STR      r0,[sp,#0x1c]
;;;588            x       = button_table[id][0].x;
000130  eb040044          ADD      r0,r4,r4,LSL #1
000134  eb0100c0          ADD      r0,r1,r0,LSL #3
000138  8845              LDRH     r5,[r0,#2]
;;;589            y       = button_table[id][0].y;
00013a  eb040044          ADD      r0,r4,r4,LSL #1
00013e  eb0100c0          ADD      r0,r1,r0,LSL #3
000142  8886              LDRH     r6,[r0,#4]
;;;590            rx      = button_table[id][0].x1;
000144  eb040044          ADD      r0,r4,r4,LSL #1
000148  eb0100c0          ADD      r0,r1,r0,LSL #3
00014c  88c7              LDRH     r7,[r0,#6]
;;;591            ry      = button_table[id][0].y1;
00014e  eb040044          ADD      r0,r4,r4,LSL #1
000152  eb0100c0          ADD      r0,r1,r0,LSL #3
000156  f8b08008          LDRH     r8,[r0,#8]
;;;592            color   = button_table[id][0].default_color;
00015a  eb040044          ADD      r0,r4,r4,LSL #1
00015e  eb0100c0          ADD      r0,r1,r0,LSL #3
000162  f8b0900a          LDRH     r9,[r0,#0xa]
;;;593            
;;;594            addr1   = button_table[id][1].addr;
000166  eb040044          ADD      r0,r4,r4,LSL #1
00016a  eb0100c0          ADD      r0,r1,r0,LSL #3
00016e  8980              LDRH     r0,[r0,#0xc]
000170  9006              STR      r0,[sp,#0x18]
;;;595            x1      = button_table[id][1].x;
000172  eb040044          ADD      r0,r4,r4,LSL #1
000176  eb0100c0          ADD      r0,r1,r0,LSL #3
00017a  f8b0a00e          LDRH     r10,[r0,#0xe]
;;;596            y1      = button_table[id][1].y;
00017e  eb040044          ADD      r0,r4,r4,LSL #1
000182  eb0100c0          ADD      r0,r1,r0,LSL #3
000186  f8b0b010          LDRH     r11,[r0,#0x10]
;;;597            rx1     = button_table[id][1].x1;
00018a  eb040044          ADD      r0,r4,r4,LSL #1
00018e  eb0100c0          ADD      r0,r1,r0,LSL #3
000192  8a40              LDRH     r0,[r0,#0x12]
000194  9005              STR      r0,[sp,#0x14]
;;;598            ry1     = button_table[id][1].y1;
000196  eb040044          ADD      r0,r4,r4,LSL #1
00019a  eb0100c0          ADD      r0,r1,r0,LSL #3
00019e  8a80              LDRH     r0,[r0,#0x14]
0001a0  9004              STR      r0,[sp,#0x10]
;;;599            color1  = button_table[id][1].default_color;
0001a2  eb040044          ADD      r0,r4,r4,LSL #1
0001a6  eb0100c0          ADD      r0,r1,r0,LSL #3
0001aa  8ac0              LDRH     r0,[r0,#0x16]
0001ac  9003              STR      r0,[sp,#0xc]
                  |L14.430|
;;;600            
;;;601        }
;;;602                
;;;603        if(addr != 0)////色块显示到LCD
0001ae  9807              LDR      r0,[sp,#0x1c]
0001b0  b138              CBZ      r0,|L14.450|
;;;604        {
;;;605            RectangleFill(addr,x,y,rx,ry,color);
0001b2  463b              MOV      r3,r7
0001b4  4632              MOV      r2,r6
0001b6  4629              MOV      r1,r5
0001b8  e9cd8900          STRD     r8,r9,[sp,#0]
0001bc  9807              LDR      r0,[sp,#0x1c]
0001be  f7fffffe          BL       RectangleFill
                  |L14.450|
;;;606        }
;;;607        if(addr1 != 0)
0001c2  9806              LDR      r0,[sp,#0x18]
0001c4  b148              CBZ      r0,|L14.474|
;;;608        {
;;;609            RectangleFill(addr1,x1,y1,rx1,ry1,color1);
0001c6  e9dd1003          LDRD     r1,r0,[sp,#0xc]
0001ca  e9cd0100          STRD     r0,r1,[sp,#0]
0001ce  465a              MOV      r2,r11
0001d0  4651              MOV      r1,r10
0001d2  e9dd3005          LDRD     r3,r0,[sp,#0x14]
0001d6  f7fffffe          BL       RectangleFill
                  |L14.474|
;;;610        }
;;;611    	}
0001da  b00b              ADD      sp,sp,#0x2c
0001dc  e8bd8ff0          POP      {r4-r11,pc}
;;;612    /**********************************************************************************************************
                          ENDP

                  |L14.480|
                          DCD      button_table

                          AREA ||i.onDisplacementUpdata_Rect||, CODE, READONLY, ALIGN=2

                  onDisplacementUpdata_Rect PROC
;;;401    }
;;;402    void onDisplacementUpdata_Rect(void)/////心长，钻进 矩形填充
000000  b510              PUSH     {r4,lr}
;;;403    { 
;;;404    	bit_processHandle(send_data.drill_bit_process);         
000002  4905              LDR      r1,|L15.24|
000004  7d48              LDRB     r0,[r1,#0x15]  ; send_data
000006  f7fffffe          BL       bit_processHandle
;;;405    	core_lengthHandle(send_data.core_length );
00000a  4903              LDR      r1,|L15.24|
00000c  f8910023          LDRB     r0,[r1,#0x23]  ; send_data
000010  f7fffffe          BL       core_lengthHandle
;;;406    }
000014  bd10              POP      {r4,pc}
;;;407    
                          ENDP

000016  0000              DCW      0x0000
                  |L15.24|
                          DCD      send_data

                          AREA ||i.onDisplacementUpdata_Text||, CODE, READONLY, ALIGN=2

                  onDisplacementUpdata_Text PROC
;;;331    ********************************************************************************************************/
;;;332    void onDisplacementUpdata_Text(void)
000000  b510              PUSH     {r4,lr}
;;;333    {
;;;334    		
;;;335    		// 0 ~ 255心长
;;;336    		if(send_data.core_length < 15)
000002  4822              LDR      r0,|L16.140|
000004  f8900023          LDRB     r0,[r0,#0x23]  ; send_data
000008  280f              CMP      r0,#0xf
00000a  da07              BGE      |L16.28|
;;;337    		{
;;;338    			RefreshText(TEXT_CORE_LENGTH_ADDR,"low",TEXT_CORE_LENGTH_POINTER_ADDR,COLOR_BLUE);	
00000c  231f              MOVS     r3,#0x1f
00000e  f44f7280          MOV      r2,#0x100
000012  a11f              ADR      r1,|L16.144|
000014  2001              MOVS     r0,#1
000016  f7fffffe          BL       RefreshText
00001a  e015              B        |L16.72|
                  |L16.28|
;;;339    		}
;;;340    		else if(send_data.core_length < 60)
00001c  481b              LDR      r0,|L16.140|
00001e  f8900023          LDRB     r0,[r0,#0x23]  ; send_data
000022  283c              CMP      r0,#0x3c
000024  da08              BGE      |L16.56|
;;;341    		{
;;;342    			RefreshText(TEXT_CORE_LENGTH_ADDR,"normal",TEXT_CORE_LENGTH_POINTER_ADDR,COLOR_GREEN);
000026  f44f63fc          MOV      r3,#0x7e0
00002a  f44f7280          MOV      r2,#0x100
00002e  a119              ADR      r1,|L16.148|
000030  2001              MOVS     r0,#1
000032  f7fffffe          BL       RefreshText
000036  e007              B        |L16.72|
                  |L16.56|
;;;343    		}
;;;344    		else
;;;345    		{
;;;346    			RefreshText(TEXT_CORE_LENGTH_ADDR,"warning",TEXT_CORE_LENGTH_POINTER_ADDR,COLOR_RED);
000038  f44f4378          MOV      r3,#0xf800
00003c  f44f7280          MOV      r2,#0x100
000040  a116              ADR      r1,|L16.156|
000042  2001              MOVS     r0,#1
000044  f7fffffe          BL       RefreshText
                  |L16.72|
;;;347    		}
;;;348    
;;;349    		// 0 ~ 255钻进
;;;350    		if(send_data.drill_bit_process < 50)
000048  4810              LDR      r0,|L16.140|
00004a  7d40              LDRB     r0,[r0,#0x15]  ; send_data
00004c  2832              CMP      r0,#0x32
00004e  da07              BGE      |L16.96|
;;;351    		{
;;;352    		RefreshText(TEXT_BIT_PROCESS_ADDR,"low",TEXT_BIT_PROCESS_POINTER_ADDR,COLOR_BLUE);
000050  231f              MOVS     r3,#0x1f
000052  f44f7240          MOV      r2,#0x300
000056  a10e              ADR      r1,|L16.144|
000058  2021              MOVS     r0,#0x21
00005a  f7fffffe          BL       RefreshText
00005e  e014              B        |L16.138|
                  |L16.96|
;;;353    		}
;;;354    		else if(send_data.drill_bit_process < 200)
000060  480a              LDR      r0,|L16.140|
000062  7d40              LDRB     r0,[r0,#0x15]  ; send_data
000064  28c8              CMP      r0,#0xc8
000066  da08              BGE      |L16.122|
;;;355    		{
;;;356    		RefreshText(TEXT_BIT_PROCESS_ADDR,"normal",TEXT_BIT_PROCESS_POINTER_ADDR,COLOR_GREEN);
000068  f44f63fc          MOV      r3,#0x7e0
00006c  f44f7240          MOV      r2,#0x300
000070  a108              ADR      r1,|L16.148|
000072  2021              MOVS     r0,#0x21
000074  f7fffffe          BL       RefreshText
000078  e007              B        |L16.138|
                  |L16.122|
;;;357    		}
;;;358    		else
;;;359    		{
;;;360    		RefreshText(TEXT_BIT_PROCESS_ADDR,"warning",TEXT_BIT_PROCESS_POINTER_ADDR,COLOR_RED);
00007a  f44f4378          MOV      r3,#0xf800
00007e  f44f7240          MOV      r2,#0x300
000082  a106              ADR      r1,|L16.156|
000084  2021              MOVS     r0,#0x21
000086  f7fffffe          BL       RefreshText
                  |L16.138|
;;;361    		}      
;;;362    }
00008a  bd10              POP      {r4,pc}
;;;363    
                          ENDP

                  |L16.140|
                          DCD      send_data
                  |L16.144|
000090  6c6f7700          DCB      "low",0
                  |L16.148|
000094  6e6f726d          DCB      "normal",0
000098  616c00  
00009b  00                DCB      0
                  |L16.156|
00009c  7761726e          DCB      "warning",0
0000a0  696e6700

                          AREA ||i.onTimeUpdata||, CODE, READONLY, ALIGN=1

                  onTimeUpdata PROC
;;;666    
;;;667    void onTimeUpdata(uint32_t sec)/////屏幕时分秒计算，并刷新到屏幕
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;668    {
000004  4604              MOV      r4,r0
;;;669    	uint8_t hour,min,second;	
;;;670    	hour = sec/3600;
000006  f44f6061          MOV      r0,#0xe10
00000a  fbb4f0f0          UDIV     r0,r4,r0
00000e  b2c5              UXTB     r5,r0
;;;671    	min=sec%3600/60;
000010  f44f6061          MOV      r0,#0xe10
000014  fbb4f1f0          UDIV     r1,r4,r0
000018  fb004011          MLS      r0,r0,r1,r4
00001c  213c              MOVS     r1,#0x3c
00001e  fbb0f0f1          UDIV     r0,r0,r1
000022  b2c6              UXTB     r6,r0
;;;672    	second = sec % 60;
000024  203c              MOVS     r0,#0x3c
000026  fbb4f1f0          UDIV     r1,r4,r0
00002a  fb004711          MLS      r7,r0,r1,r4
;;;673    	RefreshNumber(HOUR_ADDR,hour);
00002e  4629              MOV      r1,r5
000030  f44f60d0          MOV      r0,#0x680
000034  f7fffffe          BL       RefreshNumber
;;;674    	RefreshNumber(MINUTE_ADDR,min);
000038  4631              MOV      r1,r6
00003a  f44f60d2          MOV      r0,#0x690
00003e  f7fffffe          BL       RefreshNumber
;;;675    	RefreshNumber(SECOND_ADDR,second); 
000042  4639              MOV      r1,r7
000044  f44f60e2          MOV      r0,#0x710
000048  f7fffffe          BL       RefreshNumber
;;;676    }
00004c  e8bd81f0          POP      {r4-r8,pc}
;;;677    
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=1

                  common_header
000000  a55a              DCB      0xa5,0x5a
                  button_table
000002  1000              DCW      0x1000
000004  0167000d          DCW      0x0167,0x000d
000008  01a5002e          DCW      0x01a5,0x002e
00000c  afff2000          DCW      0xafff,0x2000
000010  01670032          DCW      0x0167,0x0032
000014  01a50053          DCW      0x01a5,0x0053
000018  afffe000          DCW      0xafff,0xe000
00001c  01af000d          DCW      0x01af,0x000d
000020  01ed002e          DCW      0x01ed,0x002e
000024  affff000          DCW      0xafff,0xf000
000028  01af0032          DCW      0x01af,0x0032
00002c  01ed0053          DCW      0x01ed,0x0053
000030  afff5000          DCW      0xafff,0x5000
000034  0020000d          DCW      0x0020,0x000d
000038  005e002e          DCW      0x005e,0x002e
00003c  afff6000          DCW      0xafff,0x6000
000040  00200030          DCW      0x0020,0x0030
000044  005e0051          DCW      0x005e,0x0051
000048  afff7000          DCW      0xafff,0x7000
00004c  008d000d          DCW      0x008d,0x000d
000050  00cb002e          DCW      0x00cb,0x002e
000054  afff8000          DCW      0xafff,0x8000
000058  008d0031          DCW      0x008d,0x0031
00005c  00cb0052          DCW      0x00cb,0x0052
000060  afff9000          DCW      0xafff,0x9000
000064  00fa000d          DCW      0x00fa,0x000d
000068  0138002e          DCW      0x0138,0x002e
00006c  afffa000          DCW      0xafff,0xa000
000070  00fa0032          DCW      0x00fa,0x0032
000074  01380053          DCW      0x0138,0x0053
000078  afff              DCW      0xafff

                          AREA ||.data||, DATA, ALIGN=0

                  Button_MD_flag
000000  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\app\\src\\VGUS_LCD.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___10_VGUS_LCD_c_7cadca08____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___10_VGUS_LCD_c_7cadca08____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___10_VGUS_LCD_c_7cadca08____REVSH|
#line 128
|__asm___10_VGUS_LCD_c_7cadca08____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
