; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\obj\usb_sil.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\usb_sil.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\Libraries\CMSIS\Include -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User\app\inc -I..\..\User\FatFS\src -I..\..\User\Mass_Storage\inc -I..\..\User\LCD_Driver -I..\..\User\SYSTEM\sys -I..\..\User\Debugprintf -I..\..\User\LogDebug -I..\..\User\app\inc -I..\..\User\app\src -I..\..\User\bsp\inc -I..\..\User\bsp\src -I.\RTE\_Flash -ID:\Keil_v5\ARM\Packs\ARM\CMSIS\5.5.1\CMSIS\Core\Include -ID:\Keil_v5\ARM\Packs\Keil\STM32F1xx_DFP\2.1.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=527 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\flash\obj\usb_sil.crf ..\..\Libraries\STM32_USB-FS-Device_Driver\src\usb_sil.c]
                          THUMB

                          AREA ||i.USB_SIL_Init||, CODE, READONLY, ALIGN=2

                  USB_SIL_Init PROC
;;;47     *******************************************************************************/
;;;48     uint32_t USB_SIL_Init(void)
000000  2000              MOVS     r0,#0
;;;49     {
;;;50     #ifndef STM32F10X_CL
;;;51       
;;;52       /* USB interrupts initialization */
;;;53       /* clear pending interrupts */
;;;54       _SetISTR(0);
000002  4906              LDR      r1,|L1.28|
000004  6008              STR      r0,[r1,#0]
;;;55       wInterrupt_Mask = IMR_MSK;
000006  f44f4004          MOV      r0,#0x8400
00000a  4905              LDR      r1,|L1.32|
00000c  8008              STRH     r0,[r1,#0]
;;;56       /* set interrupts mask */
;;;57       _SetCNTR(wInterrupt_Mask);
00000e  4608              MOV      r0,r1
000010  8800              LDRH     r0,[r0,#0]  ; wInterrupt_Mask
000012  4902              LDR      r1,|L1.28|
000014  1f09              SUBS     r1,r1,#4
000016  6008              STR      r0,[r1,#0]
;;;58       
;;;59     #else
;;;60       
;;;61       /* Perform OTG Device initialization procedure (including EP0 init) */
;;;62       OTG_DEV_Init();
;;;63       
;;;64     #endif /* STM32F10X_CL */
;;;65     
;;;66       return 0;
000018  2000              MOVS     r0,#0
;;;67     }
00001a  4770              BX       lr
;;;68     
                          ENDP

                  |L1.28|
                          DCD      0x40005c44
                  |L1.32|
                          DCD      wInterrupt_Mask

                          AREA ||i.USB_SIL_Read||, CODE, READONLY, ALIGN=1

                  USB_SIL_Read PROC
;;;107    *******************************************************************************/
;;;108    uint32_t USB_SIL_Read(uint8_t bEpAddr, uint8_t* pBufferPointer)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;109    {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
;;;110      uint32_t DataLength = 0;
000008  2500              MOVS     r5,#0
;;;111    
;;;112    #ifndef STM32F10X_CL
;;;113    
;;;114      /* Get the number of received data on the selected Endpoint */
;;;115      DataLength = GetEPRxCount(bEpAddr & 0x7F);
00000a  f004007f          AND      r0,r4,#0x7f
00000e  f7fffffe          BL       GetEPRxCount
000012  4605              MOV      r5,r0
;;;116      
;;;117      /* Use the memory interface function to write to the selected endpoint */
;;;118      PMAToUserBufferCopy(pBufferPointer, GetEPRxAddr(bEpAddr & 0x7F), DataLength);
000014  f004007f          AND      r0,r4,#0x7f
000018  f7fffffe          BL       GetEPRxAddr
00001c  4607              MOV      r7,r0
00001e  462a              MOV      r2,r5
000020  4639              MOV      r1,r7
000022  4630              MOV      r0,r6
000024  f7fffffe          BL       PMAToUserBufferCopy
;;;119    
;;;120    #else
;;;121      
;;;122      USB_OTG_EP *ep;
;;;123    
;;;124      /* Get the structure pointer of the selected Endpoint */
;;;125      ep = PCD_GetOutEP(bEpAddr);
;;;126      
;;;127      /* Get the number of received data */
;;;128      DataLength = ep->xfer_len;
;;;129      
;;;130      /* Use the PCD interface layer function to read the selected endpoint */
;;;131      PCD_EP_Read (bEpAddr, pBufferPointer, DataLength);
;;;132      
;;;133    #endif /* STM32F10X_CL */
;;;134    
;;;135      /* Return the number of received data */
;;;136      return DataLength;
000028  4628              MOV      r0,r5
;;;137    }
00002a  e8bd81f0          POP      {r4-r8,pc}
;;;138    
                          ENDP


                          AREA ||i.USB_SIL_Write||, CODE, READONLY, ALIGN=1

                  USB_SIL_Write PROC
;;;78     *******************************************************************************/
;;;79     uint32_t USB_SIL_Write(uint8_t bEpAddr, uint8_t* pBufferPointer, uint32_t wBufferSize)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;80     {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4615              MOV      r5,r2
;;;81     #ifndef STM32F10X_CL
;;;82     
;;;83       /* Use the memory interface function to write to the selected endpoint */
;;;84       UserToPMABufferCopy(pBufferPointer, GetEPTxAddr(bEpAddr & 0x7F), wBufferSize);
00000a  f004007f          AND      r0,r4,#0x7f
00000e  f7fffffe          BL       GetEPTxAddr
000012  4607              MOV      r7,r0
000014  b2aa              UXTH     r2,r5
000016  4639              MOV      r1,r7
000018  4630              MOV      r0,r6
00001a  f7fffffe          BL       UserToPMABufferCopy
;;;85     
;;;86       /* Update the data length in the control register */
;;;87       SetEPTxCount((bEpAddr & 0x7F), wBufferSize);
00001e  b2a9              UXTH     r1,r5
000020  f004007f          AND      r0,r4,#0x7f
000024  f7fffffe          BL       SetEPTxCount
;;;88       
;;;89     #else
;;;90       
;;;91        /* Use the PCD interface layer function to write to the selected endpoint */
;;;92        PCD_EP_Write (bEpAddr, pBufferPointer, wBufferSize); 
;;;93        
;;;94     #endif /* STM32F10X_CL */
;;;95     
;;;96       return 0;
000028  2000              MOVS     r0,#0
;;;97     }
00002a  e8bd81f0          POP      {r4-r8,pc}
;;;98     
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\Libraries\\STM32_USB-FS-Device_Driver\\src\\usb_sil.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___9_usb_sil_c_8614cbb8____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___9_usb_sil_c_8614cbb8____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___9_usb_sil_c_8614cbb8____REVSH|
#line 128
|__asm___9_usb_sil_c_8614cbb8____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
