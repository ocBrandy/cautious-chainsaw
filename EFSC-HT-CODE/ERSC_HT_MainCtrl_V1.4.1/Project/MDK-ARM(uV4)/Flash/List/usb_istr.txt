; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\obj\usb_istr.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\usb_istr.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\Libraries\CMSIS\Include -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User\app\inc -I..\..\User\FatFS\src -I..\..\User\Mass_Storage\inc -I..\..\User\LCD_Driver -I..\..\User\SYSTEM\sys -I..\..\User\Debugprintf -I..\..\User\LogDebug -I..\..\User\app\inc -I..\..\User\app\src -I..\..\User\bsp\inc -I..\..\User\bsp\src -I.\RTE\_Flash -ID:\Keil_v5\ARM\Packs\ARM\CMSIS\5.5.1\CMSIS\Core\Include -ID:\Keil_v5\ARM\Packs\Keil\STM32F1xx_DFP\2.1.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=527 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\flash\obj\usb_istr.crf ..\..\User\Mass_Storage\src\usb_istr.c]
                          THUMB

                          AREA ||i.USB_Istr||, CODE, READONLY, ALIGN=2

                  USB_Istr PROC
;;;84     *******************************************************************************/
;;;85     void USB_Istr(void)
000000  b510              PUSH     {r4,lr}
;;;86     {
;;;87     
;;;88       wIstr = _GetISTR();
000002  480f              LDR      r0,|L1.64|
000004  6800              LDR      r0,[r0,#0]
000006  490f              LDR      r1,|L1.68|
000008  8008              STRH     r0,[r1,#0]
;;;89     
;;;90     #if (IMR_MSK & ISTR_CTR)
;;;91       if (wIstr & ISTR_CTR & wInterrupt_Mask)
00000a  4608              MOV      r0,r1
00000c  8800              LDRH     r0,[r0,#0]  ; wIstr
00000e  f4004000          AND      r0,r0,#0x8000
000012  490d              LDR      r1,|L1.72|
000014  8809              LDRH     r1,[r1,#0]  ; wInterrupt_Mask
000016  4008              ANDS     r0,r0,r1
000018  b108              CBZ      r0,|L1.30|
;;;92       {
;;;93         /* servicing of the endpoint correct transfer interrupt */
;;;94         /* clear of the CTR flag into the sub */
;;;95         CTR_LP();
00001a  f7fffffe          BL       CTR_LP
                  |L1.30|
;;;96     #ifdef CTR_CALLBACK
;;;97         CTR_Callback();
;;;98     #endif
;;;99       }
;;;100    #endif  
;;;101      /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
;;;102    #if (IMR_MSK & ISTR_RESET)
;;;103      if (wIstr & ISTR_RESET & wInterrupt_Mask)
00001e  4809              LDR      r0,|L1.68|
000020  8800              LDRH     r0,[r0,#0]  ; wIstr
000022  f4006080          AND      r0,r0,#0x400
000026  4908              LDR      r1,|L1.72|
000028  8809              LDRH     r1,[r1,#0]  ; wInterrupt_Mask
00002a  4008              ANDS     r0,r0,r1
00002c  b130              CBZ      r0,|L1.60|
;;;104      {
;;;105        _SetISTR((uint16_t)CLR_RESET);
00002e  f64f30ff          MOV      r0,#0xfbff
000032  4903              LDR      r1,|L1.64|
000034  6008              STR      r0,[r1,#0]
;;;106        Device_Property.Reset();
000036  4905              LDR      r1,|L1.76|
000038  6848              LDR      r0,[r1,#4]  ; Device_Property
00003a  4780              BLX      r0
                  |L1.60|
;;;107    #ifdef RESET_CALLBACK
;;;108        RESET_Callback();
;;;109    #endif
;;;110      }
;;;111    #endif
;;;112      /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
;;;113    #if (IMR_MSK & ISTR_DOVR)
;;;114      if (wIstr & ISTR_DOVR & wInterrupt_Mask)
;;;115      {
;;;116        _SetISTR((uint16_t)CLR_DOVR);
;;;117    #ifdef DOVR_CALLBACK
;;;118        DOVR_Callback();
;;;119    #endif
;;;120      }
;;;121    #endif
;;;122      /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
;;;123    #if (IMR_MSK & ISTR_ERR)
;;;124      if (wIstr & ISTR_ERR & wInterrupt_Mask)
;;;125      {
;;;126        _SetISTR((uint16_t)CLR_ERR);
;;;127    #ifdef ERR_CALLBACK
;;;128        ERR_Callback();
;;;129    #endif
;;;130      }
;;;131    #endif
;;;132      /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
;;;133    #if (IMR_MSK & ISTR_WKUP)
;;;134      if (wIstr & ISTR_WKUP & wInterrupt_Mask)
;;;135      {
;;;136        _SetISTR((uint16_t)CLR_WKUP);
;;;137        Resume(RESUME_EXTERNAL);
;;;138    #ifdef WKUP_CALLBACK
;;;139        WKUP_Callback();
;;;140    #endif
;;;141      }
;;;142    #endif
;;;143      /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
;;;144    #if (IMR_MSK & ISTR_SUSP)
;;;145      if (wIstr & ISTR_SUSP & wInterrupt_Mask)
;;;146      {
;;;147    
;;;148        /* check if SUSPEND is possible */
;;;149        if (fSuspendEnabled)
;;;150        {
;;;151          Suspend();
;;;152        }
;;;153        else
;;;154        {
;;;155          /* if not possible then resume after xx ms */
;;;156          Resume(RESUME_LATER);
;;;157        }
;;;158        /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
;;;159        _SetISTR((uint16_t)CLR_SUSP);
;;;160    #ifdef SUSP_CALLBACK
;;;161        SUSP_Callback();
;;;162    #endif
;;;163      }
;;;164    #endif
;;;165      /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
;;;166    #if (IMR_MSK & ISTR_SOF)
;;;167      if (wIstr & ISTR_SOF & wInterrupt_Mask)
;;;168      {
;;;169        _SetISTR((uint16_t)CLR_SOF);
;;;170        bIntPackSOF++;
;;;171    
;;;172    #ifdef SOF_CALLBACK
;;;173        SOF_Callback();
;;;174    #endif
;;;175      }
;;;176    #endif
;;;177      /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
;;;178    #if (IMR_MSK & ISTR_ESOF)
;;;179      if (wIstr & ISTR_ESOF & wInterrupt_Mask)
;;;180      {
;;;181        _SetISTR((uint16_t)CLR_ESOF);
;;;182        /* resume handling timing is made with ESOFs */
;;;183        Resume(RESUME_ESOF); /* request without change of the machine state */
;;;184    
;;;185    #ifdef ESOF_CALLBACK
;;;186        ESOF_Callback();
;;;187    #endif
;;;188      }
;;;189    #endif
;;;190    } /* USB_Istr */
00003c  bd10              POP      {r4,pc}
;;;191    
                          ENDP

00003e  0000              DCW      0x0000
                  |L1.64|
                          DCD      0x40005c44
                  |L1.68|
                          DCD      wIstr
                  |L1.72|
                          DCD      wInterrupt_Mask
                  |L1.76|
                          DCD      Device_Property

                          AREA ||.data||, DATA, ALIGN=2

                  wIstr
000000  0000              DCB      0x00,0x00
                  bIntPackSOF
000002  0000              DCB      0x00,0x00
                  pEpInt_IN
                          DCD      EP1_IN_Callback
                          DCD      NOP_Process
                          DCD      NOP_Process
                          DCD      NOP_Process
                          DCD      NOP_Process
                          DCD      NOP_Process
                          DCD      NOP_Process
                  pEpInt_OUT
                          DCD      NOP_Process
                          DCD      EP2_OUT_Callback
                          DCD      NOP_Process
                          DCD      NOP_Process
                          DCD      NOP_Process
                          DCD      NOP_Process
                          DCD      NOP_Process

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\Mass_Storage\\src\\usb_istr.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___10_usb_istr_c_e9471872____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___10_usb_istr_c_e9471872____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___10_usb_istr_c_e9471872____REVSH|
#line 128
|__asm___10_usb_istr_c_e9471872____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
