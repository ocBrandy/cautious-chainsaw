; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\obj\bp_datasotrage.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\bp_datasotrage.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\Libraries\CMSIS\Include -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User\app\inc -I..\..\User\FatFS\src -I..\..\User\Mass_Storage\inc -I..\..\User\LCD_Driver -I..\..\User\SYSTEM\sys -I..\..\User\Debugprintf -I..\..\User\LogDebug -I..\..\User\app\inc -I..\..\User\app\src -I..\..\User\bsp\inc -I..\..\User\bsp\src -I.\RTE\_Flash -ID:\Keil_v5\ARM\Packs\ARM\CMSIS\5.5.1\CMSIS\Core\Include -ID:\Keil_v5\ARM\Packs\Keil\STM32F1xx_DFP\2.1.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=527 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\flash\obj\bp_datasotrage.crf ..\..\User\app\src\BP_DataSotrage.c]
                          THUMB

                          AREA ||i.BP_data_storage||, CODE, READONLY, ALIGN=2

                  BP_data_storage PROC
;;;26     			
;;;27     void BP_data_storage(void) //变频机箱数据接收
000000  b538              PUSH     {r3-r5,lr}
;;;28     {
;;;29     	
;;;30     	uint8_t ucData;
;;;31     	if(comGetChar(COM2,&ucData))
000002  4669              MOV      r1,sp
000004  2001              MOVS     r0,#1
000006  f7fffffe          BL       comGetChar
00000a  2800              CMP      r0,#0
00000c  d062              BEQ      |L1.212|
;;;32     	{
;;;33     		BP_timeout = 0;
00000e  2000              MOVS     r0,#0
000010  4952              LDR      r1,|L1.348|
000012  6008              STR      r0,[r1,#0]  ; BP_timeout
;;;34     		switch(BPRxState)
000014  4852              LDR      r0,|L1.352|
000016  7800              LDRB     r0,[r0,#0]  ; BPRxState
000018  b120              CBZ      r0,|L1.36|
00001a  2801              CMP      r0,#1
00001c  d01c              BEQ      |L1.88|
00001e  2802              CMP      r0,#2
000020  d157              BNE      |L1.210|
000022  e042              B        |L1.170|
                  |L1.36|
;;;35     			{
;;;36     				/* 校验帧头1 */
;;;37     				case 0:				
;;;38     						if(ucData == 0x02)  //识别到地址位，将数据缓存
000024  f89d0000          LDRB     r0,[sp,#0]
000028  2802              CMP      r0,#2
00002a  d10f              BNE      |L1.76|
;;;39     								{
;;;40     									BP_databuf[BPdata_count++] = ucData;
00002c  f89d1000          LDRB     r1,[sp,#0]
000030  484c              LDR      r0,|L1.356|
000032  7802              LDRB     r2,[r0,#0]  ; BPdata_count
000034  7800              LDRB     r0,[r0,#0]  ; BPdata_count
000036  1c40              ADDS     r0,r0,#1
000038  4b4a              LDR      r3,|L1.356|
00003a  7018              STRB     r0,[r3,#0]
00003c  484a              LDR      r0,|L1.360|
00003e  5481              STRB     r1,[r0,r2]
;;;41     									BPRxState++;		/* 跳转进入下一步 */
000040  4847              LDR      r0,|L1.352|
000042  7800              LDRB     r0,[r0,#0]  ; BPRxState
000044  1c40              ADDS     r0,r0,#1
000046  4946              LDR      r1,|L1.352|
000048  7008              STRB     r0,[r1,#0]
00004a  e004              B        |L1.86|
                  |L1.76|
;;;42     								}			
;;;43     						else               //计数清零，重新接收
;;;44     							 {
;;;45     									BPdata_count = 0;
00004c  2000              MOVS     r0,#0
00004e  4945              LDR      r1,|L1.356|
000050  7008              STRB     r0,[r1,#0]
;;;46     									BPRxState = 0;
000052  4943              LDR      r1,|L1.352|
000054  7008              STRB     r0,[r1,#0]
                  |L1.86|
;;;47     							 }						
;;;48     						break;
000056  e03c              B        |L1.210|
                  |L1.88|
;;;49     				case 1:				
;;;50     						if(ucData == 0x03)  //识别到读寄存器，将数据缓存
000058  f89d0000          LDRB     r0,[sp,#0]
00005c  2803              CMP      r0,#3
00005e  d10f              BNE      |L1.128|
;;;51     								{
;;;52     									BP_databuf[BPdata_count++] = ucData;
000060  f89d1000          LDRB     r1,[sp,#0]
000064  483f              LDR      r0,|L1.356|
000066  7802              LDRB     r2,[r0,#0]  ; BPdata_count
000068  7800              LDRB     r0,[r0,#0]  ; BPdata_count
00006a  1c40              ADDS     r0,r0,#1
00006c  4b3d              LDR      r3,|L1.356|
00006e  7018              STRB     r0,[r3,#0]
000070  483d              LDR      r0,|L1.360|
000072  5481              STRB     r1,[r0,r2]
;;;53     									BPRxState++;		/* 跳转进入下一步 */
000074  483a              LDR      r0,|L1.352|
000076  7800              LDRB     r0,[r0,#0]  ; BPRxState
000078  1c40              ADDS     r0,r0,#1
00007a  4939              LDR      r1,|L1.352|
00007c  7008              STRB     r0,[r1,#0]
00007e  e013              B        |L1.168|
                  |L1.128|
;;;54     								}
;;;55     						else if	(ucData == 0x06)
000080  f89d0000          LDRB     r0,[sp,#0]
000084  2806              CMP      r0,#6
000086  d10a              BNE      |L1.158|
;;;56     								{
;;;57     									BP_databuf[BPdata_count++] = ucData; 	//缓存剩余数据
000088  f89d1000          LDRB     r1,[sp,#0]
00008c  4835              LDR      r0,|L1.356|
00008e  7802              LDRB     r2,[r0,#0]  ; BPdata_count
000090  7800              LDRB     r0,[r0,#0]  ; BPdata_count
000092  1c40              ADDS     r0,r0,#1
000094  4b33              LDR      r3,|L1.356|
000096  7018              STRB     r0,[r3,#0]
000098  4833              LDR      r0,|L1.360|
00009a  5481              STRB     r1,[r0,r2]
00009c  e004              B        |L1.168|
                  |L1.158|
;;;58     								}							
;;;59     						else               //计数清零，重新接收
;;;60     							 {
;;;61     									BPdata_count = 0;
00009e  2000              MOVS     r0,#0
0000a0  4930              LDR      r1,|L1.356|
0000a2  7008              STRB     r0,[r1,#0]
;;;62     									BPRxState = 0;
0000a4  492e              LDR      r1,|L1.352|
0000a6  7008              STRB     r0,[r1,#0]
                  |L1.168|
;;;63     							 }						
;;;64     						break;						 					 
0000a8  e013              B        |L1.210|
                  |L1.170|
;;;65     				case 2:		
;;;66     												
;;;67     							BP_databuf[BPdata_count++] = ucData; 	//缓存剩余数据
0000aa  f89d2000          LDRB     r2,[sp,#0]
0000ae  482d              LDR      r0,|L1.356|
0000b0  7801              LDRB     r1,[r0,#0]  ; BPdata_count
0000b2  7800              LDRB     r0,[r0,#0]  ; BPdata_count
0000b4  1c40              ADDS     r0,r0,#1
0000b6  4b2b              LDR      r3,|L1.356|
0000b8  7018              STRB     r0,[r3,#0]
0000ba  482b              LDR      r0,|L1.360|
0000bc  5442              STRB     r2,[r0,r1]
;;;68     				
;;;69     							if(BPdata_count == BP_databuf[2]+5)
0000be  7880              LDRB     r0,[r0,#2]  ; BP_databuf
0000c0  1d40              ADDS     r0,r0,#5
0000c2  4619              MOV      r1,r3
0000c4  7809              LDRB     r1,[r1,#0]  ; BPdata_count
0000c6  4288              CMP      r0,r1
0000c8  d102              BNE      |L1.208|
;;;70     							{			
;;;71     							
;;;72     								BPdatarecv_flag = 1;	///接收完成							
0000ca  2001              MOVS     r0,#1
0000cc  4927              LDR      r1,|L1.364|
0000ce  7008              STRB     r0,[r1,#0]
                  |L1.208|
;;;73     							}							
;;;74     							break;
0000d0  bf00              NOP      
                  |L1.210|
0000d2  bf00              NOP                            ;48
                  |L1.212|
;;;75     				}
;;;76     		}
;;;77     
;;;78     
;;;79     if(BPdatarecv_flag == 1)
0000d4  4825              LDR      r0,|L1.364|
0000d6  7800              LDRB     r0,[r0,#0]  ; BPdatarecv_flag
0000d8  2801              CMP      r0,#1
0000da  d13e              BNE      |L1.346|
;;;80     	{		
;;;81     ////		comSendBuf(COM1,BP_databuf,39);
;;;82     		BPdatabuf_clear = 1;
0000dc  4924              LDR      r1,|L1.368|
0000de  7008              STRB     r0,[r1,#0]
;;;83     		uint16_t crc = 0;
0000e0  2400              MOVS     r4,#0
;;;84     		BP_commd_flag = 0;//变频机箱接收数据完成，允许按键指令下发
0000e2  2000              MOVS     r0,#0
0000e4  4923              LDR      r1,|L1.372|
0000e6  7008              STRB     r0,[r1,#0]
;;;85     		BPdatarecv_flag = 0;
0000e8  4920              LDR      r1,|L1.364|
0000ea  7008              STRB     r0,[r1,#0]
;;;86     
;;;87     		crc = CRC16(BP_databuf,BPdata_count - 2);
0000ec  481d              LDR      r0,|L1.356|
0000ee  7800              LDRB     r0,[r0,#0]  ; BPdata_count
0000f0  1e81              SUBS     r1,r0,#2
0000f2  481d              LDR      r0,|L1.360|
0000f4  f7fffffe          BL       CRC16
0000f8  4604              MOV      r4,r0
;;;88     		if(crc == ((BP_databuf[BPdata_count - 2] << 8)|(BP_databuf[BPdata_count - 1])))///校验和判断正确
0000fa  481a              LDR      r0,|L1.356|
0000fc  7800              LDRB     r0,[r0,#0]  ; BPdata_count
0000fe  1e40              SUBS     r0,r0,#1
000100  4919              LDR      r1,|L1.360|
000102  5c09              LDRB     r1,[r1,r0]
000104  4817              LDR      r0,|L1.356|
000106  7800              LDRB     r0,[r0,#0]  ; BPdata_count
000108  1e80              SUBS     r0,r0,#2
00010a  4a17              LDR      r2,|L1.360|
00010c  5c10              LDRB     r0,[r2,r0]
00010e  ea412000          ORR      r0,r1,r0,LSL #8
000112  42a0              CMP      r0,r4
000114  d110              BNE      |L1.312|
;;;89     			{					
;;;90     				uint16_t requst_flag;			
;;;91     
;;;92     				BPdata_count = 0;
000116  2000              MOVS     r0,#0
000118  4912              LDR      r1,|L1.356|
00011a  7008              STRB     r0,[r1,#0]
;;;93     				BPRxState = 0 ;
00011c  4910              LDR      r1,|L1.352|
00011e  7008              STRB     r0,[r1,#0]
;;;94     				requst_flag = (BP_databuf[27] << 8) | BP_databuf[28];
000120  4610              MOV      r0,r2
000122  7f00              LDRB     r0,[r0,#0x1c]  ; BP_databuf
000124  4611              MOV      r1,r2
000126  7ec9              LDRB     r1,[r1,#0x1b]  ; BP_databuf
000128  ea402501          ORR      r5,r0,r1,LSL #8
;;;95     				if(requst_flag == 1 )///变频机箱是否有数据请求
00012c  2d01              CMP      r5,#1
00012e  d102              BNE      |L1.310|
;;;96     					{			
;;;97     						requst_flag = 0;
000130  2500              MOVS     r5,#0
;;;98     						Send_datatoBP();//井下数据等传给变频机箱			
000132  f7fffffe          BL       Send_datatoBP
                  |L1.310|
;;;99     					}
;;;100    					
;;;101    			}
000136  e00f              B        |L1.344|
                  |L1.312|
;;;102    		else  //校验和有误，重新接收
;;;103    			{
;;;104    				for (uint8_t i = 0;i < BPdata_count;i++)           //清空接收数组,重新接收
000138  2000              MOVS     r0,#0
00013a  e004              B        |L1.326|
                  |L1.316|
;;;105    					{
;;;106    						 BP_databuf[i] = 0;                                  
00013c  2100              MOVS     r1,#0
00013e  4a0a              LDR      r2,|L1.360|
000140  5411              STRB     r1,[r2,r0]
000142  1c41              ADDS     r1,r0,#1              ;104
000144  b2c8              UXTB     r0,r1                 ;104
                  |L1.326|
000146  4907              LDR      r1,|L1.356|
000148  7809              LDRB     r1,[r1,#0]            ;104  ; BPdata_count
00014a  4288              CMP      r0,r1                 ;104
00014c  dbf6              BLT      |L1.316|
;;;107    					}
;;;108    					BPRxState = 0;
00014e  2000              MOVS     r0,#0
000150  4903              LDR      r1,|L1.352|
000152  7008              STRB     r0,[r1,#0]
;;;109    					BPdata_count = 0;
000154  4903              LDR      r1,|L1.356|
000156  7008              STRB     r0,[r1,#0]
                  |L1.344|
;;;110    			}
;;;111    			
;;;112    	}
000158  bf00              NOP      
                  |L1.346|
;;;113    }
00015a  bd38              POP      {r3-r5,pc}
;;;114    /***********************************************************************
                          ENDP

                  |L1.348|
                          DCD      BP_timeout
                  |L1.352|
                          DCD      BPRxState
                  |L1.356|
                          DCD      BPdata_count
                  |L1.360|
                          DCD      BP_databuf
                  |L1.364|
                          DCD      BPdatarecv_flag
                  |L1.368|
                          DCD      BPdatabuf_clear
                  |L1.372|
                          DCD      BP_commd_flag

                          AREA ||i.CRC16||, CODE, READONLY, ALIGN=2

                  CRC16 PROC
;;;286    
;;;287    static unsigned short CRC16(unsigned char *puchMsg,unsigned int usDataLen)
000000  b570              PUSH     {r4-r6,lr}
;;;288    {
000002  4602              MOV      r2,r0
000004  460c              MOV      r4,r1
;;;289        unsigned char uchCRCHi = 0xFF ; 
000006  25ff              MOVS     r5,#0xff
;;;290        unsigned char uchCRCLo = 0xFF ; 
000008  23ff              MOVS     r3,#0xff
;;;291        unsigned uIndex ;				
;;;292        while (usDataLen--) 		
00000a  e009              B        |L2.32|
                  |L2.12|
;;;293        {
;;;294            uIndex = uchCRCHi ^ *puchMsg++ ; 
00000c  f8120b01          LDRB     r0,[r2],#1
000010  ea800105          EOR      r1,r0,r5
;;;295            uchCRCHi = uchCRCLo ^ auchCRCHi[uIndex];
000014  4806              LDR      r0,|L2.48|
000016  5c40              LDRB     r0,[r0,r1]
000018  ea800503          EOR      r5,r0,r3
;;;296            uchCRCLo = auchCRCLo[uIndex];
00001c  4805              LDR      r0,|L2.52|
00001e  5c43              LDRB     r3,[r0,r1]
                  |L2.32|
000020  1e20              SUBS     r0,r4,#0              ;292
000022  f1a40401          SUB      r4,r4,#1              ;292
000026  d1f1              BNE      |L2.12|
;;;297        }
;;;298        return  (uchCRCHi << 8 | uchCRCLo) ;
000028  ea432005          ORR      r0,r3,r5,LSL #8
;;;299    }
00002c  bd70              POP      {r4-r6,pc}
                          ENDP

00002e  0000              DCW      0x0000
                  |L2.48|
                          DCD      auchCRCHi
                  |L2.52|
                          DCD      auchCRCLo

                          AREA ||i.Data_request||, CODE, READONLY, ALIGN=2

                  Data_request PROC
;;;143    uint8_t BP_send_buf[BP_MAX_RECV_LENGTH] = {0};
;;;144    void Data_request(void)
000000  b510              PUSH     {r4,lr}
;;;145    {
;;;146    	
;;;147    		uint8_t len = 0;
000002  2400              MOVS     r4,#0
;;;148        BP_send_buf[len++] = 0x02;
000004  2202              MOVS     r2,#2
000006  4621              MOV      r1,r4
000008  1c64              ADDS     r4,r4,#1
00000a  481d              LDR      r0,|L3.128|
00000c  5442              STRB     r2,[r0,r1]
;;;149        BP_send_buf[len++] = MODBUS_READ_REG;
00000e  2203              MOVS     r2,#3
000010  4621              MOV      r1,r4
000012  1c64              ADDS     r4,r4,#1
000014  5442              STRB     r2,[r0,r1]
;;;150        BP_send_buf[len++] = 0x23;//寄存器地址
000016  2223              MOVS     r2,#0x23
000018  4621              MOV      r1,r4
00001a  1c64              ADDS     r4,r4,#1
00001c  5442              STRB     r2,[r0,r1]
;;;151    		BP_send_buf[len++] = 0x00;
00001e  2200              MOVS     r2,#0
000020  4621              MOV      r1,r4
000022  1c64              ADDS     r4,r4,#1
000024  5442              STRB     r2,[r0,r1]
;;;152        BP_send_buf[len++] = REG_NUMBER >> 8;//读取寄存器个数
000026  4621              MOV      r1,r4
000028  1c64              ADDS     r4,r4,#1
00002a  5442              STRB     r2,[r0,r1]
;;;153    		BP_send_buf[len++] = REG_NUMBER;
00002c  2211              MOVS     r2,#0x11
00002e  4621              MOV      r1,r4
000030  1c64              ADDS     r4,r4,#1
000032  5442              STRB     r2,[r0,r1]
;;;154        BP_send_buf[len++] = CRC16(BP_send_buf,6) >> 8;///CRC
000034  2106              MOVS     r1,#6
000036  f7fffffe          BL       CRC16
00003a  1202              ASRS     r2,r0,#8
00003c  4621              MOV      r1,r4
00003e  1c64              ADDS     r4,r4,#1
000040  480f              LDR      r0,|L3.128|
000042  5442              STRB     r2,[r0,r1]
;;;155    		BP_send_buf[len++] = (uint8_t)CRC16(BP_send_buf,6);
000044  2106              MOVS     r1,#6
000046  f7fffffe          BL       CRC16
00004a  b2c2              UXTB     r2,r0
00004c  4620              MOV      r0,r4
00004e  1c61              ADDS     r1,r4,#1
000050  b2cc              UXTB     r4,r1
000052  490b              LDR      r1,|L3.128|
000054  540a              STRB     r2,[r1,r0]
;;;156    	
;;;157    		comSendBuf(COM2,BP_send_buf,len);
000056  4622              MOV      r2,r4
000058  2001              MOVS     r0,#1
00005a  f7fffffe          BL       comSendBuf
;;;158    		MD_timer = 0;
00005e  2000              MOVS     r0,#0
000060  4908              LDR      r1,|L3.132|
000062  7008              STRB     r0,[r1,#0]
;;;159    		for(uint8_t i = 0;i < len;i++)		//发送完成清空数组
000064  bf00              NOP      
000066  e004              B        |L3.114|
                  |L3.104|
;;;160    			{
;;;161    				BP_send_buf[i] = 0;			
000068  2100              MOVS     r1,#0
00006a  4a05              LDR      r2,|L3.128|
00006c  5411              STRB     r1,[r2,r0]
00006e  1c41              ADDS     r1,r0,#1              ;159
000070  b2c8              UXTB     r0,r1                 ;159
                  |L3.114|
000072  42a0              CMP      r0,r4                 ;159
000074  dbf8              BLT      |L3.104|
;;;162    			}	
;;;163    			BP_commd_flag = 1;//置位标志，不允许按键指令发送	
000076  2001              MOVS     r0,#1
000078  4903              LDR      r1,|L3.136|
00007a  7008              STRB     r0,[r1,#0]
;;;164    ////		for(uint8_t i = 0;i<BP_MAX_RECV_LENGTH;i++)//清空BP数组
;;;165    ////		{
;;;166    ////			BP_databuf[i] = 0;
;;;167    ////		}
;;;168    ////		for(uint8_t i = 0;i<35;i++)//清空井下数组
;;;169    ////		{
;;;170    ////			Downdata_buf[i] = 0;
;;;171    ////		}			
;;;172    }	
00007c  bd10              POP      {r4,pc}
;;;173    /***********************************************************************
                          ENDP

00007e  0000              DCW      0x0000
                  |L3.128|
                          DCD      BP_send_buf
                  |L3.132|
                          DCD      MD_timer
                  |L3.136|
                          DCD      BP_commd_flag

                          AREA ||i.Send_datatoBP||, CODE, READONLY, ALIGN=2

                  Send_datatoBP PROC
;;;179    extern uint8_t BP_RequstBuf[35];
;;;180    void Send_datatoBP(void)
000000  b510              PUSH     {r4,lr}
;;;181    {
;;;182    
;;;183    	uint8_t len = 0;
000002  2400              MOVS     r4,#0
;;;184    	BP_send_buf[len++] = 0x02;//地址位
000004  2202              MOVS     r2,#2
000006  4621              MOV      r1,r4
000008  1c64              ADDS     r4,r4,#1
00000a  4868              LDR      r0,|L4.428|
00000c  5442              STRB     r2,[r0,r1]
;;;185    	BP_send_buf[len++] = 0x10;//写寄存器
00000e  2210              MOVS     r2,#0x10
000010  4621              MOV      r1,r4
000012  1c64              ADDS     r4,r4,#1
000014  5442              STRB     r2,[r0,r1]
;;;186    	BP_send_buf[len++] = 0x1C;//数据长度
000016  221c              MOVS     r2,#0x1c
000018  4621              MOV      r1,r4
00001a  1c64              ADDS     r4,r4,#1
00001c  5442              STRB     r2,[r0,r1]
;;;187    	BP_send_buf[len++] = Key_status >> 8;//按键下发状态
00001e  4864              LDR      r0,|L4.432|
000020  7800              LDRB     r0,[r0,#0]  ; Key_status
000022  1202              ASRS     r2,r0,#8
000024  4621              MOV      r1,r4
000026  1c64              ADDS     r4,r4,#1
000028  4860              LDR      r0,|L4.428|
00002a  5442              STRB     r2,[r0,r1]
;;;188    	BP_send_buf[len++] = Key_status;
00002c  4860              LDR      r0,|L4.432|
00002e  7802              LDRB     r2,[r0,#0]  ; Key_status
000030  4621              MOV      r1,r4
000032  1c64              ADDS     r4,r4,#1
000034  485d              LDR      r0,|L4.428|
000036  5442              STRB     r2,[r0,r1]
;;;189    	
;;;190    	BP_send_buf[len++] =BP_RequstBuf[9]; //(u_data_report.report.AC_voltage_of_underground_motor >> 8) & 0xFF;//井下大电机交流电压
000038  485e              LDR      r0,|L4.436|
00003a  7a42              LDRB     r2,[r0,#9]  ; BP_RequstBuf
00003c  4621              MOV      r1,r4
00003e  1c64              ADDS     r4,r4,#1
000040  485a              LDR      r0,|L4.428|
000042  5442              STRB     r2,[r0,r1]
;;;191    	BP_send_buf[len++] =BP_RequstBuf[10];// u_data_report.report.AC_voltage_of_underground_motor & 0xFF;
000044  485b              LDR      r0,|L4.436|
000046  7a82              LDRB     r2,[r0,#0xa]  ; BP_RequstBuf
000048  4621              MOV      r1,r4
00004a  1c64              ADDS     r4,r4,#1
00004c  4857              LDR      r0,|L4.428|
00004e  5442              STRB     r2,[r0,r1]
;;;192    	BP_send_buf[len++] = 0;//N相电流
000050  2200              MOVS     r2,#0
000052  4620              MOV      r0,r4
000054  1c61              ADDS     r1,r4,#1
000056  b2cc              UXTB     r4,r1
000058  4954              LDR      r1,|L4.428|
00005a  540a              STRB     r2,[r1,r0]
;;;193    	BP_send_buf[len++] = 0;
00005c  4620              MOV      r0,r4
00005e  1c61              ADDS     r1,r4,#1
000060  b2cc              UXTB     r4,r1
000062  4952              LDR      r1,|L4.428|
000064  540a              STRB     r2,[r1,r0]
;;;194    	BP_send_buf[len++] = BP_RequstBuf[14] >> 8;//(u_data_report.report.Small_Motor_temperature >> 8) & 0xFF;//液压节电机温度
000066  4853              LDR      r0,|L4.436|
000068  7b80              LDRB     r0,[r0,#0xe]  ; BP_RequstBuf
00006a  1202              ASRS     r2,r0,#8
00006c  4620              MOV      r0,r4
00006e  1c61              ADDS     r1,r4,#1
000070  b2cc              UXTB     r4,r1
000072  494e              LDR      r1,|L4.428|
000074  540a              STRB     r2,[r1,r0]
;;;195    	BP_send_buf[len++] = BP_RequstBuf[14];//u_data_report.report.Small_Motor_temperature;
000076  484f              LDR      r0,|L4.436|
000078  7b82              LDRB     r2,[r0,#0xe]  ; BP_RequstBuf
00007a  4620              MOV      r0,r4
00007c  1c61              ADDS     r1,r4,#1
00007e  b2cc              UXTB     r4,r1
000080  494a              LDR      r1,|L4.428|
000082  540a              STRB     r2,[r1,r0]
;;;196    	BP_send_buf[len++] = BP_RequstBuf[15] >> 8;//(u_data_report.report.Pump_Oil_temperature >> 8) & 0xFF;//泵液压油温度
000084  484b              LDR      r0,|L4.436|
000086  7bc0              LDRB     r0,[r0,#0xf]  ; BP_RequstBuf
000088  1202              ASRS     r2,r0,#8
00008a  4620              MOV      r0,r4
00008c  1c61              ADDS     r1,r4,#1
00008e  b2cc              UXTB     r4,r1
000090  4946              LDR      r1,|L4.428|
000092  540a              STRB     r2,[r1,r0]
;;;197    	BP_send_buf[len++] = BP_RequstBuf[15];//u_data_report.report.Pump_Oil_temperature & 0xFF;
000094  4847              LDR      r0,|L4.436|
000096  7bc2              LDRB     r2,[r0,#0xf]  ; BP_RequstBuf
000098  4620              MOV      r0,r4
00009a  1c61              ADDS     r1,r4,#1
00009c  b2cc              UXTB     r4,r1
00009e  4943              LDR      r1,|L4.428|
0000a0  540a              STRB     r2,[r1,r0]
;;;198    	BP_send_buf[len++] = BP_RequstBuf[12] >> 8;//(u_data_report.report.Cable_Head_Tension_temperature >> 8) & 0xFF;//3981温度
0000a2  4844              LDR      r0,|L4.436|
0000a4  7b00              LDRB     r0,[r0,#0xc]  ; BP_RequstBuf
0000a6  1202              ASRS     r2,r0,#8
0000a8  4620              MOV      r0,r4
0000aa  1c61              ADDS     r1,r4,#1
0000ac  b2cc              UXTB     r4,r1
0000ae  493f              LDR      r1,|L4.428|
0000b0  540a              STRB     r2,[r1,r0]
;;;199    	BP_send_buf[len++] = BP_RequstBuf[12];//u_data_report.report.Cable_Head_Tension_temperature & 0xFF;
0000b2  4840              LDR      r0,|L4.436|
0000b4  7b02              LDRB     r2,[r0,#0xc]  ; BP_RequstBuf
0000b6  4620              MOV      r0,r4
0000b8  1c61              ADDS     r1,r4,#1
0000ba  b2cc              UXTB     r4,r1
0000bc  493b              LDR      r1,|L4.428|
0000be  540a              STRB     r2,[r1,r0]
;;;200    	BP_send_buf[len++] = BP_RequstBuf[20];//(u_data_report.report.small_pump_pressure >> 8) & 0xFF;//小泵压力
0000c0  483c              LDR      r0,|L4.436|
0000c2  7d02              LDRB     r2,[r0,#0x14]  ; BP_RequstBuf
0000c4  4620              MOV      r0,r4
0000c6  1c61              ADDS     r1,r4,#1
0000c8  b2cc              UXTB     r4,r1
0000ca  4938              LDR      r1,|L4.428|
0000cc  540a              STRB     r2,[r1,r0]
;;;201    	BP_send_buf[len++] = BP_RequstBuf[21];//u_data_report.report.small_pump_pressure & 0xFF;
0000ce  4839              LDR      r0,|L4.436|
0000d0  7d42              LDRB     r2,[r0,#0x15]  ; BP_RequstBuf
0000d2  4620              MOV      r0,r4
0000d4  1c61              ADDS     r1,r4,#1
0000d6  b2cc              UXTB     r4,r1
0000d8  4934              LDR      r1,|L4.428|
0000da  540a              STRB     r2,[r1,r0]
;;;202    	BP_send_buf[len++] = BP_RequstBuf[18];//(u_data_report.report.large_pump_pressure >> 8) & 0xFF;//大泵压力
0000dc  4835              LDR      r0,|L4.436|
0000de  7c82              LDRB     r2,[r0,#0x12]  ; BP_RequstBuf
0000e0  4620              MOV      r0,r4
0000e2  1c61              ADDS     r1,r4,#1
0000e4  b2cc              UXTB     r4,r1
0000e6  4931              LDR      r1,|L4.428|
0000e8  540a              STRB     r2,[r1,r0]
;;;203    	BP_send_buf[len++] = BP_RequstBuf[19];//u_data_report.report.large_pump_pressure & 0xFF;
0000ea  4832              LDR      r0,|L4.436|
0000ec  7cc2              LDRB     r2,[r0,#0x13]  ; BP_RequstBuf
0000ee  4620              MOV      r0,r4
0000f0  1c61              ADDS     r1,r4,#1
0000f2  b2cc              UXTB     r4,r1
0000f4  492d              LDR      r1,|L4.428|
0000f6  540a              STRB     r2,[r1,r0]
;;;204    	BP_send_buf[len++] = BP_RequstBuf[23];//(u_data_report.report.oil_position >> 8) & 0xFF;//油位位移
0000f8  482e              LDR      r0,|L4.436|
0000fa  7dc2              LDRB     r2,[r0,#0x17]  ; BP_RequstBuf
0000fc  4620              MOV      r0,r4
0000fe  1c61              ADDS     r1,r4,#1
000100  b2cc              UXTB     r4,r1
000102  492a              LDR      r1,|L4.428|
000104  540a              STRB     r2,[r1,r0]
;;;205    	BP_send_buf[len++] = BP_RequstBuf[24];//u_data_report.report.oil_position & 0xFF;
000106  482b              LDR      r0,|L4.436|
000108  7e02              LDRB     r2,[r0,#0x18]  ; BP_RequstBuf
00010a  4620              MOV      r0,r4
00010c  1c61              ADDS     r1,r4,#1
00010e  b2cc              UXTB     r4,r1
000110  4926              LDR      r1,|L4.428|
000112  540a              STRB     r2,[r1,r0]
;;;206    	BP_send_buf[len++] = BP_RequstBuf[8] >> 8;//(u_data_report.report.drill_bit_process >> 8) & 0xFF;//钻进位移
000114  4827              LDR      r0,|L4.436|
000116  7a00              LDRB     r0,[r0,#8]  ; BP_RequstBuf
000118  1202              ASRS     r2,r0,#8
00011a  4620              MOV      r0,r4
00011c  1c61              ADDS     r1,r4,#1
00011e  b2cc              UXTB     r4,r1
000120  4922              LDR      r1,|L4.428|
000122  540a              STRB     r2,[r1,r0]
;;;207    	BP_send_buf[len++] = BP_RequstBuf[8];//u_data_report.report.drill_bit_process & 0xFF;
000124  4823              LDR      r0,|L4.436|
000126  7a02              LDRB     r2,[r0,#8]  ; BP_RequstBuf
000128  4620              MOV      r0,r4
00012a  1c61              ADDS     r1,r4,#1
00012c  b2cc              UXTB     r4,r1
00012e  491f              LDR      r1,|L4.428|
000130  540a              STRB     r2,[r1,r0]
;;;208    	for(uint8_t i = 0;i < 6;i++) //预留位
000132  2000              MOVS     r0,#0
000134  e007              B        |L4.326|
                  |L4.310|
;;;209    		{
;;;210    			BP_send_buf[len++] = 0;	
000136  2300              MOVS     r3,#0
000138  4621              MOV      r1,r4
00013a  1c62              ADDS     r2,r4,#1
00013c  b2d4              UXTB     r4,r2
00013e  4a1b              LDR      r2,|L4.428|
000140  5453              STRB     r3,[r2,r1]
000142  1c41              ADDS     r1,r0,#1              ;208
000144  b2c8              UXTB     r0,r1                 ;208
                  |L4.326|
000146  2806              CMP      r0,#6                 ;208
000148  dbf5              BLT      |L4.310|
;;;211    		}
;;;212    	BP_send_buf[len++] = (Key_respstatus_data >> 8) & 0xFF;//按键反馈状态
00014a  481b              LDR      r0,|L4.440|
00014c  8800              LDRH     r0,[r0,#0]  ; Key_respstatus_data
00014e  0a02              LSRS     r2,r0,#8
000150  4620              MOV      r0,r4
000152  1c61              ADDS     r1,r4,#1
000154  b2cc              UXTB     r4,r1
000156  4915              LDR      r1,|L4.428|
000158  540a              STRB     r2,[r1,r0]
;;;213    	BP_send_buf[len++] = Key_respstatus_data & 0xFF;
00015a  4817              LDR      r0,|L4.440|
00015c  7802              LDRB     r2,[r0,#0]  ; Key_respstatus_data
00015e  4620              MOV      r0,r4
000160  1c61              ADDS     r1,r4,#1
000162  b2cc              UXTB     r4,r1
000164  4911              LDR      r1,|L4.428|
000166  540a              STRB     r2,[r1,r0]
;;;214    	BP_send_buf[len++] = CRC16(BP_send_buf,31) >> 8;///CRC
000168  211f              MOVS     r1,#0x1f
00016a  4810              LDR      r0,|L4.428|
00016c  f7fffffe          BL       CRC16
000170  1202              ASRS     r2,r0,#8
000172  4620              MOV      r0,r4
000174  1c61              ADDS     r1,r4,#1
000176  b2cc              UXTB     r4,r1
000178  490c              LDR      r1,|L4.428|
00017a  540a              STRB     r2,[r1,r0]
;;;215    	BP_send_buf[len++] = (uint8_t)CRC16(BP_send_buf,31);
00017c  211f              MOVS     r1,#0x1f
00017e  480b              LDR      r0,|L4.428|
000180  f7fffffe          BL       CRC16
000184  b2c2              UXTB     r2,r0
000186  4620              MOV      r0,r4
000188  1c61              ADDS     r1,r4,#1
00018a  b2cc              UXTB     r4,r1
00018c  4907              LDR      r1,|L4.428|
00018e  540a              STRB     r2,[r1,r0]
;;;216    	comSendBuf(COM2,BP_send_buf,len);
000190  4622              MOV      r2,r4
000192  2001              MOVS     r0,#1
000194  f7fffffe          BL       comSendBuf
;;;217    	for(uint8_t i = 0;i < len;i++)		//发送完成清空数组
000198  2000              MOVS     r0,#0
00019a  e004              B        |L4.422|
                  |L4.412|
;;;218    		{
;;;219    			BP_send_buf[i] = 0;			
00019c  2100              MOVS     r1,#0
00019e  4a03              LDR      r2,|L4.428|
0001a0  5411              STRB     r1,[r2,r0]
0001a2  1c41              ADDS     r1,r0,#1              ;217
0001a4  b2c8              UXTB     r0,r1                 ;217
                  |L4.422|
0001a6  42a0              CMP      r0,r4                 ;217
0001a8  dbf8              BLT      |L4.412|
;;;220    		}
;;;221    }
0001aa  bd10              POP      {r4,pc}
;;;222    
                          ENDP

                  |L4.428|
                          DCD      BP_send_buf
                  |L4.432|
                          DCD      Key_status
                  |L4.436|
                          DCD      BP_RequstBuf
                  |L4.440|
                          DCD      Key_respstatus_data

                          AREA ||i.Sendkeycmd||, CODE, READONLY, ALIGN=2

                  Sendkeycmd PROC
;;;119    ************************************************************************/
;;;120    void Sendkeycmd(uint16_t reg_value,uint16_t stauts) 
000000  b570              PUSH     {r4-r6,lr}
;;;121    {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
;;;122    	uint8_t len = 0;
000006  2400              MOVS     r4,#0
;;;123    	keycmd_buf[len++] = 0x02;
000008  2202              MOVS     r2,#2
00000a  4621              MOV      r1,r4
00000c  1c64              ADDS     r4,r4,#1
00000e  4819              LDR      r0,|L5.116|
000010  5442              STRB     r2,[r0,r1]
;;;124    	keycmd_buf[len++] = MODBUS_WR_REG;
000012  2206              MOVS     r2,#6
000014  4621              MOV      r1,r4
000016  1c64              ADDS     r4,r4,#1
000018  5442              STRB     r2,[r0,r1]
;;;125    	keycmd_buf[len++] = reg_value >> 8;
00001a  122a              ASRS     r2,r5,#8
00001c  4621              MOV      r1,r4
00001e  1c64              ADDS     r4,r4,#1
000020  5442              STRB     r2,[r0,r1]
;;;126    	keycmd_buf[len++] = (uint8_t)reg_value;
000022  4621              MOV      r1,r4
000024  1c64              ADDS     r4,r4,#1
000026  5445              STRB     r5,[r0,r1]
;;;127    	keycmd_buf[len++] = stauts >> 8;
000028  1232              ASRS     r2,r6,#8
00002a  4621              MOV      r1,r4
00002c  1c64              ADDS     r4,r4,#1
00002e  5442              STRB     r2,[r0,r1]
;;;128    	keycmd_buf[len++] = (uint8_t)stauts;
000030  4621              MOV      r1,r4
000032  1c64              ADDS     r4,r4,#1
000034  5446              STRB     r6,[r0,r1]
;;;129    	keycmd_buf[len++] = CRC16(keycmd_buf,KEYCMD_LENGTH - 2) >> 8;
000036  2106              MOVS     r1,#6
000038  f7fffffe          BL       CRC16
00003c  1202              ASRS     r2,r0,#8
00003e  4621              MOV      r1,r4
000040  1c64              ADDS     r4,r4,#1
000042  480c              LDR      r0,|L5.116|
000044  5442              STRB     r2,[r0,r1]
;;;130    	keycmd_buf[len++] = (uint8_t)CRC16(keycmd_buf,KEYCMD_LENGTH - 2);
000046  2106              MOVS     r1,#6
000048  f7fffffe          BL       CRC16
00004c  b2c2              UXTB     r2,r0
00004e  4620              MOV      r0,r4
000050  1c61              ADDS     r1,r4,#1
000052  b2cc              UXTB     r4,r1
000054  4907              LDR      r1,|L5.116|
000056  540a              STRB     r2,[r1,r0]
;;;131    	comSendBuf(COM2,keycmd_buf,len);
000058  4622              MOV      r2,r4
00005a  2001              MOVS     r0,#1
00005c  f7fffffe          BL       comSendBuf
;;;132    	for(uint8_t i = 0;i < len;i++)		//发送完成清空数组
000060  2000              MOVS     r0,#0
000062  e004              B        |L5.110|
                  |L5.100|
;;;133    		{
;;;134    			keycmd_buf[i] = 0;			
000064  2100              MOVS     r1,#0
000066  4a03              LDR      r2,|L5.116|
000068  5411              STRB     r1,[r2,r0]
00006a  1c41              ADDS     r1,r0,#1              ;132
00006c  b2c8              UXTB     r0,r1                 ;132
                  |L5.110|
00006e  42a0              CMP      r0,r4                 ;132
000070  dbf8              BLT      |L5.100|
;;;135    		}
;;;136    }
000072  bd70              POP      {r4-r6,pc}
;;;137    /***********************************************************************
                          ENDP

                  |L5.116|
                          DCD      keycmd_buf

                          AREA ||.bss||, DATA, NOINIT, ALIGN=1

                  u_data_report
                          %        38
                  BP_databuf
                          %        100
                  BP_send_buf
                          %        100

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  auchCRCHi
000000  00c18140          DCB      0x00,0xc1,0x81,0x40
000004  01c08041          DCB      0x01,0xc0,0x80,0x41
000008  01c08041          DCB      0x01,0xc0,0x80,0x41
00000c  00c18140          DCB      0x00,0xc1,0x81,0x40
000010  01c08041          DCB      0x01,0xc0,0x80,0x41
000014  00c18140          DCB      0x00,0xc1,0x81,0x40
000018  00c18140          DCB      0x00,0xc1,0x81,0x40
00001c  01c08041          DCB      0x01,0xc0,0x80,0x41
000020  01c08041          DCB      0x01,0xc0,0x80,0x41
000024  00c18140          DCB      0x00,0xc1,0x81,0x40
000028  00c18140          DCB      0x00,0xc1,0x81,0x40
00002c  01c08041          DCB      0x01,0xc0,0x80,0x41
000030  00c18140          DCB      0x00,0xc1,0x81,0x40
000034  01c08041          DCB      0x01,0xc0,0x80,0x41
000038  01c08041          DCB      0x01,0xc0,0x80,0x41
00003c  00c18140          DCB      0x00,0xc1,0x81,0x40
000040  01c08041          DCB      0x01,0xc0,0x80,0x41
000044  00c18140          DCB      0x00,0xc1,0x81,0x40
000048  00c18140          DCB      0x00,0xc1,0x81,0x40
00004c  01c08041          DCB      0x01,0xc0,0x80,0x41
000050  00c18140          DCB      0x00,0xc1,0x81,0x40
000054  01c08041          DCB      0x01,0xc0,0x80,0x41
000058  01c08041          DCB      0x01,0xc0,0x80,0x41
00005c  00c18140          DCB      0x00,0xc1,0x81,0x40
000060  00c18140          DCB      0x00,0xc1,0x81,0x40
000064  01c08041          DCB      0x01,0xc0,0x80,0x41
000068  01c08041          DCB      0x01,0xc0,0x80,0x41
00006c  00c18140          DCB      0x00,0xc1,0x81,0x40
000070  01c08041          DCB      0x01,0xc0,0x80,0x41
000074  00c18140          DCB      0x00,0xc1,0x81,0x40
000078  00c18140          DCB      0x00,0xc1,0x81,0x40
00007c  01c08041          DCB      0x01,0xc0,0x80,0x41
000080  01c08041          DCB      0x01,0xc0,0x80,0x41
000084  00c18140          DCB      0x00,0xc1,0x81,0x40
000088  00c18140          DCB      0x00,0xc1,0x81,0x40
00008c  01c08041          DCB      0x01,0xc0,0x80,0x41
000090  00c18140          DCB      0x00,0xc1,0x81,0x40
000094  01c08041          DCB      0x01,0xc0,0x80,0x41
000098  01c08041          DCB      0x01,0xc0,0x80,0x41
00009c  00c18140          DCB      0x00,0xc1,0x81,0x40
0000a0  00c18140          DCB      0x00,0xc1,0x81,0x40
0000a4  01c08041          DCB      0x01,0xc0,0x80,0x41
0000a8  01c08041          DCB      0x01,0xc0,0x80,0x41
0000ac  00c18140          DCB      0x00,0xc1,0x81,0x40
0000b0  01c08041          DCB      0x01,0xc0,0x80,0x41
0000b4  00c18140          DCB      0x00,0xc1,0x81,0x40
0000b8  00c18140          DCB      0x00,0xc1,0x81,0x40
0000bc  01c08041          DCB      0x01,0xc0,0x80,0x41
0000c0  00c18140          DCB      0x00,0xc1,0x81,0x40
0000c4  01c08041          DCB      0x01,0xc0,0x80,0x41
0000c8  01c08041          DCB      0x01,0xc0,0x80,0x41
0000cc  00c18140          DCB      0x00,0xc1,0x81,0x40
0000d0  01c08041          DCB      0x01,0xc0,0x80,0x41
0000d4  00c18140          DCB      0x00,0xc1,0x81,0x40
0000d8  00c18140          DCB      0x00,0xc1,0x81,0x40
0000dc  01c08041          DCB      0x01,0xc0,0x80,0x41
0000e0  01c08041          DCB      0x01,0xc0,0x80,0x41
0000e4  00c18140          DCB      0x00,0xc1,0x81,0x40
0000e8  00c18140          DCB      0x00,0xc1,0x81,0x40
0000ec  01c08041          DCB      0x01,0xc0,0x80,0x41
0000f0  00c18140          DCB      0x00,0xc1,0x81,0x40
0000f4  01c08041          DCB      0x01,0xc0,0x80,0x41
0000f8  01c08041          DCB      0x01,0xc0,0x80,0x41
0000fc  00c18140          DCB      0x00,0xc1,0x81,0x40
                  auchCRCLo
000100  00c0c101          DCB      0x00,0xc0,0xc1,0x01
000104  c30302c2          DCB      0xc3,0x03,0x02,0xc2
000108  c60607c7          DCB      0xc6,0x06,0x07,0xc7
00010c  05c5c404          DCB      0x05,0xc5,0xc4,0x04
000110  cc0c0dcd          DCB      0xcc,0x0c,0x0d,0xcd
000114  0fcfce0e          DCB      0x0f,0xcf,0xce,0x0e
000118  0acacb0b          DCB      0x0a,0xca,0xcb,0x0b
00011c  c90908c8          DCB      0xc9,0x09,0x08,0xc8
000120  d81819d9          DCB      0xd8,0x18,0x19,0xd9
000124  1bdbda1a          DCB      0x1b,0xdb,0xda,0x1a
000128  1ededf1f          DCB      0x1e,0xde,0xdf,0x1f
00012c  dd1d1cdc          DCB      0xdd,0x1d,0x1c,0xdc
000130  14d4d515          DCB      0x14,0xd4,0xd5,0x15
000134  d71716d6          DCB      0xd7,0x17,0x16,0xd6
000138  d21213d3          DCB      0xd2,0x12,0x13,0xd3
00013c  11d1d010          DCB      0x11,0xd1,0xd0,0x10
000140  f03031f1          DCB      0xf0,0x30,0x31,0xf1
000144  33f3f232          DCB      0x33,0xf3,0xf2,0x32
000148  36f6f737          DCB      0x36,0xf6,0xf7,0x37
00014c  f53534f4          DCB      0xf5,0x35,0x34,0xf4
000150  3cfcfd3d          DCB      0x3c,0xfc,0xfd,0x3d
000154  ff3f3efe          DCB      0xff,0x3f,0x3e,0xfe
000158  fa3a3bfb          DCB      0xfa,0x3a,0x3b,0xfb
00015c  39f9f838          DCB      0x39,0xf9,0xf8,0x38
000160  28e8e929          DCB      0x28,0xe8,0xe9,0x29
000164  eb2b2aea          DCB      0xeb,0x2b,0x2a,0xea
000168  ee2e2fef          DCB      0xee,0x2e,0x2f,0xef
00016c  2dedec2c          DCB      0x2d,0xed,0xec,0x2c
000170  e42425e5          DCB      0xe4,0x24,0x25,0xe5
000174  27e7e626          DCB      0x27,0xe7,0xe6,0x26
000178  22e2e323          DCB      0x22,0xe2,0xe3,0x23
00017c  e12120e0          DCB      0xe1,0x21,0x20,0xe0
000180  a06061a1          DCB      0xa0,0x60,0x61,0xa1
000184  63a3a262          DCB      0x63,0xa3,0xa2,0x62
000188  66a6a767          DCB      0x66,0xa6,0xa7,0x67
00018c  a56564a4          DCB      0xa5,0x65,0x64,0xa4
000190  6cacad6d          DCB      0x6c,0xac,0xad,0x6d
000194  af6f6eae          DCB      0xaf,0x6f,0x6e,0xae
000198  aa6a6bab          DCB      0xaa,0x6a,0x6b,0xab
00019c  69a9a868          DCB      0x69,0xa9,0xa8,0x68
0001a0  78b8b979          DCB      0x78,0xb8,0xb9,0x79
0001a4  bb7b7aba          DCB      0xbb,0x7b,0x7a,0xba
0001a8  be7e7fbf          DCB      0xbe,0x7e,0x7f,0xbf
0001ac  7dbdbc7c          DCB      0x7d,0xbd,0xbc,0x7c
0001b0  b47475b5          DCB      0xb4,0x74,0x75,0xb5
0001b4  77b7b676          DCB      0x77,0xb7,0xb6,0x76
0001b8  72b2b373          DCB      0x72,0xb2,0xb3,0x73
0001bc  b17170b0          DCB      0xb1,0x71,0x70,0xb0
0001c0  50909151          DCB      0x50,0x90,0x91,0x51
0001c4  93535292          DCB      0x93,0x53,0x52,0x92
0001c8  96565797          DCB      0x96,0x56,0x57,0x97
0001cc  55959454          DCB      0x55,0x95,0x94,0x54
0001d0  9c5c5d9d          DCB      0x9c,0x5c,0x5d,0x9d
0001d4  5f9f9e5e          DCB      0x5f,0x9f,0x9e,0x5e
0001d8  5a9a9b5b          DCB      0x5a,0x9a,0x9b,0x5b
0001dc  99595898          DCB      0x99,0x59,0x58,0x98
0001e0  88484989          DCB      0x88,0x48,0x49,0x89
0001e4  4b8b8a4a          DCB      0x4b,0x8b,0x8a,0x4a
0001e8  4e8e8f4f          DCB      0x4e,0x8e,0x8f,0x4f
0001ec  8d4d4c8c          DCB      0x8d,0x4d,0x4c,0x8c
0001f0  44848545          DCB      0x44,0x84,0x85,0x45
0001f4  87474686          DCB      0x87,0x47,0x46,0x86
0001f8  82424383          DCB      0x82,0x42,0x43,0x83
0001fc  41818040          DCB      0x41,0x81,0x80,0x40

                          AREA ||.data||, DATA, ALIGN=0

                  BPRxState
000000  00                DCB      0x00
                  BPdata_count
000001  00                DCB      0x00
                  BP_commd_flag
000002  00                DCB      0x00
                  BPdatarecv_flag
000003  00                DCB      0x00
                  BP_back_flag
000004  00                DCB      0x00
                  BPdatabuf_clear
000005  00                DCB      0x00
                  keycmd_buf
000006  0000              DCB      0x00,0x00
                          DCDU     0x00000000
00000c  0000              DCB      0x00,0x00
                  repeat_dist_flag
00000e  00                DCB      0x00
                  repeat_response_flag
00000f  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\app\\src\\BP_DataSotrage.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___16_BP_DataSotrage_c_09c22b07____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___16_BP_DataSotrage_c_09c22b07____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___16_BP_DataSotrage_c_09c22b07____REVSH|
#line 128
|__asm___16_BP_DataSotrage_c_09c22b07____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
